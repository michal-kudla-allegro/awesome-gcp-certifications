1
00:00:00,240 --> 00:00:05,200
hey this is anthony tavelos your cloud

2
00:00:02,879 --> 00:00:07,919
instructor at exam pro

3
00:00:05,200 --> 00:00:10,240
bringing you a complete study course for

4
00:00:07,918 --> 00:00:13,518
the google cloud associate cloud

5
00:00:10,240 --> 00:00:16,399
engineer made available to you here on

6
00:00:13,519 --> 00:00:19,278
free code camp and so this course is

7
00:00:16,399 --> 00:00:21,599
designed to help you pass and achieve

8
00:00:19,278 --> 00:00:23,118
google issued certification the way

9
00:00:21,600 --> 00:00:26,000
we're going to do that

10
00:00:23,118 --> 00:00:29,118
is to go through lots of lecture content

11
00:00:26,000 --> 00:00:32,079
follow alongs and using my cheat sheets

12
00:00:29,118 --> 00:00:34,479
on the day of the exam so you pass

13
00:00:32,079 --> 00:00:37,200
and you can take that certification and

14
00:00:34,479 --> 00:00:39,759
put it on your resume or linkedin

15
00:00:37,200 --> 00:00:42,480
so you can get that cloud job or

16
00:00:39,759 --> 00:00:45,519
promotion that you've been looking for

17
00:00:42,479 --> 00:00:47,919
and so a bit about me is that i have 18

18
00:00:45,520 --> 00:00:50,879
years industry experience

19
00:00:47,920 --> 00:00:53,920
seven of it specializing in cloud and

20
00:00:50,878 --> 00:00:56,159
four years of that as a cloud trainer i

21
00:00:53,920 --> 00:00:58,640
previously been a cloud and devops

22
00:00:56,159 --> 00:01:01,599
engineer and i've also published

23
00:00:58,640 --> 00:01:05,040
multiple cloud courses and i'm a huge

24
00:01:01,600 --> 00:01:07,760
fan of the cartoon looney tunes as well

25
00:01:05,040 --> 00:01:10,080
as a coffee connoisseur and so i wanted

26
00:01:07,760 --> 00:01:10,880
to take a moment to thank viewers like

27
00:01:10,079 --> 00:01:12,959
you

28
00:01:10,879 --> 00:01:15,118
because you make these free courses

29
00:01:12,959 --> 00:01:17,438
possible and so if you're looking for

30
00:01:15,118 --> 00:01:19,840
more ways of supporting more free

31
00:01:17,438 --> 00:01:22,719
courses just like this one

32
00:01:19,840 --> 00:01:25,118
the best way is to buy the extra study

33
00:01:22,719 --> 00:01:27,920
material at

34
00:01:25,118 --> 00:01:31,519
co example.com in particular for this

35
00:01:27,920 --> 00:01:34,960
certification you can find it at gcp

36
00:01:31,519 --> 00:01:37,599
hyphen ace there you can get study notes

37
00:01:34,959 --> 00:01:39,759
flash cards quizlets

38
00:01:37,599 --> 00:01:42,640
downloadable lectures which are the

39
00:01:39,759 --> 00:01:45,118
slides to all the lecture videos

40
00:01:42,640 --> 00:01:48,319
downloadable cheat sheets which by the

41
00:01:45,118 --> 00:01:50,000
way are free if you just go sign up

42
00:01:48,319 --> 00:01:52,798
practice exams

43
00:01:50,000 --> 00:01:55,040
and you can also ask questions and get

44
00:01:52,799 --> 00:01:57,360
learning support and if you want to keep

45
00:01:55,040 --> 00:01:58,159
up to date with new courses i'm working

46
00:01:57,359 --> 00:02:01,118
on

47
00:01:58,159 --> 00:02:02,880
the best way is to follow me on twitter

48
00:02:01,118 --> 00:02:04,879
at antony's cloud

49
00:02:02,879 --> 00:02:06,319
and i'd love to hear from you if you

50
00:02:04,879 --> 00:02:08,639
passed your exam

51
00:02:06,319 --> 00:02:11,099
and also i'd love to hear on what you'd

52
00:02:08,639 --> 00:02:15,359
like to see next

53
00:02:11,099 --> 00:02:16,560
[Music]

54
00:02:15,360 --> 00:02:18,720
welcome back

55
00:02:16,560 --> 00:02:22,239
in this lesson i wanted to quickly go

56
00:02:18,719 --> 00:02:24,400
over how to access the course resources

57
00:02:22,239 --> 00:02:27,360
now the resources in this course are

58
00:02:24,400 --> 00:02:30,239
designed to accompany the lessons and

59
00:02:27,360 --> 00:02:32,720
help you understand not just the theory

60
00:02:30,239 --> 00:02:35,120
but to help with the demo lessons that

61
00:02:32,719 --> 00:02:36,400
really drive home the component of

62
00:02:35,120 --> 00:02:38,878
hands-on learning

63
00:02:36,400 --> 00:02:42,239
these will include study notes lesson

64
00:02:38,878 --> 00:02:44,560
files scripts as well as resources that

65
00:02:42,239 --> 00:02:46,878
are used in the demo lessons

66
00:02:44,560 --> 00:02:49,280
these files can be found in a github

67
00:02:46,878 --> 00:02:52,799
repository that i will be including

68
00:02:49,280 --> 00:02:55,199
below that are always kept up-to-date

69
00:02:52,800 --> 00:02:56,959
and it is through these files that you

70
00:02:55,199 --> 00:02:59,839
will be able to follow along and

71
00:02:56,959 --> 00:03:01,920
complete the demos on your own to really

72
00:02:59,840 --> 00:03:04,878
cement the knowledge learned

73
00:03:01,919 --> 00:03:07,518
it's a fairly simple process but varies

74
00:03:04,878 --> 00:03:09,759
through the different operating systems

75
00:03:07,519 --> 00:03:12,319
i'll be going through this demo to show

76
00:03:09,759 --> 00:03:14,639
you how to obtain access through the

77
00:03:12,318 --> 00:03:18,799
three major operating systems being

78
00:03:14,639 --> 00:03:21,119
windows mac os and ubuntu linux

79
00:03:18,800 --> 00:03:22,879
so i'm first going to begin with windows

80
00:03:21,120 --> 00:03:24,799
and the first step would be to open up

81
00:03:22,878 --> 00:03:26,878
the web browser

82
00:03:24,799 --> 00:03:30,959
and browse to this url which i will

83
00:03:26,878 --> 00:03:30,959
include in the notes below

84
00:03:31,199 --> 00:03:36,238
and this is the course github repository

85
00:03:33,919 --> 00:03:38,158
which will house all the course files

86
00:03:36,239 --> 00:03:40,239
that i have mentioned before

87
00:03:38,158 --> 00:03:42,959
keeping the course up to date will mean

88
00:03:40,239 --> 00:03:45,360
that files may need to be changed and so

89
00:03:42,959 --> 00:03:46,479
as i update them they will always be

90
00:03:45,360 --> 00:03:49,360
reflected

91
00:03:46,479 --> 00:03:51,679
and uploaded here in the repo

92
00:03:49,360 --> 00:03:54,720
so getting back to it there are two ways

93
00:03:51,680 --> 00:03:57,200
to access this repository so the easiest

94
00:03:54,719 --> 00:03:59,359
way to obtain a copy of these files will

95
00:03:57,199 --> 00:04:03,518
be to click on the clone or download

96
00:03:59,360 --> 00:04:05,760
button and click on download zip

97
00:04:03,519 --> 00:04:08,319
once the file has been downloaded you

98
00:04:05,759 --> 00:04:09,679
can then open it up by clicking on it

99
00:04:08,318 --> 00:04:12,719
here

100
00:04:09,680 --> 00:04:14,879
and here are the files here in downloads

101
00:04:12,719 --> 00:04:18,000
and this will give you a snapshot of all

102
00:04:14,878 --> 00:04:20,159
the files and folders as you see them

103
00:04:18,000 --> 00:04:21,839
from this repository

104
00:04:20,160 --> 00:04:24,080
now although this may seem like the

105
00:04:21,839 --> 00:04:27,439
simple way to go this is not the

106
00:04:24,079 --> 00:04:30,079
recommended method to download as if any

107
00:04:27,439 --> 00:04:32,639
files have changed you will not be up to

108
00:04:30,079 --> 00:04:34,719
date with the latest files and will only

109
00:04:32,639 --> 00:04:36,720
be current from the date at which you've

110
00:04:34,720 --> 00:04:39,600
downloaded them now the way that is

111
00:04:36,720 --> 00:04:42,880
recommended is using a source control

112
00:04:39,600 --> 00:04:47,720
system called git and so the easiest way

113
00:04:42,879 --> 00:04:49,600
to install it would be to go to this url

114
00:04:47,720 --> 00:04:52,479
https

115
00:04:49,600 --> 00:04:56,160
colon forward slash forward slash

116
00:04:52,478 --> 00:04:57,439
git dash scm.com

117
00:04:56,160 --> 00:04:59,439
and this will bring you to the git

118
00:04:57,439 --> 00:05:02,319
website where you can download the

119
00:04:59,439 --> 00:05:04,800
necessary software for windows or any

120
00:05:02,319 --> 00:05:07,599
other supported operating system

121
00:05:04,800 --> 00:05:09,759
and so i'm going to download it here

122
00:05:07,600 --> 00:05:11,280
and this should download the latest

123
00:05:09,759 --> 00:05:13,840
version of git

124
00:05:11,279 --> 00:05:15,839
for windows and it took a few seconds

125
00:05:13,839 --> 00:05:17,519
there but it is done

126
00:05:15,839 --> 00:05:19,519
and no need to worry about whether or

127
00:05:17,519 --> 00:05:21,439
not you've got the proper version

128
00:05:19,519 --> 00:05:23,758
usually when you click that download

129
00:05:21,439 --> 00:05:26,639
button it will download the latest

130
00:05:23,759 --> 00:05:28,240
version for your operating system

131
00:05:26,639 --> 00:05:30,720
so i'm going to go over here and open

132
00:05:28,240 --> 00:05:30,720
this up

133
00:05:31,439 --> 00:05:35,519
you'll get a prompt where you would just

134
00:05:33,279 --> 00:05:37,439
say yes

135
00:05:35,519 --> 00:05:39,918
and we're going to go ahead and accept

136
00:05:37,439 --> 00:05:43,360
all the defaults here this is where it's

137
00:05:39,918 --> 00:05:44,639
going to install it let's hit next

138
00:05:43,360 --> 00:05:46,479
these are all the components that

139
00:05:44,639 --> 00:05:49,360
they're going to be installed let's

140
00:05:46,478 --> 00:05:51,360
click on next

141
00:05:49,360 --> 00:05:52,400
and again we're going to go through

142
00:05:51,360 --> 00:05:55,520
everything

143
00:05:52,399 --> 00:05:58,159
with all the defaults

144
00:05:55,519 --> 00:06:00,478
and once we've reached

145
00:05:58,160 --> 00:06:03,120
installing all the defaults it's gonna

146
00:06:00,478 --> 00:06:05,279
take a couple minutes to install

147
00:06:03,120 --> 00:06:07,360
and again it took a minute or so

148
00:06:05,279 --> 00:06:09,519
we're going to just click on next

149
00:06:07,360 --> 00:06:12,240
and it's going to ask if you want to

150
00:06:09,519 --> 00:06:14,399
view the release notes and we don't

151
00:06:12,240 --> 00:06:16,160
really need those so

152
00:06:14,399 --> 00:06:19,038
we can click on ok

153
00:06:16,160 --> 00:06:21,360
and simply close that

154
00:06:19,038 --> 00:06:24,079
and we're just going to go over and see

155
00:06:21,360 --> 00:06:28,479
if git is installed

156
00:06:24,079 --> 00:06:28,478
we're going to run the command prompt

157
00:06:30,000 --> 00:06:33,439
and i'm going to just zoom in here so we

158
00:06:31,759 --> 00:06:35,520
can see a little better

159
00:06:33,439 --> 00:06:36,879
and there we go and we are just going to

160
00:06:35,519 --> 00:06:38,799
type in git

161
00:06:36,879 --> 00:06:41,199
and as you can see it's been installed

162
00:06:38,800 --> 00:06:43,280
and so now that we've installed git we

163
00:06:41,199 --> 00:06:45,360
want to be able to pull down all the

164
00:06:43,279 --> 00:06:48,318
folders and the files within them from

165
00:06:45,360 --> 00:06:50,080
the repository to our local system and

166
00:06:48,319 --> 00:06:51,759
so i'm just going to clear the screen

167
00:06:50,079 --> 00:06:53,758
here

168
00:06:51,759 --> 00:06:55,759
and we're going to do a cd to make sure

169
00:06:53,759 --> 00:06:57,919
that i'm in my home directory

170
00:06:55,759 --> 00:06:59,680
and then we're going to make a directory

171
00:06:57,918 --> 00:07:01,279
called repos

172
00:06:59,680 --> 00:07:04,160
and in order to do that we're going to

173
00:07:01,279 --> 00:07:05,198
do mkdir

174
00:07:04,160 --> 00:07:07,360
space

175
00:07:05,199 --> 00:07:08,800
repos and then we're going to move into

176
00:07:07,360 --> 00:07:10,240
that directory

177
00:07:08,800 --> 00:07:13,120
so cd

178
00:07:10,240 --> 00:07:14,840
space repos and so again here we want to

179
00:07:13,120 --> 00:07:17,680
clone those files that are in the

180
00:07:14,839 --> 00:07:19,598
repository to our local system

181
00:07:17,680 --> 00:07:22,879
so in order to do that we're going to

182
00:07:19,598 --> 00:07:24,399
use the command git clone so get space

183
00:07:22,879 --> 00:07:25,598
clone

184
00:07:24,399 --> 00:07:28,318
and then we're going to need our

185
00:07:25,598 --> 00:07:30,800
location of the git repository so let's

186
00:07:28,319 --> 00:07:32,479
go back to the browser

187
00:07:30,800 --> 00:07:33,680
and we're going to go over here to clone

188
00:07:32,478 --> 00:07:37,439
or download

189
00:07:33,680 --> 00:07:40,478
and here you will see clone with https

190
00:07:37,439 --> 00:07:42,719
so make sure that this says https and

191
00:07:40,478 --> 00:07:45,598
you can simply click on this button

192
00:07:42,720 --> 00:07:47,840
which will copy this to the clipboard

193
00:07:45,598 --> 00:07:48,878
and then we'll move back to our command

194
00:07:47,839 --> 00:07:50,560
prompt

195
00:07:48,879 --> 00:07:53,759
and paste that in

196
00:07:50,560 --> 00:07:56,240
and once that's pasted just hit enter

197
00:07:53,759 --> 00:07:58,639
and it will clone your repository into

198
00:07:56,240 --> 00:08:00,319
the repos directory and so just to

199
00:07:58,639 --> 00:08:02,160
verify that we've cloned all the

200
00:08:00,319 --> 00:08:04,479
necessary files

201
00:08:02,160 --> 00:08:08,400
we're going to cd into the master

202
00:08:04,478 --> 00:08:08,399
directory that we had just cloned

203
00:08:10,879 --> 00:08:16,560
and we're going to do a dir

204
00:08:13,839 --> 00:08:19,839
and there you have it all of the files

205
00:08:16,560 --> 00:08:21,360
are cloned exactly as it is here in the

206
00:08:19,839 --> 00:08:23,679
repository

207
00:08:21,360 --> 00:08:26,560
now just as a note in order to keep

208
00:08:23,680 --> 00:08:29,439
these files up to date we need to run a

209
00:08:26,560 --> 00:08:30,399
different command which would be a git

210
00:08:29,439 --> 00:08:33,038
pull

211
00:08:30,399 --> 00:08:35,759
and this can be run at any time in order

212
00:08:33,038 --> 00:08:38,000
to pull down any files or folders that

213
00:08:35,759 --> 00:08:40,399
have been updated since you did the

214
00:08:38,000 --> 00:08:43,200
first pull which in this case

215
00:08:40,399 --> 00:08:45,759
would be cloning of the repository

216
00:08:43,200 --> 00:08:48,800
again this will provide you with the

217
00:08:45,759 --> 00:08:51,519
latest and most up-to-date files at any

218
00:08:48,799 --> 00:08:53,919
given moment in time and in this case

219
00:08:51,519 --> 00:08:56,240
since nothing has changed i have been

220
00:08:53,919 --> 00:08:59,039
prompted with a message stating that i'm

221
00:08:56,240 --> 00:09:01,120
up to date if nothing is changed you

222
00:08:59,039 --> 00:09:02,159
will always be prompted with this

223
00:09:01,120 --> 00:09:03,679
message

224
00:09:02,159 --> 00:09:05,759
if there was

225
00:09:03,679 --> 00:09:08,239
it will pull your changes down to your

226
00:09:05,759 --> 00:09:11,200
synced local copy and the process for

227
00:09:08,240 --> 00:09:14,000
windows is completed and is similar in

228
00:09:11,200 --> 00:09:16,959
mac os and i'll move over to my mac os

229
00:09:14,000 --> 00:09:19,039
virtual machine and log in

230
00:09:16,958 --> 00:09:20,958
and once you've logged in just going to

231
00:09:19,039 --> 00:09:22,480
go over here to the terminal and i'm

232
00:09:20,958 --> 00:09:24,719
just going to cd

233
00:09:22,480 --> 00:09:26,560
to make sure i'm in my home directory

234
00:09:24,720 --> 00:09:28,639
then i'm going to do exactly what we did

235
00:09:26,559 --> 00:09:30,159
in windows so i'm going to run the

236
00:09:28,639 --> 00:09:31,360
command mk

237
00:09:30,159 --> 00:09:33,120
dir

238
00:09:31,360 --> 00:09:35,519
space repos

239
00:09:33,120 --> 00:09:39,200
and create the repos directory and i'm

240
00:09:35,519 --> 00:09:42,399
going to move in to the repos directory

241
00:09:39,200 --> 00:09:44,640
and then i'm going to run git

242
00:09:42,399 --> 00:09:46,720
now for those of you who do not have get

243
00:09:44,639 --> 00:09:48,720
installed you will be prompted with this

244
00:09:46,720 --> 00:09:50,879
message to install it and you can go

245
00:09:48,720 --> 00:09:52,800
ahead and just install you'll be

246
00:09:50,879 --> 00:09:55,039
prompted with this license agreement you

247
00:09:52,799 --> 00:09:57,199
can just hit agree

248
00:09:55,039 --> 00:09:59,838
and depending on your internet

249
00:09:57,200 --> 00:10:02,399
connection this will take a few minutes

250
00:09:59,839 --> 00:10:04,399
to download and install so as this is

251
00:10:02,399 --> 00:10:06,720
going to take a few minutes i'm going to

252
00:10:04,399 --> 00:10:08,720
pause the video here and come back when

253
00:10:06,720 --> 00:10:10,480
it's finished installing

254
00:10:08,720 --> 00:10:11,600
okay and the software was successfully

255
00:10:10,480 --> 00:10:14,000
installed

256
00:10:11,600 --> 00:10:15,440
so just to do a double check i'm going

257
00:10:14,000 --> 00:10:17,679
to run git

258
00:10:15,440 --> 00:10:19,600
and as you can see it's been installed

259
00:10:17,679 --> 00:10:22,159
so now that we have git installed we

260
00:10:19,600 --> 00:10:24,959
want to clone all the directories and

261
00:10:22,159 --> 00:10:27,360
the files from the github repository to

262
00:10:24,958 --> 00:10:29,359
our local repos folder so i'm going to

263
00:10:27,360 --> 00:10:32,560
open up my browser and i'm going to

264
00:10:29,360 --> 00:10:34,159
paste my github repository url right

265
00:10:32,559 --> 00:10:35,359
here

266
00:10:34,159 --> 00:10:38,159
and

267
00:10:35,360 --> 00:10:40,320
you'll see the clone button over here so

268
00:10:38,159 --> 00:10:43,360
we're going to click on this button

269
00:10:40,320 --> 00:10:45,278
and here we can download zip but like i

270
00:10:43,360 --> 00:10:47,039
said we're not going to be doing that

271
00:10:45,278 --> 00:10:50,480
we're going to go over here

272
00:10:47,039 --> 00:10:54,719
and copy this url for the github

273
00:10:50,480 --> 00:10:56,399
repository again make sure it says https

274
00:10:54,720 --> 00:10:58,480
and we're going to copy this to our

275
00:10:56,399 --> 00:10:59,919
clipboard

276
00:10:58,480 --> 00:11:01,920
and we're going to go back to our

277
00:10:59,919 --> 00:11:03,519
terminal

278
00:11:01,919 --> 00:11:06,000
and we are going to

279
00:11:03,519 --> 00:11:08,399
run the command git space

280
00:11:06,000 --> 00:11:08,399
clone

281
00:11:08,799 --> 00:11:12,799
and we're going to paste in our url

282
00:11:12,958 --> 00:11:17,679
and as you can see here i've cloned the

283
00:11:15,200 --> 00:11:20,480
repository and all the files and folders

284
00:11:17,679 --> 00:11:22,879
within it and so as is my best practice

285
00:11:20,480 --> 00:11:25,039
i always like to verify that the files

286
00:11:22,879 --> 00:11:27,679
have been properly cloned and so i'm

287
00:11:25,039 --> 00:11:30,078
going to run the command ls

288
00:11:27,679 --> 00:11:32,639
just to make sure and go into the master

289
00:11:30,078 --> 00:11:34,799
directory

290
00:11:32,639 --> 00:11:36,480
and do a double check and as you can see

291
00:11:34,799 --> 00:11:38,639
the clone was successful as all the

292
00:11:36,480 --> 00:11:41,600
files and folders are here and again to

293
00:11:38,639 --> 00:11:43,838
download any updates to any files or

294
00:11:41,600 --> 00:11:47,120
directories we can simply run the

295
00:11:43,839 --> 00:11:48,959
command git space poll and because we've

296
00:11:47,120 --> 00:11:51,120
already cloned it it's already up to

297
00:11:48,958 --> 00:11:53,838
date and so the process is going to be

298
00:11:51,120 --> 00:11:56,480
extremely similar on linux so i'm going

299
00:11:53,839 --> 00:11:58,320
to simply move over to my linux machine

300
00:11:56,480 --> 00:12:00,399
and log in

301
00:11:58,320 --> 00:12:01,680
i'm going to open up a terminal

302
00:12:00,399 --> 00:12:04,240
and i'm going to make my terminal a

303
00:12:01,679 --> 00:12:06,559
little bit bigger for better viewing and

304
00:12:04,240 --> 00:12:08,560
so like the other operating systems i

305
00:12:06,559 --> 00:12:12,000
want to clone all the files and

306
00:12:08,559 --> 00:12:14,719
directories from the github repository

307
00:12:12,000 --> 00:12:16,159
to my machine and so i'm going to cd

308
00:12:14,720 --> 00:12:18,879
here to make sure i'm in my home

309
00:12:16,159 --> 00:12:21,919
directory and like we did before we want

310
00:12:18,879 --> 00:12:25,200
to create a directory called repos so

311
00:12:21,919 --> 00:12:28,000
i'm going to run the command mkdir space

312
00:12:25,200 --> 00:12:30,480
repos and we're going to

313
00:12:28,000 --> 00:12:33,519
create the repos directory we're now

314
00:12:30,480 --> 00:12:35,278
going to move into the repos directory

315
00:12:33,519 --> 00:12:36,320
and here we're going to run the git

316
00:12:35,278 --> 00:12:38,240
command

317
00:12:36,320 --> 00:12:40,480
and because git is not installed on my

318
00:12:38,240 --> 00:12:42,799
machine i've been prompted with the

319
00:12:40,480 --> 00:12:45,200
command in order to install it so i'm

320
00:12:42,799 --> 00:12:46,319
going to run that now so the command is

321
00:12:45,200 --> 00:12:47,360
sudo

322
00:12:46,320 --> 00:12:48,800
space

323
00:12:47,360 --> 00:12:50,000
apt

324
00:12:48,799 --> 00:12:51,838
space

325
00:12:50,000 --> 00:12:53,120
install

326
00:12:51,839 --> 00:12:54,480
space

327
00:12:53,120 --> 00:12:57,278
get

328
00:12:54,480 --> 00:13:00,079
and i'm going to enter in my password

329
00:12:57,278 --> 00:13:00,078
and install it

330
00:13:04,639 --> 00:13:08,720
and just to verify i'm going to run the

331
00:13:06,559 --> 00:13:10,399
command git and i can see here it's been

332
00:13:08,720 --> 00:13:12,399
installed so now i'm going to go over

333
00:13:10,399 --> 00:13:15,200
here to my browser and i'm going to

334
00:13:12,399 --> 00:13:16,958
paste in the url to my repository and

335
00:13:15,200 --> 00:13:19,200
over here we'll have the same clone

336
00:13:16,958 --> 00:13:21,759
button and when i click on it i can get

337
00:13:19,200 --> 00:13:24,399
the url for the github repository in

338
00:13:21,759 --> 00:13:27,439
order to clone it again make sure before

339
00:13:24,399 --> 00:13:30,480
you clone that this says https

340
00:13:27,440 --> 00:13:32,560
if it doesn't say https you'll have the

341
00:13:30,480 --> 00:13:35,519
option of clicking on a button that will

342
00:13:32,559 --> 00:13:37,679
allow you to do so once it says https

343
00:13:35,519 --> 00:13:40,078
then you can simply copy this url to

344
00:13:37,679 --> 00:13:42,239
your clipboard by clicking on the button

345
00:13:40,078 --> 00:13:44,638
and then move over back to the terminal

346
00:13:42,240 --> 00:13:49,198
and we are going to clone this

347
00:13:44,639 --> 00:13:50,639
repository by typing in the get space

348
00:13:49,198 --> 00:13:53,838
clone command

349
00:13:50,639 --> 00:13:56,079
along with the url of the repository

350
00:13:53,839 --> 00:13:58,320
and when we hit enter it'll clone it

351
00:13:56,078 --> 00:14:00,319
right down to our directory so i'm just

352
00:13:58,320 --> 00:14:04,399
going to move into the master directory

353
00:14:00,320 --> 00:14:04,399
just to verify that the files are there

354
00:14:04,720 --> 00:14:09,199
and again they're all here so again if

355
00:14:06,958 --> 00:14:12,399
you're looking to update your repository

356
00:14:09,198 --> 00:14:13,599
with any new updated changes you can

357
00:14:12,399 --> 00:14:16,879
simply run

358
00:14:13,600 --> 00:14:18,800
the get space pull command

359
00:14:16,879 --> 00:14:20,799
to update those files

360
00:14:18,799 --> 00:14:23,759
and so that's the linux setup so you

361
00:14:20,799 --> 00:14:25,519
have a local copy of the lesson files

362
00:14:23,759 --> 00:14:27,439
now there's just one more thing that i

363
00:14:25,519 --> 00:14:29,360
highly recommend you do and to

364
00:14:27,440 --> 00:14:31,839
demonstrate it i'm going to move back

365
00:14:29,360 --> 00:14:33,440
over to my windows virtual machine now

366
00:14:31,839 --> 00:14:35,760
i'm going to open up the web browser

367
00:14:33,440 --> 00:14:37,519
again

368
00:14:35,759 --> 00:14:41,679
open up a new tab

369
00:14:37,519 --> 00:14:41,679
and i'm going to browse to this url

370
00:14:42,039 --> 00:14:47,839
https colon forward slash forward slash

371
00:14:46,320 --> 00:14:50,909
code.visualstudio.com

372
00:14:47,840 --> 00:14:50,908
[Music]

373
00:14:50,958 --> 00:14:55,039
and i'll make sure that the url is in

374
00:14:53,120 --> 00:14:58,240
the text below there is a version of

375
00:14:55,039 --> 00:15:01,120
this code editor available for windows

376
00:14:58,240 --> 00:15:03,278
mac os and linux you can simply click on

377
00:15:01,120 --> 00:15:05,679
this drop down and you'll find the link

378
00:15:03,278 --> 00:15:07,439
to download it for your operating system

379
00:15:05,679 --> 00:15:10,479
but in most cases it should

380
00:15:07,440 --> 00:15:14,399
automatically show the correct version

381
00:15:10,480 --> 00:15:14,399
so just go ahead and click on download

382
00:15:15,919 --> 00:15:19,278
and it should start downloading

383
00:15:17,198 --> 00:15:22,919
automatically and you should be able to

384
00:15:19,278 --> 00:15:22,919
run it right away

385
00:15:27,679 --> 00:15:32,479
now the reason behind me asking you to

386
00:15:29,679 --> 00:15:34,078
install this utility is for editing code

387
00:15:32,480 --> 00:15:36,720
of different sorts

388
00:15:34,078 --> 00:15:39,120
whether you're adjusting yaml or python

389
00:15:36,720 --> 00:15:41,278
documents for deployment manager

390
00:15:39,120 --> 00:15:43,839
or even managing scripts

391
00:15:41,278 --> 00:15:47,039
a code editor will give you the ease of

392
00:15:43,839 --> 00:15:49,440
use when it comes to managing editing

393
00:15:47,039 --> 00:15:51,679
and even syntactical highlighting of

394
00:15:49,440 --> 00:15:53,519
code as shown here below

395
00:15:51,679 --> 00:15:55,758
it will highlight the code to make it

396
00:15:53,519 --> 00:15:57,679
easier to understand now if you have

397
00:15:55,759 --> 00:16:00,320
your own editor that you would prefer to

398
00:15:57,679 --> 00:16:02,719
use go ahead and use that but for those

399
00:16:00,320 --> 00:16:05,600
that don't my recommendation will be to

400
00:16:02,720 --> 00:16:07,199
use visual studio code so to install

401
00:16:05,600 --> 00:16:09,199
visual studio code we're just going to

402
00:16:07,198 --> 00:16:11,599
accept this license agreement

403
00:16:09,198 --> 00:16:13,120
and then we're going to click on next

404
00:16:11,600 --> 00:16:15,680
and we're just going to follow all the

405
00:16:13,120 --> 00:16:15,679
defaults

406
00:16:20,879 --> 00:16:24,799
to install it

407
00:16:22,480 --> 00:16:26,560
it's going to take a minute or two

408
00:16:24,799 --> 00:16:28,240
and for those running windows you want

409
00:16:26,559 --> 00:16:31,039
to make sure that this box is checked

410
00:16:28,240 --> 00:16:33,839
off so that you can launch it right away

411
00:16:31,039 --> 00:16:33,838
let's hit finish

412
00:16:35,120 --> 00:16:39,519
another recommendation would be to go

413
00:16:36,879 --> 00:16:42,399
over here to the task bar so you can pin

414
00:16:39,519 --> 00:16:45,039
it in place so that it's easier to find

415
00:16:42,399 --> 00:16:47,600
and so now you have access to all the

416
00:16:45,039 --> 00:16:49,120
resources that's needed for this course

417
00:16:47,600 --> 00:16:51,360
but with that that's everything that i

418
00:16:49,120 --> 00:16:53,759
wanted to cover for this lesson so you

419
00:16:51,360 --> 00:16:55,820
can now mark this lesson as complete and

420
00:16:53,759 --> 00:16:59,759
let's move on to the next one

421
00:16:55,820 --> 00:17:02,320
[Music]

422
00:16:59,759 --> 00:17:05,120
welcome back and in this lesson i wanted

423
00:17:02,320 --> 00:17:07,519
to discuss the various certifications

424
00:17:05,119 --> 00:17:10,000
available for google cloud as this

425
00:17:07,519 --> 00:17:12,160
number keeps on growing and i am looking

426
00:17:10,000 --> 00:17:14,880
to keep this lesson as up to date as

427
00:17:12,160 --> 00:17:16,000
possible so with that being said let's

428
00:17:14,880 --> 00:17:18,400
dive in

429
00:17:16,000 --> 00:17:21,119
now google cloud has released a slew of

430
00:17:18,400 --> 00:17:23,759
certifications in many different areas

431
00:17:21,119 --> 00:17:25,359
of expertise as well as different

432
00:17:23,759 --> 00:17:27,599
experience levels

433
00:17:25,359 --> 00:17:29,439
now there are two levels of difficulty

434
00:17:27,599 --> 00:17:31,599
when it comes to the google cloud

435
00:17:29,440 --> 00:17:33,919
certifications starting off with the

436
00:17:31,599 --> 00:17:36,639
associate level we see that there is

437
00:17:33,919 --> 00:17:38,960
only the one certification which is the

438
00:17:36,640 --> 00:17:41,280
cloud engineer the associate level

439
00:17:38,960 --> 00:17:44,000
certification is focused on the

440
00:17:41,279 --> 00:17:46,960
fundamental skills of deploying

441
00:17:44,000 --> 00:17:49,759
monitoring and maintaining projects on

442
00:17:46,960 --> 00:17:52,880
google cloud this is a great starting

443
00:17:49,759 --> 00:17:54,879
point for those completely new to cloud

444
00:17:52,880 --> 00:17:57,840
and google recommends the associate

445
00:17:54,880 --> 00:18:00,000
cloud engineer as the starting point to

446
00:17:57,839 --> 00:18:02,079
undergoing your certification journey

447
00:18:00,000 --> 00:18:05,119
this was google cloud's very first

448
00:18:02,079 --> 00:18:07,678
certification and to me was the entry

449
00:18:05,119 --> 00:18:10,959
point of wanting to learn more as an

450
00:18:07,679 --> 00:18:13,519
engineer in cloud in my personal opinion

451
00:18:10,960 --> 00:18:15,759
no matter your role this certification

452
00:18:13,519 --> 00:18:18,879
will cover the general knowledge that is

453
00:18:15,759 --> 00:18:21,839
needed to know about starting on google

454
00:18:18,880 --> 00:18:24,080
cloud and the services within it which

455
00:18:21,839 --> 00:18:26,319
is why i labeled it here as the

456
00:18:24,079 --> 00:18:28,480
foundational level course i also

457
00:18:26,319 --> 00:18:30,558
consider this the stepping stone

458
00:18:28,480 --> 00:18:33,839
into any other professional level

459
00:18:30,558 --> 00:18:36,399
certifications which also happens to be

460
00:18:33,839 --> 00:18:39,119
a recommended path by google with a

461
00:18:36,400 --> 00:18:41,759
great course and some dedication i truly

462
00:18:39,119 --> 00:18:44,558
believe that anyone with even a basic

463
00:18:41,759 --> 00:18:46,400
skill level in it should be able to

464
00:18:44,558 --> 00:18:48,720
achieve this associate level

465
00:18:46,400 --> 00:18:51,440
certification now it is recommended from

466
00:18:48,720 --> 00:18:54,319
google themselves that prior to taking

467
00:18:51,440 --> 00:18:56,798
this exam that you should have over six

468
00:18:54,319 --> 00:18:59,038
months experience building on google

469
00:18:56,798 --> 00:19:01,679
cloud for those of you with more of an

470
00:18:59,038 --> 00:19:04,000
advanced background in google cloud or

471
00:19:01,679 --> 00:19:06,798
even other public clouds this

472
00:19:04,000 --> 00:19:08,720
certification should be an easy pass as

473
00:19:06,798 --> 00:19:10,960
it covers the basics that you should be

474
00:19:08,720 --> 00:19:13,600
familiar with adding a google twist to

475
00:19:10,960 --> 00:19:17,759
it at the time of this lesson this exam

476
00:19:13,599 --> 00:19:20,240
is two hours long and the cost is 125 us

477
00:19:17,759 --> 00:19:22,720
dollars the exam is a total of 50

478
00:19:20,240 --> 00:19:25,279
questions which consists of both

479
00:19:22,720 --> 00:19:27,919
multiple choice and multiple answer

480
00:19:25,279 --> 00:19:30,639
questions each of the questions contain

481
00:19:27,919 --> 00:19:33,120
three to four line questions with single

482
00:19:30,640 --> 00:19:35,120
line answers that by the time you finish

483
00:19:33,119 --> 00:19:37,519
this course you should have the

484
00:19:35,119 --> 00:19:38,399
confidence to identify the incorrect

485
00:19:37,519 --> 00:19:40,558
answers

486
00:19:38,400 --> 00:19:42,559
and be able to select the right answers

487
00:19:40,558 --> 00:19:44,960
without a hitch moving into the

488
00:19:42,558 --> 00:19:47,440
professional level certifications there

489
00:19:44,960 --> 00:19:50,319
are seven certifications that cover a

490
00:19:47,440 --> 00:19:52,720
variety of areas of specialty depending

491
00:19:50,319 --> 00:19:55,359
on your role you might want to take one

492
00:19:52,720 --> 00:19:57,440
or maybe several of these certifications

493
00:19:55,359 --> 00:20:00,000
to help you gain more knowledge in

494
00:19:57,440 --> 00:20:02,400
google cloud or if you love educating

495
00:20:00,000 --> 00:20:05,359
yourself and you're really loving your

496
00:20:02,400 --> 00:20:07,519
journey in gcp you will probably want to

497
00:20:05,359 --> 00:20:10,479
consider pursuing them all in my

498
00:20:07,519 --> 00:20:12,720
personal opinion the best entry point

499
00:20:10,480 --> 00:20:16,159
into the professional level would be the

500
00:20:12,720 --> 00:20:18,720
cloud architect it is a natural step up

501
00:20:16,159 --> 00:20:21,200
from the associate cloud engineer and it

502
00:20:18,720 --> 00:20:24,319
builds on top of what is learned through

503
00:20:21,200 --> 00:20:27,038
that certification with a more detailed

504
00:20:24,319 --> 00:20:29,839
and more thorough understanding of cloud

505
00:20:27,038 --> 00:20:31,679
architecture that is needed for any

506
00:20:29,839 --> 00:20:34,480
other certification there is some

507
00:20:31,679 --> 00:20:36,480
overlap from the cloud engineer which is

508
00:20:34,480 --> 00:20:39,599
why in my opinion doing this

509
00:20:36,480 --> 00:20:41,679
certification right after makes sense it

510
00:20:39,599 --> 00:20:45,279
also brings with it the ability to

511
00:20:41,679 --> 00:20:47,919
design develop and manage secure

512
00:20:45,279 --> 00:20:50,960
scalable and highly available dynamic

513
00:20:47,919 --> 00:20:53,280
solutions it is a much harder exam and

514
00:20:50,960 --> 00:20:55,120
goes into great depth on services

515
00:20:53,279 --> 00:20:58,079
available the professional cloud

516
00:20:55,119 --> 00:21:00,639
architect is a great primer for any

517
00:20:58,079 --> 00:21:03,519
other professional level certification

518
00:21:00,640 --> 00:21:06,320
and can be really helpful to solidify

519
00:21:03,519 --> 00:21:08,720
the learning that is needed in any other

520
00:21:06,319 --> 00:21:11,519
technical role i find it the most common

521
00:21:08,720 --> 00:21:14,319
path that many take who look to learn

522
00:21:11,519 --> 00:21:16,240
google cloud which is why i personally

523
00:21:14,319 --> 00:21:18,879
recommend it to them and at the time of

524
00:21:16,240 --> 00:21:20,720
this lesson it also holds the highest

525
00:21:18,880 --> 00:21:23,760
return on investment

526
00:21:20,720 --> 00:21:26,000
due to the highest average wage over any

527
00:21:23,759 --> 00:21:28,798
other current cloud certification in the

528
00:21:26,000 --> 00:21:31,679
market google recommends over three

529
00:21:28,798 --> 00:21:34,240
years of industry experience including

530
00:21:31,679 --> 00:21:36,640
one year on google cloud before

531
00:21:34,240 --> 00:21:39,038
attempting these exams with regards to

532
00:21:36,640 --> 00:21:41,520
the exams in the professional tier they

533
00:21:39,038 --> 00:21:43,919
are much harder than the associate level

534
00:21:41,519 --> 00:21:47,119
and at the time of this course is two

535
00:21:43,919 --> 00:21:49,919
hours long and the cost is 200 us

536
00:21:47,119 --> 00:21:52,239
dollars these exams are a total of 50

537
00:21:49,919 --> 00:21:54,880
questions which consists of both

538
00:21:52,240 --> 00:21:56,720
multiple choice and multiple answer

539
00:21:54,880 --> 00:21:59,440
questions it's the same amount of

540
00:21:56,720 --> 00:22:02,079
questions with the same amount of time

541
00:21:59,440 --> 00:22:04,159
but it does feel much harder each of the

542
00:22:02,079 --> 00:22:07,519
questions contain four to five line

543
00:22:04,159 --> 00:22:10,080
questions with one to three line answers

544
00:22:07,519 --> 00:22:12,400
it's definitely not a walk in the park

545
00:22:10,079 --> 00:22:14,960
and will take some good concentration

546
00:22:12,400 --> 00:22:17,679
and detailed knowledge on google cloud

547
00:22:14,960 --> 00:22:20,159
to solidify a pass after completing the

548
00:22:17,679 --> 00:22:22,480
cloud architect certification depending

549
00:22:20,159 --> 00:22:24,480
on your role my suggestion would be to

550
00:22:22,480 --> 00:22:27,519
pursue the areas that interest you the

551
00:22:24,480 --> 00:22:30,159
most to make your journey more enjoyable

552
00:22:27,519 --> 00:22:32,480
for me at the time i took the security

553
00:22:30,159 --> 00:22:34,880
engineer out as i am a big fan of

554
00:22:32,480 --> 00:22:37,120
security and i knew that i would really

555
00:22:34,880 --> 00:22:38,960
enjoy the learning and make it more fun

556
00:22:37,119 --> 00:22:41,519
for me this is also a great

557
00:22:38,960 --> 00:22:44,240
certification for those who are looking

558
00:22:41,519 --> 00:22:46,079
to excel their cloud security knowledge

559
00:22:44,240 --> 00:22:49,200
on top of any other security

560
00:22:46,079 --> 00:22:51,038
certifications such as the security plus

561
00:22:49,200 --> 00:22:53,120
or cissp

562
00:22:51,038 --> 00:22:55,359
now others may be huge fans of

563
00:22:53,119 --> 00:22:58,879
networking or hold other networking

564
00:22:55,359 --> 00:23:00,959
certifications such as the ccna and so

565
00:22:58,880 --> 00:23:03,280
obtaining the network engineer

566
00:23:00,960 --> 00:23:04,880
certification might be more up your

567
00:23:03,279 --> 00:23:07,279
alley and give you a better

568
00:23:04,880 --> 00:23:09,280
understanding in cloud networking now if

569
00:23:07,279 --> 00:23:12,158
you're in the data space you might want

570
00:23:09,279 --> 00:23:14,558
to move into the data engineer exam as

571
00:23:12,159 --> 00:23:17,200
well as taking on the machine learning

572
00:23:14,558 --> 00:23:20,158
engineer exam to really get some deeper

573
00:23:17,200 --> 00:23:22,240
knowledge in the areas of big data

574
00:23:20,159 --> 00:23:24,880
machine learning and artificial

575
00:23:22,240 --> 00:23:27,599
intelligence on google cloud now i know

576
00:23:24,880 --> 00:23:29,919
that there are many that love devops me

577
00:23:27,599 --> 00:23:32,798
being one of them and really want to dig

578
00:23:29,919 --> 00:23:35,520
deeper and understand sre and so they

579
00:23:32,798 --> 00:23:38,400
end up tackling the cloud developer and

580
00:23:35,519 --> 00:23:40,558
cloud devops engineer certifications so

581
00:23:38,400 --> 00:23:43,360
the bottom line is whatever brings you

582
00:23:40,558 --> 00:23:46,399
joy in the area of your choosing start

583
00:23:43,359 --> 00:23:48,079
with that and move on to do the rest all

584
00:23:46,400 --> 00:23:50,798
the professional certifications are

585
00:23:48,079 --> 00:23:53,678
valuable but do remember that they are

586
00:23:50,798 --> 00:23:56,079
hard and need preparation for study last

587
00:23:53,679 --> 00:23:58,159
but not least is the collaboration

588
00:23:56,079 --> 00:24:01,359
engineer certification and this

589
00:23:58,159 --> 00:24:04,159
certification focuses on google's core

590
00:24:01,359 --> 00:24:06,558
cloud-based collaboration tools that are

591
00:24:04,159 --> 00:24:10,159
available in g suite or what is now

592
00:24:06,558 --> 00:24:13,519
known as google workspaces such as gmail

593
00:24:10,159 --> 00:24:15,278
drive hangouts docs and sheets now the

594
00:24:13,519 --> 00:24:18,158
professional level collaboration

595
00:24:15,278 --> 00:24:20,960
engineers certification dives into more

596
00:24:18,159 --> 00:24:23,440
advanced areas of g suite such as mail

597
00:24:20,960 --> 00:24:25,759
routing identity management and

598
00:24:23,440 --> 00:24:27,919
automation of it all using tools

599
00:24:25,759 --> 00:24:30,558
scripting and apis

600
00:24:27,919 --> 00:24:32,960
this certification is great for those

601
00:24:30,558 --> 00:24:35,440
looking to build their skill set as an

602
00:24:32,960 --> 00:24:37,600
administrator of these tools but gives

603
00:24:35,440 --> 00:24:40,320
very little knowledge of google cloud

604
00:24:37,599 --> 00:24:42,240
itself so before i move on there is one

605
00:24:40,319 --> 00:24:44,399
more certification that i wanted to

606
00:24:42,240 --> 00:24:47,038
cover that doesn't fall under the

607
00:24:44,400 --> 00:24:49,200
associate or professional certification

608
00:24:47,038 --> 00:24:51,359
levels and this is the google cloud

609
00:24:49,200 --> 00:24:53,120
certified fellow program

610
00:24:51,359 --> 00:24:55,199
now this is by far

611
00:24:53,119 --> 00:24:58,239
one of the hardest certifications to

612
00:24:55,200 --> 00:25:00,159
obtain as there are very few certified

613
00:24:58,240 --> 00:25:02,159
fellows at the time of recording this

614
00:25:00,159 --> 00:25:04,480
lesson it is even harder than the

615
00:25:02,159 --> 00:25:06,400
professional level certifications and

616
00:25:04,480 --> 00:25:09,200
this is due to the sheer level of

617
00:25:06,400 --> 00:25:12,480
competency with hybrid multi-cloud

618
00:25:09,200 --> 00:25:14,480
architectures using google cloud anthos

619
00:25:12,480 --> 00:25:17,120
google's recommended experience

620
00:25:14,480 --> 00:25:19,038
is over 10 years with a year of

621
00:25:17,119 --> 00:25:22,798
designing enterprise solutions with

622
00:25:19,038 --> 00:25:25,038
anthos then a four-step process begins

623
00:25:22,798 --> 00:25:27,599
first step is to receive a certified

624
00:25:25,038 --> 00:25:30,400
fellow invitation from google and once

625
00:25:27,599 --> 00:25:32,959
you've received that invitation then you

626
00:25:30,400 --> 00:25:34,880
need to submit an application with some

627
00:25:32,960 --> 00:25:37,840
work samples that you've done

628
00:25:34,880 --> 00:25:40,640
showing google your competency in hybrid

629
00:25:37,839 --> 00:25:43,199
multi-cloud once that is done the third

630
00:25:40,640 --> 00:25:46,000
step is a series of technical hands-on

631
00:25:43,200 --> 00:25:47,840
labs that must be completed and is a

632
00:25:46,000 --> 00:25:50,159
qualifying assessment that must be

633
00:25:47,839 --> 00:25:52,720
passed in order to continue and after

634
00:25:50,159 --> 00:25:55,278
all that the last step is a panel

635
00:25:52,720 --> 00:25:57,759
interview done with google experts in

636
00:25:55,278 --> 00:25:59,759
order to assess your competency of

637
00:25:57,759 --> 00:26:02,400
designing hybrid and multi-cloud

638
00:25:59,759 --> 00:26:05,200
solutions with anthos so as you can see

639
00:26:02,400 --> 00:26:07,440
here this is a very difficult and highly

640
00:26:05,200 --> 00:26:10,319
involved certification process

641
00:26:07,440 --> 00:26:12,159
to achieve the title of certified fellow

642
00:26:10,319 --> 00:26:15,119
this is definitely not for the faint of

643
00:26:12,159 --> 00:26:18,240
heart but can distinguish yourself as a

644
00:26:15,119 --> 00:26:21,119
technical leader in anthos and a hybrid

645
00:26:18,240 --> 00:26:23,359
multi-cloud expert in your industry now

646
00:26:21,119 --> 00:26:25,918
i get asked many times whether or not

647
00:26:23,359 --> 00:26:28,479
certifications hold any value are they

648
00:26:25,919 --> 00:26:30,559
easy to get are they worth more than the

649
00:26:28,480 --> 00:26:32,798
paperwork that they're printed on and

650
00:26:30,558 --> 00:26:35,200
does it show that people really know how

651
00:26:32,798 --> 00:26:37,679
to use google cloud and my answer is

652
00:26:35,200 --> 00:26:40,240
always yes as the certifications hold

653
00:26:37,679 --> 00:26:43,120
benefits beyond just the certification

654
00:26:40,240 --> 00:26:45,120
itself and here's why targeting yourself

655
00:26:43,119 --> 00:26:47,439
for a certification gives you a

656
00:26:45,119 --> 00:26:49,678
milestone for learning something new

657
00:26:47,440 --> 00:26:52,320
with this new milestone it allows you to

658
00:26:49,679 --> 00:26:54,798
put together a study plan in order to

659
00:26:52,319 --> 00:26:57,678
achieve the necessary knowledge needed

660
00:26:54,798 --> 00:26:59,918
to not only pass the exam but the skills

661
00:26:57,679 --> 00:27:02,640
needed to progress in your everyday

662
00:26:59,919 --> 00:27:05,278
technical role this new knowledge helps

663
00:27:02,640 --> 00:27:07,600
keep your skills up to date therefore

664
00:27:05,278 --> 00:27:10,880
making you current instead of becoming a

665
00:27:07,599 --> 00:27:13,439
relic now having these up-to-date skills

666
00:27:10,880 --> 00:27:15,840
will also help advance your career

667
00:27:13,440 --> 00:27:17,759
throughout my career in cloud i have

668
00:27:15,839 --> 00:27:20,798
always managed to get my foot in the

669
00:27:17,759 --> 00:27:22,720
door with various interviews due to my

670
00:27:20,798 --> 00:27:24,960
certifications it gave me the

671
00:27:22,720 --> 00:27:27,038
opportunity to shine in front of the

672
00:27:24,960 --> 00:27:29,679
interviewer while being able to

673
00:27:27,038 --> 00:27:31,759
confidently display my skills in cloud

674
00:27:29,679 --> 00:27:34,480
it also allowed me to land the jobs that

675
00:27:31,759 --> 00:27:37,200
i sought after as well as carve out the

676
00:27:34,480 --> 00:27:39,519
career path that i truly wanted on top

677
00:27:37,200 --> 00:27:42,480
of landing the jobs that i wanted i was

678
00:27:39,519 --> 00:27:45,200
able to achieve a higher salary due to

679
00:27:42,480 --> 00:27:47,759
the certifications i had i have doubled

680
00:27:45,200 --> 00:27:49,840
and tripled my salary since i first

681
00:27:47,759 --> 00:27:52,398
started in cloud all due to my

682
00:27:49,839 --> 00:27:54,639
certifications and i've known others

683
00:27:52,398 --> 00:27:56,639
that have obtained up to five times

684
00:27:54,640 --> 00:27:58,880
their salary because of their

685
00:27:56,640 --> 00:28:00,960
certifications now this was not just

686
00:27:58,880 --> 00:28:03,760
from achieving the certification to put

687
00:28:00,960 --> 00:28:05,600
on my resume and up on social media but

688
00:28:03,759 --> 00:28:08,798
from the knowledge gained through the

689
00:28:05,599 --> 00:28:11,278
process and of course i personally feel

690
00:28:08,798 --> 00:28:12,079
that having your skills constantly up to

691
00:28:11,278 --> 00:28:14,558
date

692
00:28:12,079 --> 00:28:17,839
advancing your career and getting the

693
00:28:14,558 --> 00:28:20,639
salary that you want keeps you motivated

694
00:28:17,839 --> 00:28:23,519
to not only get more certifications but

695
00:28:20,640 --> 00:28:26,480
continue the learning process i am and

696
00:28:23,519 --> 00:28:29,038
always have been a huge proponent of

697
00:28:26,480 --> 00:28:31,440
lifelong learning and as i always say

698
00:28:29,038 --> 00:28:34,319
when you continue learning you continue

699
00:28:31,440 --> 00:28:37,360
to grow so in short google cloud

700
00:28:34,319 --> 00:28:39,359
certifications are a great way to grow

701
00:28:37,359 --> 00:28:41,519
and so that about covers everything that

702
00:28:39,359 --> 00:28:43,759
i wanted to discuss in this lesson so

703
00:28:41,519 --> 00:28:45,490
you can now mark this lesson as complete

704
00:28:43,759 --> 00:28:50,240
and i'll see you in the next one

705
00:28:45,490 --> 00:28:51,519
[Music]

706
00:28:50,240 --> 00:28:53,278
welcome back

707
00:28:51,519 --> 00:28:54,960
and in this lesson i'm going to be

708
00:28:53,278 --> 00:28:57,759
talking about the fictitious

709
00:28:54,960 --> 00:29:00,720
organization called bow tie inc that i

710
00:28:57,759 --> 00:29:01,839
will be using throughout the course

711
00:29:00,720 --> 00:29:04,319
now while going through the

712
00:29:01,839 --> 00:29:07,359
architectures and demos in this course

713
00:29:04,319 --> 00:29:09,119
together i wanted to tie them to a real

714
00:29:07,359 --> 00:29:11,038
world situation

715
00:29:09,119 --> 00:29:14,158
so that the theory and practical

716
00:29:11,038 --> 00:29:16,879
examples are easy to understand

717
00:29:14,159 --> 00:29:19,840
tying it to a scenario is an easy way to

718
00:29:16,880 --> 00:29:21,200
do this as well it makes things a lot

719
00:29:19,839 --> 00:29:23,199
more fun

720
00:29:21,200 --> 00:29:26,159
so the scenario again

721
00:29:23,200 --> 00:29:27,278
that i will be using is based on bow tie

722
00:29:26,159 --> 00:29:29,679
ink

723
00:29:27,278 --> 00:29:31,440
so before we get started with the course

724
00:29:29,679 --> 00:29:32,640
i'd like to quickly run through the

725
00:29:31,440 --> 00:29:34,640
scenario

726
00:29:32,640 --> 00:29:38,000
and don't worry it's going to be very

727
00:29:34,640 --> 00:29:40,000
high level and i will keep it brief

728
00:29:38,000 --> 00:29:42,558
so bow tie ink is a bow tie

729
00:29:40,000 --> 00:29:45,440
manufacturing company that designs and

730
00:29:42,558 --> 00:29:46,639
manufactures bow ties within their own

731
00:29:45,440 --> 00:29:49,519
factories

732
00:29:46,640 --> 00:29:52,240
they also hold a few retail locations

733
00:29:49,519 --> 00:29:55,038
where they sell their bow ties as well

734
00:29:52,240 --> 00:29:57,200
as wholesale to other thai and men's

735
00:29:55,038 --> 00:29:58,960
fashion boutiques and department stores

736
00:29:57,200 --> 00:30:00,880
across the globe

737
00:29:58,960 --> 00:30:04,319
being in the fashion business

738
00:30:00,880 --> 00:30:06,159
they mainly deal with commerce security

739
00:30:04,319 --> 00:30:09,439
and big data sets

740
00:30:06,159 --> 00:30:12,960
bow tie inc is a global company and they

741
00:30:09,440 --> 00:30:16,080
are headquartered in montreal canada

742
00:30:12,960 --> 00:30:18,159
they employ about 300 people globally

743
00:30:16,079 --> 00:30:20,639
with a hundred of them being in sales

744
00:30:18,159 --> 00:30:24,080
alone to support both the brick and

745
00:30:20,640 --> 00:30:25,759
mortar stores and wholesale branches

746
00:30:24,079 --> 00:30:28,720
there are many different departments to

747
00:30:25,759 --> 00:30:30,319
the company that make it work such as

748
00:30:28,720 --> 00:30:31,440
in-store staff

749
00:30:30,319 --> 00:30:33,599
i.t

750
00:30:31,440 --> 00:30:34,840
marketing for both in-store and online

751
00:30:33,599 --> 00:30:38,079
sales

752
00:30:34,839 --> 00:30:40,158
manufacturing finance and more

753
00:30:38,079 --> 00:30:43,278
the types of employees that work in bow

754
00:30:40,159 --> 00:30:46,080
tie inc vary greatly due to the various

755
00:30:43,278 --> 00:30:48,798
departments and consists of many people

756
00:30:46,079 --> 00:30:52,558
such as sales for both in-store and

757
00:30:48,798 --> 00:30:54,158
wholesale managers that run the stores

758
00:30:52,558 --> 00:30:55,918
and sewers that work in the

759
00:30:54,159 --> 00:30:58,080
manufacturing plant

760
00:30:55,919 --> 00:30:59,360
and many more that work in these various

761
00:30:58,079 --> 00:31:01,759
departments

762
00:30:59,359 --> 00:31:03,759
the business has both offices

763
00:31:01,759 --> 00:31:05,440
and brick and mortar stores

764
00:31:03,759 --> 00:31:08,000
in montreal

765
00:31:05,440 --> 00:31:10,000
london and los angeles

766
00:31:08,000 --> 00:31:12,720
now due to the thrifty mindset of

767
00:31:10,000 --> 00:31:15,440
management concentrating all their

768
00:31:12,720 --> 00:31:17,919
efforts on commerce and almost none in

769
00:31:15,440 --> 00:31:20,080
technical infrastructure has caused

770
00:31:17,919 --> 00:31:23,278
years of technical debt

771
00:31:20,079 --> 00:31:25,519
and is now a complete disaster

772
00:31:23,278 --> 00:31:28,159
within the brick and mortar location

773
00:31:25,519 --> 00:31:30,960
there contains two racks with a few

774
00:31:28,159 --> 00:31:34,159
servers and some networking equipment

775
00:31:30,960 --> 00:31:37,200
the global inventory of bow ties are

776
00:31:34,159 --> 00:31:40,320
updated upon sales in both stores

777
00:31:37,200 --> 00:31:43,519
and wholesale as well as new stock that

778
00:31:40,319 --> 00:31:45,519
has been manufactured from the factory

779
00:31:43,519 --> 00:31:47,839
there are point-of-sale systems in each

780
00:31:45,519 --> 00:31:50,640
store or office location

781
00:31:47,839 --> 00:31:54,240
these systems are all connected to each

782
00:31:50,640 --> 00:31:57,120
other over a vpn connection in order to

783
00:31:54,240 --> 00:31:59,679
keep updates of the inventory fresh

784
00:31:57,119 --> 00:32:01,759
all office and store infrastructure are

785
00:31:59,679 --> 00:32:03,200
connected to each other and the montreal

786
00:32:01,759 --> 00:32:05,599
headquarters

787
00:32:03,200 --> 00:32:08,240
and the point of sale systems and kiosk

788
00:32:05,599 --> 00:32:10,879
systems are backed up to tape in the

789
00:32:08,240 --> 00:32:12,159
montreal headquarters as well and like i

790
00:32:10,880 --> 00:32:15,278
said before

791
00:32:12,159 --> 00:32:17,600
management is extremely thrifty but they

792
00:32:15,278 --> 00:32:19,919
have finally come to the realization

793
00:32:17,599 --> 00:32:22,480
that they need to start spending money

794
00:32:19,919 --> 00:32:25,840
on the technical infrastructure in order

795
00:32:22,480 --> 00:32:28,079
to scale so diving into a quick overview

796
00:32:25,839 --> 00:32:30,959
of exactly what the architecture looks

797
00:32:28,079 --> 00:32:32,720
like the head office is located in

798
00:32:30,960 --> 00:32:35,759
montreal canada

799
00:32:32,720 --> 00:32:37,679
it has its main database for the crm and

800
00:32:35,759 --> 00:32:40,480
point-of-sale systems

801
00:32:37,679 --> 00:32:42,720
as well as holding the responsibility of

802
00:32:40,480 --> 00:32:45,278
housing the equipment for the tape

803
00:32:42,720 --> 00:32:48,079
backups the tapes are then taken off

804
00:32:45,278 --> 00:32:49,839
site within montreal by a third-party

805
00:32:48,079 --> 00:32:52,960
company for storage

806
00:32:49,839 --> 00:32:55,038
the company has two major offices one in

807
00:32:52,960 --> 00:32:57,759
london covering the eu

808
00:32:55,038 --> 00:33:00,960
and the other in the west coast us

809
00:32:57,759 --> 00:33:03,519
in los angeles these major offices

810
00:33:00,960 --> 00:33:06,079
are also retail locations that consume

811
00:33:03,519 --> 00:33:08,640
i.t services from the headquarters in

812
00:33:06,079 --> 00:33:11,038
montreal again being in the fashion

813
00:33:08,640 --> 00:33:13,519
business bowtie inc employs a large

814
00:33:11,038 --> 00:33:15,038
amount of sales people and the managers

815
00:33:13,519 --> 00:33:16,798
that support them

816
00:33:15,038 --> 00:33:18,720
these employees operate the

817
00:33:16,798 --> 00:33:21,359
point-of-sale systems so we're

818
00:33:18,720 --> 00:33:24,240
constantly looking to have the website

819
00:33:21,359 --> 00:33:27,439
sales and the inventory updated at all

820
00:33:24,240 --> 00:33:31,440
times each salesperson has access to

821
00:33:27,440 --> 00:33:34,159
email and files for updated forecasts on

822
00:33:31,440 --> 00:33:36,720
various new bowtie designs

823
00:33:34,159 --> 00:33:40,159
most sales people communicate over a

824
00:33:36,720 --> 00:33:42,880
voice over ip phone and chat programs

825
00:33:40,159 --> 00:33:45,278
through their mobile phone the managers

826
00:33:42,880 --> 00:33:46,720
also manually look at inventory on

827
00:33:45,278 --> 00:33:48,558
what's been sold

828
00:33:46,720 --> 00:33:51,038
versus what's in stock

829
00:33:48,558 --> 00:33:52,480
to predict the sales for stores in

830
00:33:51,038 --> 00:33:54,558
upcoming weeks

831
00:33:52,480 --> 00:33:57,440
this will give manufacturing a head

832
00:33:54,558 --> 00:33:58,480
start to making more bow ties for future

833
00:33:57,440 --> 00:34:00,798
sales

834
00:33:58,480 --> 00:34:02,798
now whatever implementations that we

835
00:34:00,798 --> 00:34:04,798
discuss throughout this course

836
00:34:02,798 --> 00:34:07,200
we'll need to support the day-to-day

837
00:34:04,798 --> 00:34:08,320
operations of the sales people and the

838
00:34:07,200 --> 00:34:10,240
managers

839
00:34:08,320 --> 00:34:11,359
and because of the different time zones

840
00:34:10,239 --> 00:34:13,838
in play

841
00:34:11,358 --> 00:34:14,960
the back-end infrastructure needs to be

842
00:34:13,838 --> 00:34:18,159
available

843
00:34:14,960 --> 00:34:21,199
24 hours a day seven days a week

844
00:34:18,159 --> 00:34:25,039
any downtime will impact updated

845
00:34:21,199 --> 00:34:28,398
inventory for both online sales as well

846
00:34:25,039 --> 00:34:29,918
as store sales at any given time

847
00:34:28,398 --> 00:34:32,878
now let's talk about the current

848
00:34:29,918 --> 00:34:36,000
problems that the business is facing

849
00:34:32,878 --> 00:34:38,239
most locations hold on premise hardware

850
00:34:36,000 --> 00:34:39,358
that is out of date and also out of

851
00:34:38,239 --> 00:34:41,279
warranty

852
00:34:39,358 --> 00:34:45,598
the business looked at extending this

853
00:34:41,280 --> 00:34:47,599
warranty but became very costly as well

854
00:34:45,599 --> 00:34:50,879
management is on the fence about whether

855
00:34:47,599 --> 00:34:53,039
to buy new on-premise hardware or just

856
00:34:50,878 --> 00:34:55,519
move to the cloud they were told that

857
00:34:53,039 --> 00:34:57,920
google cloud is the way to go when it

858
00:34:55,519 --> 00:34:59,759
comes to the retail space and so are

859
00:34:57,920 --> 00:35:02,720
open to suggestions

860
00:34:59,760 --> 00:35:05,599
yet still very weary now when it comes

861
00:35:02,719 --> 00:35:08,799
to performance there seems to be a major

862
00:35:05,599 --> 00:35:09,920
lag from the vpn connecting from store

863
00:35:08,800 --> 00:35:12,000
to store

864
00:35:09,920 --> 00:35:15,039
as well as the head office that's

865
00:35:12,000 --> 00:35:17,838
responsible for proper inventory

866
00:35:15,039 --> 00:35:20,400
thus slowing down the point of sale

867
00:35:17,838 --> 00:35:23,119
systems and to top it all off

868
00:35:20,400 --> 00:35:24,079
backups taking an exorbitant amount of

869
00:35:23,119 --> 00:35:26,880
time

870
00:35:24,079 --> 00:35:29,599
is consuming a lot of bandwidth with the

871
00:35:26,880 --> 00:35:31,760
current vpn connection now bowtie inc

872
00:35:29,599 --> 00:35:35,200
has always struggled with the lack of

873
00:35:31,760 --> 00:35:37,680
highly available systems and scalability

874
00:35:35,199 --> 00:35:40,480
due to cost of new hardware this is

875
00:35:37,679 --> 00:35:42,879
causing extreme stress for online

876
00:35:40,480 --> 00:35:44,480
e-commerce whenever a new marketing

877
00:35:42,880 --> 00:35:46,800
campaign is launched

878
00:35:44,480 --> 00:35:48,320
as the systems are unable to keep up

879
00:35:46,800 --> 00:35:50,240
with the demand

880
00:35:48,320 --> 00:35:52,880
looking at the forecast for the next two

881
00:35:50,239 --> 00:35:55,199
quarters the business is looking to open

882
00:35:52,880 --> 00:35:57,119
up more stores in the eu

883
00:35:55,199 --> 00:35:59,598
as well as in the us

884
00:35:57,119 --> 00:36:01,680
and with the current database in place

885
00:35:59,599 --> 00:36:04,480
providing very inefficient high

886
00:36:01,679 --> 00:36:06,399
availability or scalability

887
00:36:04,480 --> 00:36:08,159
there is a major threat of the main

888
00:36:06,400 --> 00:36:09,680
database going down

889
00:36:08,159 --> 00:36:12,639
now when it comes to assessing the

890
00:36:09,679 --> 00:36:15,440
backups the tape backups have become

891
00:36:12,639 --> 00:36:18,559
very slow especially backing up from

892
00:36:15,440 --> 00:36:21,519
london and the off-site storage costs

893
00:36:18,559 --> 00:36:23,199
continuously go up every year

894
00:36:21,519 --> 00:36:25,039
the backups are consuming a lot of

895
00:36:23,199 --> 00:36:26,480
bandwidth and are starting to become the

896
00:36:25,039 --> 00:36:29,358
major pain point

897
00:36:26,480 --> 00:36:32,159
for connection issues between locations

898
00:36:29,358 --> 00:36:35,358
on top of all these issues the small it

899
00:36:32,159 --> 00:36:38,319
staff that is employed have outdated i.t

900
00:36:35,358 --> 00:36:40,639
skills and so there is a lot of manual

901
00:36:38,320 --> 00:36:43,200
intervention that needs to be done

902
00:36:40,639 --> 00:36:45,838
to top it all off all the running around

903
00:36:43,199 --> 00:36:47,679
that is necessary to keep the outdated

904
00:36:45,838 --> 00:36:50,078
infrastructure alive

905
00:36:47,679 --> 00:36:53,279
management is also now pushing to open

906
00:36:50,079 --> 00:36:55,839
new stores to supply bow ties globally

907
00:36:53,280 --> 00:36:57,920
given the ever-growing demand

908
00:36:55,838 --> 00:37:00,559
as well as being able to supply the

909
00:36:57,920 --> 00:37:02,320
demand of bow ties online through their

910
00:37:00,559 --> 00:37:04,719
e-commerce store

911
00:37:02,320 --> 00:37:07,440
now these are some realistic yet common

912
00:37:04,719 --> 00:37:09,838
scenarios that come up in reality for a

913
00:37:07,440 --> 00:37:11,519
lot of businesses that are not using

914
00:37:09,838 --> 00:37:14,000
cloud computing

915
00:37:11,519 --> 00:37:16,960
and throughout the course we will dive

916
00:37:14,000 --> 00:37:17,838
into how google cloud can help ease the

917
00:37:16,960 --> 00:37:20,639
pain

918
00:37:17,838 --> 00:37:22,480
of these current ongoing issues

919
00:37:20,639 --> 00:37:24,719
now at a high level with what the

920
00:37:22,480 --> 00:37:26,639
business wants to achieve and what the

921
00:37:24,719 --> 00:37:29,199
favorable results are

922
00:37:26,639 --> 00:37:31,920
they are all interrelated issues so

923
00:37:29,199 --> 00:37:33,919
bowtie inc requires a reliable and

924
00:37:31,920 --> 00:37:36,639
stable connection between all the

925
00:37:33,920 --> 00:37:38,079
locations of the stores and offices

926
00:37:36,639 --> 00:37:41,118
so that sales

927
00:37:38,079 --> 00:37:44,000
inventory and point-of-sale systems are

928
00:37:41,119 --> 00:37:46,720
quick and up-to-date at all times

929
00:37:44,000 --> 00:37:50,400
this will also allow all staff in these

930
00:37:46,719 --> 00:37:52,639
locations to work a lot more efficiently

931
00:37:50,400 --> 00:37:53,599
with a stable and reliable connection in

932
00:37:52,639 --> 00:37:56,480
place

933
00:37:53,599 --> 00:37:59,039
backups should be able to run smoothly

934
00:37:56,480 --> 00:38:00,240
and also eliminate the cost of off-site

935
00:37:59,039 --> 00:38:02,559
backup

936
00:38:00,239 --> 00:38:04,559
not to mention the manpower and

937
00:38:02,559 --> 00:38:05,440
infrastructure involved to get the job

938
00:38:04,559 --> 00:38:08,159
done

939
00:38:05,440 --> 00:38:10,079
while scaling up offices and stores due

940
00:38:08,159 --> 00:38:11,759
to increase in demand

941
00:38:10,079 --> 00:38:14,400
the business should be able to deploy

942
00:38:11,760 --> 00:38:16,480
stores in new regions using pay as you

943
00:38:14,400 --> 00:38:19,358
go billing while also meeting the

944
00:38:16,480 --> 00:38:23,039
requirements and regulations when it

945
00:38:19,358 --> 00:38:25,199
comes to gpdr and pci

946
00:38:23,039 --> 00:38:28,159
this would also give the business

947
00:38:25,199 --> 00:38:30,480
flexibility of having a disaster

948
00:38:28,159 --> 00:38:32,559
recovery strategy in place

949
00:38:30,480 --> 00:38:35,280
in case there was a failure of the main

950
00:38:32,559 --> 00:38:38,000
database in montreal now as mentioned

951
00:38:35,280 --> 00:38:40,640
before the business is extremely thrifty

952
00:38:38,000 --> 00:38:41,920
especially when it comes to spend on it

953
00:38:40,639 --> 00:38:44,159
infrastructure

954
00:38:41,920 --> 00:38:46,320
and so the goal is to have the costs as

955
00:38:44,159 --> 00:38:50,000
low as possible yet having the

956
00:38:46,320 --> 00:38:52,559
flexibility of scaling up when needed

957
00:38:50,000 --> 00:38:55,119
especially when new marketing campaigns

958
00:38:52,559 --> 00:38:56,480
are launched during high demand sales

959
00:38:55,119 --> 00:38:58,960
periods

960
00:38:56,480 --> 00:39:01,920
this would also give bowtie inc the

961
00:38:58,960 --> 00:39:02,720
flexibility of analyzing sales ahead of

962
00:39:01,920 --> 00:39:06,159
time

963
00:39:02,719 --> 00:39:08,000
using real-time analytics and catering

964
00:39:06,159 --> 00:39:09,279
to exactly what the customer is

965
00:39:08,000 --> 00:39:12,079
demanding

966
00:39:09,280 --> 00:39:14,320
thus making inventory a lot more

967
00:39:12,079 --> 00:39:16,880
accurate and reducing costs in

968
00:39:14,320 --> 00:39:19,280
manufacturing items that end up going on

969
00:39:16,880 --> 00:39:20,559
sale and costing the company money in

970
00:39:19,280 --> 00:39:22,320
the end

971
00:39:20,559 --> 00:39:25,279
finally when it comes to people

972
00:39:22,320 --> 00:39:26,160
supporting infrastructure automation is

973
00:39:25,280 --> 00:39:28,480
key

974
00:39:26,159 --> 00:39:30,960
removing manual steps and a lot of the

975
00:39:28,480 --> 00:39:33,119
processes can reduce the amount of

976
00:39:30,960 --> 00:39:34,880
manpower needed to keep the

977
00:39:33,119 --> 00:39:37,200
infrastructure alive

978
00:39:34,880 --> 00:39:39,200
and especially will reduce downtime when

979
00:39:37,199 --> 00:39:41,519
disaster arises

980
00:39:39,199 --> 00:39:44,559
putting automation in place will also

981
00:39:41,519 --> 00:39:47,119
reduce the amount of tedious tasks that

982
00:39:44,559 --> 00:39:49,519
all departments have on their plate

983
00:39:47,119 --> 00:39:50,800
so that they can focus on more important

984
00:39:49,519 --> 00:39:53,519
business needs

985
00:39:50,800 --> 00:39:56,079
now that's the scenario at a high level

986
00:39:53,519 --> 00:39:58,719
i wanted to really emphasize that this

987
00:39:56,079 --> 00:40:00,960
is a typical type of scenario that you

988
00:39:58,719 --> 00:40:02,399
will face as a cloud engineer and a

989
00:40:00,960 --> 00:40:04,720
cloud architect

990
00:40:02,400 --> 00:40:06,960
the key to this scenario is the fact

991
00:40:04,719 --> 00:40:08,000
that there are areas that are lacking in

992
00:40:06,960 --> 00:40:10,880
detail

993
00:40:08,000 --> 00:40:13,440
and areas that are fully comprehensible

994
00:40:10,880 --> 00:40:16,079
and this will trigger knowing when and

995
00:40:13,440 --> 00:40:19,039
where to ask relevant questions

996
00:40:16,079 --> 00:40:20,400
especially in your day-to-day role as an

997
00:40:19,039 --> 00:40:22,559
engineer

998
00:40:20,400 --> 00:40:24,480
it will allow you to fill the gaps so

999
00:40:22,559 --> 00:40:26,960
that you're able to figure out what

1000
00:40:24,480 --> 00:40:28,719
services you will need and what type of

1001
00:40:26,960 --> 00:40:31,199
architecture to use

1002
00:40:28,719 --> 00:40:32,719
this is also extremely helpful when it

1003
00:40:31,199 --> 00:40:35,118
comes to the exam

1004
00:40:32,719 --> 00:40:37,039
as in the exam you will be faced with

1005
00:40:35,119 --> 00:40:39,599
questions that pertain to real life

1006
00:40:37,039 --> 00:40:42,318
scenarios that will test you in a

1007
00:40:39,599 --> 00:40:44,559
similar manner knowing what services and

1008
00:40:42,318 --> 00:40:46,159
architecture to use based on the

1009
00:40:44,559 --> 00:40:48,159
information given

1010
00:40:46,159 --> 00:40:51,358
will always give you the keys to the

1011
00:40:48,159 --> 00:40:53,358
door with the right answer and lastly

1012
00:40:51,358 --> 00:40:55,920
when it comes to the demos

1013
00:40:53,358 --> 00:40:58,719
this scenario used throughout the course

1014
00:40:55,920 --> 00:41:00,559
will help put things in perspective

1015
00:40:58,719 --> 00:41:02,078
as we will come to resolve a lot of

1016
00:41:00,559 --> 00:41:04,559
these common issues

1017
00:41:02,079 --> 00:41:07,519
real world scenarios can give you a

1018
00:41:04,559 --> 00:41:09,838
better perspective on learning as it is

1019
00:41:07,519 --> 00:41:11,119
tied to something that makes it easy to

1020
00:41:09,838 --> 00:41:13,920
comprehend

1021
00:41:11,119 --> 00:41:15,358
and again bow tie inc is the scenario

1022
00:41:13,920 --> 00:41:18,880
that i will be using throughout the

1023
00:41:15,358 --> 00:41:20,639
course to help you grasp these concepts

1024
00:41:18,880 --> 00:41:23,200
so that's all i have to cover this

1025
00:41:20,639 --> 00:41:25,199
scenario so you can now mark this lesson

1026
00:41:23,199 --> 00:41:26,109
as complete and let's move on to the

1027
00:41:25,199 --> 00:41:29,919
next one

1028
00:41:26,110 --> 00:41:32,640
[Music]

1029
00:41:29,920 --> 00:41:35,280
hey this is anthony cevallos and what i

1030
00:41:32,639 --> 00:41:38,799
wanted to show you here is where you can

1031
00:41:35,280 --> 00:41:40,000
access the practice exam on the exam pro

1032
00:41:38,800 --> 00:41:41,760
platform

1033
00:41:40,000 --> 00:41:44,318
so once you've signed up for your

1034
00:41:41,760 --> 00:41:45,280
account you can head on over to the

1035
00:41:44,318 --> 00:41:47,838
course

1036
00:41:45,280 --> 00:41:50,319
and you can scroll down to the bottom of

1037
00:41:47,838 --> 00:41:52,799
the curriculum list and you will see the

1038
00:41:50,318 --> 00:41:54,639
practice exams here at the bottom

1039
00:41:52,800 --> 00:41:56,800
now just as a quick note

1040
00:41:54,639 --> 00:42:00,159
you should generally not attempt the

1041
00:41:56,800 --> 00:42:02,880
practice exam unless you have completed

1042
00:42:00,159 --> 00:42:05,440
all the lecture content including the

1043
00:42:02,880 --> 00:42:08,640
follow alongs as once you start to see

1044
00:42:05,440 --> 00:42:10,960
those questions you will get an urge to

1045
00:42:08,639 --> 00:42:13,759
start remembering these questions

1046
00:42:10,960 --> 00:42:17,199
and so i always recommend to use the

1047
00:42:13,760 --> 00:42:19,760
practice exam as a serious attempt

1048
00:42:17,199 --> 00:42:22,639
and not just a way to get to the final

1049
00:42:19,760 --> 00:42:23,920
exam at a faster pace taking your time

1050
00:42:22,639 --> 00:42:26,639
with the course

1051
00:42:23,920 --> 00:42:29,599
will allow you to really prevail through

1052
00:42:26,639 --> 00:42:32,879
these practice exams and allow you for a

1053
00:42:29,599 --> 00:42:35,359
way better pass rate on the final exam

1054
00:42:32,880 --> 00:42:38,720
looking here we can see two practice

1055
00:42:35,358 --> 00:42:41,358
exams with 50 questions each and so i

1056
00:42:38,719 --> 00:42:43,279
wanted to take a moment here and dive

1057
00:42:41,358 --> 00:42:44,880
into the practice exam

1058
00:42:43,280 --> 00:42:47,280
and show you what some of these

1059
00:42:44,880 --> 00:42:49,838
questions will look like and so clicking

1060
00:42:47,280 --> 00:42:52,400
into one of these exams we can get right

1061
00:42:49,838 --> 00:42:55,279
into it and so as you can see i've

1062
00:42:52,400 --> 00:42:57,200
already started on practice exam one and

1063
00:42:55,280 --> 00:43:00,079
so i'm going to click into that right

1064
00:42:57,199 --> 00:43:02,879
now and as you can see the exam is

1065
00:43:00,079 --> 00:43:06,560
always timed and in this case will be

1066
00:43:02,880 --> 00:43:09,440
120 minutes for this specific exam there

1067
00:43:06,559 --> 00:43:11,358
are 50 questions for this practice exam

1068
00:43:09,440 --> 00:43:12,720
and you will see the breakdown in the

1069
00:43:11,358 --> 00:43:14,719
very beginning

1070
00:43:12,719 --> 00:43:17,598
of the types of questions you will be

1071
00:43:14,719 --> 00:43:20,000
asked now for the google cloud exams at

1072
00:43:17,599 --> 00:43:22,559
the associate level they are usually

1073
00:43:20,000 --> 00:43:25,199
structured in a common format

1074
00:43:22,559 --> 00:43:27,920
they generally start with one or two

1075
00:43:25,199 --> 00:43:30,719
lines of sentences which will typically

1076
00:43:27,920 --> 00:43:33,599
represent a scenario followed by the

1077
00:43:30,719 --> 00:43:36,559
question itself this question tends to

1078
00:43:33,599 --> 00:43:39,119
be brief and to the point immediately

1079
00:43:36,559 --> 00:43:41,199
following that you will be presented

1080
00:43:39,119 --> 00:43:44,240
with a number of answers

1081
00:43:41,199 --> 00:43:47,598
usually four or five in nature and can

1082
00:43:44,239 --> 00:43:50,879
sometimes be very very technical as they

1083
00:43:47,599 --> 00:43:53,760
are designed for engineers like asking

1084
00:43:50,880 --> 00:43:57,119
about which gcloud commands to use to

1085
00:43:53,760 --> 00:43:59,520
execute in a given scenario as well as

1086
00:43:57,119 --> 00:44:02,720
theoretical questions that can deal with

1087
00:43:59,519 --> 00:44:05,599
let's say best practices or questions

1088
00:44:02,719 --> 00:44:08,159
about the specific services themselves

1089
00:44:05,599 --> 00:44:11,440
now these answers will come in two

1090
00:44:08,159 --> 00:44:14,879
different styles either multi-choice or

1091
00:44:11,440 --> 00:44:17,760
multi-select the multi-choice is usually

1092
00:44:14,880 --> 00:44:20,400
about identifying the correct answer

1093
00:44:17,760 --> 00:44:23,599
from a group of incorrect or less

1094
00:44:20,400 --> 00:44:26,318
correct answers whereas the multi-select

1095
00:44:23,599 --> 00:44:30,000
will be about choosing multiple correct

1096
00:44:26,318 --> 00:44:32,800
solutions to identify the answer as well

1097
00:44:30,000 --> 00:44:36,000
for this associate exam the overall

1098
00:44:32,800 --> 00:44:39,280
structure is pretty simple in nature and

1099
00:44:36,000 --> 00:44:41,760
typically will be either right or wrong

1100
00:44:39,280 --> 00:44:44,640
now sometimes these questions can get

1101
00:44:41,760 --> 00:44:45,680
tricky where there are multiple possible

1102
00:44:44,639 --> 00:44:47,759
answers

1103
00:44:45,679 --> 00:44:49,199
and you will have to select the most

1104
00:44:47,760 --> 00:44:51,359
suitable ones

1105
00:44:49,199 --> 00:44:52,399
now although most of these types of

1106
00:44:51,358 --> 00:44:55,279
questions

1107
00:44:52,400 --> 00:44:58,160
usually show up in the professional exam

1108
00:44:55,280 --> 00:45:01,440
they can sometimes peek their heads into

1109
00:44:58,159 --> 00:45:04,399
the associate and so a great tactic that

1110
00:45:01,440 --> 00:45:07,039
i always like to use is to immediately

1111
00:45:04,400 --> 00:45:08,160
identify what matters in the question

1112
00:45:07,039 --> 00:45:10,719
itself

1113
00:45:08,159 --> 00:45:13,039
and then to start ruling out any of the

1114
00:45:10,719 --> 00:45:15,679
answers that are wrong and this will

1115
00:45:13,039 --> 00:45:18,880
allow you to answer the question a lot

1116
00:45:15,679 --> 00:45:21,519
more quickly and efficiently as it will

1117
00:45:18,880 --> 00:45:24,480
bring the more correct answer to the

1118
00:45:21,519 --> 00:45:26,159
surface as well as making the answer a

1119
00:45:24,480 --> 00:45:29,039
lot more obvious

1120
00:45:26,159 --> 00:45:31,920
and making the entire question less

1121
00:45:29,039 --> 00:45:34,639
complex so for instance with this

1122
00:45:31,920 --> 00:45:37,358
question here you are immediately asked

1123
00:45:34,639 --> 00:45:40,239
about google's recommended practices

1124
00:45:37,358 --> 00:45:43,039
when it comes to using cloud storage as

1125
00:45:40,239 --> 00:45:46,000
backup for disaster recovery and this

1126
00:45:43,039 --> 00:45:48,239
would be for a specific storage type and

1127
00:45:46,000 --> 00:45:51,119
so quickly looking at the answers you

1128
00:45:48,239 --> 00:45:53,519
can see that standard storage and near

1129
00:45:51,119 --> 00:45:56,240
line storage will not be part of the

1130
00:45:53,519 --> 00:45:59,280
answer and so that will leave cold line

1131
00:45:56,239 --> 00:46:00,959
storage or archive storage as the two

1132
00:45:59,280 --> 00:46:03,359
possible choices

1133
00:46:00,960 --> 00:46:06,000
for the answer of this question and so

1134
00:46:03,358 --> 00:46:07,679
these are the typical techniques that i

1135
00:46:06,000 --> 00:46:10,318
always like to use

1136
00:46:07,679 --> 00:46:12,078
for these exams and so provided that

1137
00:46:10,318 --> 00:46:14,960
you've gone through all the course

1138
00:46:12,079 --> 00:46:17,359
content you will be able to answer these

1139
00:46:14,960 --> 00:46:20,240
technical questions with ease and

1140
00:46:17,358 --> 00:46:22,639
following the techniques i've just given

1141
00:46:20,239 --> 00:46:25,358
and applying them to each question

1142
00:46:22,639 --> 00:46:28,799
can really help you in not only this

1143
00:46:25,358 --> 00:46:31,519
practice exam but for the final exam

1144
00:46:28,800 --> 00:46:33,590
landing you a passing grade getting you

1145
00:46:31,519 --> 00:46:38,000
certified

1146
00:46:33,590 --> 00:46:40,400
[Music]

1147
00:46:38,000 --> 00:46:43,119
welcome back and in this section i

1148
00:46:40,400 --> 00:46:46,000
wanted to really hone in on the basics

1149
00:46:43,119 --> 00:46:48,000
of cloud computing the characteristics

1150
00:46:46,000 --> 00:46:50,239
that make it what it is

1151
00:46:48,000 --> 00:46:52,639
the different types of computing

1152
00:46:50,239 --> 00:46:55,519
and how they differ from each other as

1153
00:46:52,639 --> 00:46:58,159
well as the types of service models now

1154
00:46:55,519 --> 00:47:01,199
in this lesson i wanted to dive into the

1155
00:46:58,159 --> 00:47:04,000
definition of cloud computing and the

1156
00:47:01,199 --> 00:47:06,639
essential characteristics that define it

1157
00:47:04,000 --> 00:47:08,400
now for some advanced folk watching this

1158
00:47:06,639 --> 00:47:09,838
this may be a review

1159
00:47:08,400 --> 00:47:12,559
and for others

1160
00:47:09,838 --> 00:47:15,279
this may fulfill a better understanding

1161
00:47:12,559 --> 00:47:17,759
on what is cloud now cloud is a term

1162
00:47:15,280 --> 00:47:20,400
that is thrown around a lot these days

1163
00:47:17,760 --> 00:47:22,800
yet holds a different definition or

1164
00:47:20,400 --> 00:47:24,480
understanding to each and every

1165
00:47:22,800 --> 00:47:27,280
individual

1166
00:47:24,480 --> 00:47:29,599
you could probably ask 10 people on

1167
00:47:27,280 --> 00:47:30,480
their definition of cloud and chances

1168
00:47:29,599 --> 00:47:34,400
are

1169
00:47:30,480 --> 00:47:37,440
everyone would have their own take on it

1170
00:47:34,400 --> 00:47:38,400
many see cloud as this abstract thing in

1171
00:47:37,440 --> 00:47:41,358
the sky

1172
00:47:38,400 --> 00:47:43,838
where files and emails are stored but

1173
00:47:41,358 --> 00:47:46,558
it's so much more than that

1174
00:47:43,838 --> 00:47:48,480
now the true definition of it can be put

1175
00:47:46,559 --> 00:47:51,760
in very simple terms

1176
00:47:48,480 --> 00:47:53,440
and can be applied to any public cloud

1177
00:47:51,760 --> 00:47:54,800
being google cloud

1178
00:47:53,440 --> 00:47:56,639
aws

1179
00:47:54,800 --> 00:47:58,880
and azure

1180
00:47:56,639 --> 00:48:01,440
moving on to the definition

1181
00:47:58,880 --> 00:48:04,160
cloud computing is the delivery of a

1182
00:48:01,440 --> 00:48:07,039
shared pool of on-demand computing

1183
00:48:04,159 --> 00:48:09,440
services over the public internet

1184
00:48:07,039 --> 00:48:10,719
that can be rapidly provisioned

1185
00:48:09,440 --> 00:48:13,200
and released

1186
00:48:10,719 --> 00:48:15,919
with minimal management effort or

1187
00:48:13,199 --> 00:48:17,838
service provider interaction

1188
00:48:15,920 --> 00:48:20,400
these computing services

1189
00:48:17,838 --> 00:48:21,679
consist of things like servers

1190
00:48:20,400 --> 00:48:24,400
storage

1191
00:48:21,679 --> 00:48:26,399
networking and databases they can be

1192
00:48:24,400 --> 00:48:28,079
quickly provisioned and accessed from

1193
00:48:26,400 --> 00:48:30,559
your local computer

1194
00:48:28,079 --> 00:48:33,119
over an internet connection now coupled

1195
00:48:30,559 --> 00:48:35,839
with this definition are five essential

1196
00:48:33,119 --> 00:48:38,240
characteristics that define the cloud

1197
00:48:35,838 --> 00:48:40,799
model that i would like to go over with

1198
00:48:38,239 --> 00:48:43,598
you and i believe that it would hold

1199
00:48:40,800 --> 00:48:46,480
massive benefits to understanding when

1200
00:48:43,599 --> 00:48:49,838
speaking to cloud this information can

1201
00:48:46,480 --> 00:48:52,318
be found in the white paper published by

1202
00:48:49,838 --> 00:48:54,799
the national institute of standards and

1203
00:48:52,318 --> 00:48:57,358
technology i will include a link to this

1204
00:48:54,800 --> 00:48:59,119
publication in the lesson notes for your

1205
00:48:57,358 --> 00:49:02,799
review now these essential

1206
00:48:59,119 --> 00:49:03,680
characteristics are as follows the first

1207
00:49:02,800 --> 00:49:06,000
one

1208
00:49:03,679 --> 00:49:08,399
is on-demand self-service

1209
00:49:06,000 --> 00:49:11,119
and this can be defined as being able to

1210
00:49:08,400 --> 00:49:14,079
provision resources automatically

1211
00:49:11,119 --> 00:49:15,680
without requiring human interaction on

1212
00:49:14,079 --> 00:49:17,680
the provider's end

1213
00:49:15,679 --> 00:49:20,159
so in the end you will never need to

1214
00:49:17,679 --> 00:49:22,480
call up or interact with the service

1215
00:49:20,159 --> 00:49:24,239
provider in order to get resources

1216
00:49:22,480 --> 00:49:26,800
provisioned for you

1217
00:49:24,239 --> 00:49:29,439
as well you have the flexibility of

1218
00:49:26,800 --> 00:49:31,039
being able to provision and de-provision

1219
00:49:29,440 --> 00:49:33,599
these resources

1220
00:49:31,039 --> 00:49:35,358
whenever you need them and at any given

1221
00:49:33,599 --> 00:49:37,680
time of the day

1222
00:49:35,358 --> 00:49:39,519
the second characteristic is broad

1223
00:49:37,679 --> 00:49:41,358
network access

1224
00:49:39,519 --> 00:49:43,679
now this simply means that cloud

1225
00:49:41,358 --> 00:49:46,799
computing resources are available over

1226
00:49:43,679 --> 00:49:49,279
the network and can be accessed by many

1227
00:49:46,800 --> 00:49:50,800
different customer platforms such as

1228
00:49:49,280 --> 00:49:53,040
mobile phones

1229
00:49:50,800 --> 00:49:54,400
tablets or computers

1230
00:49:53,039 --> 00:49:56,960
in other words

1231
00:49:54,400 --> 00:49:59,838
cloud services are available over a

1232
00:49:56,960 --> 00:50:02,318
network moving into the third

1233
00:49:59,838 --> 00:50:04,960
is resource pooling

1234
00:50:02,318 --> 00:50:06,960
so the provider's computing resources

1235
00:50:04,960 --> 00:50:10,079
are pooled together to support a

1236
00:50:06,960 --> 00:50:13,519
multi-tenant model that allows multiple

1237
00:50:10,079 --> 00:50:16,160
customers to share the same applications

1238
00:50:13,519 --> 00:50:18,719
or the same physical infrastructure

1239
00:50:16,159 --> 00:50:20,558
while retaining privacy and security

1240
00:50:18,719 --> 00:50:22,879
over their information

1241
00:50:20,559 --> 00:50:23,920
this includes things like processing

1242
00:50:22,880 --> 00:50:26,880
power

1243
00:50:23,920 --> 00:50:28,960
memory storage and networking

1244
00:50:26,880 --> 00:50:31,039
it's similar to people living in an

1245
00:50:28,960 --> 00:50:33,199
apartment building sharing the same

1246
00:50:31,039 --> 00:50:35,838
building infrastructure like power and

1247
00:50:33,199 --> 00:50:38,078
water yet they still have their own

1248
00:50:35,838 --> 00:50:39,679
apartments and privacy within that

1249
00:50:38,079 --> 00:50:42,000
infrastructure

1250
00:50:39,679 --> 00:50:44,879
this also creates a sense of location

1251
00:50:42,000 --> 00:50:48,159
independence in that the customer

1252
00:50:44,880 --> 00:50:51,119
generally has no control or knowledge

1253
00:50:48,159 --> 00:50:52,799
over the exact location of the provided

1254
00:50:51,119 --> 00:50:55,920
resources

1255
00:50:52,800 --> 00:50:58,720
but they may be able to specify location

1256
00:50:55,920 --> 00:51:00,559
at a higher level of abstraction so in

1257
00:50:58,719 --> 00:51:02,959
the end the customer does not really

1258
00:51:00,559 --> 00:51:05,920
have the option of choosing exactly

1259
00:51:02,960 --> 00:51:07,280
which server server rack or data center

1260
00:51:05,920 --> 00:51:09,519
for that matter

1261
00:51:07,280 --> 00:51:10,640
of where the provided resources are

1262
00:51:09,519 --> 00:51:12,719
coming from

1263
00:51:10,639 --> 00:51:16,159
they will only be able to have the

1264
00:51:12,719 --> 00:51:19,279
option to choose things like regions or

1265
00:51:16,159 --> 00:51:21,838
sections within that region

1266
00:51:19,280 --> 00:51:24,079
the fourth essential characteristic is

1267
00:51:21,838 --> 00:51:25,440
rapid elasticity

1268
00:51:24,079 --> 00:51:27,760
this to me

1269
00:51:25,440 --> 00:51:31,358
is the key factor of what makes cloud

1270
00:51:27,760 --> 00:51:33,920
computing so great and so agile

1271
00:51:31,358 --> 00:51:35,838
capabilities can be elastically

1272
00:51:33,920 --> 00:51:38,960
provisioned and released

1273
00:51:35,838 --> 00:51:42,318
in some cases automatically to scale

1274
00:51:38,960 --> 00:51:43,838
rapidly outwards and inwards in response

1275
00:51:42,318 --> 00:51:46,239
with demand

1276
00:51:43,838 --> 00:51:48,880
to the consumer the capabilities

1277
00:51:46,239 --> 00:51:50,479
available for provisioning often appear

1278
00:51:48,880 --> 00:51:53,760
to be unlimited

1279
00:51:50,480 --> 00:51:56,880
and can be provisioned in any quantity

1280
00:51:53,760 --> 00:51:59,920
at any time and touching on the fifth

1281
00:51:56,880 --> 00:52:02,400
and last characteristic cloud systems

1282
00:51:59,920 --> 00:52:05,440
automatically control and optimize

1283
00:52:02,400 --> 00:52:06,720
resource usage by leveraging a metering

1284
00:52:05,440 --> 00:52:09,599
capability

1285
00:52:06,719 --> 00:52:12,239
resource usage can be monitored

1286
00:52:09,599 --> 00:52:15,119
controlled and reported providing

1287
00:52:12,239 --> 00:52:17,279
transparency for both the provider and

1288
00:52:15,119 --> 00:52:19,200
consumer of the service

1289
00:52:17,280 --> 00:52:22,480
now what this means is that cloud

1290
00:52:19,199 --> 00:52:25,039
computing resource usage is metered and

1291
00:52:22,480 --> 00:52:26,000
you can pay accordingly for what you've

1292
00:52:25,039 --> 00:52:27,920
used

1293
00:52:26,000 --> 00:52:30,559
resource utilization

1294
00:52:27,920 --> 00:52:33,039
can be optimized by leveraging

1295
00:52:30,559 --> 00:52:35,920
pay-per-use capabilities

1296
00:52:33,039 --> 00:52:37,679
and this means that cloud resource usage

1297
00:52:35,920 --> 00:52:38,720
whether they are instances that are

1298
00:52:37,679 --> 00:52:42,078
running

1299
00:52:38,719 --> 00:52:44,399
cloud storage or bandwidth it all gets

1300
00:52:42,079 --> 00:52:47,359
monitored measured and reported by the

1301
00:52:44,400 --> 00:52:48,559
cloud service provider the cost model is

1302
00:52:47,358 --> 00:52:51,838
based on

1303
00:52:48,559 --> 00:52:54,559
pay for what you use and so the payment

1304
00:52:51,838 --> 00:52:56,239
is based on the actual consumption

1305
00:52:54,559 --> 00:52:58,480
by the customer

1306
00:52:56,239 --> 00:53:00,479
so knowing these key characteristics of

1307
00:52:58,480 --> 00:53:01,599
cloud computing along with their

1308
00:53:00,480 --> 00:53:04,400
benefits

1309
00:53:01,599 --> 00:53:06,720
i personally find can really give you a

1310
00:53:04,400 --> 00:53:08,880
leg up on the exam

1311
00:53:06,719 --> 00:53:10,480
as well as speaking to others in your

1312
00:53:08,880 --> 00:53:12,960
day-to-day role

1313
00:53:10,480 --> 00:53:15,358
as more and more companies start moving

1314
00:53:12,960 --> 00:53:17,679
to cloud i hope this lesson has

1315
00:53:15,358 --> 00:53:20,719
explained to you on what is cloud

1316
00:53:17,679 --> 00:53:22,960
computing and the benefits it provides

1317
00:53:20,719 --> 00:53:24,719
so that's all i have for this lesson

1318
00:53:22,960 --> 00:53:27,039
so you can now mark this lesson as

1319
00:53:24,719 --> 00:53:29,838
complete and let's move on to the next

1320
00:53:27,039 --> 00:53:29,838
one

1321
00:53:31,599 --> 00:53:34,960
welcome back

1322
00:53:32,880 --> 00:53:37,760
in this lesson i wanted to go over the

1323
00:53:34,960 --> 00:53:40,000
four common cloud deployment models and

1324
00:53:37,760 --> 00:53:41,280
distinguish the differences between

1325
00:53:40,000 --> 00:53:42,639
public cloud

1326
00:53:41,280 --> 00:53:44,880
multi-cloud

1327
00:53:42,639 --> 00:53:46,558
private cloud and hybrid cloud

1328
00:53:44,880 --> 00:53:48,800
deployment models

1329
00:53:46,559 --> 00:53:50,720
this is a common subject that comes up a

1330
00:53:48,800 --> 00:53:52,880
fair amount in the exam

1331
00:53:50,719 --> 00:53:55,519
as well as a common theme in any

1332
00:53:52,880 --> 00:53:57,599
organization moving to cloud knowing the

1333
00:53:55,519 --> 00:54:00,400
distinctions between them can be

1334
00:53:57,599 --> 00:54:03,359
critical to the types of architecture

1335
00:54:00,400 --> 00:54:06,000
and services that you would use for the

1336
00:54:03,358 --> 00:54:08,719
specific scenario you are given

1337
00:54:06,000 --> 00:54:11,119
as well as being able to speak to the

1338
00:54:08,719 --> 00:54:13,679
different types of deployment models as

1339
00:54:11,119 --> 00:54:15,920
an engineer in the field getting back to

1340
00:54:13,679 --> 00:54:18,480
the deployment models let's start with

1341
00:54:15,920 --> 00:54:20,800
the public cloud model which we touched

1342
00:54:18,480 --> 00:54:23,440
on a bit in our last lesson

1343
00:54:20,800 --> 00:54:25,920
now the public cloud is defined as

1344
00:54:23,440 --> 00:54:27,838
computing services offered by

1345
00:54:25,920 --> 00:54:29,680
third-party providers

1346
00:54:27,838 --> 00:54:32,000
over the public internet

1347
00:54:29,679 --> 00:54:34,799
making them available to anyone who

1348
00:54:32,000 --> 00:54:37,838
wants to use or purchase them so this

1349
00:54:34,800 --> 00:54:41,200
means that google cloud will fall under

1350
00:54:37,838 --> 00:54:43,599
this category as a public cloud

1351
00:54:41,199 --> 00:54:47,358
there are also other vendors that fall

1352
00:54:43,599 --> 00:54:48,559
under this category such as aws and

1353
00:54:47,358 --> 00:54:51,519
azure

1354
00:54:48,559 --> 00:54:54,798
so again public cloud is a cloud that is

1355
00:54:51,519 --> 00:54:57,838
offered over the public internet

1356
00:54:54,798 --> 00:55:00,318
now public clouds can also be connected

1357
00:54:57,838 --> 00:55:03,599
and used together within a single

1358
00:55:00,318 --> 00:55:06,159
environment for various use cases

1359
00:55:03,599 --> 00:55:07,920
this cloud deployment model is called

1360
00:55:06,159 --> 00:55:10,960
multi-cloud

1361
00:55:07,920 --> 00:55:13,920
now a multi-cloud implementation can be

1362
00:55:10,960 --> 00:55:15,199
extremely effective if architected in

1363
00:55:13,920 --> 00:55:17,920
the right way

1364
00:55:15,199 --> 00:55:20,719
one implementation that is an effective

1365
00:55:17,920 --> 00:55:23,358
use of multi-cloud is when it is used

1366
00:55:20,719 --> 00:55:26,639
for disaster recovery this is where your

1367
00:55:23,358 --> 00:55:29,598
architecture would be replicated across

1368
00:55:26,639 --> 00:55:31,039
the different public clouds in case one

1369
00:55:29,599 --> 00:55:33,280
were to go down

1370
00:55:31,039 --> 00:55:35,599
another could pick up the slack what

1371
00:55:33,280 --> 00:55:36,798
drives many cases of a multi-cloud

1372
00:55:35,599 --> 00:55:39,680
deployment

1373
00:55:36,798 --> 00:55:41,920
is to prevent vendor lock-in where you

1374
00:55:39,679 --> 00:55:44,879
are locked into a particular cloud

1375
00:55:41,920 --> 00:55:47,358
provider's infrastructure and unable to

1376
00:55:44,880 --> 00:55:49,599
move due to the vendor-specific feature

1377
00:55:47,358 --> 00:55:52,159
set the main downfall to this type of

1378
00:55:49,599 --> 00:55:54,640
architecture is that the infrastructure

1379
00:55:52,159 --> 00:55:56,879
of the public cloud that you're using

1380
00:55:54,639 --> 00:55:59,358
cannot be fully utilized

1381
00:55:56,880 --> 00:56:02,318
as each cloud vendor has their own

1382
00:55:59,358 --> 00:56:05,119
proprietary resources that will only

1383
00:56:02,318 --> 00:56:06,239
work in their specific infrastructure in

1384
00:56:05,119 --> 00:56:08,880
other words

1385
00:56:06,239 --> 00:56:12,000
in order to replicate the environment it

1386
00:56:08,880 --> 00:56:14,798
needs to be the same within each cloud

1387
00:56:12,000 --> 00:56:17,358
this removes each cloud's unique

1388
00:56:14,798 --> 00:56:20,960
features which is what makes them so

1389
00:56:17,358 --> 00:56:23,838
special and the resources so compelling

1390
00:56:20,960 --> 00:56:27,358
so sometimes finding the right strategy

1391
00:56:23,838 --> 00:56:29,199
can be tricky depending on the scenario

1392
00:56:27,358 --> 00:56:32,159
now the next deployment model i wanted

1393
00:56:29,199 --> 00:56:34,960
to touch on is private cloud private

1394
00:56:32,159 --> 00:56:37,039
cloud refers to your architecture that

1395
00:56:34,960 --> 00:56:39,358
exists on premise

1396
00:56:37,039 --> 00:56:42,000
and restricted to the business itself

1397
00:56:39,358 --> 00:56:44,480
with no public access

1398
00:56:42,000 --> 00:56:47,280
yet it still carries the same five

1399
00:56:44,480 --> 00:56:50,079
characteristics that we discussed with

1400
00:56:47,280 --> 00:56:52,559
regards to what defines cloud each of

1401
00:56:50,079 --> 00:56:54,640
the major cloud providers shown here

1402
00:56:52,559 --> 00:56:57,519
all have their own flavor of private

1403
00:56:54,639 --> 00:57:00,239
cloud that can be implemented on site

1404
00:56:57,519 --> 00:57:01,519
google cloud has anthos

1405
00:57:00,239 --> 00:57:03,838
aws

1406
00:57:01,519 --> 00:57:06,880
has aws outposts

1407
00:57:03,838 --> 00:57:09,440
and azures is azure stack

1408
00:57:06,880 --> 00:57:12,318
they show the same characteristic

1409
00:57:09,440 --> 00:57:14,559
and leverage similar technologies that

1410
00:57:12,318 --> 00:57:18,000
can be found in the vendor's public

1411
00:57:14,559 --> 00:57:20,720
cloud yet can be installed on your own

1412
00:57:18,000 --> 00:57:21,599
on-premise infrastructure please be

1413
00:57:20,719 --> 00:57:24,639
aware

1414
00:57:21,599 --> 00:57:27,680
any organizations may have a vmware

1415
00:57:24,639 --> 00:57:30,078
implementation which holds cloud-like

1416
00:57:27,679 --> 00:57:31,759
features yet this is not considered a

1417
00:57:30,079 --> 00:57:34,240
private cloud

1418
00:57:31,760 --> 00:57:37,520
true private cloud will always meet the

1419
00:57:34,239 --> 00:57:40,479
characteristics that make up cloud now

1420
00:57:37,519 --> 00:57:41,838
it is possible to use private cloud with

1421
00:57:40,480 --> 00:57:44,559
public cloud

1422
00:57:41,838 --> 00:57:45,679
and this implementation is called hybrid

1423
00:57:44,559 --> 00:57:48,319
cloud

1424
00:57:45,679 --> 00:57:51,519
so hybrid cloud is when you are using

1425
00:57:48,318 --> 00:57:54,558
public cloud in conjunction with private

1426
00:57:51,519 --> 00:57:57,759
cloud as a single system a common

1427
00:57:54,559 --> 00:58:00,960
architecture used is due to compliance

1428
00:57:57,760 --> 00:58:03,520
where one cloud could help organizations

1429
00:58:00,960 --> 00:58:05,838
achieve specific governance

1430
00:58:03,519 --> 00:58:08,639
risk management and compliance

1431
00:58:05,838 --> 00:58:10,239
regulations while the other cloud could

1432
00:58:08,639 --> 00:58:12,239
take over the rest

1433
00:58:10,239 --> 00:58:13,598
now i'd really like to make an important

1434
00:58:12,239 --> 00:58:16,318
distinction here

1435
00:58:13,599 --> 00:58:19,200
if your on-premise infrastructure is

1436
00:58:16,318 --> 00:58:22,000
connected to public cloud this is not

1437
00:58:19,199 --> 00:58:25,919
considered hybrid cloud this is what's

1438
00:58:22,000 --> 00:58:28,239
known as hybrid environment or a hybrid

1439
00:58:25,920 --> 00:58:31,039
network as the on-premises

1440
00:58:28,239 --> 00:58:34,558
infrastructure holds no private cloud

1441
00:58:31,039 --> 00:58:37,519
characteristics true hybrid cloud allows

1442
00:58:34,559 --> 00:58:40,160
you to use the exact same interface and

1443
00:58:37,519 --> 00:58:42,719
tooling as what's available in the

1444
00:58:40,159 --> 00:58:45,920
public cloud so being aware of this can

1445
00:58:42,719 --> 00:58:47,519
avoid a lot of confusion down the road

1446
00:58:45,920 --> 00:58:50,559
so to sum up everything that we

1447
00:58:47,519 --> 00:58:53,519
discussed when it comes to public cloud

1448
00:58:50,559 --> 00:58:56,480
this is when one cloud provided by one

1449
00:58:53,519 --> 00:58:57,440
vendor that is available over the public

1450
00:58:56,480 --> 00:59:01,199
internet

1451
00:58:57,440 --> 00:59:03,838
multi-cloud is two or more public clouds

1452
00:59:01,199 --> 00:59:07,199
that are connected together to be used

1453
00:59:03,838 --> 00:59:10,480
as a single system a private cloud

1454
00:59:07,199 --> 00:59:12,639
is considered an on-premises cloud that

1455
00:59:10,480 --> 00:59:13,679
follows the five characteristics of

1456
00:59:12,639 --> 00:59:16,000
cloud

1457
00:59:13,679 --> 00:59:19,358
and is restricted to the one

1458
00:59:16,000 --> 00:59:22,880
organization with no accessibility to

1459
00:59:19,358 --> 00:59:25,519
the public and finally hybrid cloud

1460
00:59:22,880 --> 00:59:26,400
is private cloud connected to a public

1461
00:59:25,519 --> 00:59:29,519
cloud

1462
00:59:26,400 --> 00:59:31,280
and being used as a single environment

1463
00:59:29,519 --> 00:59:33,838
again as a note

1464
00:59:31,280 --> 00:59:36,798
on-premises architecture connected to

1465
00:59:33,838 --> 00:59:40,239
public cloud is considered a hybrid

1466
00:59:36,798 --> 00:59:42,480
environment and not hybrid cloud

1467
00:59:40,239 --> 00:59:44,558
the distinction between the two

1468
00:59:42,480 --> 00:59:47,358
are very different and should be

1469
00:59:44,559 --> 00:59:49,280
observed carefully as gotchas may come

1470
00:59:47,358 --> 00:59:52,000
up in both the exam

1471
00:59:49,280 --> 00:59:53,839
and in your role as an engineer so these

1472
00:59:52,000 --> 00:59:56,639
are all the different cloud deployment

1473
00:59:53,838 --> 00:59:59,279
models which will help you distinguish

1474
00:59:56,639 --> 01:00:02,159
on what type of architecture you will be

1475
00:59:59,280 --> 01:00:04,000
using in any scenario that you are given

1476
01:00:02,159 --> 01:00:06,960
and so this is all i wanted to cover

1477
01:00:04,000 --> 01:00:08,639
when it comes to cloud deployment models

1478
01:00:06,960 --> 01:00:09,599
so you can now mark this lesson as

1479
01:00:08,639 --> 01:00:13,960
complete

1480
01:00:09,599 --> 01:00:13,960
and let's move on to the next one

1481
01:00:15,679 --> 01:00:19,759
welcome back

1482
01:00:16,960 --> 01:00:22,318
so to finish up the nist definition of

1483
01:00:19,760 --> 01:00:25,119
cloud computing i wanted to touch on

1484
01:00:22,318 --> 01:00:27,440
cloud service models which is commonly

1485
01:00:25,119 --> 01:00:31,039
referred to as zas

1486
01:00:27,440 --> 01:00:32,639
now this model is usually called zas or

1487
01:00:31,039 --> 01:00:35,440
xaas

1488
01:00:32,639 --> 01:00:38,318
standing for anything as a service it

1489
01:00:35,440 --> 01:00:41,358
includes all the services in a cloud

1490
01:00:38,318 --> 01:00:44,400
that customers can consume and x can be

1491
01:00:41,358 --> 01:00:45,358
changed to associate with the specific

1492
01:00:44,400 --> 01:00:47,200
service

1493
01:00:45,358 --> 01:00:50,000
so in order to describe the cloud

1494
01:00:47,199 --> 01:00:52,798
service models i needed to touch on some

1495
01:00:50,000 --> 01:00:54,719
concepts that you may or may not be

1496
01:00:52,798 --> 01:00:56,880
familiar with this will make

1497
01:00:54,719 --> 01:00:58,879
understanding the service models a

1498
01:00:56,880 --> 01:01:01,440
little bit easier as i go through the

1499
01:00:58,880 --> 01:01:03,680
course and describe the services

1500
01:01:01,440 --> 01:01:05,838
available and how they relate to the

1501
01:01:03,679 --> 01:01:07,279
model this lesson will make so much

1502
01:01:05,838 --> 01:01:09,759
sense by the end

1503
01:01:07,280 --> 01:01:12,640
it'll make the services in cloud easier

1504
01:01:09,760 --> 01:01:14,319
to both describe and define

1505
01:01:12,639 --> 01:01:16,798
now when it comes to deploying an

1506
01:01:14,318 --> 01:01:18,719
application they are deployed in an

1507
01:01:16,798 --> 01:01:20,880
infrastructure stack

1508
01:01:18,719 --> 01:01:23,679
like the one you see here

1509
01:01:20,880 --> 01:01:26,000
now a stack is a collection of needed

1510
01:01:23,679 --> 01:01:29,199
infrastructure that the application

1511
01:01:26,000 --> 01:01:31,760
needs to run on it is layered and each

1512
01:01:29,199 --> 01:01:34,558
layer builds on top of the one previous

1513
01:01:31,760 --> 01:01:37,359
to it to create what it is that you see

1514
01:01:34,559 --> 01:01:40,400
here now as you can see at the top this

1515
01:01:37,358 --> 01:01:42,960
is a traditional on-premises

1516
01:01:40,400 --> 01:01:45,760
infrastructure stack that was typically

1517
01:01:42,960 --> 01:01:46,639
used pre-cloud now in this traditional

1518
01:01:45,760 --> 01:01:48,880
model

1519
01:01:46,639 --> 01:01:50,960
all the components are managed by the

1520
01:01:48,880 --> 01:01:53,680
customer the purchasing of the data

1521
01:01:50,960 --> 01:01:56,559
center and all the network and storage

1522
01:01:53,679 --> 01:01:59,279
involved the physical servers the

1523
01:01:56,559 --> 01:02:01,519
virtualization the licensing for the

1524
01:01:59,280 --> 01:02:03,440
operating systems the staff that's

1525
01:02:01,519 --> 01:02:06,798
needed to put it all together

1526
01:02:03,440 --> 01:02:08,639
including racking stacking cabling

1527
01:02:06,798 --> 01:02:10,239
physical security was also something

1528
01:02:08,639 --> 01:02:12,960
that needed to be taken into

1529
01:02:10,239 --> 01:02:15,679
consideration in other words for the

1530
01:02:12,960 --> 01:02:18,000
organization to put this together by

1531
01:02:15,679 --> 01:02:18,960
themselves they were looking at huge

1532
01:02:18,000 --> 01:02:21,199
costs

1533
01:02:18,960 --> 01:02:24,079
now the advantages to this is that it

1534
01:02:21,199 --> 01:02:27,118
allowed for major flexibility as the

1535
01:02:24,079 --> 01:02:30,318
organization is able to tune this any

1536
01:02:27,119 --> 01:02:32,000
way they want to satisfy the application

1537
01:02:30,318 --> 01:02:34,400
compliance standards

1538
01:02:32,000 --> 01:02:36,239
basically anything that they wanted now

1539
01:02:34,400 --> 01:02:37,920
when talking about the cloud service

1540
01:02:36,239 --> 01:02:40,639
model concepts

1541
01:02:37,920 --> 01:02:42,880
parts are always managed by you and

1542
01:02:40,639 --> 01:02:45,118
parts are managed by the vendor now

1543
01:02:42,880 --> 01:02:47,920
another concept i wanted to touch on is

1544
01:02:45,119 --> 01:02:50,318
that unit of consumption is how the

1545
01:02:47,920 --> 01:02:52,720
vendor prices what they are serving to

1546
01:02:50,318 --> 01:02:55,119
their customer now just before cloud

1547
01:02:52,719 --> 01:02:58,078
became big in the market there was a

1548
01:02:55,119 --> 01:03:00,480
model where the data center was hosted

1549
01:02:58,079 --> 01:03:02,400
for you so a vendor would come along and

1550
01:03:00,480 --> 01:03:04,240
they would take care of everything with

1551
01:03:02,400 --> 01:03:05,440
regards to the data center

1552
01:03:04,239 --> 01:03:07,838
the racks

1553
01:03:05,440 --> 01:03:09,039
the power to the racks the air

1554
01:03:07,838 --> 01:03:10,639
conditioning

1555
01:03:09,039 --> 01:03:13,599
the networking cables out of the

1556
01:03:10,639 --> 01:03:16,318
building and even the physical security

1557
01:03:13,599 --> 01:03:18,880
and so the unit of consumption here was

1558
01:03:16,318 --> 01:03:20,719
the rack space within the data center so

1559
01:03:18,880 --> 01:03:23,599
the vendor would charge you for the rack

1560
01:03:20,719 --> 01:03:25,919
space and in turn they would take care

1561
01:03:23,599 --> 01:03:28,640
of all the necessities within the data

1562
01:03:25,920 --> 01:03:31,280
center now this is less flexible than

1563
01:03:28,639 --> 01:03:34,318
the traditional on-premises model but

1564
01:03:31,280 --> 01:03:36,240
the data center is abstracted for you so

1565
01:03:34,318 --> 01:03:38,558
throughout this lesson i wanted to

1566
01:03:36,239 --> 01:03:41,279
introduce a concept that might make

1567
01:03:38,559 --> 01:03:43,599
things easier to grasp which is the

1568
01:03:41,280 --> 01:03:45,920
pizza as a service so now the

1569
01:03:43,599 --> 01:03:48,000
traditional on-premises model

1570
01:03:45,920 --> 01:03:49,920
is where you would buy everything and

1571
01:03:48,000 --> 01:03:52,000
make the pizza at home

1572
01:03:49,920 --> 01:03:54,480
now as we go on in the lesson

1573
01:03:52,000 --> 01:03:57,280
less flexibility will be available

1574
01:03:54,480 --> 01:03:59,280
because more layers will be abstracted

1575
01:03:57,280 --> 01:04:02,079
so the next service model that i wanted

1576
01:03:59,280 --> 01:04:03,039
to introduce is infrastructure as a

1577
01:04:02,079 --> 01:04:06,079
service

1578
01:04:03,039 --> 01:04:08,319
or i as for short this is where all the

1579
01:04:06,079 --> 01:04:11,359
layers from the data center up to

1580
01:04:08,318 --> 01:04:14,000
virtualization is taken care of by the

1581
01:04:11,358 --> 01:04:16,000
vendor this is the most basic model

1582
01:04:14,000 --> 01:04:18,960
which is essentially your virtual

1583
01:04:16,000 --> 01:04:21,199
machines in a cloud data center

1584
01:04:18,960 --> 01:04:23,599
you set up configure

1585
01:04:21,199 --> 01:04:26,159
and manage instances that run in the

1586
01:04:23,599 --> 01:04:28,000
data center infrastructure and you put

1587
01:04:26,159 --> 01:04:30,399
whatever you want on them on google

1588
01:04:28,000 --> 01:04:33,199
cloud google compute engine would

1589
01:04:30,400 --> 01:04:35,680
satisfy this model and so the unit of

1590
01:04:33,199 --> 01:04:38,399
consumption here would be the operating

1591
01:04:35,679 --> 01:04:40,960
system as you would manage all the

1592
01:04:38,400 --> 01:04:43,680
operating system updates and everything

1593
01:04:40,960 --> 01:04:45,838
that you decide to put on that instance

1594
01:04:43,679 --> 01:04:48,558
but as you can see here you are still

1595
01:04:45,838 --> 01:04:51,920
responsible for the container the run

1596
01:04:48,559 --> 01:04:53,920
time the data and the application layers

1597
01:04:51,920 --> 01:04:57,039
now bringing up the pizza as a service

1598
01:04:53,920 --> 01:04:59,920
model is would be you picking up the

1599
01:04:57,039 --> 01:05:03,280
pizza and you cooking it at home moving

1600
01:04:59,920 --> 01:05:05,680
on to platform as a service or paz for

1601
01:05:03,280 --> 01:05:08,400
short this is a model that is geared

1602
01:05:05,679 --> 01:05:11,038
more towards developers and with pass

1603
01:05:08,400 --> 01:05:13,039
the cloud provider provides a computing

1604
01:05:11,039 --> 01:05:15,440
platform typically

1605
01:05:13,039 --> 01:05:17,440
including the operating system the

1606
01:05:15,440 --> 01:05:20,639
programming language execution

1607
01:05:17,440 --> 01:05:23,280
environment the database and the web

1608
01:05:20,639 --> 01:05:25,519
server now typically with pass you never

1609
01:05:23,280 --> 01:05:28,079
have to worry about the operating system

1610
01:05:25,519 --> 01:05:29,920
updates or managing the runtime and

1611
01:05:28,079 --> 01:05:32,400
middleware and so the unit of

1612
01:05:29,920 --> 01:05:34,798
consumption here would be the runtime

1613
01:05:32,400 --> 01:05:36,880
now the runtime layer would be the layer

1614
01:05:34,798 --> 01:05:38,798
you would consume as you would be

1615
01:05:36,880 --> 01:05:41,119
running your code in the supplied

1616
01:05:38,798 --> 01:05:43,599
runtime environment that the cloud

1617
01:05:41,119 --> 01:05:46,160
vendor provides for you the provider

1618
01:05:43,599 --> 01:05:48,400
manages the hardware and software

1619
01:05:46,159 --> 01:05:51,358
infrastructure and you just use the

1620
01:05:48,400 --> 01:05:54,318
service this is usually the layer on top

1621
01:05:51,358 --> 01:05:57,838
of is and so all the layers between the

1622
01:05:54,318 --> 01:06:00,480
data center and runtime is taken care of

1623
01:05:57,838 --> 01:06:03,358
by the vendor a great example of this

1624
01:06:00,480 --> 01:06:05,599
for google cloud is google app engine

1625
01:06:03,358 --> 01:06:08,000
which we will be diving into a little

1626
01:06:05,599 --> 01:06:09,280
bit later getting back to the pizza as a

1627
01:06:08,000 --> 01:06:11,679
service model

1628
01:06:09,280 --> 01:06:13,599
pass would fall under the pizza being

1629
01:06:11,679 --> 01:06:16,159
delivered right to your door

1630
01:06:13,599 --> 01:06:19,760
now with the past model explained i want

1631
01:06:16,159 --> 01:06:22,239
to move into the last model which is sas

1632
01:06:19,760 --> 01:06:24,799
which stands for software as a service

1633
01:06:22,239 --> 01:06:27,358
now with sas all the layers are taken

1634
01:06:24,798 --> 01:06:30,318
care of by the vendor so users are

1635
01:06:27,358 --> 01:06:32,159
provided access to application software

1636
01:06:30,318 --> 01:06:34,719
and cloud providers manage the

1637
01:06:32,159 --> 01:06:37,920
infrastructure and platforms that run

1638
01:06:34,719 --> 01:06:41,199
the applications g suite and microsoft's

1639
01:06:37,920 --> 01:06:43,519
office 365 are great examples of this

1640
01:06:41,199 --> 01:06:46,159
model now sas doesn't offer much

1641
01:06:43,519 --> 01:06:48,318
flexibility but the trade-off is that

1642
01:06:46,159 --> 01:06:50,719
the vendor actually takes care of all

1643
01:06:48,318 --> 01:06:53,119
these layers so again the unit of

1644
01:06:50,719 --> 01:06:55,759
consumption here is the application

1645
01:06:53,119 --> 01:06:58,640
itself and of course getting to the

1646
01:06:55,760 --> 01:07:01,039
pizza as a service model sas

1647
01:06:58,639 --> 01:07:03,838
is pretty much dining in the restaurant

1648
01:07:01,039 --> 01:07:06,559
enjoying your pizza now to summarize

1649
01:07:03,838 --> 01:07:08,318
when you have a data center on site you

1650
01:07:06,559 --> 01:07:10,720
manage everything

1651
01:07:08,318 --> 01:07:13,759
when it's infrastructure as a service

1652
01:07:10,719 --> 01:07:16,719
part of that stack is abstracted by the

1653
01:07:13,760 --> 01:07:19,200
cloud vendor with platform as a service

1654
01:07:16,719 --> 01:07:20,399
you're responsible for the application

1655
01:07:19,199 --> 01:07:22,558
and data

1656
01:07:20,400 --> 01:07:25,680
everything else is abstracted by the

1657
01:07:22,559 --> 01:07:28,559
vendor with software as a service again

1658
01:07:25,679 --> 01:07:30,960
using the pizza as a service analogy on

1659
01:07:28,559 --> 01:07:33,200
premise you buy everything and you make

1660
01:07:30,960 --> 01:07:34,240
the pizza at home infrastructure as a

1661
01:07:33,199 --> 01:07:36,480
service

1662
01:07:34,239 --> 01:07:38,479
you pick up the pizza and you cook it at

1663
01:07:36,480 --> 01:07:41,280
home when it comes to platform as a

1664
01:07:38,480 --> 01:07:43,760
service the pizza is delivered

1665
01:07:41,280 --> 01:07:46,000
and of course software as a service is

1666
01:07:43,760 --> 01:07:48,000
dining in the restaurant now there will

1667
01:07:46,000 --> 01:07:50,639
be some other service models coming up

1668
01:07:48,000 --> 01:07:53,679
in this course such as function as a

1669
01:07:50,639 --> 01:07:55,759
service and containers as a service and

1670
01:07:53,679 --> 01:07:57,759
don't worry i'll be getting into those

1671
01:07:55,760 --> 01:08:00,400
later but i just wanted to give you a

1672
01:07:57,760 --> 01:08:02,480
heads up so now for some of you this may

1673
01:08:00,400 --> 01:08:04,480
have been a lot of information to take

1674
01:08:02,480 --> 01:08:06,880
in but trust me

1675
01:08:04,480 --> 01:08:09,280
knowing these models will give you a

1676
01:08:06,880 --> 01:08:12,160
better understanding of the services

1677
01:08:09,280 --> 01:08:14,000
provided in google cloud as well as any

1678
01:08:12,159 --> 01:08:16,238
other cloud vendor so that's all i

1679
01:08:14,000 --> 01:08:18,640
wanted to cover in this lesson so you

1680
01:08:16,238 --> 01:08:22,838
can now mark this lesson as complete and

1681
01:08:18,640 --> 01:08:22,838
let's move on to the next one

1682
01:08:24,560 --> 01:08:29,600
welcome back in this lesson i wanted to

1683
01:08:27,439 --> 01:08:31,759
discuss google cloud global

1684
01:08:29,600 --> 01:08:34,319
infrastructure how data centers are

1685
01:08:31,759 --> 01:08:35,838
connected how traffic flows when a

1686
01:08:34,319 --> 01:08:38,640
request is done

1687
01:08:35,838 --> 01:08:41,600
along with the overall structure of how

1688
01:08:38,640 --> 01:08:44,319
google cloud geographic locations are

1689
01:08:41,600 --> 01:08:47,359
divided for better availability

1690
01:08:44,319 --> 01:08:50,000
durability and latency

1691
01:08:47,359 --> 01:08:52,719
now google holds a highly provisioned

1692
01:08:50,000 --> 01:08:55,600
low latency network where your traffic

1693
01:08:52,719 --> 01:08:58,158
stays on google's private backbone for

1694
01:08:55,600 --> 01:09:01,039
most of its journey ensuring high

1695
01:08:58,158 --> 01:09:03,759
performance and a user experience that

1696
01:09:01,039 --> 01:09:06,399
is always above the norm google cloud

1697
01:09:03,759 --> 01:09:08,640
has been designed to serve users all

1698
01:09:06,399 --> 01:09:11,198
around the world by designing their

1699
01:09:08,640 --> 01:09:14,159
infrastructure with redundant cloud

1700
01:09:11,198 --> 01:09:17,599
regions connected with high bandwidth

1701
01:09:14,158 --> 01:09:19,679
fiber cables as well as subsea cables

1702
01:09:17,600 --> 01:09:22,719
connecting different continents

1703
01:09:19,679 --> 01:09:25,119
currently google has invested in 13

1704
01:09:22,719 --> 01:09:28,158
subsea cables connecting these

1705
01:09:25,119 --> 01:09:30,640
continents at points of presence as you

1706
01:09:28,158 --> 01:09:33,759
see here in this diagram hundreds of

1707
01:09:30,640 --> 01:09:36,159
thousands of miles of fiber cables have

1708
01:09:33,759 --> 01:09:39,198
also been laid to connect points of

1709
01:09:36,158 --> 01:09:42,238
presence for direct connectivity

1710
01:09:39,198 --> 01:09:44,719
privacy and reduced latency

1711
01:09:42,238 --> 01:09:47,759
just to give you an idea of what a

1712
01:09:44,719 --> 01:09:50,480
subsea cable run might look like i have

1713
01:09:47,759 --> 01:09:53,439
included a diagram of how dedicated

1714
01:09:50,479 --> 01:09:55,599
google is to their customers as there is

1715
01:09:53,439 --> 01:09:58,399
so much that goes into running these

1716
01:09:55,600 --> 01:10:00,960
cables that connect continents as you

1717
01:09:58,399 --> 01:10:03,920
can see here this is the north virginia

1718
01:10:00,960 --> 01:10:07,359
region being connected to the belgium

1719
01:10:03,920 --> 01:10:09,760
region from the u.s over to europe a

1720
01:10:07,359 --> 01:10:12,639
cable is run from the north virginia

1721
01:10:09,760 --> 01:10:14,239
data center as well as having a point of

1722
01:10:12,640 --> 01:10:16,719
presence in place

1723
01:10:14,238 --> 01:10:19,359
going through a landing station before

1724
01:10:16,719 --> 01:10:22,079
going deep into the sea on the other

1725
01:10:19,359 --> 01:10:23,279
side the landing station on the french

1726
01:10:22,079 --> 01:10:25,920
west coast

1727
01:10:23,279 --> 01:10:28,238
picks up the other side of the cable and

1728
01:10:25,920 --> 01:10:30,960
brings it over to the data center in the

1729
01:10:28,238 --> 01:10:33,439
belgium region and this is a typical

1730
01:10:30,960 --> 01:10:35,920
subsea cable run for google so

1731
01:10:33,439 --> 01:10:37,919
continents are connected for maximum

1732
01:10:35,920 --> 01:10:40,719
global connectivity

1733
01:10:37,920 --> 01:10:44,719
now at the time of recording this video

1734
01:10:40,719 --> 01:10:47,960
google cloud footprint spans 24 regions

1735
01:10:44,719 --> 01:10:52,079
73 zones and over

1736
01:10:47,960 --> 01:10:55,920
144 points of presence across more than

1737
01:10:52,079 --> 01:10:58,238
200 countries and territories worldwide

1738
01:10:55,920 --> 01:11:00,399
and as you can see here the white dots

1739
01:10:58,238 --> 01:11:02,959
on the map are regions that are

1740
01:11:00,399 --> 01:11:06,079
currently being built to expand their

1741
01:11:02,960 --> 01:11:08,399
network for wider connectivity now to

1742
01:11:06,079 --> 01:11:10,559
show you how a request is routed through

1743
01:11:08,399 --> 01:11:14,000
google's network i thought i would

1744
01:11:10,560 --> 01:11:17,280
demonstrate this by using tony bowtie

1745
01:11:14,000 --> 01:11:20,158
now tony makes a request to his database

1746
01:11:17,279 --> 01:11:21,599
in google cloud and google responds to

1747
01:11:20,158 --> 01:11:25,039
tony's request

1748
01:11:21,600 --> 01:11:27,600
from a pop or edge network location that

1749
01:11:25,039 --> 01:11:30,560
will provide the lowest latency this

1750
01:11:27,600 --> 01:11:33,120
point of presence is where isps can

1751
01:11:30,560 --> 01:11:36,320
connect to google's network google's

1752
01:11:33,119 --> 01:11:38,559
edge network receives tony's request and

1753
01:11:36,319 --> 01:11:41,439
passes it to the nearest google data

1754
01:11:38,560 --> 01:11:44,159
center over its private fiber network

1755
01:11:41,439 --> 01:11:46,479
the data center generates a response

1756
01:11:44,158 --> 01:11:49,119
that's optimized to provide the best

1757
01:11:46,479 --> 01:11:51,759
experience for tony at that given moment

1758
01:11:49,119 --> 01:11:54,800
in time the app or browser that tony is

1759
01:11:51,760 --> 01:11:57,920
using retrieves the requested content

1760
01:11:54,800 --> 01:12:00,640
with a response back from various google

1761
01:11:57,920 --> 01:12:03,760
locations including the google data

1762
01:12:00,640 --> 01:12:05,920
centers edge pops and edge nodes

1763
01:12:03,760 --> 01:12:08,880
whichever is providing the lowest

1764
01:12:05,920 --> 01:12:11,359
latency this data path happens in a

1765
01:12:08,880 --> 01:12:13,679
matter of seconds and due to google's

1766
01:12:11,359 --> 01:12:16,238
global infrastructure it travels

1767
01:12:13,679 --> 01:12:17,920
securely and with the least amount of

1768
01:12:16,238 --> 01:12:20,559
latency possible

1769
01:12:17,920 --> 01:12:22,719
no matter the geographic location that

1770
01:12:20,560 --> 01:12:24,800
the request is coming from

1771
01:12:22,719 --> 01:12:28,158
now i wanted to take a moment to break

1772
01:12:24,800 --> 01:12:31,199
down how the geographic areas are broken

1773
01:12:28,158 --> 01:12:33,359
out and organized in google cloud

1774
01:12:31,198 --> 01:12:36,079
we start off with the geographic

1775
01:12:33,359 --> 01:12:38,719
location such as the united states of

1776
01:12:36,079 --> 01:12:41,760
america and it's broken down into

1777
01:12:38,719 --> 01:12:44,480
multi-region into regions and finally

1778
01:12:41,760 --> 01:12:47,360
zones and so to start off with i wanted

1779
01:12:44,479 --> 01:12:49,599
to talk about zones now a zone is a

1780
01:12:47,359 --> 01:12:52,880
deployment area for google cloud

1781
01:12:49,600 --> 01:12:55,199
resources within a region a zone is the

1782
01:12:52,880 --> 01:12:57,520
smallest entity in google's global

1783
01:12:55,198 --> 01:13:00,479
network you can think of it as a single

1784
01:12:57,520 --> 01:13:03,440
failure domain within a region now as a

1785
01:13:00,479 --> 01:13:04,399
best practice resources should always be

1786
01:13:03,439 --> 01:13:07,279
deployed

1787
01:13:04,399 --> 01:13:09,439
in zones that are closest to your users

1788
01:13:07,279 --> 01:13:12,399
for optimal latency

1789
01:13:09,439 --> 01:13:15,519
now next up we have a region

1790
01:13:12,399 --> 01:13:18,960
and regions are independent geographic

1791
01:13:15,520 --> 01:13:20,800
areas that are subdivided into zones so

1792
01:13:18,960 --> 01:13:23,600
you can think of a region as a

1793
01:13:20,800 --> 01:13:26,560
collection of zones and having a region

1794
01:13:23,600 --> 01:13:29,360
with multiple zones is designed for

1795
01:13:26,560 --> 01:13:32,000
fault tolerance and high availability

1796
01:13:29,359 --> 01:13:34,319
the intercommunication between zones

1797
01:13:32,000 --> 01:13:37,279
within a region is under five

1798
01:13:34,319 --> 01:13:40,238
milliseconds so rest assured that your

1799
01:13:37,279 --> 01:13:41,599
data is always traveling at optimal

1800
01:13:40,238 --> 01:13:44,879
speeds

1801
01:13:41,600 --> 01:13:47,840
now moving on into a multi-region

1802
01:13:44,880 --> 01:13:51,199
now multi-regions are large geographic

1803
01:13:47,840 --> 01:13:53,679
areas that contain two or more regions

1804
01:13:51,198 --> 01:13:57,198
and this allows google services to

1805
01:13:53,679 --> 01:13:59,679
maximize redundancy and distribution

1806
01:13:57,198 --> 01:14:02,158
within and across regions

1807
01:13:59,679 --> 01:14:04,719
and this is for google redundancy or

1808
01:14:02,158 --> 01:14:07,439
high availability having your data

1809
01:14:04,719 --> 01:14:10,158
spread across multiple regions

1810
01:14:07,439 --> 01:14:12,238
always reassures that your data is

1811
01:14:10,158 --> 01:14:14,960
constantly available

1812
01:14:12,238 --> 01:14:17,439
and so that covers all the concepts that

1813
01:14:14,960 --> 01:14:20,239
i wanted to go over when it comes to

1814
01:14:17,439 --> 01:14:21,359
geography and regions within google

1815
01:14:20,238 --> 01:14:23,839
cloud

1816
01:14:21,359 --> 01:14:26,880
note that the geography and regions

1817
01:14:23,840 --> 01:14:30,319
concepts are fundamental not only for

1818
01:14:26,880 --> 01:14:31,920
the exam but for your day-to-day role in

1819
01:14:30,319 --> 01:14:34,719
google cloud

1820
01:14:31,920 --> 01:14:37,039
so just as a recap a zone is a

1821
01:14:34,719 --> 01:14:40,239
deployment area for google cloud

1822
01:14:37,039 --> 01:14:42,800
resources within a region a zone is the

1823
01:14:40,238 --> 01:14:45,678
smallest entity of google's global

1824
01:14:42,800 --> 01:14:48,400
infrastructure now a region is an

1825
01:14:45,679 --> 01:14:51,760
independent geographic area that are

1826
01:14:48,399 --> 01:14:53,759
subdivided into zones and finally when

1827
01:14:51,760 --> 01:14:57,199
it comes to multi-region

1828
01:14:53,760 --> 01:15:00,239
multi-regions are large geographic areas

1829
01:14:57,198 --> 01:15:01,119
that contains two or more regions

1830
01:15:00,238 --> 01:15:03,599
again

1831
01:15:01,119 --> 01:15:06,640
these are all fundamental concepts that

1832
01:15:03,600 --> 01:15:09,520
you should know for the exam and for

1833
01:15:06,640 --> 01:15:12,400
your day-to-day role in google cloud and

1834
01:15:09,520 --> 01:15:14,960
so that's all i had for this lesson so

1835
01:15:12,399 --> 01:15:17,239
you can now mark this lesson as complete

1836
01:15:14,960 --> 01:15:21,198
and let's move on to the next one

1837
01:15:17,239 --> 01:15:22,479
[Music]

1838
01:15:21,198 --> 01:15:24,960
welcome back

1839
01:15:22,479 --> 01:15:27,599
this lesson is going to be an overview

1840
01:15:24,960 --> 01:15:29,920
of all the compute service options that

1841
01:15:27,600 --> 01:15:31,840
are available in google cloud

1842
01:15:29,920 --> 01:15:33,760
how they differ from each other

1843
01:15:31,840 --> 01:15:36,239
and where they fall under the cloud

1844
01:15:33,760 --> 01:15:39,199
service model again this lesson is just

1845
01:15:36,238 --> 01:15:41,919
an overview of the compute options as we

1846
01:15:39,198 --> 01:15:42,799
will be diving deeper into each compute

1847
01:15:41,920 --> 01:15:45,600
option

1848
01:15:42,800 --> 01:15:47,840
later on in this course so google cloud

1849
01:15:45,600 --> 01:15:50,400
gives you so many options when it comes

1850
01:15:47,840 --> 01:15:53,039
to compute services ones that offer

1851
01:15:50,399 --> 01:15:55,839
complete control and flexibility others

1852
01:15:53,039 --> 01:15:58,158
that offer flexible container technology

1853
01:15:55,840 --> 01:16:00,640
managed application platform and

1854
01:15:58,158 --> 01:16:03,198
serverless environments and so when we

1855
01:16:00,640 --> 01:16:05,199
take all of these compute options and we

1856
01:16:03,198 --> 01:16:07,198
look at it from a service model

1857
01:16:05,198 --> 01:16:09,839
perspective you can see that there's so

1858
01:16:07,198 --> 01:16:12,479
much flexibility starting here on the

1859
01:16:09,840 --> 01:16:15,279
left with infrastructure as a service

1860
01:16:12,479 --> 01:16:17,519
giving you the most optimal flexibility

1861
01:16:15,279 --> 01:16:20,079
moving all the way over to the right

1862
01:16:17,520 --> 01:16:23,040
where we have function as a service

1863
01:16:20,079 --> 01:16:25,439
offering less flexibility but the upside

1864
01:16:23,039 --> 01:16:27,119
being less that you have to manage and

1865
01:16:25,439 --> 01:16:30,000
we'll be going through these compute

1866
01:16:27,119 --> 01:16:32,399
options starting on the left here with

1867
01:16:30,000 --> 01:16:35,119
infrastructure as a service we have

1868
01:16:32,399 --> 01:16:37,519
compute engine now compute engine is

1869
01:16:35,119 --> 01:16:39,599
google's staple infrastructure the

1870
01:16:37,520 --> 01:16:43,280
service product that offers virtual

1871
01:16:39,600 --> 01:16:46,159
machines or vms called instances these

1872
01:16:43,279 --> 01:16:48,559
instances can be deployed in any region

1873
01:16:46,158 --> 01:16:50,960
or zone that you choose you also have

1874
01:16:48,560 --> 01:16:53,199
the option of deciding what operating

1875
01:16:50,960 --> 01:16:55,359
system you want on it as well as the

1876
01:16:53,198 --> 01:16:57,759
software so you have the option of

1877
01:16:55,359 --> 01:17:00,238
installing different types of flavors of

1878
01:16:57,760 --> 01:17:02,079
linux or windows and the software to go

1879
01:17:00,238 --> 01:17:04,559
with it google also gives you the

1880
01:17:02,079 --> 01:17:07,359
options of creating these instances

1881
01:17:04,560 --> 01:17:09,760
using public or private images

1882
01:17:07,359 --> 01:17:12,319
so if you or your company have a private

1883
01:17:09,760 --> 01:17:14,800
image that you'd like to use you can use

1884
01:17:12,319 --> 01:17:17,039
this to create your instances google

1885
01:17:14,800 --> 01:17:19,279
also gives you the option to use public

1886
01:17:17,039 --> 01:17:21,840
images to create instances and are

1887
01:17:19,279 --> 01:17:24,319
available when you launch compute engine

1888
01:17:21,840 --> 01:17:27,039
as well there are also pre-configured

1889
01:17:24,319 --> 01:17:29,599
images and software packages available

1890
01:17:27,039 --> 01:17:31,679
in the google cloud marketplace and we

1891
01:17:29,600 --> 01:17:34,079
will be diving a little bit deeper into

1892
01:17:31,679 --> 01:17:36,960
the google cloud marketplace in another

1893
01:17:34,079 --> 01:17:39,439
lesson just know that there are slew of

1894
01:17:36,960 --> 01:17:42,319
images out there that's available to

1895
01:17:39,439 --> 01:17:44,799
create instances giving you the ease to

1896
01:17:42,319 --> 01:17:46,799
deploy now when it comes to compute

1897
01:17:44,800 --> 01:17:49,600
engine and you're managing multiple

1898
01:17:46,800 --> 01:17:50,480
instances these are done using instance

1899
01:17:49,600 --> 01:17:52,000
groups

1900
01:17:50,479 --> 01:17:54,559
and when you're looking at adding or

1901
01:17:52,000 --> 01:17:57,359
removing capacity for those compute

1902
01:17:54,560 --> 01:17:59,600
engine instances automatically you would

1903
01:17:57,359 --> 01:18:01,839
use auto scaling in conjunction with

1904
01:17:59,600 --> 01:18:04,320
those instance groups compute engine

1905
01:18:01,840 --> 01:18:07,440
also gives you the option of attaching

1906
01:18:04,319 --> 01:18:10,238
and detaching disks as you need them as

1907
01:18:07,439 --> 01:18:12,559
well google cloud storage can be used in

1908
01:18:10,238 --> 01:18:14,639
conjunction with compute engine as

1909
01:18:12,560 --> 01:18:17,039
another storage option and when

1910
01:18:14,640 --> 01:18:20,079
connecting directly to compute engine

1911
01:18:17,039 --> 01:18:22,479
google gives you the option of using ssh

1912
01:18:20,079 --> 01:18:24,880
to securely connect to it so moving on

1913
01:18:22,479 --> 01:18:27,919
to the next compute service option

1914
01:18:24,880 --> 01:18:29,840
we have google kubernetes engine also

1915
01:18:27,920 --> 01:18:31,199
known as gke

1916
01:18:29,840 --> 01:18:33,440
now gke

1917
01:18:31,198 --> 01:18:35,119
is google's flagship container

1918
01:18:33,439 --> 01:18:36,559
orchestration system

1919
01:18:35,119 --> 01:18:37,920
for automating

1920
01:18:36,560 --> 01:18:40,880
deploying

1921
01:18:37,920 --> 01:18:44,158
scaling and managing containers

1922
01:18:40,880 --> 01:18:46,560
gke is also built on the same open

1923
01:18:44,158 --> 01:18:49,198
source kubernetes project that was

1924
01:18:46,560 --> 01:18:51,360
introduced by google to the public back

1925
01:18:49,198 --> 01:18:53,839
in 2014

1926
01:18:51,359 --> 01:18:55,920
now before google made kubernetes a

1927
01:18:53,840 --> 01:18:58,880
managed service there was many that

1928
01:18:55,920 --> 01:19:01,279
decided to build kubernetes on premise

1929
01:18:58,880 --> 01:19:03,440
in their data centers and because it is

1930
01:19:01,279 --> 01:19:04,559
built on the same platform

1931
01:19:03,439 --> 01:19:07,198
gke

1932
01:19:04,560 --> 01:19:09,600
offers the flexibility of integrating

1933
01:19:07,198 --> 01:19:12,960
with these on-premise kubernetes

1934
01:19:09,600 --> 01:19:16,159
deployments now under the hood gke uses

1935
01:19:12,960 --> 01:19:19,039
compute engine instances as nodes in a

1936
01:19:16,158 --> 01:19:21,839
cluster and as a quick note a cluster is

1937
01:19:19,039 --> 01:19:24,560
a group of nodes or compute engine

1938
01:19:21,840 --> 01:19:27,440
instances and again we'll be going over

1939
01:19:24,560 --> 01:19:29,520
all this in much greater detail in a

1940
01:19:27,439 --> 01:19:32,000
different lesson so if you haven't

1941
01:19:29,520 --> 01:19:34,719
already figured it out google kubernetes

1942
01:19:32,000 --> 01:19:36,880
engine is considered container as a

1943
01:19:34,719 --> 01:19:39,198
service now the next compute service

1944
01:19:36,880 --> 01:19:41,760
option that i wanted to go over

1945
01:19:39,198 --> 01:19:43,519
that falls under platform as a service

1946
01:19:41,760 --> 01:19:46,159
is app engine

1947
01:19:43,520 --> 01:19:48,960
now app engine is a fully managed

1948
01:19:46,158 --> 01:19:52,000
serverless platform for developing and

1949
01:19:48,960 --> 01:19:54,640
hosting web applications at scale now

1950
01:19:52,000 --> 01:19:57,119
with app engine google handles most of

1951
01:19:54,640 --> 01:19:59,760
the management of the resources for you

1952
01:19:57,119 --> 01:20:02,399
for example if your application requires

1953
01:19:59,760 --> 01:20:04,480
more computing resources because traffic

1954
01:20:02,399 --> 01:20:06,960
to your website increases google

1955
01:20:04,479 --> 01:20:09,519
automatically scales the system to

1956
01:20:06,960 --> 01:20:12,319
provide these resources if the system

1957
01:20:09,520 --> 01:20:14,960
software needs a security update as well

1958
01:20:12,319 --> 01:20:17,119
that's handled for you too and so all

1959
01:20:14,960 --> 01:20:18,399
you need to really take care of is your

1960
01:20:17,119 --> 01:20:20,639
application

1961
01:20:18,399 --> 01:20:24,238
and you can build your application in

1962
01:20:20,639 --> 01:20:25,440
your favorite language go java.net and

1963
01:20:24,238 --> 01:20:27,439
many others

1964
01:20:25,439 --> 01:20:31,279
and you can use both pre-configured

1965
01:20:27,439 --> 01:20:34,238
runtimes or use custom runtimes to allow

1966
01:20:31,279 --> 01:20:36,399
you to write the code in any language

1967
01:20:34,238 --> 01:20:38,799
app engine also allows you to connect

1968
01:20:36,399 --> 01:20:41,920
with google cloud storage products and

1969
01:20:38,800 --> 01:20:44,239
databases seamlessly app engine also

1970
01:20:41,920 --> 01:20:47,039
offers the flexibility of connecting

1971
01:20:44,238 --> 01:20:49,279
with third-party databases as well as

1972
01:20:47,039 --> 01:20:52,319
other cloud providers and third-party

1973
01:20:49,279 --> 01:20:54,800
vendors app engine also integrates with

1974
01:20:52,319 --> 01:20:57,840
a well-known security product in google

1975
01:20:54,800 --> 01:21:00,560
cloud called web security scanner as to

1976
01:20:57,840 --> 01:21:02,800
identify security vulnerabilities and so

1977
01:21:00,560 --> 01:21:04,719
that covers app engine in a nutshell

1978
01:21:02,800 --> 01:21:05,600
moving on to the next compute service

1979
01:21:04,719 --> 01:21:08,319
option

1980
01:21:05,600 --> 01:21:10,719
we have cloud functions and cloud

1981
01:21:08,319 --> 01:21:13,439
functions fall under function as a

1982
01:21:10,719 --> 01:21:14,560
service this is a serverless execution

1983
01:21:13,439 --> 01:21:16,559
environment

1984
01:21:14,560 --> 01:21:19,600
for building and connecting cloud

1985
01:21:16,560 --> 01:21:22,480
services with cloud functions you write

1986
01:21:19,600 --> 01:21:24,239
simple single purpose functions that are

1987
01:21:22,479 --> 01:21:26,158
attached to events

1988
01:21:24,238 --> 01:21:28,638
that are produced from your

1989
01:21:26,158 --> 01:21:31,279
infrastructure and services in google

1990
01:21:28,639 --> 01:21:34,400
cloud your function is triggered when an

1991
01:21:31,279 --> 01:21:36,719
event being watched is fired your code

1992
01:21:34,399 --> 01:21:38,638
then executes in a fully managed

1993
01:21:36,719 --> 01:21:41,279
environment there is no need to

1994
01:21:38,639 --> 01:21:43,760
provision any infrastructure or worry

1995
01:21:41,279 --> 01:21:45,840
about managing any servers and cloud

1996
01:21:43,760 --> 01:21:48,480
functions can be written using

1997
01:21:45,840 --> 01:21:51,840
javascript python 3

1998
01:21:48,479 --> 01:21:54,000
go or java runtimes so you can take your

1999
01:21:51,840 --> 01:21:56,239
function and run it in any of these

2000
01:21:54,000 --> 01:21:59,198
standard environments which makes it

2001
01:21:56,238 --> 01:22:01,678
extremely portable now cloud functions

2002
01:21:59,198 --> 01:22:03,279
are a good choice for use cases that

2003
01:22:01,679 --> 01:22:06,480
include the following

2004
01:22:03,279 --> 01:22:09,279
data processing or etl operations such

2005
01:22:06,479 --> 01:22:12,319
as video transcoding and iot streaming

2006
01:22:09,279 --> 01:22:13,599
data web hooks that respond to http

2007
01:22:12,319 --> 01:22:16,238
triggers

2008
01:22:13,600 --> 01:22:19,199
lightweight apis that compose loosely

2009
01:22:16,238 --> 01:22:21,439
coupled logic into applications as well

2010
01:22:19,198 --> 01:22:23,919
as mobile back-end functions

2011
01:22:21,439 --> 01:22:26,879
again cloud functions are considered

2012
01:22:23,920 --> 01:22:28,319
function as a service and so that covers

2013
01:22:26,880 --> 01:22:29,920
cloud functions

2014
01:22:28,319 --> 01:22:32,559
now moving to the far right of the

2015
01:22:29,920 --> 01:22:34,719
screen on the other side of the arrow we

2016
01:22:32,560 --> 01:22:38,080
have our last compute service option

2017
01:22:34,719 --> 01:22:40,639
which is cloud run now cloud run is a

2018
01:22:38,079 --> 01:22:42,960
fully managed compute platform for

2019
01:22:40,639 --> 01:22:46,079
deploying and scaling containerized

2020
01:22:42,960 --> 01:22:48,399
applications quickly and securely

2021
01:22:46,079 --> 01:22:50,880
cloudrun was built on an open standard

2022
01:22:48,399 --> 01:22:53,599
called k native and this enabled the

2023
01:22:50,880 --> 01:22:56,239
portability of any applications that

2024
01:22:53,600 --> 01:22:59,120
were built on it cloudrun also abstracts

2025
01:22:56,238 --> 01:23:01,759
away all the infrastructure management

2026
01:22:59,119 --> 01:23:04,559
by automatically scaling up and down

2027
01:23:01,760 --> 01:23:07,039
almost instantaneously depending on the

2028
01:23:04,560 --> 01:23:09,679
traffic now cloud run was google's

2029
01:23:07,039 --> 01:23:12,079
response to abstracting all the

2030
01:23:09,679 --> 01:23:14,560
infrastructure that was designed to run

2031
01:23:12,079 --> 01:23:17,920
containers and so this is known as

2032
01:23:14,560 --> 01:23:20,480
serverless for containers cloudrun has

2033
01:23:17,920 --> 01:23:22,239
massive flexibility as you can write it

2034
01:23:20,479 --> 01:23:25,439
in any language

2035
01:23:22,238 --> 01:23:28,399
any library using any binary this

2036
01:23:25,439 --> 01:23:30,319
compute service is considered a function

2037
01:23:28,399 --> 01:23:32,879
as a service now at the time of

2038
01:23:30,319 --> 01:23:35,759
recording this video i have not heard of

2039
01:23:32,880 --> 01:23:38,639
cloud cloudrun being in the exam but

2040
01:23:35,760 --> 01:23:40,719
since it is a compute service option i

2041
01:23:38,639 --> 01:23:43,199
felt the need for cloudrun to have an

2042
01:23:40,719 --> 01:23:45,760
honorable mention and so these are all

2043
01:23:43,198 --> 01:23:48,559
the compute service options that are

2044
01:23:45,760 --> 01:23:51,360
available on google cloud and we will be

2045
01:23:48,560 --> 01:23:53,440
diving deeper into each one of these

2046
01:23:51,359 --> 01:23:55,839
later on in this course

2047
01:23:53,439 --> 01:23:57,839
again this is just an overview of all

2048
01:23:55,840 --> 01:24:00,719
the compute service options that are

2049
01:23:57,840 --> 01:24:02,480
available on the google cloud platform

2050
01:24:00,719 --> 01:24:03,760
and so that's all i wanted to cover for

2051
01:24:02,479 --> 01:24:05,519
this lesson

2052
01:24:03,760 --> 01:24:07,840
so you can now mark this lesson as

2053
01:24:05,520 --> 01:24:08,380
complete and let's move on to the next

2054
01:24:07,840 --> 01:24:12,319
one

2055
01:24:08,380 --> 01:24:13,600
[Music]

2056
01:24:12,319 --> 01:24:16,158
welcome back

2057
01:24:13,600 --> 01:24:19,280
now in the last lesson i covered all the

2058
01:24:16,158 --> 01:24:21,439
different options for compute services

2059
01:24:19,279 --> 01:24:23,920
in this lesson we're going to cover the

2060
01:24:21,439 --> 01:24:26,559
options that are available that couple

2061
01:24:23,920 --> 01:24:28,960
well with these compute services by

2062
01:24:26,560 --> 01:24:31,600
diving deeper into the different storage

2063
01:24:28,960 --> 01:24:34,880
types and the different databases

2064
01:24:31,600 --> 01:24:37,360
available on google cloud again this is

2065
01:24:34,880 --> 01:24:40,000
strictly an overview as i will be diving

2066
01:24:37,359 --> 01:24:41,039
deeper into these services later on in

2067
01:24:40,000 --> 01:24:43,279
the course

2068
01:24:41,039 --> 01:24:45,439
now when it comes to storage options

2069
01:24:43,279 --> 01:24:48,319
there are three services that are

2070
01:24:45,439 --> 01:24:50,719
readily available to you in google cloud

2071
01:24:48,319 --> 01:24:53,119
each of them have their own specific use

2072
01:24:50,719 --> 01:24:54,239
case that i will be diving into in just

2073
01:24:53,119 --> 01:24:56,158
a second

2074
01:24:54,238 --> 01:24:57,759
the first one i wanted to go over is

2075
01:24:56,158 --> 01:25:00,399
cloud storage

2076
01:24:57,760 --> 01:25:02,800
now with cloud storage this is google's

2077
01:25:00,399 --> 01:25:06,079
consistent scalable

2078
01:25:02,800 --> 01:25:07,119
large capacity and highly durable object

2079
01:25:06,079 --> 01:25:09,760
storage

2080
01:25:07,119 --> 01:25:11,840
so when i refer to object storage this

2081
01:25:09,760 --> 01:25:14,639
is not the type of storage that you

2082
01:25:11,840 --> 01:25:16,960
would attach to your instance and store

2083
01:25:14,639 --> 01:25:20,159
your operating system on i'm talking

2084
01:25:16,960 --> 01:25:22,239
about managing data as objects such as

2085
01:25:20,158 --> 01:25:24,638
documents or pictures and shouldn't be

2086
01:25:22,238 --> 01:25:27,599
confused with block storage which

2087
01:25:24,639 --> 01:25:30,079
manages data at a more granular level

2088
01:25:27,600 --> 01:25:32,400
such as an operating system not to worry

2089
01:25:30,079 --> 01:25:34,559
if you fully don't grasp the concept of

2090
01:25:32,399 --> 01:25:36,319
object storage i will be going into

2091
01:25:34,560 --> 01:25:38,800
further detail with that

2092
01:25:36,319 --> 01:25:42,319
later on in the cloud storage lesson

2093
01:25:38,800 --> 01:25:45,039
cloud storage has 11 9's durability and

2094
01:25:42,319 --> 01:25:47,439
what i mean by durability is basically

2095
01:25:45,039 --> 01:25:49,760
loss of files so just to give you a

2096
01:25:47,439 --> 01:25:53,678
better picture on cloud storage

2097
01:25:49,760 --> 01:25:56,960
durability if you store 1 million files

2098
01:25:53,679 --> 01:25:59,440
statistically google would lose one file

2099
01:25:56,960 --> 01:26:02,560
every 659

2100
01:25:59,439 --> 01:26:05,919
000 years and you are about over 400

2101
01:26:02,560 --> 01:26:08,480
times more likely to get hit by a meteor

2102
01:26:05,920 --> 01:26:10,719
than to actually lose a file so as you

2103
01:26:08,479 --> 01:26:13,039
can see cloud storage is a very good

2104
01:26:10,719 --> 01:26:15,920
place to be storing your files another

2105
01:26:13,039 --> 01:26:18,960
great feature on cloud storage is the

2106
01:26:15,920 --> 01:26:21,520
unlimited storage that it has with no

2107
01:26:18,960 --> 01:26:24,079
minimum object size so feel free to

2108
01:26:21,520 --> 01:26:26,480
continuously put files in cloud storage

2109
01:26:24,079 --> 01:26:29,198
now when it comes to use cases cloud

2110
01:26:26,479 --> 01:26:32,638
storage is fantastic for content

2111
01:26:29,198 --> 01:26:35,439
delivery data lakes and backups and to

2112
01:26:32,639 --> 01:26:37,440
make cloud storage even more flexible it

2113
01:26:35,439 --> 01:26:40,399
is available in different storage

2114
01:26:37,439 --> 01:26:42,638
classes and availability which i will be

2115
01:26:40,399 --> 01:26:45,119
going over in just a second now when it

2116
01:26:42,639 --> 01:26:47,199
comes to these different storage classes

2117
01:26:45,119 --> 01:26:49,439
there are four different classes that

2118
01:26:47,198 --> 01:26:52,000
you can choose from the first one is the

2119
01:26:49,439 --> 01:26:54,960
standard storage class and this storage

2120
01:26:52,000 --> 01:26:57,600
class offers the maximum availability

2121
01:26:54,960 --> 01:27:00,399
with your data with absolutely no

2122
01:26:57,600 --> 01:27:02,719
limitations this is great for storage

2123
01:27:00,399 --> 01:27:05,920
that you access all the time the next

2124
01:27:02,719 --> 01:27:08,560
storage class is near line and this is

2125
01:27:05,920 --> 01:27:11,199
low-cost archival storage so this

2126
01:27:08,560 --> 01:27:13,920
storage class is cheaper than standard

2127
01:27:11,198 --> 01:27:15,839
and is designed for storage that only

2128
01:27:13,920 --> 01:27:17,679
needs to be accessed less than once a

2129
01:27:15,840 --> 01:27:20,079
month and if you're looking for an even

2130
01:27:17,679 --> 01:27:22,800
more cost effective solution cloud

2131
01:27:20,079 --> 01:27:25,198
storage has cold line storage class

2132
01:27:22,800 --> 01:27:27,840
which is an even lower cost archival

2133
01:27:25,198 --> 01:27:30,238
storage solution this storage class is

2134
01:27:27,840 --> 01:27:33,119
designed for storage that only needs to

2135
01:27:30,238 --> 01:27:34,638
be accessed less than once every quarter

2136
01:27:33,119 --> 01:27:37,359
and just when you thought that the

2137
01:27:34,639 --> 01:27:39,840
prices couldn't get lower than cold line

2138
01:27:37,359 --> 01:27:42,399
cloud storage has offered another

2139
01:27:39,840 --> 01:27:45,600
storage class called archive and this is

2140
01:27:42,399 --> 01:27:48,000
the lowest cost archival storage which

2141
01:27:45,600 --> 01:27:50,320
offers storage at a fraction of a penny

2142
01:27:48,000 --> 01:27:53,520
per gigabyte but is designed for

2143
01:27:50,319 --> 01:27:55,759
archival or backup use that is accessed

2144
01:27:53,520 --> 01:27:58,560
less than once a year now when it comes

2145
01:27:55,760 --> 01:28:01,119
to cloud storage availability there are

2146
01:27:58,560 --> 01:28:03,840
three options that are available

2147
01:28:01,119 --> 01:28:06,559
there is region dual region and

2148
01:28:03,840 --> 01:28:09,119
multi-region region is designed to store

2149
01:28:06,560 --> 01:28:11,920
your data in one single region dual

2150
01:28:09,119 --> 01:28:14,719
region is exactly how it sounds which is

2151
01:28:11,920 --> 01:28:16,960
a pair of regions now in multiregion

2152
01:28:14,719 --> 01:28:20,000
cloud storage stores your data over a

2153
01:28:16,960 --> 01:28:22,800
large geographic area consisting of many

2154
01:28:20,000 --> 01:28:25,279
different regions across that same

2155
01:28:22,800 --> 01:28:28,000
selected geographic area and so that

2156
01:28:25,279 --> 01:28:29,920
about covers cloud storage as a storage

2157
01:28:28,000 --> 01:28:32,800
option the next storage option that i

2158
01:28:29,920 --> 01:28:36,000
wanted to talk about is file store

2159
01:28:32,800 --> 01:28:38,880
now file store is a fully managed nfs

2160
01:28:36,000 --> 01:28:41,920
file server from google cloud that is

2161
01:28:38,880 --> 01:28:44,800
nfs version 3 compliant you can store

2162
01:28:41,920 --> 01:28:47,840
data from running applications from

2163
01:28:44,800 --> 01:28:48,960
multiple vm instances and kubernetes

2164
01:28:47,840 --> 01:28:52,000
clusters

2165
01:28:48,960 --> 01:28:53,920
accessing the data at the same time file

2166
01:28:52,000 --> 01:28:56,479
store is a great option for when you're

2167
01:28:53,920 --> 01:28:58,399
thinking about accessing data from let's

2168
01:28:56,479 --> 01:29:01,359
say an instance group and you need

2169
01:28:58,399 --> 01:29:04,000
multiple instances to access the same

2170
01:29:01,359 --> 01:29:07,279
data and moving on to the last storage

2171
01:29:04,000 --> 01:29:09,520
option we have persistent disks

2172
01:29:07,279 --> 01:29:12,960
now with persistent disks this is

2173
01:29:09,520 --> 01:29:15,679
durable block storage for instances now

2174
01:29:12,960 --> 01:29:17,840
as i explained before block storage is

2175
01:29:15,679 --> 01:29:20,319
different than object storage

2176
01:29:17,840 --> 01:29:23,360
if you remember previously i explained

2177
01:29:20,319 --> 01:29:27,198
that object storage is designed to store

2178
01:29:23,359 --> 01:29:29,839
objects such as data or photos or videos

2179
01:29:27,198 --> 01:29:33,119
whereas block storage is raw storage

2180
01:29:29,840 --> 01:29:35,520
capacity that is used in drives that are

2181
01:29:33,119 --> 01:29:38,000
connected to an operating system in this

2182
01:29:35,520 --> 01:29:40,960
case persistent disks are doing just

2183
01:29:38,000 --> 01:29:42,000
that persistent disks come in two

2184
01:29:40,960 --> 01:29:44,800
options

2185
01:29:42,000 --> 01:29:47,279
the first one is the standard option

2186
01:29:44,800 --> 01:29:49,520
which gives you regular standard storage

2187
01:29:47,279 --> 01:29:53,119
at a reasonable price and the other

2188
01:29:49,520 --> 01:29:55,199
option is solid state or ssd

2189
01:29:53,119 --> 01:29:57,840
which gives you lower latency

2190
01:29:55,198 --> 01:29:59,919
higher iops and is just all around

2191
01:29:57,840 --> 01:30:02,719
faster than your standard persistent

2192
01:29:59,920 --> 01:30:05,920
disk both of these options are available

2193
01:30:02,719 --> 01:30:08,079
in zonal and regional options depending

2194
01:30:05,920 --> 01:30:10,239
on what you need for your specific

2195
01:30:08,079 --> 01:30:12,960
workload so now that i've covered all

2196
01:30:10,238 --> 01:30:15,198
three storage options i wanted to touch

2197
01:30:12,960 --> 01:30:17,840
into the database options that are

2198
01:30:15,198 --> 01:30:21,279
available on google cloud these database

2199
01:30:17,840 --> 01:30:24,319
options come in both the sql and nosql

2200
01:30:21,279 --> 01:30:26,639
flavors depending on your use case now

2201
01:30:24,319 --> 01:30:28,960
getting into the options themselves i

2202
01:30:26,639 --> 01:30:31,600
wanted to start off going into a little

2203
01:30:28,960 --> 01:30:35,198
bit of detail with the sql relational

2204
01:30:31,600 --> 01:30:37,280
options so the first option is cloud sql

2205
01:30:35,198 --> 01:30:39,839
and cloud sql is a fully managed

2206
01:30:37,279 --> 01:30:43,359
database service that is offered in

2207
01:30:39,840 --> 01:30:46,079
postgres mysql and sql server flavors

2208
01:30:43,359 --> 01:30:49,279
cloud sql also has the option of being

2209
01:30:46,079 --> 01:30:51,760
highly available across zones now moving

2210
01:30:49,279 --> 01:30:54,079
into cloud spanner this is a scalable

2211
01:30:51,760 --> 01:30:56,960
relational database service that's

2212
01:30:54,079 --> 01:30:59,600
highly available not only across zones

2213
01:30:56,960 --> 01:31:02,000
but across regions and if need be

2214
01:30:59,600 --> 01:31:04,639
available globally cloud spanner is

2215
01:31:02,000 --> 01:31:07,359
designed to support transactions strong

2216
01:31:04,639 --> 01:31:10,159
consistency and synchronous replication

2217
01:31:07,359 --> 01:31:12,719
moving into the nosql options there are

2218
01:31:10,158 --> 01:31:15,679
four available services that google

2219
01:31:12,719 --> 01:31:17,279
cloud offers moving into the first one

2220
01:31:15,679 --> 01:31:20,480
is bigtable

2221
01:31:17,279 --> 01:31:24,238
and bigtable is a fully managed scalable

2222
01:31:20,479 --> 01:31:27,119
nosql database that has high throughput

2223
01:31:24,238 --> 01:31:29,279
and low latency bigtable also comes with

2224
01:31:27,119 --> 01:31:32,399
the flexibility of doing cluster

2225
01:31:29,279 --> 01:31:35,599
resizing without any downtime the next

2226
01:31:32,399 --> 01:31:38,319
nosql option available is datastore and

2227
01:31:35,600 --> 01:31:39,360
this is google cloud's fast fully

2228
01:31:38,319 --> 01:31:40,559
managed

2229
01:31:39,359 --> 01:31:43,279
serverless

2230
01:31:40,560 --> 01:31:46,480
nosql document database datastore is

2231
01:31:43,279 --> 01:31:48,960
designed for mobile web

2232
01:31:46,479 --> 01:31:51,678
and internet of things applications

2233
01:31:48,960 --> 01:31:53,760
datastore has the capabilities of doing

2234
01:31:51,679 --> 01:31:56,560
multi-region replication

2235
01:31:53,760 --> 01:31:58,800
as well as acid transactions for those

2236
01:31:56,560 --> 01:32:01,760
of you who don't know i will be covering

2237
01:31:58,800 --> 01:32:05,039
acid transactions in a later lesson next

2238
01:32:01,760 --> 01:32:08,719
up for nosql options is firestore and

2239
01:32:05,039 --> 01:32:11,359
this is a nosql real-time database

2240
01:32:08,719 --> 01:32:13,198
and is optimized for offline use if

2241
01:32:11,359 --> 01:32:16,238
you're looking to store data in a

2242
01:32:13,198 --> 01:32:19,119
database in real time firestore is your

2243
01:32:16,238 --> 01:32:21,599
option and like bigtable you can resize

2244
01:32:19,119 --> 01:32:24,840
the cluster in firestore without any

2245
01:32:21,600 --> 01:32:27,679
downtime and the last nosql option is

2246
01:32:24,840 --> 01:32:29,279
memorystore and this is google cloud's

2247
01:32:27,679 --> 01:32:31,760
highly available

2248
01:32:29,279 --> 01:32:34,319
in memory service for redis and

2249
01:32:31,760 --> 01:32:36,800
memcached this is a fully managed

2250
01:32:34,319 --> 01:32:38,960
service and so google cloud takes care

2251
01:32:36,800 --> 01:32:41,440
of everything for you now i know this

2252
01:32:38,960 --> 01:32:43,760
has been a short lesson on storage and

2253
01:32:41,439 --> 01:32:46,319
database options but a necessary

2254
01:32:43,760 --> 01:32:47,920
overview nonetheless of what's to come

2255
01:32:46,319 --> 01:32:50,399
and so that's about all i wanted to

2256
01:32:47,920 --> 01:32:52,800
cover in this lesson so you can now mark

2257
01:32:50,399 --> 01:32:54,250
this lesson as complete and let's move

2258
01:32:52,800 --> 01:32:58,159
on to the next one

2259
01:32:54,250 --> 01:33:00,399
[Music]

2260
01:32:58,158 --> 01:33:02,960
welcome back now while there are some

2261
01:33:00,399 --> 01:33:04,559
services in gcp that take care of

2262
01:33:02,960 --> 01:33:06,639
networking for you

2263
01:33:04,560 --> 01:33:08,480
there are still others like compute

2264
01:33:06,639 --> 01:33:11,199
engine that give you a bit more

2265
01:33:08,479 --> 01:33:13,279
flexibility in the type of networking

2266
01:33:11,198 --> 01:33:15,359
you'd like to establish

2267
01:33:13,279 --> 01:33:18,319
this lesson will go over these

2268
01:33:15,359 --> 01:33:21,279
networking services at a high level and

2269
01:33:18,319 --> 01:33:24,639
provide you with strictly an overview to

2270
01:33:21,279 --> 01:33:27,359
give you an idea on what's available for

2271
01:33:24,639 --> 01:33:29,920
any particular type of scenario when it

2272
01:33:27,359 --> 01:33:32,559
comes to connecting and scaling your

2273
01:33:29,920 --> 01:33:34,000
network traffic i will be going into

2274
01:33:32,560 --> 01:33:36,719
further details

2275
01:33:34,000 --> 01:33:39,039
on these networking services in later

2276
01:33:36,719 --> 01:33:41,198
lessons now i wanted to start off with

2277
01:33:39,039 --> 01:33:43,920
some core networking features for your

2278
01:33:41,198 --> 01:33:44,879
resources and how to govern specific

2279
01:33:43,920 --> 01:33:47,679
traffic

2280
01:33:44,880 --> 01:33:50,400
traveling to and from your network this

2281
01:33:47,679 --> 01:33:52,639
is where networks firewalls and routes

2282
01:33:50,399 --> 01:33:55,679
come into play so first i wanted to

2283
01:33:52,639 --> 01:33:59,279
start off with virtual private cloud

2284
01:33:55,679 --> 01:34:02,079
also known as vpc now vpc

2285
01:33:59,279 --> 01:34:04,399
manages networking functionality for

2286
01:34:02,079 --> 01:34:06,960
your google cloud resources

2287
01:34:04,399 --> 01:34:09,759
this is a virtualized network within

2288
01:34:06,960 --> 01:34:12,800
google cloud so you can picture it as

2289
01:34:09,760 --> 01:34:15,039
your virtualized data center vpc is a

2290
01:34:12,800 --> 01:34:18,880
core networking service

2291
01:34:15,039 --> 01:34:21,119
and is also a global resource that spans

2292
01:34:18,880 --> 01:34:24,239
throughout all the different regions

2293
01:34:21,119 --> 01:34:27,198
available in google cloud each vpc

2294
01:34:24,238 --> 01:34:29,599
contains a default network as well

2295
01:34:27,198 --> 01:34:32,238
additional networks can be created in

2296
01:34:29,600 --> 01:34:34,480
your project but networks cannot be

2297
01:34:32,238 --> 01:34:36,479
shared between projects

2298
01:34:34,479 --> 01:34:39,759
and i'll be going into further depth on

2299
01:34:36,479 --> 01:34:42,399
vpc in a later lesson so now that we've

2300
01:34:39,760 --> 01:34:45,360
covered vpc i wanted to get into

2301
01:34:42,399 --> 01:34:48,158
firewall rules and routes now firewall

2302
01:34:45,359 --> 01:34:51,359
rules segment your networks with a

2303
01:34:48,158 --> 01:34:54,000
global distributive firewall to restrict

2304
01:34:51,359 --> 01:34:56,319
access to resources so this governs

2305
01:34:54,000 --> 01:34:59,039
traffic coming into instances on a

2306
01:34:56,319 --> 01:35:01,679
network each default network has a

2307
01:34:59,039 --> 01:35:04,399
default set of firewall rules that have

2308
01:35:01,679 --> 01:35:06,800
already been established but don't fret

2309
01:35:04,399 --> 01:35:08,879
you can create your own rules and set

2310
01:35:06,800 --> 01:35:11,440
them accordingly depending on your

2311
01:35:08,880 --> 01:35:14,319
workload now when it comes to routes

2312
01:35:11,439 --> 01:35:17,198
this specifies how traffic should be

2313
01:35:14,319 --> 01:35:20,158
routed within your vpc to get a little

2314
01:35:17,198 --> 01:35:22,319
bit more granular routes specify how

2315
01:35:20,158 --> 01:35:25,920
packets leaving an instance should be

2316
01:35:22,319 --> 01:35:27,519
directed so it's a basic way of defining

2317
01:35:25,920 --> 01:35:30,319
which way your traffic is going to

2318
01:35:27,520 --> 01:35:32,400
travel moving on to the next concept i

2319
01:35:30,319 --> 01:35:34,559
wanted to cover a little bit about low

2320
01:35:32,399 --> 01:35:37,839
balancing and how it distributes

2321
01:35:34,560 --> 01:35:39,840
workloads across multiple instances

2322
01:35:37,840 --> 01:35:42,000
now we have two different types of load

2323
01:35:39,840 --> 01:35:44,560
balancing and both these types of load

2324
01:35:42,000 --> 01:35:47,198
balancing can be broken down to even a

2325
01:35:44,560 --> 01:35:51,039
more granular level now when it comes to

2326
01:35:47,198 --> 01:35:53,198
http or https low balancing this is the

2327
01:35:51,039 --> 01:35:55,439
type of load balancing that covers

2328
01:35:53,198 --> 01:35:58,238
worldwide auto scaling and load

2329
01:35:55,439 --> 01:36:01,719
balancing over multiple regions or even

2330
01:35:58,238 --> 01:36:05,118
a single region on a single global ip

2331
01:36:01,719 --> 01:36:08,000
https load balancing distributes traffic

2332
01:36:05,118 --> 01:36:09,679
across various regions and make sure

2333
01:36:08,000 --> 01:36:12,079
that the traffic is routed to the

2334
01:36:09,679 --> 01:36:14,719
closest region or in case there's

2335
01:36:12,079 --> 01:36:17,039
failures amongst instances or in

2336
01:36:14,719 --> 01:36:21,279
instances being bombarded with traffic

2337
01:36:17,039 --> 01:36:24,079
http and https load balancing can route

2338
01:36:21,279 --> 01:36:26,238
the traffic to a healthy instance in the

2339
01:36:24,079 --> 01:36:28,559
next closest region another great

2340
01:36:26,238 --> 01:36:30,718
feature of this load balancing is that

2341
01:36:28,560 --> 01:36:33,039
it can distribute traffic based on

2342
01:36:30,719 --> 01:36:35,118
content type now when it comes to

2343
01:36:33,039 --> 01:36:38,158
network load balancing this is a

2344
01:36:35,118 --> 01:36:39,759
regional load balancer and supports any

2345
01:36:38,158 --> 01:36:42,079
and all ports

2346
01:36:39,760 --> 01:36:44,560
it distributes traffic among server

2347
01:36:42,079 --> 01:36:47,840
instances in the same region

2348
01:36:44,560 --> 01:36:50,960
based on incoming ip protocol data such

2349
01:36:47,840 --> 01:36:52,480
as address port and protocol now when it

2350
01:36:50,960 --> 01:36:55,920
comes to networking

2351
01:36:52,479 --> 01:36:58,559
dns plays a big part and because dns

2352
01:36:55,920 --> 01:37:03,118
plays a big part in networking google

2353
01:36:58,560 --> 01:37:06,159
has made this service 100 available

2354
01:37:03,118 --> 01:37:08,559
on top of giving any dns queries the

2355
01:37:06,158 --> 01:37:11,759
absolute lowest latency with google

2356
01:37:08,560 --> 01:37:14,239
cloud dns you can publish and maintain

2357
01:37:11,760 --> 01:37:16,800
dns records by using the same

2358
01:37:14,238 --> 01:37:19,118
infrastructure that google uses and you

2359
01:37:16,800 --> 01:37:23,039
can work with your managed zones and dns

2360
01:37:19,118 --> 01:37:26,079
records such as mx records tax records

2361
01:37:23,039 --> 01:37:28,399
cname records and a records and you can

2362
01:37:26,079 --> 01:37:29,679
do this all through the cli

2363
01:37:28,399 --> 01:37:32,559
the api

2364
01:37:29,679 --> 01:37:35,118
or the sdk now some of the advanced

2365
01:37:32,560 --> 01:37:38,480
connectivity options that are available

2366
01:37:35,118 --> 01:37:41,198
in google cloud are cloudvpn and direct

2367
01:37:38,479 --> 01:37:43,279
interconnect now cloudvpn connects your

2368
01:37:41,198 --> 01:37:46,399
existing network whether it be

2369
01:37:43,279 --> 01:37:49,279
on-premise or in another location

2370
01:37:46,399 --> 01:37:50,399
to your vbc network through an ipsec

2371
01:37:49,279 --> 01:37:53,039
connection

2372
01:37:50,399 --> 01:37:55,599
the traffic is encrypted and travels

2373
01:37:53,039 --> 01:37:58,158
between the two networks over the public

2374
01:37:55,600 --> 01:38:00,800
internet now when it comes to direct

2375
01:37:58,158 --> 01:38:02,559
interconnect this connectivity option

2376
01:38:00,800 --> 01:38:06,000
allows you to connect your existing

2377
01:38:02,560 --> 01:38:07,679
network to your vpc network using a

2378
01:38:06,000 --> 01:38:10,800
highly available

2379
01:38:07,679 --> 01:38:13,118
low latency connection this connectivity

2380
01:38:10,800 --> 01:38:16,320
option does not traverse the public

2381
01:38:13,118 --> 01:38:18,960
internet and merely connects to google's

2382
01:38:16,319 --> 01:38:21,679
backbone and this is what gives it the

2383
01:38:18,960 --> 01:38:23,679
highly available low latency connection

2384
01:38:21,679 --> 01:38:26,960
a couple of other advanced connectivity

2385
01:38:23,679 --> 01:38:29,359
options is direct and carrier peering

2386
01:38:26,960 --> 01:38:31,118
these connections allow your traffic to

2387
01:38:29,359 --> 01:38:33,359
flow through google's edge network

2388
01:38:31,118 --> 01:38:36,238
locations and pairing can be done

2389
01:38:33,359 --> 01:38:38,880
directly or it can be done through a

2390
01:38:36,238 --> 01:38:41,439
third-party carrier and so although this

2391
01:38:38,880 --> 01:38:44,639
is a very short lesson i will be going

2392
01:38:41,439 --> 01:38:47,519
into greater depth on all these concepts

2393
01:38:44,639 --> 01:38:49,760
in later lessons in the course so that's

2394
01:38:47,520 --> 01:38:52,239
all i had to cover for this lesson so

2395
01:38:49,760 --> 01:38:56,600
you can now mark this lesson as complete

2396
01:38:52,238 --> 01:38:56,599
and let's move on to the next one

2397
01:38:58,399 --> 01:39:03,118
welcome back in this lesson we're going

2398
01:39:00,960 --> 01:39:04,239
to learn about how resources and

2399
01:39:03,118 --> 01:39:06,960
entities

2400
01:39:04,238 --> 01:39:09,118
are organized within google cloud and

2401
01:39:06,960 --> 01:39:11,840
how permissions are inherited through

2402
01:39:09,118 --> 01:39:14,399
this approach knowing this structure

2403
01:39:11,840 --> 01:39:17,600
is a fundamental concept that you should

2404
01:39:14,399 --> 01:39:20,559
know while working in gcp at any

2405
01:39:17,600 --> 01:39:23,440
capacity so before defining what the

2406
01:39:20,560 --> 01:39:26,560
resource hierarchy is i'd like to take a

2407
01:39:23,439 --> 01:39:29,198
little bit of time to define what is a

2408
01:39:26,560 --> 01:39:32,719
resource now in the context of google

2409
01:39:29,198 --> 01:39:35,599
cloud a resource can refer to the

2410
01:39:32,719 --> 01:39:38,719
service level resources that are used to

2411
01:39:35,600 --> 01:39:40,400
process your workloads such as compute

2412
01:39:38,719 --> 01:39:42,480
instance vms

2413
01:39:40,399 --> 01:39:45,839
cloud storage buckets

2414
01:39:42,479 --> 01:39:48,718
and even cloud sql databases as well as

2415
01:39:45,840 --> 01:39:50,560
the account level resources that sit

2416
01:39:48,719 --> 01:39:53,359
above the services

2417
01:39:50,560 --> 01:39:54,960
such as the organization itself

2418
01:39:53,359 --> 01:39:57,279
the folders

2419
01:39:54,960 --> 01:39:59,520
and the projects of course which we will

2420
01:39:57,279 --> 01:40:01,039
be getting into a little bit deeper in

2421
01:39:59,520 --> 01:40:03,280
just a minute

2422
01:40:01,039 --> 01:40:05,920
the resource hierarchy is google's way

2423
01:40:03,279 --> 01:40:08,800
to configure and grant access

2424
01:40:05,920 --> 01:40:12,079
to the various cloud resources for your

2425
01:40:08,800 --> 01:40:13,520
company within google cloud both at the

2426
01:40:12,079 --> 01:40:16,000
service level

2427
01:40:13,520 --> 01:40:18,639
and at the account level

2428
01:40:16,000 --> 01:40:21,118
the resource hierarchy in google cloud

2429
01:40:18,639 --> 01:40:23,520
can truly define the granular

2430
01:40:21,118 --> 01:40:25,920
permissions needed for when you need to

2431
01:40:23,520 --> 01:40:29,199
configure permissions to everyone in the

2432
01:40:25,920 --> 01:40:30,960
organization that actually makes sense

2433
01:40:29,198 --> 01:40:34,079
so now that we covered what is a

2434
01:40:30,960 --> 01:40:36,480
resource i wanted to start digging into

2435
01:40:34,079 --> 01:40:39,760
the resource hierarchy and the structure

2436
01:40:36,479 --> 01:40:42,479
itself now google cloud resources are

2437
01:40:39,760 --> 01:40:45,840
organized hierarchically using a

2438
01:40:42,479 --> 01:40:48,559
parent-child relationship this hierarchy

2439
01:40:45,840 --> 01:40:51,679
is designed to map an organization's

2440
01:40:48,560 --> 01:40:54,400
operational structure to google cloud

2441
01:40:51,679 --> 01:40:57,199
and to manage access control and

2442
01:40:54,399 --> 01:40:58,559
permissions for groups of related

2443
01:40:57,198 --> 01:40:59,919
resources

2444
01:40:58,560 --> 01:41:01,600
so overall

2445
01:40:59,920 --> 01:41:03,760
resource hierarchy will give

2446
01:41:01,600 --> 01:41:06,560
organizations better management of

2447
01:41:03,760 --> 01:41:09,119
permissions and access control

2448
01:41:06,560 --> 01:41:12,320
the accessibility of these resources or

2449
01:41:09,118 --> 01:41:16,079
policies are controlled by identity and

2450
01:41:12,319 --> 01:41:18,960
access management also known as iam a

2451
01:41:16,079 --> 01:41:21,039
big component of gcp which we will be

2452
01:41:18,960 --> 01:41:24,560
digging into a little bit later on in

2453
01:41:21,039 --> 01:41:27,600
this course and so when an iam policy is

2454
01:41:24,560 --> 01:41:30,719
set on a parent the child will inherit

2455
01:41:27,600 --> 01:41:33,679
this policy respectively access control

2456
01:41:30,719 --> 01:41:35,118
policies and configuration settings on a

2457
01:41:33,679 --> 01:41:38,319
parent resource

2458
01:41:35,118 --> 01:41:41,439
are always inherited by the child also

2459
01:41:38,319 --> 01:41:44,559
please note that each child object can

2460
01:41:41,439 --> 01:41:46,399
only have exactly one parent

2461
01:41:44,560 --> 01:41:49,679
and that these policies are again

2462
01:41:46,399 --> 01:41:52,319
controlled by iam so now to understand a

2463
01:41:49,679 --> 01:41:54,399
little bit more about how the gcp

2464
01:41:52,319 --> 01:41:56,880
resource hierarchy works

2465
01:41:54,399 --> 01:41:58,960
i wanted to dig into the layers that

2466
01:41:56,880 --> 01:42:01,920
support this hierarchy

2467
01:41:58,960 --> 01:42:04,639
so this is a diagram of exactly what the

2468
01:42:01,920 --> 01:42:06,079
resource hierarchy looks like in all of

2469
01:42:04,639 --> 01:42:08,319
its awesomeness

2470
01:42:06,079 --> 01:42:10,319
including the billing account along with

2471
01:42:08,319 --> 01:42:12,719
the payments profile but we're not going

2472
01:42:10,319 --> 01:42:15,439
to get into that right now i'll actually

2473
01:42:12,719 --> 01:42:17,198
be covering that in a later lesson so

2474
01:42:15,439 --> 01:42:19,279
more on that later

2475
01:42:17,198 --> 01:42:22,079
so building the structure from the top

2476
01:42:19,279 --> 01:42:24,719
down we start off with the domain or

2477
01:42:22,079 --> 01:42:27,439
cloud level and as you can see here the

2478
01:42:24,719 --> 01:42:28,960
domain of bowtieinc.co

2479
01:42:27,439 --> 01:42:31,439
is at the top

2480
01:42:28,960 --> 01:42:34,560
this is the primary identity of your

2481
01:42:31,439 --> 01:42:36,638
organization at the domain level this is

2482
01:42:34,560 --> 01:42:38,080
where you manage your users in your

2483
01:42:36,639 --> 01:42:41,440
organizations

2484
01:42:38,079 --> 01:42:45,118
so users policies and these are linked

2485
01:42:41,439 --> 01:42:47,678
to g suite or cloud identity accounts

2486
01:42:45,118 --> 01:42:50,079
now underneath the domain level we have

2487
01:42:47,679 --> 01:42:53,279
the organization level and this is

2488
01:42:50,079 --> 01:42:55,519
integrated very closely with the domain

2489
01:42:53,279 --> 01:42:58,238
so with the organization level this

2490
01:42:55,520 --> 01:43:02,080
represents an organization and is the

2491
01:42:58,238 --> 01:43:05,919
root node of the gcp resource hierarchy

2492
01:43:02,079 --> 01:43:08,479
it is associated with exactly one domain

2493
01:43:05,920 --> 01:43:09,199
here we have the domain set as bowtie

2494
01:43:08,479 --> 01:43:11,439
inc

2495
01:43:09,198 --> 01:43:13,919
all entities or resources

2496
01:43:11,439 --> 01:43:15,439
belong to and are grouped under the

2497
01:43:13,920 --> 01:43:17,920
organization

2498
01:43:15,439 --> 01:43:19,279
all controlled policies applied to the

2499
01:43:17,920 --> 01:43:22,319
organization

2500
01:43:19,279 --> 01:43:25,519
are inherited by all other entities and

2501
01:43:22,319 --> 01:43:28,079
resources underneath it so any folders

2502
01:43:25,520 --> 01:43:30,080
projects or resources will get those

2503
01:43:28,079 --> 01:43:32,399
policies that are applied from the

2504
01:43:30,079 --> 01:43:35,198
organization layer now i know that we

2505
01:43:32,399 --> 01:43:37,039
haven't dug into roles as of yet

2506
01:43:35,198 --> 01:43:39,599
but the one thing that i did want to

2507
01:43:37,039 --> 01:43:41,039
point out is that when an organization

2508
01:43:39,600 --> 01:43:44,159
is created

2509
01:43:41,039 --> 01:43:47,198
an organization admin role is created

2510
01:43:44,158 --> 01:43:49,519
and this is to allow full access to edit

2511
01:43:47,198 --> 01:43:52,000
any or all resources

2512
01:43:49,520 --> 01:43:54,719
now moving on to the folders layer this

2513
01:43:52,000 --> 01:43:58,479
is an additional grouping mechanism and

2514
01:43:54,719 --> 01:43:59,600
isolation boundary between each project

2515
01:43:58,479 --> 01:44:02,319
in essence

2516
01:43:59,600 --> 01:44:05,119
it's a grouping of other folders

2517
01:44:02,319 --> 01:44:07,439
projects and resources so if you have

2518
01:44:05,118 --> 01:44:08,479
different departments and teams within a

2519
01:44:07,439 --> 01:44:11,279
company

2520
01:44:08,479 --> 01:44:13,279
this is a great way to organize it now a

2521
01:44:11,279 --> 01:44:14,479
couple of caveats when it comes to

2522
01:44:13,279 --> 01:44:16,639
folders

2523
01:44:14,479 --> 01:44:19,439
the first one is you must have an

2524
01:44:16,639 --> 01:44:21,840
organization node and the second one is

2525
01:44:19,439 --> 01:44:24,000
while a folder can contain multiple

2526
01:44:21,840 --> 01:44:27,199
folders or resources

2527
01:44:24,000 --> 01:44:28,560
a folder or resource can have exactly

2528
01:44:27,198 --> 01:44:31,039
one parent

2529
01:44:28,560 --> 01:44:33,920
now moving into the projects layer this

2530
01:44:31,039 --> 01:44:37,439
is a core organizational component of

2531
01:44:33,920 --> 01:44:40,079
google cloud as projects are required to

2532
01:44:37,439 --> 01:44:42,799
use service level resources

2533
01:44:40,079 --> 01:44:45,679
these projects are the base level

2534
01:44:42,800 --> 01:44:48,800
organizing entity in gcp

2535
01:44:45,679 --> 01:44:50,158
and parent all service level resources

2536
01:44:48,800 --> 01:44:53,679
just as a note

2537
01:44:50,158 --> 01:44:56,399
any given resource can only exist in one

2538
01:44:53,679 --> 01:44:58,880
project and not multiple projects at the

2539
01:44:56,399 --> 01:45:01,839
same time and moving on to the last

2540
01:44:58,880 --> 01:45:04,319
layer we have the resources layer and

2541
01:45:01,840 --> 01:45:06,560
this is any service level resource

2542
01:45:04,319 --> 01:45:09,599
created in google cloud

2543
01:45:06,560 --> 01:45:12,320
everything from compute engine instances

2544
01:45:09,600 --> 01:45:15,199
to cloud storage buckets to cloud sql

2545
01:45:12,319 --> 01:45:17,198
databases apis users

2546
01:45:15,198 --> 01:45:19,599
all these service level resources that

2547
01:45:17,198 --> 01:45:21,839
we create in google cloud fall under

2548
01:45:19,600 --> 01:45:24,400
this layer now giving the hierarchy a

2549
01:45:21,840 --> 01:45:26,800
little bit more context i want to touch

2550
01:45:24,399 --> 01:45:29,519
on labels for just a second

2551
01:45:26,800 --> 01:45:31,920
labels help categorize resources by

2552
01:45:29,520 --> 01:45:34,480
using a key value pair and you can

2553
01:45:31,920 --> 01:45:36,960
attach them to any resource

2554
01:45:34,479 --> 01:45:39,519
and so what labels help you do is to

2555
01:45:36,960 --> 01:45:41,760
break down and organize costs when it

2556
01:45:39,520 --> 01:45:43,440
comes to billing now to give you some

2557
01:45:41,760 --> 01:45:44,560
more structure with regards to the

2558
01:45:43,439 --> 01:45:46,719
hierarchy

2559
01:45:44,560 --> 01:45:48,880
under the domain level

2560
01:45:46,719 --> 01:45:50,158
everything underneath this is considered

2561
01:45:48,880 --> 01:45:52,319
a resource

2562
01:45:50,158 --> 01:45:54,960
and to break it down even further

2563
01:45:52,319 --> 01:45:57,679
everything you see from the organization

2564
01:45:54,960 --> 01:46:00,319
layer to the projects layer is

2565
01:45:57,679 --> 01:46:02,880
considered an account level resource

2566
01:46:00,319 --> 01:46:05,840
everything in the resource layer is

2567
01:46:02,880 --> 01:46:08,159
considered a service level resource and

2568
01:46:05,840 --> 01:46:11,520
so this is how the google cloud resource

2569
01:46:08,158 --> 01:46:14,000
hierarchy is split up and organized and

2570
01:46:11,520 --> 01:46:15,920
so before i finish off this lesson i

2571
01:46:14,000 --> 01:46:18,800
wanted to give you a quick run-through

2572
01:46:15,920 --> 01:46:20,480
on how policies can be applied at a

2573
01:46:18,800 --> 01:46:22,800
hierarchical level

2574
01:46:20,479 --> 01:46:24,638
so i thought i'd bring in tony bowtie

2575
01:46:22,800 --> 01:46:26,800
for a quick demo

2576
01:46:24,639 --> 01:46:29,920
so just to give you an example

2577
01:46:26,800 --> 01:46:31,840
tony bowtie is part of department b and

2578
01:46:29,920 --> 01:46:34,800
tony's manager lark

2579
01:46:31,840 --> 01:46:38,000
decides to set a policy on department

2580
01:46:34,800 --> 01:46:40,760
b's folder and this policy grants

2581
01:46:38,000 --> 01:46:43,679
project owner role to tony at

2582
01:46:40,760 --> 01:46:46,880
bowtieinc.co so tony will have the

2583
01:46:43,679 --> 01:46:49,600
project owner role for project x and for

2584
01:46:46,880 --> 01:46:53,359
project y at the same time

2585
01:46:49,600 --> 01:46:57,600
lark assigns laura at bowtieinc.co

2586
01:46:53,359 --> 01:47:00,399
cloud storage admin role on project x

2587
01:46:57,600 --> 01:47:03,679
and thus she will only be able to manage

2588
01:47:00,399 --> 01:47:05,359
cloud storage buckets in that project

2589
01:47:03,679 --> 01:47:08,399
this hierarchy and permission

2590
01:47:05,359 --> 01:47:10,880
inheritance comes up quite a bit not

2591
01:47:08,399 --> 01:47:12,719
only in the exam but is something that

2592
01:47:10,880 --> 01:47:14,400
should be carefully examined when

2593
01:47:12,719 --> 01:47:16,960
applying permissions

2594
01:47:14,399 --> 01:47:19,839
anywhere within the hierarchy in your

2595
01:47:16,960 --> 01:47:22,158
day-to-day role as an engineer

2596
01:47:19,840 --> 01:47:23,360
applying permissions or policies to

2597
01:47:22,158 --> 01:47:25,599
resources

2598
01:47:23,359 --> 01:47:27,920
with existing policies

2599
01:47:25,600 --> 01:47:30,159
may not end up getting you the desired

2600
01:47:27,920 --> 01:47:32,719
results you're looking for and may have

2601
01:47:30,158 --> 01:47:35,279
a chance to be overlooked now i hope

2602
01:47:32,719 --> 01:47:37,840
these diagrams have given you some good

2603
01:47:35,279 --> 01:47:40,399
contacts with regards to resource

2604
01:47:37,840 --> 01:47:43,199
hierarchy its structure and the

2605
01:47:40,399 --> 01:47:45,198
permissions applied down the chain now

2606
01:47:43,198 --> 01:47:47,519
that's all i have for this lesson on

2607
01:47:45,198 --> 01:47:49,678
resource hierarchy so you can now mark

2608
01:47:47,520 --> 01:47:51,140
this lesson as complete and let's move

2609
01:47:49,679 --> 01:47:55,199
on to the next one

2610
01:47:51,140 --> 01:47:56,400
[Music]

2611
01:47:55,198 --> 01:47:58,719
welcome back

2612
01:47:56,399 --> 01:48:01,039
in this lesson i will be covering a few

2613
01:47:58,719 --> 01:48:03,840
different topics that i will touch on

2614
01:48:01,039 --> 01:48:06,000
when creating a new google cloud account

2615
01:48:03,840 --> 01:48:08,880
i will be covering going over the free

2616
01:48:06,000 --> 01:48:11,198
tier and the always free options the

2617
01:48:08,880 --> 01:48:13,440
differences between them and a demo

2618
01:48:11,198 --> 01:48:16,479
showing how you can create your own free

2619
01:48:13,439 --> 01:48:18,799
tier account as well i'll also be going

2620
01:48:16,479 --> 01:48:21,359
into what you will need in order to

2621
01:48:18,800 --> 01:48:24,639
fulfill this demo so for the remainder

2622
01:48:21,359 --> 01:48:26,559
of this course all the demos will run

2623
01:48:24,639 --> 01:48:28,800
under the free tier now when i built

2624
01:48:26,560 --> 01:48:31,920
this course i built it with budget in

2625
01:48:28,800 --> 01:48:34,239
mind and having viewed on ways where i

2626
01:48:31,920 --> 01:48:37,359
can keep the price to a minimum while

2627
01:48:34,238 --> 01:48:39,599
still keeping the demos extremely useful

2628
01:48:37,359 --> 01:48:42,000
and so the free tier falls within all

2629
01:48:39,600 --> 01:48:44,400
these guidelines and will help you learn

2630
01:48:42,000 --> 01:48:46,238
without the high ticket price and so

2631
01:48:44,399 --> 01:48:48,960
getting into a quick overview of the

2632
01:48:46,238 --> 01:48:51,279
differences between the free tier and

2633
01:48:48,960 --> 01:48:53,118
the always free option i have broken

2634
01:48:51,279 --> 01:48:55,759
them down here with their most

2635
01:48:53,118 --> 01:48:58,319
significant differences in the free tier

2636
01:48:55,760 --> 01:49:00,480
google cloud offers you a 12 month free

2637
01:48:58,319 --> 01:49:03,599
trial with a 300

2638
01:49:00,479 --> 01:49:06,638
u.s credit this type of account ends

2639
01:49:03,600 --> 01:49:09,360
when the credit is used or after the 12

2640
01:49:06,639 --> 01:49:10,960
months whichever happens first and so

2641
01:49:09,359 --> 01:49:13,359
for those of you who are looking at

2642
01:49:10,960 --> 01:49:16,079
taking advantage of this on a business

2643
01:49:13,359 --> 01:49:19,439
level unfortunately the free tier only

2644
01:49:16,079 --> 01:49:22,000
applies to a personal account and cannot

2645
01:49:19,439 --> 01:49:24,399
be attached to a business account now

2646
01:49:22,000 --> 01:49:26,560
moving over to the always free option

2647
01:49:24,399 --> 01:49:29,198
the always free option isn't a special

2648
01:49:26,560 --> 01:49:31,440
program but it's a regular part of your

2649
01:49:29,198 --> 01:49:34,000
google cloud account it provides you

2650
01:49:31,439 --> 01:49:37,118
limited access to many of the google

2651
01:49:34,000 --> 01:49:38,880
cloud resources free of charge and once

2652
01:49:37,118 --> 01:49:41,118
these limits have been hit

2653
01:49:38,880 --> 01:49:42,480
then you are charged at the regular per

2654
01:49:41,118 --> 01:49:44,319
second billing rate

2655
01:49:42,479 --> 01:49:46,638
and i will show you a little bit later

2656
01:49:44,319 --> 01:49:49,198
how to monitor these credits so that you

2657
01:49:46,639 --> 01:49:51,359
don't go over using this in conjunction

2658
01:49:49,198 --> 01:49:53,759
with the free tier account is not

2659
01:49:51,359 --> 01:49:56,479
possible you have to have an upgraded

2660
01:49:53,760 --> 01:49:58,480
billing account which can also include a

2661
01:49:56,479 --> 01:50:01,279
business account now there are a bunch

2662
01:49:58,479 --> 01:50:03,678
more stipulations in this program and i

2663
01:50:01,279 --> 01:50:06,319
will include a link to both of them in

2664
01:50:03,679 --> 01:50:07,760
the lesson text below for later viewing

2665
01:50:06,319 --> 01:50:10,399
at your convenience

2666
01:50:07,760 --> 01:50:11,920
now lastly before we get into the demo

2667
01:50:10,399 --> 01:50:14,799
i wanted to go through a quick

2668
01:50:11,920 --> 01:50:17,118
run-through of exactly what's needed to

2669
01:50:14,800 --> 01:50:19,360
open up your free tier account

2670
01:50:17,118 --> 01:50:21,598
so we're going to start off with a fresh

2671
01:50:19,359 --> 01:50:24,158
new gmail address so that it doesn't

2672
01:50:21,599 --> 01:50:25,840
conflict with any current gmail address

2673
01:50:24,158 --> 01:50:28,319
that you may have you're gonna need a

2674
01:50:25,840 --> 01:50:30,159
credit card for verification and this is

2675
01:50:28,319 --> 01:50:32,639
for google to make sure that you're an

2676
01:50:30,158 --> 01:50:35,039
actual human being and not a robot and

2677
01:50:32,639 --> 01:50:38,639
you won't be charged unless you go above

2678
01:50:35,039 --> 01:50:40,960
the 300 credit limit as well i highly

2679
01:50:38,639 --> 01:50:43,520
recommend going into a private browsing

2680
01:50:40,960 --> 01:50:45,920
session so whether you're using chrome

2681
01:50:43,520 --> 01:50:47,760
you would use an incognito session if

2682
01:50:45,920 --> 01:50:50,639
you're using firefox you would use

2683
01:50:47,760 --> 01:50:53,199
private browsing and in microsoft edge

2684
01:50:50,639 --> 01:50:54,880
you would be using the in private mode

2685
01:50:53,198 --> 01:50:57,519
and so in order to start with this free

2686
01:50:54,880 --> 01:51:00,000
trial you can head on over to the url

2687
01:50:57,520 --> 01:51:02,239
listed here and i'll also include this

2688
01:51:00,000 --> 01:51:04,560
in the lesson text so head on over to

2689
01:51:02,238 --> 01:51:06,479
this url and i'll see you there in just

2690
01:51:04,560 --> 01:51:08,639
a second

2691
01:51:06,479 --> 01:51:11,678
okay so here we are at the free trial

2692
01:51:08,639 --> 01:51:14,079
url i'm here in google chrome in an

2693
01:51:11,679 --> 01:51:15,599
incognito session and so we're not going

2694
01:51:14,079 --> 01:51:17,599
to sign up we're going to go over here

2695
01:51:15,599 --> 01:51:18,800
to create account you can just click on

2696
01:51:17,599 --> 01:51:20,960
create account

2697
01:51:18,800 --> 01:51:23,520
for myself because as i mentioned

2698
01:51:20,960 --> 01:51:26,079
earlier you're not able to create a free

2699
01:51:23,520 --> 01:51:28,400
trial account with your business

2700
01:51:26,079 --> 01:51:29,840
so i'm going to click on for myself

2701
01:51:28,399 --> 01:51:32,000
and it's going to bring you to this page

2702
01:51:29,840 --> 01:51:33,760
where it says create your google account

2703
01:51:32,000 --> 01:51:36,319
and you're going to go to create a new

2704
01:51:33,760 --> 01:51:37,679
gmail address instead

2705
01:51:36,319 --> 01:51:39,920
and now you're going to fill in all the

2706
01:51:37,679 --> 01:51:44,599
necessary information that's needed in

2707
01:51:39,920 --> 01:51:44,599
order to open up this new gmail account

2708
01:51:48,560 --> 01:51:52,560
once you're finished typing your

2709
01:51:49,840 --> 01:51:54,639
password you can hit next

2710
01:51:52,560 --> 01:51:56,960
and now i got prompted for six digit

2711
01:51:54,639 --> 01:51:59,440
verification code that i have to plug in

2712
01:51:56,960 --> 01:52:01,359
but in order to do that google needs my

2713
01:51:59,439 --> 01:52:03,678
telephone number so i'm gonna type that

2714
01:52:01,359 --> 01:52:06,158
in now and just to let you know this

2715
01:52:03,679 --> 01:52:08,000
verification is done to let google know

2716
01:52:06,158 --> 01:52:10,079
that you're not a bot and you're a real

2717
01:52:08,000 --> 01:52:11,920
human and google just sent me a

2718
01:52:10,079 --> 01:52:14,079
verification code

2719
01:52:11,920 --> 01:52:17,279
and this is a one-time verification code

2720
01:52:14,079 --> 01:52:19,920
that i'm going to plug in

2721
01:52:17,279 --> 01:52:21,679
and i'm going to hit verify

2722
01:52:19,920 --> 01:52:23,760
and you can plug in the necessary

2723
01:52:21,679 --> 01:52:25,920
information here for recovery email

2724
01:52:23,760 --> 01:52:28,000
address your birthday and gender and

2725
01:52:25,920 --> 01:52:31,118
this is so that google can authenticate

2726
01:52:28,000 --> 01:52:32,399
you in case you accidentally misplace

2727
01:52:31,118 --> 01:52:34,799
your password

2728
01:52:32,399 --> 01:52:36,719
and then just hit next and here google

2729
01:52:34,800 --> 01:52:38,960
gives you a little bit more information

2730
01:52:36,719 --> 01:52:41,520
on what your number can be used for and

2731
01:52:38,960 --> 01:52:42,639
so i'm going to go ahead and skip it

2732
01:52:41,520 --> 01:52:44,159
and of course we're going to read

2733
01:52:42,639 --> 01:52:45,840
through the terms of service and the

2734
01:52:44,158 --> 01:52:48,559
privacy policy

2735
01:52:45,840 --> 01:52:48,560
click on agree

2736
01:52:50,639 --> 01:52:54,880
and as you can see we're almost there

2737
01:52:52,960 --> 01:52:57,760
it shows here that we're

2738
01:52:54,880 --> 01:52:59,039
signing up for the free trial i'm in

2739
01:52:57,760 --> 01:53:00,639
canada so

2740
01:52:59,039 --> 01:53:02,800
depending on your country this may

2741
01:53:00,639 --> 01:53:05,118
change of course i read the terms of

2742
01:53:02,800 --> 01:53:06,960
service and i'm going to agree to it and

2743
01:53:05,118 --> 01:53:09,359
i don't really want any updates so you

2744
01:53:06,960 --> 01:53:12,359
can probably skip that and just hit

2745
01:53:09,359 --> 01:53:12,359
continue

2746
01:53:12,639 --> 01:53:15,840
and so this is all the necessary

2747
01:53:14,079 --> 01:53:18,000
information that needs to be filled out

2748
01:53:15,840 --> 01:53:20,239
for billing and so here under account

2749
01:53:18,000 --> 01:53:22,319
type be sure to click on individual as

2750
01:53:20,238 --> 01:53:24,079
opposed to business and again fill in

2751
01:53:22,319 --> 01:53:27,359
all the necessary information with

2752
01:53:24,079 --> 01:53:29,920
regards to your address and your credit

2753
01:53:27,359 --> 01:53:34,158
card details and once you fill that in

2754
01:53:29,920 --> 01:53:34,158
you can click on start my free trial

2755
01:53:34,639 --> 01:53:38,159
and once you've entered in all that

2756
01:53:36,158 --> 01:53:40,559
information you should be brought to

2757
01:53:38,158 --> 01:53:43,198
this page with a prompt

2758
01:53:40,560 --> 01:53:45,679
asking you exactly what you need with

2759
01:53:43,198 --> 01:53:47,598
regards to google cloud and you can just

2760
01:53:45,679 --> 01:53:49,440
hit skip here

2761
01:53:47,599 --> 01:53:51,279
and i'm going to zoom in here just see a

2762
01:53:49,439 --> 01:53:53,359
little better and so here you're left

2763
01:53:51,279 --> 01:53:55,519
with a checklist where you can go

2764
01:53:53,359 --> 01:53:57,279
through all the different resources and

2765
01:53:55,520 --> 01:54:00,239
it even gives you a checklist to go

2766
01:53:57,279 --> 01:54:02,079
through but other than that we're in

2767
01:54:00,238 --> 01:54:04,158
and so just to verify that we're signed

2768
01:54:02,079 --> 01:54:06,000
up for a free tier account i'm going to

2769
01:54:04,158 --> 01:54:08,399
go over to billing and i'm going to see

2770
01:54:06,000 --> 01:54:11,679
here that i have my free trial credit

2771
01:54:08,399 --> 01:54:13,439
and it says 411 dollars and due to the

2772
01:54:11,679 --> 01:54:15,760
fact that my currency is in canadian

2773
01:54:13,439 --> 01:54:17,839
dollars it's been converted from us

2774
01:54:15,760 --> 01:54:19,679
dollars and so we'll be going through

2775
01:54:17,840 --> 01:54:23,279
billing in a later lesson

2776
01:54:19,679 --> 01:54:25,118
but right now we are actually logged in

2777
01:54:23,279 --> 01:54:27,039
and so that's all i wanted to cover for

2778
01:54:25,118 --> 01:54:28,880
this lesson on how to sign up for your

2779
01:54:27,039 --> 01:54:30,479
free trial account

2780
01:54:28,880 --> 01:54:32,800
so you can now mark this lesson as

2781
01:54:30,479 --> 01:54:33,519
complete and you can join me in the next

2782
01:54:32,800 --> 01:54:35,760
one

2783
01:54:33,520 --> 01:54:37,760
where we will secure the account

2784
01:54:35,760 --> 01:54:39,140
using a method called two-step

2785
01:54:37,760 --> 01:54:43,039
verification

2786
01:54:39,140 --> 01:54:44,239
[Music]

2787
01:54:43,039 --> 01:54:46,880
welcome back

2788
01:54:44,238 --> 01:54:50,399
so in the last lesson we went ahead and

2789
01:54:46,880 --> 01:54:53,279
created a brand new gcp account in this

2790
01:54:50,399 --> 01:54:56,238
lesson we'll be discussing how to secure

2791
01:54:53,279 --> 01:54:57,519
that gcp account by following some best

2792
01:54:56,238 --> 01:54:59,919
practices

2793
01:54:57,520 --> 01:55:02,159
whenever any account is created in

2794
01:54:59,920 --> 01:55:04,639
google cloud and this can be applied

2795
01:55:02,158 --> 01:55:07,598
with regards to personal accounts as

2796
01:55:04,639 --> 01:55:10,960
well as the super admin account as it's

2797
01:55:07,599 --> 01:55:13,679
always good to keep safety as a priority

2798
01:55:10,960 --> 01:55:16,000
this lesson may be a refresher for those

2799
01:55:13,679 --> 01:55:18,319
who are a bit more advanced as for

2800
01:55:16,000 --> 01:55:21,198
everyone else these steps could help you

2801
01:55:18,319 --> 01:55:23,359
from an attack on your account i'd first

2802
01:55:21,198 --> 01:55:25,919
like to run you through a scenario of

2803
01:55:23,359 --> 01:55:27,679
the outcome on both secure and

2804
01:55:25,920 --> 01:55:29,599
non-secure accounts

2805
01:55:27,679 --> 01:55:31,520
as well as the different options that

2806
01:55:29,599 --> 01:55:33,440
reside in google cloud

2807
01:55:31,520 --> 01:55:35,840
when it comes to locking down your

2808
01:55:33,439 --> 01:55:37,519
account i'll then run through a hands-on

2809
01:55:35,840 --> 01:55:39,360
demo in the console

2810
01:55:37,520 --> 01:55:40,639
to show you how you can apply it

2811
01:55:39,359 --> 01:55:43,439
yourself

2812
01:55:40,639 --> 01:55:45,760
so in this specific scenario a username

2813
01:55:43,439 --> 01:55:47,118
and password is used to secure the

2814
01:55:45,760 --> 01:55:50,320
account

2815
01:55:47,118 --> 01:55:53,519
here lark a trouble causing manager

2816
01:55:50,319 --> 01:55:55,599
looks over the shoulder of tony bowtie

2817
01:55:53,520 --> 01:55:56,719
while he plugs in his username and

2818
01:55:55,599 --> 01:55:59,679
password

2819
01:55:56,719 --> 01:56:02,639
so that he can later access his account

2820
01:55:59,679 --> 01:56:04,560
to wreak havoc on tony's reputation as

2821
01:56:02,639 --> 01:56:06,960
tony leaves for coffee

2822
01:56:04,560 --> 01:56:10,159
lark decides to log in and send a

2823
01:56:06,960 --> 01:56:13,039
company-wide email from tony's account

2824
01:56:10,158 --> 01:56:15,759
to change an already made decision about

2825
01:56:13,039 --> 01:56:19,118
next season's store opening in rome

2826
01:56:15,760 --> 01:56:21,840
italy that would not look good for tony

2827
01:56:19,118 --> 01:56:24,000
it was that easy for lark to steal

2828
01:56:21,840 --> 01:56:26,880
tony's password and in a real life

2829
01:56:24,000 --> 01:56:29,198
scenario it would be that easy for

2830
01:56:26,880 --> 01:56:31,440
someone to steal your password now when

2831
01:56:29,198 --> 01:56:33,678
someone steals your password they could

2832
01:56:31,439 --> 01:56:36,000
do even more devious things than what

2833
01:56:33,679 --> 01:56:38,319
lark did not just sending out harmful

2834
01:56:36,000 --> 01:56:40,960
emails they could lock you out of your

2835
01:56:38,319 --> 01:56:43,439
account or even delete emails or

2836
01:56:40,960 --> 01:56:46,399
documents this is where two-step

2837
01:56:43,439 --> 01:56:47,839
verification comes in this can help keep

2838
01:56:46,399 --> 01:56:50,719
bad people out

2839
01:56:47,840 --> 01:56:53,599
even if they have your password two-step

2840
01:56:50,719 --> 01:56:56,719
verification is an extra layer of

2841
01:56:53,599 --> 01:56:58,960
security most people only have one layer

2842
01:56:56,719 --> 01:57:01,920
to protect their account which is their

2843
01:56:58,960 --> 01:57:03,920
password with two-step verification

2844
01:57:01,920 --> 01:57:06,880
if a bad person hacks through your

2845
01:57:03,920 --> 01:57:10,480
password they'll still need your phone

2846
01:57:06,880 --> 01:57:13,440
or security key to get into your account

2847
01:57:10,479 --> 01:57:16,158
so how two-step verification works is

2848
01:57:13,439 --> 01:57:17,198
that sign-in will require something you

2849
01:57:16,158 --> 01:57:19,519
know

2850
01:57:17,198 --> 01:57:22,000
and something that you have

2851
01:57:19,520 --> 01:57:23,920
the first one is to protect your account

2852
01:57:22,000 --> 01:57:26,479
with something you know which will be

2853
01:57:23,920 --> 01:57:28,158
your password and the second is

2854
01:57:26,479 --> 01:57:31,118
something that you have

2855
01:57:28,158 --> 01:57:33,679
which is your phone or security key

2856
01:57:31,118 --> 01:57:36,238
so whenever you sign into google you'll

2857
01:57:33,679 --> 01:57:39,118
enter your password as usual

2858
01:57:36,238 --> 01:57:40,559
then a code will be sent to your phone

2859
01:57:39,118 --> 01:57:44,238
via text

2860
01:57:40,560 --> 01:57:46,639
voice call or google's mobile app or if

2861
01:57:44,238 --> 01:57:49,678
you have a security key you can insert

2862
01:57:46,639 --> 01:57:52,880
it into your computer's usb port

2863
01:57:49,679 --> 01:57:55,039
codes can be sent in a text message or

2864
01:57:52,880 --> 01:57:56,719
through a voice call depending on the

2865
01:57:55,039 --> 01:57:59,359
setting you choose

2866
01:57:56,719 --> 01:58:02,000
you can set up google authenticator or

2867
01:57:59,359 --> 01:58:04,559
another app that creates a one-time

2868
01:58:02,000 --> 01:58:07,039
verification code which is great for

2869
01:58:04,560 --> 01:58:09,440
when you're offline you would then enter

2870
01:58:07,039 --> 01:58:12,560
the verification code on the sign in

2871
01:58:09,439 --> 01:58:14,879
screen to help verify that it is you

2872
01:58:12,560 --> 01:58:17,679
another way for verification is using

2873
01:58:14,880 --> 01:58:20,480
google prompts and this can help protect

2874
01:58:17,679 --> 01:58:23,440
against sim swap or other phone number

2875
01:58:20,479 --> 01:58:26,399
based hacks google prompts are push

2876
01:58:23,439 --> 01:58:28,319
notifications you'll receive on android

2877
01:58:26,399 --> 01:58:31,439
phones that are signed into your google

2878
01:58:28,319 --> 01:58:33,439
account or iphones with the gmail app or

2879
01:58:31,439 --> 01:58:36,158
google app that's signed into your

2880
01:58:33,439 --> 01:58:39,118
google account now you can actually skip

2881
01:58:36,158 --> 01:58:40,960
a second step on trusted devices

2882
01:58:39,118 --> 01:58:44,000
if you don't want to provide a second

2883
01:58:40,960 --> 01:58:46,399
verification step each time you sign in

2884
01:58:44,000 --> 01:58:49,279
on your computer or your phone you can

2885
01:58:46,399 --> 01:58:51,759
check the box next to don't ask again on

2886
01:58:49,279 --> 01:58:54,639
this computer and this is a great added

2887
01:58:51,760 --> 01:58:55,760
feature if you are the only user on this

2888
01:58:54,639 --> 01:58:58,400
device

2889
01:58:55,760 --> 01:59:01,599
this feature is not recommended if this

2890
01:58:58,399 --> 01:59:03,759
device is being used by multiple users

2891
01:59:01,599 --> 01:59:05,840
security keys are another way to help

2892
01:59:03,760 --> 01:59:08,560
protect your google account from

2893
01:59:05,840 --> 01:59:11,360
phishing attacks when a hacker tries to

2894
01:59:08,560 --> 01:59:13,920
trick you into giving them your password

2895
01:59:11,359 --> 01:59:16,799
or other personal information now a

2896
01:59:13,920 --> 01:59:19,359
physical security key is a small device

2897
01:59:16,800 --> 01:59:21,599
that you can buy to help prove it's you

2898
01:59:19,359 --> 01:59:23,039
signing in when google needs to make

2899
01:59:21,599 --> 01:59:25,760
sure that it's you

2900
01:59:23,039 --> 01:59:28,319
you can simply connect your key to your

2901
01:59:25,760 --> 01:59:30,800
computer and verify that it's you and

2902
01:59:28,319 --> 01:59:33,359
when you have no other way to verify

2903
01:59:30,800 --> 01:59:35,679
your account you have the option of

2904
01:59:33,359 --> 01:59:38,399
using backup codes and these are

2905
01:59:35,679 --> 01:59:40,960
one-time use codes that you can print or

2906
01:59:38,399 --> 01:59:43,198
download and these are multiple sets of

2907
01:59:40,960 --> 01:59:45,760
eight-digit codes that you can keep in a

2908
01:59:43,198 --> 01:59:48,638
safe place in case you have no other

2909
01:59:45,760 --> 01:59:50,880
options for verification i personally

2910
01:59:48,639 --> 01:59:53,520
have found use in using these backup

2911
01:59:50,880 --> 01:59:55,118
codes as i have used them in past when

2912
01:59:53,520 --> 01:59:58,480
my phone died

2913
01:59:55,118 --> 02:00:01,519
so ever since lark's last email

2914
01:59:58,479 --> 02:00:04,079
tony not only changed his password

2915
02:00:01,520 --> 02:00:06,719
but added a two-step verification to his

2916
02:00:04,079 --> 02:00:09,118
account so that only he would have

2917
02:00:06,719 --> 02:00:11,118
access and would never have to worry

2918
02:00:09,118 --> 02:00:14,079
again about others looking over his

2919
02:00:11,118 --> 02:00:16,079
shoulder to gain access to his account

2920
02:00:14,079 --> 02:00:18,800
as tony leaves for coffee

2921
02:00:16,079 --> 02:00:21,198
lark tries to log in again but is

2922
02:00:18,800 --> 02:00:24,320
unsuccessful due to the two-step

2923
02:00:21,198 --> 02:00:27,359
verification in place tony has clearly

2924
02:00:24,319 --> 02:00:29,359
outsmarted the bad man in this scenario

2925
02:00:27,359 --> 02:00:32,639
and lark will have to look for another

2926
02:00:29,359 --> 02:00:35,598
way to foil tony's plan to bring

2927
02:00:32,639 --> 02:00:38,239
greatness to bow ties across the globe

2928
02:00:35,599 --> 02:00:40,719
and this is a sure difference between

2929
02:00:38,238 --> 02:00:42,799
having a secure account and a not so

2930
02:00:40,719 --> 02:00:44,639
secure account and so now that i've gone

2931
02:00:42,800 --> 02:00:47,119
through the theory of the two-step

2932
02:00:44,639 --> 02:00:49,760
verification process i'm going to dive

2933
02:00:47,118 --> 02:00:52,799
into the console and implement it with

2934
02:00:49,760 --> 02:00:55,199
the hands-on demo just be aware that you

2935
02:00:52,800 --> 02:00:57,279
can also do this through the gmail

2936
02:00:55,198 --> 02:00:59,519
console but we're going to go ahead and

2937
02:00:57,279 --> 02:01:02,158
do it through the google cloud console

2938
02:00:59,520 --> 02:01:04,400
using the url you see here so whenever

2939
02:01:02,158 --> 02:01:06,158
you're ready feel free to join me in the

2940
02:01:04,399 --> 02:01:08,479
console

2941
02:01:06,158 --> 02:01:10,238
and so here we are back in the console

2942
02:01:08,479 --> 02:01:13,118
and over here on the top right hand

2943
02:01:10,238 --> 02:01:14,879
corner you will find a user icon and you

2944
02:01:13,118 --> 02:01:17,598
can simply click on it

2945
02:01:14,880 --> 02:01:19,199
and click over to your google account

2946
02:01:17,599 --> 02:01:20,239
now i'm just going to zoom in for better

2947
02:01:19,198 --> 02:01:22,319
viewing

2948
02:01:20,238 --> 02:01:24,959
and so in order to enable two-step

2949
02:01:22,319 --> 02:01:27,279
verification we're gonna go over here to

2950
02:01:24,960 --> 02:01:29,920
the menu on the left and click on

2951
02:01:27,279 --> 02:01:32,238
security and under signing into google

2952
02:01:29,920 --> 02:01:34,960
you will find two-step verification

2953
02:01:32,238 --> 02:01:37,039
currently it's off as well as using my

2954
02:01:34,960 --> 02:01:38,800
phone to sign in is off so i'm going to

2955
02:01:37,039 --> 02:01:40,158
click on this bar here for two-step

2956
02:01:38,800 --> 02:01:41,920
verification

2957
02:01:40,158 --> 02:01:44,479
and i definitely want to add an extra

2958
02:01:41,920 --> 02:01:46,560
layer of security and i definitely want

2959
02:01:44,479 --> 02:01:48,238
to keep the bad guys out so i'm going to

2960
02:01:46,560 --> 02:01:49,119
go ahead and click on the get started

2961
02:01:48,238 --> 02:01:52,000
button

2962
02:01:49,118 --> 02:01:54,158
it'll ask me for my password

2963
02:01:52,000 --> 02:01:56,079
and because i've entered my phone number

2964
02:01:54,158 --> 02:01:58,399
when i first signed up for the account

2965
02:01:56,079 --> 02:02:01,198
it actually shows up here this is i

2966
02:01:58,399 --> 02:02:04,000
antony which is my iphone and so now i

2967
02:02:01,198 --> 02:02:06,158
can get a two-step verification here on

2968
02:02:04,000 --> 02:02:08,880
my iphone and again this is going to be

2969
02:02:06,158 --> 02:02:11,118
a google prompt as it shows here but if

2970
02:02:08,880 --> 02:02:14,239
i wanted to change it to something else

2971
02:02:11,118 --> 02:02:17,039
i can simply click on show more options

2972
02:02:14,238 --> 02:02:19,678
and here we have a security key as well

2973
02:02:17,039 --> 02:02:21,679
as text message or voice call i highly

2974
02:02:19,679 --> 02:02:24,560
recommend the google prompt as it's

2975
02:02:21,679 --> 02:02:27,359
super easy to use with absolutely no

2976
02:02:24,560 --> 02:02:29,119
fuss and so as i always like to verify

2977
02:02:27,359 --> 02:02:31,679
what i've done i'm going to click on

2978
02:02:29,118 --> 02:02:34,158
this try it now button and so because i

2979
02:02:31,679 --> 02:02:36,319
wanted to show you exactly what a live

2980
02:02:34,158 --> 02:02:38,879
google prompt looks like i'm going to

2981
02:02:36,319 --> 02:02:41,759
bring up my phone here on the screen so

2982
02:02:38,880 --> 02:02:44,079
that you can take a look

2983
02:02:41,760 --> 02:02:46,079
and it actually sent me a google prompt

2984
02:02:44,079 --> 02:02:48,399
to my phone and i'm just going to go

2985
02:02:46,079 --> 02:02:51,118
ahead and open up my gmail app so i can

2986
02:02:48,399 --> 02:02:55,279
verify that it is indeed me that wants

2987
02:02:51,118 --> 02:02:55,279
to log in which i will accept

2988
02:02:57,039 --> 02:03:01,760
and so once i've accepted the google

2989
02:02:58,800 --> 02:03:04,000
prompt another window will pop up asking

2990
02:03:01,760 --> 02:03:05,840
me about a backup option and so i'll

2991
02:03:04,000 --> 02:03:08,319
simply need my phone number

2992
02:03:05,840 --> 02:03:10,239
and i can either get a text message or a

2993
02:03:08,319 --> 02:03:12,238
phone call and again you have other

2994
02:03:10,238 --> 02:03:14,399
options as well so you can use the

2995
02:03:12,238 --> 02:03:16,559
one-time backup codes which we discussed

2996
02:03:14,399 --> 02:03:19,198
earlier and you can print or download

2997
02:03:16,560 --> 02:03:22,080
them but i usually like to use a text

2998
02:03:19,198 --> 02:03:24,638
message and so i'm going to use that

2999
02:03:22,079 --> 02:03:28,079
i'm going to send it to my phone

3000
02:03:24,639 --> 02:03:30,159
and so just to verify it

3001
02:03:28,079 --> 02:03:32,960
i'm gonna now plug in the one-time code

3002
02:03:30,158 --> 02:03:32,960
that was sent to me

3003
02:03:35,760 --> 02:03:40,320
and then just hit next

3004
02:03:37,520 --> 02:03:43,360
so the second step is the google prompt

3005
02:03:40,319 --> 02:03:46,079
it's my default and my backup options if

3006
02:03:43,359 --> 02:03:48,238
i can't get google prompt is a voice or

3007
02:03:46,079 --> 02:03:51,599
text message and again this is for my

3008
02:03:48,238 --> 02:03:55,039
account antony gcloud ace at gmail.com

3009
02:03:51,599 --> 02:03:59,599
sending it to my i antony device so turn

3010
02:03:55,039 --> 02:04:01,279
on two-step verification absolutely

3011
02:03:59,599 --> 02:04:03,920
and so there you have it there is

3012
02:04:01,279 --> 02:04:06,719
two-step verification enabled and if i

3013
02:04:03,920 --> 02:04:09,840
wanted to change the available steps i

3014
02:04:06,719 --> 02:04:12,480
can do so here i can also edit it i can

3015
02:04:09,840 --> 02:04:15,679
edit my phone number and i can also set

3016
02:04:12,479 --> 02:04:17,759
up any backup codes in case i need it in

3017
02:04:15,679 --> 02:04:19,118
my personal opinion two-step

3018
02:04:17,760 --> 02:04:22,000
verification

3019
02:04:19,118 --> 02:04:24,799
is a must-have on any account best

3020
02:04:22,000 --> 02:04:27,118
practice is to always do it for your

3021
02:04:24,800 --> 02:04:29,119
super admin account which would be my

3022
02:04:27,118 --> 02:04:32,399
gmail account that i am currently signed

3023
02:04:29,118 --> 02:04:35,039
up with but i find is a necessity for

3024
02:04:32,399 --> 02:04:37,679
any other users and always make it a

3025
02:04:35,039 --> 02:04:40,319
policy for people to add two-step

3026
02:04:37,679 --> 02:04:42,399
verification to their accounts i highly

3027
02:04:40,319 --> 02:04:45,039
recommend that you make it your best

3028
02:04:42,399 --> 02:04:48,238
practice to do this in your role as an

3029
02:04:45,039 --> 02:04:51,840
engineer in any environment at any

3030
02:04:48,238 --> 02:04:54,479
organization again two-step verification

3031
02:04:51,840 --> 02:04:57,039
will allow to keep you safe your users

3032
02:04:54,479 --> 02:04:59,519
safe and your environment safe from any

3033
02:04:57,039 --> 02:05:01,679
malicious activities that could happen

3034
02:04:59,520 --> 02:05:04,719
at any time and that's all i have for

3035
02:05:01,679 --> 02:05:06,399
this lesson on two-step verification and

3036
02:05:04,719 --> 02:05:08,078
securing your account

3037
02:05:06,399 --> 02:05:10,479
so you can now mark this lesson as

3038
02:05:08,078 --> 02:05:11,289
complete and let's move on to the next

3039
02:05:10,479 --> 02:05:15,598
one

3040
02:05:11,289 --> 02:05:17,039
[Music]

3041
02:05:15,599 --> 02:05:18,719
welcome back

3042
02:05:17,039 --> 02:05:21,118
now there are many different ways in

3043
02:05:18,719 --> 02:05:25,039
which you can interact with google cloud

3044
02:05:21,118 --> 02:05:28,319
services and resources this lesson is an

3045
02:05:25,039 --> 02:05:31,039
overview of the gcp console and how you

3046
02:05:28,319 --> 02:05:33,599
can interact with it using the graphical

3047
02:05:31,039 --> 02:05:34,399
user interface and so for this hands-on

3048
02:05:33,599 --> 02:05:36,719
demo

3049
02:05:34,399 --> 02:05:39,118
i will be diving into how to navigate

3050
02:05:36,719 --> 02:05:41,359
through the gcp console and point out

3051
02:05:39,118 --> 02:05:43,920
some functions and features that you may

3052
02:05:41,359 --> 02:05:46,000
find helpful so with that being said

3053
02:05:43,920 --> 02:05:48,239
let's dive in

3054
02:05:46,000 --> 02:05:50,719
and so here we are back in the console

3055
02:05:48,238 --> 02:05:54,479
up here you can see the free trial

3056
02:05:50,719 --> 02:05:56,960
status and then i still have 410 credit

3057
02:05:54,479 --> 02:05:58,959
again this is canadian dollars so i

3058
02:05:56,960 --> 02:06:01,599
guess consider me lucky so i'm going to

3059
02:05:58,960 --> 02:06:03,599
go ahead over here and dismiss this

3060
02:06:01,599 --> 02:06:06,480
don't activate it because otherwise this

3061
02:06:03,599 --> 02:06:08,239
will kill your free trial status and you

3062
02:06:06,479 --> 02:06:10,638
don't want to do that so i'm just going

3063
02:06:08,238 --> 02:06:13,359
to hit dismiss so over here on the main

3064
02:06:10,639 --> 02:06:14,960
page you have a bunch of cards here that

3065
02:06:13,359 --> 02:06:17,359
will give you the status of your

3066
02:06:14,960 --> 02:06:19,760
environment as well as the status of

3067
02:06:17,359 --> 02:06:22,399
what's happening within google cloud

3068
02:06:19,760 --> 02:06:24,079
with these cards you can customize them

3069
02:06:22,399 --> 02:06:26,799
by hitting this button over here

3070
02:06:24,078 --> 02:06:28,960
customize and you can turn them on or

3071
02:06:26,800 --> 02:06:31,840
off and you can go ahead and move these

3072
02:06:28,960 --> 02:06:31,840
around if you'd like

3073
02:06:34,719 --> 02:06:38,880
and i'm going to put this up here as

3074
02:06:36,800 --> 02:06:41,119
well i'm going to turn on my billing so

3075
02:06:38,880 --> 02:06:43,440
i can keep track of exactly what my

3076
02:06:41,118 --> 02:06:45,279
spend is i don't really need my get

3077
02:06:43,439 --> 02:06:47,439
starting card so i'm going to turn that

3078
02:06:45,279 --> 02:06:50,479
off as well as the documentation i'm

3079
02:06:47,439 --> 02:06:54,078
going to turn that off as well

3080
02:06:50,479 --> 02:06:56,718
and the apis is always nice to have

3081
02:06:54,078 --> 02:06:59,118
as well up here on the project info this

3082
02:06:56,719 --> 02:07:00,800
reflects the current project which is my

3083
02:06:59,118 --> 02:07:04,158
first project

3084
02:07:00,800 --> 02:07:06,079
and the project name here is the same

3085
02:07:04,158 --> 02:07:08,000
the project id is showing and the

3086
02:07:06,078 --> 02:07:10,479
project number and i'm going to dive

3087
02:07:08,000 --> 02:07:12,639
deeper into that in another lesson also

3088
02:07:10,479 --> 02:07:14,158
note that your cards will reflect

3089
02:07:12,639 --> 02:07:16,159
exactly what it is that you're

3090
02:07:14,158 --> 02:07:18,799
interacting with and so the more

3091
02:07:16,158 --> 02:07:21,198
resources that you dive into the cards

3092
02:07:18,800 --> 02:07:23,039
will end up showing up here

3093
02:07:21,198 --> 02:07:24,879
and you can add them and turn them off

3094
02:07:23,039 --> 02:07:27,198
at will so i'm going to go up here and

3095
02:07:24,880 --> 02:07:29,118
click on done because i'm satisfied with

3096
02:07:27,198 --> 02:07:31,279
the way that things look

3097
02:07:29,118 --> 02:07:33,598
here on my home page and over here to

3098
02:07:31,279 --> 02:07:36,639
your left i wanted to focus on

3099
02:07:33,599 --> 02:07:39,119
all the services that are available in

3100
02:07:36,639 --> 02:07:41,118
their own specific topics so for

3101
02:07:39,118 --> 02:07:43,839
instance all of compute

3102
02:07:41,118 --> 02:07:46,559
you will find app engine compute engine

3103
02:07:43,840 --> 02:07:48,800
kubernetes and so on so note that

3104
02:07:46,560 --> 02:07:51,280
anything compute related you'll find

3105
02:07:48,800 --> 02:07:53,039
them all grouped together also another

3106
02:07:51,279 --> 02:07:56,319
great feature is that you can pin

3107
02:07:53,039 --> 02:07:59,359
exactly what it is that you use often so

3108
02:07:56,319 --> 02:08:01,759
if i am a big user of app engine i can

3109
02:07:59,359 --> 02:08:04,000
pin this and it will move its way up to

3110
02:08:01,760 --> 02:08:06,320
the top this way it saves me the time

3111
02:08:04,000 --> 02:08:08,479
from having to go and look for it every

3112
02:08:06,319 --> 02:08:11,198
time i need it and if i'm using it

3113
02:08:08,479 --> 02:08:14,000
constantly it's great to have a shortcut

3114
02:08:11,198 --> 02:08:16,319
to unpin it i simply go back to the pin

3115
02:08:14,000 --> 02:08:18,000
and click on it again as well if i'd

3116
02:08:16,319 --> 02:08:20,319
like to move the menu out of the way to

3117
02:08:18,000 --> 02:08:22,479
get more screen real estate i can simply

3118
02:08:20,319 --> 02:08:24,479
click on this hamburger button here

3119
02:08:22,479 --> 02:08:26,799
and make it disappear and to bring it

3120
02:08:24,479 --> 02:08:28,879
back i can just click on that again and

3121
02:08:26,800 --> 02:08:30,880
i'll bring it back again now i know that

3122
02:08:28,880 --> 02:08:32,400
there's a lot of resources here to go

3123
02:08:30,880 --> 02:08:35,039
through so if you're looking for

3124
02:08:32,399 --> 02:08:37,198
something specific you can always go up

3125
02:08:35,039 --> 02:08:39,679
to the search bar right here

3126
02:08:37,198 --> 02:08:42,479
and simply type it in so if i'm looking

3127
02:08:39,679 --> 02:08:45,118
for let's say cloud sql i can simply

3128
02:08:42,479 --> 02:08:47,678
type in sql

3129
02:08:45,118 --> 02:08:50,319
and i can find it right here

3130
02:08:47,679 --> 02:08:53,118
i can find the api and if anything

3131
02:08:50,319 --> 02:08:56,000
associated with the word sql if i'm

3132
02:08:53,118 --> 02:08:57,439
looking for cloud sql specifically i can

3133
02:08:56,000 --> 02:09:00,319
simply type in

3134
02:08:57,439 --> 02:09:00,319
cloud sql

3135
02:09:00,560 --> 02:09:04,119
and here it is

3136
02:09:04,399 --> 02:09:09,198
another thing to note is that if you

3137
02:09:06,560 --> 02:09:11,599
want to go back to your homepage you can

3138
02:09:09,198 --> 02:09:13,759
simply go up to the left hand corner

3139
02:09:11,599 --> 02:09:16,078
here and click on the google cloud

3140
02:09:13,760 --> 02:09:18,159
platform logo and it'll bring you right

3141
02:09:16,078 --> 02:09:20,639
back and right here under the google

3142
02:09:18,158 --> 02:09:23,279
cloud platform logo you'll see another

3143
02:09:20,639 --> 02:09:25,760
set of tabs we have dashboard we also

3144
02:09:23,279 --> 02:09:28,000
have activity and this will show all the

3145
02:09:25,760 --> 02:09:30,320
latest activity that's been done

3146
02:09:28,000 --> 02:09:32,479
and because this is a brand new account

3147
02:09:30,319 --> 02:09:34,559
i don't have much here now because this

3148
02:09:32,479 --> 02:09:36,638
is my first time in activity this is

3149
02:09:34,560 --> 02:09:38,960
going to take some time to index

3150
02:09:36,639 --> 02:09:40,000
and in the meantime i wanted to show you

3151
02:09:38,960 --> 02:09:42,719
filters

3152
02:09:40,000 --> 02:09:44,560
if this were a long list to go through

3153
02:09:42,719 --> 02:09:46,399
where activity has been happening for

3154
02:09:44,560 --> 02:09:49,039
months i can filter through these

3155
02:09:46,399 --> 02:09:52,399
activities either by user or by

3156
02:09:49,039 --> 02:09:55,279
categories or by resource type as well

3157
02:09:52,399 --> 02:09:57,519
as the date i can also combine these to

3158
02:09:55,279 --> 02:09:59,599
search for something really granular and

3159
02:09:57,520 --> 02:10:02,079
beside the activity tab we have

3160
02:09:59,599 --> 02:10:04,639
recommendations which is based on the

3161
02:10:02,078 --> 02:10:07,359
recommender service and this service

3162
02:10:04,639 --> 02:10:10,078
provides recommendations and insights

3163
02:10:07,359 --> 02:10:12,479
for using resources on google cloud

3164
02:10:10,078 --> 02:10:15,679
these recommendations and insights are

3165
02:10:12,479 --> 02:10:17,519
on a per product or per service basis

3166
02:10:15,679 --> 02:10:19,920
and they are based on machine learning

3167
02:10:17,520 --> 02:10:22,639
and current resource usage a great

3168
02:10:19,920 --> 02:10:24,399
example of a recommendation is vm

3169
02:10:22,639 --> 02:10:26,800
instance right sizing so if the

3170
02:10:24,399 --> 02:10:29,359
recommender service detects that a vm

3171
02:10:26,800 --> 02:10:31,840
instance is underutilized it will

3172
02:10:29,359 --> 02:10:33,920
recommend changing the machine size so

3173
02:10:31,840 --> 02:10:36,078
that i can save some money and because

3174
02:10:33,920 --> 02:10:38,560
this is a fresh new account and i

3175
02:10:36,078 --> 02:10:40,719
haven't used any resources this is why

3176
02:10:38,560 --> 02:10:42,560
there is no recommendations for me so

3177
02:10:40,719 --> 02:10:44,399
going back to the home page

3178
02:10:42,560 --> 02:10:46,880
i want to touch on this projects menu

3179
02:10:44,399 --> 02:10:50,000
for a second and as you can see here i

3180
02:10:46,880 --> 02:10:52,239
can select a project now if i had many

3181
02:10:50,000 --> 02:10:54,560
different projects i can simply search

3182
02:10:52,238 --> 02:10:56,718
from each different one and so to cover

3183
02:10:54,560 --> 02:10:59,440
the last part of the console i wanted to

3184
02:10:56,719 --> 02:11:01,760
touch on this menu on the top right hand

3185
02:10:59,439 --> 02:11:04,479
corner here so clicking on this present

3186
02:11:01,760 --> 02:11:06,719
icon will reveal my free trial status

3187
02:11:04,479 --> 02:11:09,439
which i dismissed earlier next to the

3188
02:11:06,719 --> 02:11:11,520
present we have a cloud shell icon and

3189
02:11:09,439 --> 02:11:13,759
this is where you can activate and bring

3190
02:11:11,520 --> 02:11:16,560
up the cloud shell which i will be

3191
02:11:13,760 --> 02:11:18,560
diving into deeper in a later lesson and

3192
02:11:16,560 --> 02:11:20,079
right next to it is the help button in

3193
02:11:18,560 --> 02:11:22,960
case you need a shortcut to any

3194
02:11:20,078 --> 02:11:24,399
documentations or tutorials as well some

3195
02:11:22,960 --> 02:11:26,078
keyboard shortcuts

3196
02:11:24,399 --> 02:11:28,078
may help you be a little bit more

3197
02:11:26,078 --> 02:11:30,399
efficient and you can always click on

3198
02:11:28,078 --> 02:11:32,319
this and it'll show you exactly what you

3199
02:11:30,399 --> 02:11:33,519
need to know and so i'm going to close

3200
02:11:32,319 --> 02:11:35,118
this

3201
02:11:33,520 --> 02:11:38,079
and to move over to the next part in the

3202
02:11:35,118 --> 02:11:40,158
menu this is the notifications so any

3203
02:11:38,078 --> 02:11:42,479
activities that happen you will be

3204
02:11:40,158 --> 02:11:44,719
notified here and you can simply click

3205
02:11:42,479 --> 02:11:46,959
on the bell and it'll show you a bunch

3206
02:11:44,719 --> 02:11:49,679
of different notifications for either

3207
02:11:46,960 --> 02:11:52,560
resources that are created or any other

3208
02:11:49,679 --> 02:11:54,158
activities that may have happened now

3209
02:11:52,560 --> 02:11:56,480
moving on over

3210
02:11:54,158 --> 02:11:58,158
three buttons over here is the settings

3211
02:11:56,479 --> 02:11:59,839
and utilities button

3212
02:11:58,158 --> 02:12:02,319
and over here you will find the

3213
02:11:59,840 --> 02:12:04,319
preferences

3214
02:12:02,319 --> 02:12:06,639
and under communication you will find

3215
02:12:04,319 --> 02:12:09,519
product notifications and updates and

3216
02:12:06,639 --> 02:12:11,039
offers and you can turn them off or on

3217
02:12:09,520 --> 02:12:13,360
depending on whether or not you want to

3218
02:12:11,039 --> 02:12:15,599
receive these notifications as well you

3219
02:12:13,359 --> 02:12:18,158
have your language and region and you

3220
02:12:15,599 --> 02:12:20,159
can personalize the cloud console as to

3221
02:12:18,158 --> 02:12:22,638
whether or not you want to allow google

3222
02:12:20,158 --> 02:12:24,879
to track your activity and this is great

3223
02:12:22,639 --> 02:12:26,639
for when you want recommendations so i'm

3224
02:12:24,880 --> 02:12:28,880
going to keep that checked off getting

3225
02:12:26,639 --> 02:12:31,199
back to some other options you will find

3226
02:12:28,880 --> 02:12:33,760
a link to downloads as well as cloud

3227
02:12:31,198 --> 02:12:36,799
partners and the terms of service

3228
02:12:33,760 --> 02:12:38,639
privacy and project settings and so to

3229
02:12:36,800 --> 02:12:41,599
cover the last topic i wanted to touch

3230
02:12:38,639 --> 02:12:43,679
on is the actual google account button

3231
02:12:41,599 --> 02:12:45,679
and here you can add other user accounts

3232
02:12:43,679 --> 02:12:48,000
for when you log into the console with a

3233
02:12:45,679 --> 02:12:50,158
different user as well as go straight to

3234
02:12:48,000 --> 02:12:51,920
your google account and of course if

3235
02:12:50,158 --> 02:12:54,559
you're using a computer that's used by

3236
02:12:51,920 --> 02:12:56,319
multiple users you can sign out here as

3237
02:12:54,560 --> 02:12:58,320
well and so that's just a quick

3238
02:12:56,319 --> 02:13:01,118
run-through of the console and so feel

3239
02:12:58,319 --> 02:13:02,880
free to poke around and get familiar

3240
02:13:01,118 --> 02:13:05,198
with exactly what's available in the

3241
02:13:02,880 --> 02:13:07,679
console so that it's a lot easier for

3242
02:13:05,198 --> 02:13:09,598
you to use and allow you to become more

3243
02:13:07,679 --> 02:13:11,760
efficient and so that's all i have for

3244
02:13:09,599 --> 02:13:14,239
this lesson so you can now mark this

3245
02:13:11,760 --> 02:13:17,639
lesson as complete and let's move on to

3246
02:13:14,238 --> 02:13:17,638
the next one

3247
02:13:19,599 --> 02:13:23,119
welcome back

3248
02:13:20,960 --> 02:13:25,760
in this lesson i'm going to be going

3249
02:13:23,118 --> 02:13:28,399
through a breakdown of cloud billing and

3250
02:13:25,760 --> 02:13:30,800
an overview of the various resources

3251
02:13:28,399 --> 02:13:32,158
that's involved with billing billing is

3252
02:13:30,800 --> 02:13:34,239
important to know

3253
02:13:32,158 --> 02:13:37,039
and i'll be diving into the concepts

3254
02:13:34,238 --> 02:13:39,279
around billing and billing interaction

3255
02:13:37,039 --> 02:13:41,599
over the next few lessons

3256
02:13:39,279 --> 02:13:44,960
as well i'll be getting into another

3257
02:13:41,599 --> 02:13:46,000
demo going through the details on how to

3258
02:13:44,960 --> 02:13:46,880
create

3259
02:13:46,000 --> 02:13:49,520
edit

3260
02:13:46,880 --> 02:13:51,920
and delete a cloud billing account

3261
02:13:49,520 --> 02:13:54,719
now earlier on in the course i went over

3262
02:13:51,920 --> 02:13:58,078
the resource hierarchy and how google

3263
02:13:54,719 --> 02:14:00,560
cloud resources are broken down starting

3264
02:13:58,078 --> 02:14:02,479
from the domain level down to their

3265
02:14:00,560 --> 02:14:05,440
resource level

3266
02:14:02,479 --> 02:14:06,718
this lesson will focus strictly on the

3267
02:14:05,439 --> 02:14:08,638
billing account

3268
02:14:06,719 --> 02:14:10,960
and payments profile

3269
02:14:08,639 --> 02:14:12,960
and the breakdown are concepts that are

3270
02:14:10,960 --> 02:14:15,198
comprised within them

3271
02:14:12,960 --> 02:14:17,599
so getting right into it let's start

3272
02:14:15,198 --> 02:14:19,839
with the cloud billing account a cloud

3273
02:14:17,599 --> 02:14:22,880
billing account is a cloud level

3274
02:14:19,840 --> 02:14:26,239
resource managed in the cloud console

3275
02:14:22,880 --> 02:14:28,960
this defines who pays for a given set of

3276
02:14:26,238 --> 02:14:31,678
google cloud resources billing tracks

3277
02:14:28,960 --> 02:14:35,520
all of the costs incurred by your google

3278
02:14:31,679 --> 02:14:38,639
cloud usage as well it is connected to a

3279
02:14:35,520 --> 02:14:41,760
google payments profile which includes a

3280
02:14:38,639 --> 02:14:44,400
payment method defining on how you pay

3281
02:14:41,760 --> 02:14:47,840
for your charges a cloud billing account

3282
02:14:44,399 --> 02:14:50,719
can be linked to one or more projects

3283
02:14:47,840 --> 02:14:53,199
and not to any one project specifically

3284
02:14:50,719 --> 02:14:55,920
cloud billing also has billing specific

3285
02:14:53,198 --> 02:14:59,279
roles and permissions to control

3286
02:14:55,920 --> 02:15:01,920
accessing and modifying billing related

3287
02:14:59,279 --> 02:15:04,559
functions that are established by

3288
02:15:01,920 --> 02:15:06,560
identity and access management cloud

3289
02:15:04,560 --> 02:15:09,199
billing is offered in two different

3290
02:15:06,560 --> 02:15:12,000
account types there is the self-service

3291
02:15:09,198 --> 02:15:14,960
or online account or you can also choose

3292
02:15:12,000 --> 02:15:17,039
from the invoiced or offline payments

3293
02:15:14,960 --> 02:15:19,520
when it comes to the self-service option

3294
02:15:17,039 --> 02:15:21,840
the payment method is usually a credit

3295
02:15:19,520 --> 02:15:24,480
or debit card and costs are charged

3296
02:15:21,840 --> 02:15:26,800
automatically to the specific payment

3297
02:15:24,479 --> 02:15:28,959
method connected to the cloud billing

3298
02:15:26,800 --> 02:15:31,760
account and when you need access to your

3299
02:15:28,960 --> 02:15:34,639
invoices you can simply go to the cloud

3300
02:15:31,760 --> 02:15:36,960
console and view them online now when it

3301
02:15:34,639 --> 02:15:39,440
comes to the invoice account first you

3302
02:15:36,960 --> 02:15:41,760
must be eligible for invoice billing

3303
02:15:39,439 --> 02:15:44,399
once you are made eligible the payment

3304
02:15:41,760 --> 02:15:47,520
method used can be check or wire

3305
02:15:44,399 --> 02:15:50,559
transfer your invoices are sent by mail

3306
02:15:47,520 --> 02:15:53,280
or electronically as well they're also

3307
02:15:50,560 --> 02:15:55,119
available in the cloud console as well

3308
02:15:53,279 --> 02:15:56,960
as the payment receipts

3309
02:15:55,118 --> 02:16:00,000
now another cool feature of billing

3310
02:15:56,960 --> 02:16:02,719
account is sub-accounts and these are

3311
02:16:00,000 --> 02:16:05,198
intended for resellers so if you are a

3312
02:16:02,719 --> 02:16:07,520
reseller you can use subaccounts to

3313
02:16:05,198 --> 02:16:10,000
represent your customers and make it

3314
02:16:07,520 --> 02:16:12,639
easy for chargebacks cloud billing

3315
02:16:10,000 --> 02:16:15,118
subaccounts allow you to group charges

3316
02:16:12,639 --> 02:16:17,520
from projects together on a separate

3317
02:16:15,118 --> 02:16:20,559
section of your invoice and is linked

3318
02:16:17,520 --> 02:16:22,480
back to the master cloud billing account

3319
02:16:20,560 --> 02:16:24,719
on which your charges appear

3320
02:16:22,479 --> 02:16:27,919
sub-accounts are designed to allow for

3321
02:16:24,719 --> 02:16:30,000
customer separation and management so

3322
02:16:27,920 --> 02:16:32,558
when it comes to ownership of a cloud

3323
02:16:30,000 --> 02:16:34,558
billing account it is limited to a

3324
02:16:32,558 --> 02:16:36,558
single organization

3325
02:16:34,558 --> 02:16:39,279
it is possible though for a cloud

3326
02:16:36,558 --> 02:16:41,920
billing account to pay for projects that

3327
02:16:39,280 --> 02:16:43,840
belong to an organization that is

3328
02:16:41,920 --> 02:16:46,318
different than the organization that

3329
02:16:43,840 --> 02:16:48,719
owns the cloud billing account now one

3330
02:16:46,318 --> 02:16:51,119
thing to note is that if you have a

3331
02:16:48,718 --> 02:16:53,759
project that is not linked to a billing

3332
02:16:51,120 --> 02:16:56,240
account you will have limited use of

3333
02:16:53,760 --> 02:16:59,120
products and services available for your

3334
02:16:56,239 --> 02:17:01,760
project that is projects that are not

3335
02:16:59,120 --> 02:17:05,120
linked to a billing account cannot use

3336
02:17:01,760 --> 02:17:07,040
google cloud services that aren't free

3337
02:17:05,120 --> 02:17:09,840
and so now that we've gone through an

3338
02:17:07,040 --> 02:17:11,840
overview of the billing account let's

3339
02:17:09,840 --> 02:17:15,040
take a quick step into the payments

3340
02:17:11,840 --> 02:17:17,519
profile now the payments profile is a

3341
02:17:15,040 --> 02:17:19,840
google level resource managed at

3342
02:17:17,519 --> 02:17:21,599
payments.google.com

3343
02:17:19,840 --> 02:17:23,920
the payments profile

3344
02:17:21,599 --> 02:17:27,599
processes payments for all google

3345
02:17:23,920 --> 02:17:29,359
services and not just for google cloud

3346
02:17:27,599 --> 02:17:32,398
it connects to all of your google

3347
02:17:29,359 --> 02:17:35,359
services such as google ads as well as

3348
02:17:32,398 --> 02:17:38,159
google cloud it stores information like

3349
02:17:35,359 --> 02:17:40,719
your name address and who is responsible

3350
02:17:38,159 --> 02:17:43,760
for the profile it stores your various

3351
02:17:40,718 --> 02:17:46,239
payment methods like credit cards debit

3352
02:17:43,760 --> 02:17:47,359
cards and bank accounts the payments

3353
02:17:46,239 --> 02:17:50,000
profile

3354
02:17:47,359 --> 02:17:52,559
functions as a single pane of glass

3355
02:17:50,000 --> 02:17:56,159
where you can view invoices payment

3356
02:17:52,558 --> 02:17:59,358
history and so on it also controls who

3357
02:17:56,159 --> 02:18:01,760
can view and receive invoices for your

3358
02:17:59,359 --> 02:18:02,800
various cloud billing accounts and

3359
02:18:01,760 --> 02:18:04,800
products

3360
02:18:02,799 --> 02:18:07,518
now one thing to note about payments

3361
02:18:04,799 --> 02:18:11,199
profile is that there are two different

3362
02:18:07,519 --> 02:18:13,359
types of payment profiles the first one

3363
02:18:11,200 --> 02:18:15,679
is individual and that's when you're

3364
02:18:13,359 --> 02:18:18,159
using your account for your own personal

3365
02:18:15,679 --> 02:18:21,200
payments if you register your payments

3366
02:18:18,159 --> 02:18:23,760
profile as an individual then only you

3367
02:18:21,200 --> 02:18:26,559
can manage the profile you won't be able

3368
02:18:23,760 --> 02:18:29,200
to add or remove users or change

3369
02:18:26,558 --> 02:18:31,759
permissions on the profile now if you

3370
02:18:29,200 --> 02:18:33,920
choose a business profile type you're

3371
02:18:31,760 --> 02:18:36,960
paying on behalf of a business or

3372
02:18:33,920 --> 02:18:40,079
organization a business profile gives

3373
02:18:36,959 --> 02:18:42,239
you the flexibility to add other users

3374
02:18:40,079 --> 02:18:45,280
to the google payments profile you

3375
02:18:42,239 --> 02:18:48,478
manage so that more than one person can

3376
02:18:45,280 --> 02:18:51,040
access or manage a payments profile all

3377
02:18:48,478 --> 02:18:53,840
users added to a business profile

3378
02:18:51,040 --> 02:18:56,559
can then see the payment information on

3379
02:18:53,840 --> 02:18:58,719
that profile another thing to note is

3380
02:18:56,558 --> 02:19:02,159
that once the profile type has been

3381
02:18:58,718 --> 02:19:04,000
selected it cannot be changed afterwards

3382
02:19:02,159 --> 02:19:06,718
and so now that we've quickly gone

3383
02:19:04,000 --> 02:19:08,879
through an overview of all the concepts

3384
02:19:06,718 --> 02:19:11,598
when it comes to billing i am now going

3385
02:19:08,879 --> 02:19:14,000
to run through a short demo where i will

3386
02:19:11,599 --> 02:19:16,478
create a new billing account edit that

3387
02:19:14,000 --> 02:19:18,558
billing account and show you how to

3388
02:19:16,478 --> 02:19:21,119
close a billing account so whenever

3389
02:19:18,558 --> 02:19:23,438
you're ready join me in the console and

3390
02:19:21,120 --> 02:19:25,200
so here i am back in the console and so

3391
02:19:23,439 --> 02:19:26,960
the first thing i want to do is i want

3392
02:19:25,200 --> 02:19:29,920
to make sure that i have the proper

3393
02:19:26,959 --> 02:19:31,839
permissions in order to create and edit

3394
02:19:29,920 --> 02:19:33,760
a new billing account so what i'm going

3395
02:19:31,840 --> 02:19:36,960
to do is go over here to the hamburger

3396
02:19:33,760 --> 02:19:38,478
menu up here in the top left hand corner

3397
02:19:36,959 --> 02:19:41,839
and click on it

3398
02:19:38,478 --> 02:19:44,398
and go over to i am an admin and over to

3399
02:19:41,840 --> 02:19:44,398
iam

3400
02:19:45,760 --> 02:19:49,920
now don't worry i'm not going to get

3401
02:19:47,280 --> 02:19:52,640
really deep into this i will be going

3402
02:19:49,920 --> 02:19:56,000
over this in a later section where i'll

3403
02:19:52,639 --> 02:19:58,398
go through iam and roles but i wanted to

3404
02:19:56,000 --> 02:20:01,040
give you a sense of exactly what you

3405
02:19:58,398 --> 02:20:03,039
need with regards to permissions so now

3406
02:20:01,040 --> 02:20:05,920
that i'm here i'm going to be looking

3407
02:20:03,040 --> 02:20:07,520
for a role that has to do with billing

3408
02:20:05,920 --> 02:20:10,879
so i'm simply going to go over here on

3409
02:20:07,520 --> 02:20:13,840
the left hand menu and click on roles

3410
02:20:10,879 --> 02:20:14,639
and you'll have a slew of roles coming

3411
02:20:13,840 --> 02:20:16,880
up

3412
02:20:14,639 --> 02:20:19,920
and what you can do is filter through

3413
02:20:16,879 --> 02:20:22,318
them just by simply typing in billing

3414
02:20:19,920 --> 02:20:24,079
into the filter table here at the top

3415
02:20:22,318 --> 02:20:26,959
and as you can see here

3416
02:20:24,079 --> 02:20:29,200
there is billing account administrator

3417
02:20:26,959 --> 02:20:31,119
billing account creator and so on and so

3418
02:20:29,200 --> 02:20:33,439
forth and just to give you a quick

3419
02:20:31,120 --> 02:20:35,760
overview on these roles and so for the

3420
02:20:33,439 --> 02:20:37,600
billing account administrator this is a

3421
02:20:35,760 --> 02:20:40,079
role that lets you manage billing

3422
02:20:37,600 --> 02:20:42,000
accounts but not create them so if you

3423
02:20:40,079 --> 02:20:44,559
need to set budget alerts or manage

3424
02:20:42,000 --> 02:20:46,639
payment methods you can use this role

3425
02:20:44,559 --> 02:20:49,039
the billing account creator allows you

3426
02:20:46,639 --> 02:20:51,920
to create new self-serve online billing

3427
02:20:49,040 --> 02:20:54,479
accounts the billing account user allows

3428
02:20:51,920 --> 02:20:56,318
you to link projects to billing accounts

3429
02:20:54,478 --> 02:20:58,879
the billing account viewer allows you to

3430
02:20:56,318 --> 02:21:01,680
view billing account cost information

3431
02:20:58,879 --> 02:21:05,119
and transactions and lastly the project

3432
02:21:01,680 --> 02:21:08,559
billing manager allows you to link or

3433
02:21:05,120 --> 02:21:10,800
unlink the project to and from a billing

3434
02:21:08,559 --> 02:21:13,119
account so as you can see these roles

3435
02:21:10,799 --> 02:21:15,199
allow you to get pretty granular when it

3436
02:21:13,120 --> 02:21:18,399
comes to billing so i'm going to go back

3437
02:21:15,200 --> 02:21:20,640
over to the left hand menu over on iam

3438
02:21:18,398 --> 02:21:23,199
and click on there and i want to be able

3439
02:21:20,639 --> 02:21:26,159
to check my specific role and what

3440
02:21:23,200 --> 02:21:28,880
permissions that i have or i will need

3441
02:21:26,159 --> 02:21:31,119
in order to create a new billing account

3442
02:21:28,879 --> 02:21:32,719
and so if i click on this pencil it'll

3443
02:21:31,120 --> 02:21:36,079
show me exactly

3444
02:21:32,719 --> 02:21:38,959
what my role is and what it does and as

3445
02:21:36,079 --> 02:21:41,760
it says here i have full access to all

3446
02:21:38,959 --> 02:21:43,839
resources which means that i am pretty

3447
02:21:41,760 --> 02:21:46,159
much good to go so i'm going to cancel

3448
02:21:43,840 --> 02:21:50,079
out here

3449
02:21:46,159 --> 02:21:51,920
and i'm going to exit i am an admin

3450
02:21:50,079 --> 02:21:53,200
so i'm going to click on the navigation

3451
02:21:51,920 --> 02:21:55,680
menu

3452
02:21:53,200 --> 02:21:58,000
and go over to billing

3453
02:21:55,680 --> 02:22:00,479
and so this billing account is tied to

3454
02:21:58,000 --> 02:22:02,799
the current project and because it's the

3455
02:22:00,478 --> 02:22:05,199
only billing account it's the one that

3456
02:22:02,799 --> 02:22:06,639
shows up and so what i want to do is i

3457
02:22:05,200 --> 02:22:08,640
want to find out a little bit more

3458
02:22:06,639 --> 02:22:10,639
information with regards to this billing

3459
02:22:08,639 --> 02:22:13,680
account so i'm going to move down the

3460
02:22:10,639 --> 02:22:15,920
menu and click on account management

3461
02:22:13,680 --> 02:22:18,880
here i can see the billing account which

3462
02:22:15,920 --> 02:22:19,920
is my billing account i can rename it if

3463
02:22:18,879 --> 02:22:22,079
i'd like

3464
02:22:19,920 --> 02:22:24,318
and i can also see the projects that are

3465
02:22:22,079 --> 02:22:26,239
linked to this billing account so now

3466
02:22:24,318 --> 02:22:28,879
that we've viewed all the information

3467
02:22:26,239 --> 02:22:30,799
with regards to the my billing account

3468
02:22:28,879 --> 02:22:31,920
i'm going to simply click on this menu

3469
02:22:30,799 --> 02:22:34,318
over here

3470
02:22:31,920 --> 02:22:36,799
and click on the arrow and go to manage

3471
02:22:34,318 --> 02:22:39,279
billing accounts and here it will bring

3472
02:22:36,799 --> 02:22:42,318
me to all my billing accounts and

3473
02:22:39,280 --> 02:22:44,560
because i only have one is shown here my

3474
02:22:42,318 --> 02:22:47,039
billing account but if i had more than

3475
02:22:44,559 --> 02:22:48,719
one they would show up here and so now

3476
02:22:47,040 --> 02:22:50,399
in order for me to create this new

3477
02:22:48,719 --> 02:22:53,279
billing account i'm going to simply

3478
02:22:50,398 --> 02:22:56,239
click on create account

3479
02:22:53,280 --> 02:22:58,239
and i will be prompted with a name a

3480
02:22:56,239 --> 02:23:00,318
country and a currency for my new

3481
02:22:58,239 --> 02:23:02,719
billing account and i'm actually going

3482
02:23:00,318 --> 02:23:05,680
to rename this billing account and i'm

3483
02:23:02,719 --> 02:23:06,639
going to rename it to gcloud

3484
02:23:05,680 --> 02:23:09,359
ace

3485
02:23:06,639 --> 02:23:11,199
dash billing

3486
02:23:09,359 --> 02:23:13,840
i'm going to leave my country as canada

3487
02:23:11,200 --> 02:23:17,359
and my currency in canadian dollars and

3488
02:23:13,840 --> 02:23:17,359
i'm going to simply hit continue

3489
02:23:17,680 --> 02:23:20,960
and it's giving me the choice in my

3490
02:23:19,280 --> 02:23:22,640
payments profile

3491
02:23:20,959 --> 02:23:24,639
and because i want to use the same

3492
02:23:22,639 --> 02:23:27,439
payments profile i'm just going to

3493
02:23:24,639 --> 02:23:29,279
simply leave everything as is but for

3494
02:23:27,439 --> 02:23:31,600
demonstration purposes

3495
02:23:29,280 --> 02:23:32,640
over here you can click on the payments

3496
02:23:31,600 --> 02:23:34,399
profile

3497
02:23:32,639 --> 02:23:36,719
and the little arrow right beside the

3498
02:23:34,398 --> 02:23:40,639
current profile will give me the option

3499
02:23:36,719 --> 02:23:42,559
to create a new payments profile

3500
02:23:40,639 --> 02:23:45,199
and we're going to leave that as is

3501
02:23:42,559 --> 02:23:47,600
under customer info i have the option of

3502
02:23:45,200 --> 02:23:50,800
changing my address and i can click on

3503
02:23:47,600 --> 02:23:53,439
this pencil icon and change it as well i

3504
02:23:50,799 --> 02:23:55,279
can go to payment methods and click on

3505
02:23:53,439 --> 02:23:56,720
the current payment method with that

3506
02:23:55,280 --> 02:24:00,239
little arrow

3507
02:23:56,719 --> 02:24:01,840
and add a new credit or debit card and

3508
02:24:00,239 --> 02:24:03,920
as i said before we're going to keep

3509
02:24:01,840 --> 02:24:06,159
things the way they are and just hit

3510
02:24:03,920 --> 02:24:08,639
submit and enable billing

3511
02:24:06,159 --> 02:24:10,639
now as you can see here i got a prompt

3512
02:24:08,639 --> 02:24:13,358
saying that a confirmation email will be

3513
02:24:10,639 --> 02:24:15,119
sent within 48 hours now usually when

3514
02:24:13,359 --> 02:24:17,840
you're setting up a brand new billing

3515
02:24:15,120 --> 02:24:19,760
profile with an already created payments

3516
02:24:17,840 --> 02:24:23,200
profile you'll definitely get a

3517
02:24:19,760 --> 02:24:24,880
confirmation email in less than 48 hours

3518
02:24:23,200 --> 02:24:27,040
now in order for me to finish up this

3519
02:24:24,879 --> 02:24:29,119
demo i'm gonna wait until the new

3520
02:24:27,040 --> 02:24:31,680
billing account shows up and continue

3521
02:24:29,120 --> 02:24:34,000
with the demo from then and so here i am

3522
02:24:31,680 --> 02:24:36,800
back in the billing console and it only

3523
02:24:34,000 --> 02:24:39,680
took about 20 minutes and the gcloud ace

3524
02:24:36,799 --> 02:24:42,239
billing account has shown up and so with

3525
02:24:39,680 --> 02:24:45,359
part of this demo what i wanted to show

3526
02:24:42,239 --> 02:24:47,760
is how you can take a project and attach

3527
02:24:45,359 --> 02:24:50,640
it to a different billing account and so

3528
02:24:47,760 --> 02:24:53,040
currently my only project is attached to

3529
02:24:50,639 --> 02:24:56,079
the my billing account so now if i

3530
02:24:53,040 --> 02:24:59,200
wanted to change my first project to my

3531
02:24:56,079 --> 02:25:02,318
gcloud ace dash billing account

3532
02:24:59,200 --> 02:25:04,800
i can simply go over here to actions

3533
02:25:02,318 --> 02:25:07,039
click on the hamburger menu

3534
02:25:04,799 --> 02:25:08,879
and go to change billing

3535
02:25:07,040 --> 02:25:11,920
here i'll be prompted to choose a

3536
02:25:08,879 --> 02:25:13,839
billing account and i can choose g cloud

3537
02:25:11,920 --> 02:25:17,120
a stash billing

3538
02:25:13,840 --> 02:25:20,478
and then click on set account

3539
02:25:17,120 --> 02:25:23,760
and there it is my first project is now

3540
02:25:20,478 --> 02:25:26,318
linked to g cloud a stash billing so if

3541
02:25:23,760 --> 02:25:28,960
i go back over to my billing accounts

3542
02:25:26,318 --> 02:25:32,000
you can see here that my billing account

3543
02:25:28,959 --> 02:25:35,919
currently has zero projects and g cloud

3544
02:25:32,000 --> 02:25:37,760
a stash billing has one project now just

3545
02:25:35,920 --> 02:25:39,200
as a quick note and i really want to

3546
02:25:37,760 --> 02:25:41,200
emphasize this

3547
02:25:39,200 --> 02:25:43,280
is that if you're changing a billing

3548
02:25:41,200 --> 02:25:45,680
account for a project

3549
02:25:43,280 --> 02:25:47,840
and you are a regular user

3550
02:25:45,680 --> 02:25:49,760
you will need the role of the billing

3551
02:25:47,840 --> 02:25:52,398
account administrator

3552
02:25:49,760 --> 02:25:55,359
as well as the project owner role

3553
02:25:52,398 --> 02:25:58,398
so these two together will allow a

3554
02:25:55,359 --> 02:25:59,920
regular user to change a billing account

3555
02:25:58,398 --> 02:26:02,159
for a project

3556
02:25:59,920 --> 02:26:05,280
and so now what i want to do is i want

3557
02:26:02,159 --> 02:26:07,439
to take the gcloud a stash billing and i

3558
02:26:05,280 --> 02:26:10,159
want to close that account

3559
02:26:07,439 --> 02:26:12,559
but before i do that i need to unlink

3560
02:26:10,159 --> 02:26:14,719
this project and bring it back to

3561
02:26:12,559 --> 02:26:17,039
another billing account which in this

3562
02:26:14,719 --> 02:26:18,959
case would be my billing account so i'm

3563
02:26:17,040 --> 02:26:21,280
going to go back up here to the menu

3564
02:26:18,959 --> 02:26:23,119
click on my projects and we're going to

3565
02:26:21,280 --> 02:26:24,159
do the exact same thing that we did

3566
02:26:23,120 --> 02:26:26,000
before

3567
02:26:24,159 --> 02:26:28,959
under actions i'm going to click on the

3568
02:26:26,000 --> 02:26:30,959
hamburger menu and change billing

3569
02:26:28,959 --> 02:26:32,478
i'm going to get the prompt again and

3570
02:26:30,959 --> 02:26:34,719
under billing account i'm going to

3571
02:26:32,478 --> 02:26:36,719
choose my billing account and then click

3572
02:26:34,719 --> 02:26:38,719
on set account

3573
02:26:36,719 --> 02:26:40,639
so as you can see the project has been

3574
02:26:38,719 --> 02:26:43,119
moved to a different billing account i'm

3575
02:26:40,639 --> 02:26:45,439
going to go back to my billing accounts

3576
02:26:43,120 --> 02:26:47,520
and as you can see here the project is

3577
02:26:45,439 --> 02:26:49,840
back to my billing account and so now

3578
02:26:47,520 --> 02:26:52,640
that the project is unlinked from the

3579
02:26:49,840 --> 02:26:54,880
gcloud a stash billing account i can now

3580
02:26:52,639 --> 02:26:56,959
go ahead and close out that account now

3581
02:26:54,879 --> 02:26:59,759
in order to do that i'm going to click

3582
02:26:56,959 --> 02:27:02,000
on gcloud a stash billing i'm going to

3583
02:26:59,760 --> 02:27:04,800
go down here on the hand menu all the

3584
02:27:02,000 --> 02:27:07,439
way to the bottom to account management

3585
02:27:04,799 --> 02:27:10,079
click on there and at the top here you

3586
02:27:07,439 --> 02:27:12,398
will see close billing account i'm going

3587
02:27:10,079 --> 02:27:15,280
to simply click on that and i'll get a

3588
02:27:12,398 --> 02:27:17,279
prompt that i've spent zero dollars and

3589
02:27:15,280 --> 02:27:19,280
is linked to zero projects

3590
02:27:17,280 --> 02:27:21,120
now if i did have a project that was

3591
02:27:19,280 --> 02:27:23,840
linked to this billing account i would

3592
02:27:21,120 --> 02:27:26,240
have to unlink the project before i was

3593
02:27:23,840 --> 02:27:29,600
able to close this billing account so as

3594
02:27:26,239 --> 02:27:31,840
a failsafe i'm being asked to type close

3595
02:27:29,600 --> 02:27:33,920
in order to close this billing account

3596
02:27:31,840 --> 02:27:36,318
so i'm going to go ahead and do that now

3597
02:27:33,920 --> 02:27:39,200
and click on close billing account just

3598
02:27:36,318 --> 02:27:41,600
as a note google gives me the option to

3599
02:27:39,200 --> 02:27:43,760
reopen this billing account in case i

3600
02:27:41,600 --> 02:27:44,479
did this by mistake and i really needed

3601
02:27:43,760 --> 02:27:47,120
it

3602
02:27:44,478 --> 02:27:49,358
i can reopen this billing account so now

3603
02:27:47,120 --> 02:27:50,160
moving back over to billing you'll see

3604
02:27:49,359 --> 02:27:52,399
here

3605
02:27:50,159 --> 02:27:55,039
that i'm left with my single billing

3606
02:27:52,398 --> 02:27:57,199
account called my billing account with

3607
02:27:55,040 --> 02:28:00,080
the one project that's linked to it and

3608
02:27:57,200 --> 02:28:02,479
so that covers my demo on creating

3609
02:28:00,079 --> 02:28:05,280
editing and closing a new billing

3610
02:28:02,478 --> 02:28:08,079
account as well as linking and unlinking

3611
02:28:05,280 --> 02:28:10,319
a project to and from a different

3612
02:28:08,079 --> 02:28:11,280
billing account so i hope you found this

3613
02:28:10,318 --> 02:28:12,879
useful

3614
02:28:11,280 --> 02:28:15,280
and you can now mark this lesson as

3615
02:28:12,879 --> 02:28:16,079
complete and let's move on to the next

3616
02:28:15,280 --> 02:28:20,000
one

3617
02:28:16,079 --> 02:28:21,200
[Music]

3618
02:28:20,000 --> 02:28:23,200
welcome back

3619
02:28:21,200 --> 02:28:26,159
in this lesson i'm going to be going

3620
02:28:23,200 --> 02:28:28,240
over controlling costs in google cloud

3621
02:28:26,159 --> 02:28:30,639
along with budget alerts

3622
02:28:28,239 --> 02:28:33,280
i will be touching on all the available

3623
02:28:30,639 --> 02:28:34,239
discounts the number of ways to control

3624
02:28:33,280 --> 02:28:36,479
costs

3625
02:28:34,239 --> 02:28:39,280
and go over budget alerts to get a more

3626
02:28:36,478 --> 02:28:41,438
granular and programmatic approach so

3627
02:28:39,280 --> 02:28:44,000
starting off i wanted to touch on

3628
02:28:41,439 --> 02:28:47,439
committed use discounts now committed

3629
02:28:44,000 --> 02:28:50,639
use discounts provide discounted prices

3630
02:28:47,439 --> 02:28:53,280
in exchange for your commitment to use a

3631
02:28:50,639 --> 02:28:55,599
minimum level of resources for a

3632
02:28:53,280 --> 02:28:58,800
specified term the discounts are

3633
02:28:55,600 --> 02:29:01,200
flexible cover a wide range of resources

3634
02:28:58,799 --> 02:29:03,599
and are ideal for workloads with

3635
02:29:01,200 --> 02:29:05,439
predictable resource needs when you

3636
02:29:03,600 --> 02:29:08,399
purchase google cloud committed use

3637
02:29:05,439 --> 02:29:11,760
discounts you commit to a consistent

3638
02:29:08,398 --> 02:29:13,920
amount of usage for a one or three year

3639
02:29:11,760 --> 02:29:14,960
period there are two commitment types

3640
02:29:13,920 --> 02:29:17,439
available

3641
02:29:14,959 --> 02:29:19,919
and as you can see here they are spend

3642
02:29:17,439 --> 02:29:20,880
based and resource based commitment

3643
02:29:19,920 --> 02:29:23,200
types

3644
02:29:20,879 --> 02:29:26,079
and unlike most other providers the

3645
02:29:23,200 --> 02:29:28,800
commitment fee is billed monthly so

3646
02:29:26,079 --> 02:29:30,879
going over the specific commitment types

3647
02:29:28,799 --> 02:29:32,639
i wanted to start off with spend based

3648
02:29:30,879 --> 02:29:35,358
commitment now for spend based

3649
02:29:32,639 --> 02:29:38,318
commitment you commit to a consistent

3650
02:29:35,359 --> 02:29:39,120
amount of usage measured in dollars per

3651
02:29:38,318 --> 02:29:42,478
hour

3652
02:29:39,120 --> 02:29:45,359
of equivalent on-demand spend for a one

3653
02:29:42,478 --> 02:29:47,519
or three year term in exchange you

3654
02:29:45,359 --> 02:29:50,318
receive a discounted rate on the

3655
02:29:47,520 --> 02:29:51,840
applicable usage your commitment covers

3656
02:29:50,318 --> 02:29:54,879
so you can purchase committed use

3657
02:29:51,840 --> 02:29:57,600
discounts from any cloud billing account

3658
02:29:54,879 --> 02:30:00,959
and the discount applies to any eligible

3659
02:29:57,600 --> 02:30:03,920
usage in projects paid for by that cloud

3660
02:30:00,959 --> 02:30:06,478
billing account any overage is charged

3661
02:30:03,920 --> 02:30:10,159
at the on-demand rate spend based

3662
02:30:06,478 --> 02:30:12,478
commitments can give you a 25 discount

3663
02:30:10,159 --> 02:30:16,879
off on-demand pricing for a one-year

3664
02:30:12,478 --> 02:30:19,438
commitment and up to a 52 discount off

3665
02:30:16,879 --> 02:30:22,239
of on-demand pricing for a three-year

3666
02:30:19,439 --> 02:30:25,040
commitment now spend-based commitments

3667
02:30:22,239 --> 02:30:28,159
are restricted to specific resources

3668
02:30:25,040 --> 02:30:31,040
which is cloud sql database instances

3669
02:30:28,159 --> 02:30:32,398
and google cloud vmware engine

3670
02:30:31,040 --> 02:30:36,240
and this commitment

3671
02:30:32,398 --> 02:30:38,959
applies to the cpu and memory usage for

3672
02:30:36,239 --> 02:30:41,119
these available resources now the other

3673
02:30:38,959 --> 02:30:43,199
committed use discount is the

3674
02:30:41,120 --> 02:30:45,600
resource-based commitment

3675
02:30:43,200 --> 02:30:48,479
so this discount is for a commitment to

3676
02:30:45,600 --> 02:30:51,920
spend a minimum amount for compute

3677
02:30:48,478 --> 02:30:54,959
engine resources in a particular region

3678
02:30:51,920 --> 02:30:57,439
resource-based commitments are ideal for

3679
02:30:54,959 --> 02:30:58,799
predictable workloads when it comes to

3680
02:30:57,439 --> 02:31:00,479
your vms

3681
02:30:58,799 --> 02:31:03,759
when you purchase a committed use

3682
02:31:00,478 --> 02:31:06,239
contract you purchase compute resources

3683
02:31:03,760 --> 02:31:07,200
such as vcpus

3684
02:31:06,239 --> 02:31:08,559
memory

3685
02:31:07,200 --> 02:31:12,159
gpus

3686
02:31:08,559 --> 02:31:14,318
and local ssds and you purchase these at

3687
02:31:12,159 --> 02:31:17,439
a discounted price in return for

3688
02:31:14,318 --> 02:31:20,639
committing to paying for those resources

3689
02:31:17,439 --> 02:31:24,479
for one or three years the discount is

3690
02:31:20,639 --> 02:31:28,159
up to 57 percent for most resources like

3691
02:31:24,478 --> 02:31:30,959
machine types or gpus the discount is up

3692
02:31:28,159 --> 02:31:33,200
to 70 percent for memory optimized

3693
02:31:30,959 --> 02:31:35,839
machine types and you can purchase a

3694
02:31:33,200 --> 02:31:38,880
committed use contract for a single

3695
02:31:35,840 --> 02:31:41,680
project or purchase multiple contracts

3696
02:31:38,879 --> 02:31:44,799
which you can share across many project

3697
02:31:41,680 --> 02:31:47,439
by enabling shared discounts and sharing

3698
02:31:44,799 --> 02:31:50,398
your committed use discounts across all

3699
02:31:47,439 --> 02:31:53,200
your projects reduces the overhead of

3700
02:31:50,398 --> 02:31:54,239
managing discounts on a per project

3701
02:31:53,200 --> 02:31:57,120
basis

3702
02:31:54,239 --> 02:31:59,680
and maximizes your savings by pooling

3703
02:31:57,120 --> 02:32:02,720
all of your discounts across your

3704
02:31:59,680 --> 02:32:04,800
project's resource usage if you have

3705
02:32:02,719 --> 02:32:07,279
multiple projects that share the same

3706
02:32:04,799 --> 02:32:10,159
cloud billing account you can enable

3707
02:32:07,280 --> 02:32:12,399
committed use discount sharing so all of

3708
02:32:10,159 --> 02:32:15,280
your projects within that cloud billing

3709
02:32:12,398 --> 02:32:18,318
account share all of your committed use

3710
02:32:15,280 --> 02:32:21,520
discount contracts and so your sustained

3711
02:32:18,318 --> 02:32:24,719
use discounts are also pooled at the

3712
02:32:21,520 --> 02:32:26,079
same time so touching on sustained use

3713
02:32:24,719 --> 02:32:28,639
discounts

3714
02:32:26,079 --> 02:32:30,879
these are automatic discounts for

3715
02:32:28,639 --> 02:32:33,680
running specific compute engine

3716
02:32:30,879 --> 02:32:34,799
resources a significant portion of the

3717
02:32:33,680 --> 02:32:37,439
billing month

3718
02:32:34,799 --> 02:32:38,959
sustained use discounts apply to the

3719
02:32:37,439 --> 02:32:41,439
general purpose

3720
02:32:38,959 --> 02:32:44,799
compute and memory optimize machine

3721
02:32:41,439 --> 02:32:48,318
types as well as sole tenant nodes and

3722
02:32:44,799 --> 02:32:51,119
gpus again sustained use discounts are

3723
02:32:48,318 --> 02:32:54,239
applied automatically to usage within a

3724
02:32:51,120 --> 02:32:56,479
project separately for each region so

3725
02:32:54,239 --> 02:32:59,760
there's no action required on your part

3726
02:32:56,478 --> 02:33:00,959
to enable these discounts so for example

3727
02:32:59,760 --> 02:33:03,680
when you're running one of these

3728
02:33:00,959 --> 02:33:05,358
resources for more than let's say 25

3729
02:33:03,680 --> 02:33:08,079
percent of the month

3730
02:33:05,359 --> 02:33:11,120
compute engine automatically gives you a

3731
02:33:08,079 --> 02:33:14,159
discount for every incremental minute

3732
02:33:11,120 --> 02:33:16,479
that you use for that instance now

3733
02:33:14,159 --> 02:33:19,840
sustained use discounts automatically

3734
02:33:16,478 --> 02:33:22,799
apply to vms created by both google

3735
02:33:19,840 --> 02:33:25,840
kubernetes engine and compute engine but

3736
02:33:22,799 --> 02:33:28,398
unfortunately do not apply to vms

3737
02:33:25,840 --> 02:33:32,000
created using the app engine flexible

3738
02:33:28,398 --> 02:33:33,358
environment as well as data flow and e2

3739
02:33:32,000 --> 02:33:34,959
machine types

3740
02:33:33,359 --> 02:33:37,359
now to take advantage of the full

3741
02:33:34,959 --> 02:33:39,839
discount you would create your vm

3742
02:33:37,359 --> 02:33:42,720
instances on the first day of the month

3743
02:33:39,840 --> 02:33:45,359
as discounts reset at the beginning of

3744
02:33:42,719 --> 02:33:48,239
each month and so the following table

3745
02:33:45,359 --> 02:33:51,439
shows the discount you get at each usage

3746
02:33:48,239 --> 02:33:54,159
level of a vm instance these discounts

3747
02:33:51,439 --> 02:33:57,359
apply for all machine types but don't

3748
02:33:54,159 --> 02:34:00,398
apply to preemptable instances and so

3749
02:33:57,359 --> 02:34:04,399
sustained use discounts can save you up

3750
02:34:00,398 --> 02:34:06,639
to a maximum of a 30 percent discount so

3751
02:34:04,398 --> 02:34:09,760
another great way to calculate savings

3752
02:34:06,639 --> 02:34:12,639
in google cloud is by using the gcp

3753
02:34:09,760 --> 02:34:15,040
pricing calculator this is a quick way

3754
02:34:12,639 --> 02:34:18,398
to get an estimate of what your usage

3755
02:34:15,040 --> 02:34:21,760
will cost on google cloud so the gcp

3756
02:34:18,398 --> 02:34:23,920
pricing calculator can help you identify

3757
02:34:21,760 --> 02:34:27,280
the pricing for the resources that you

3758
02:34:23,920 --> 02:34:29,680
plan to use in your future architecture

3759
02:34:27,280 --> 02:34:32,159
so that you are able to calculate how

3760
02:34:29,680 --> 02:34:35,120
much your architecture will cost you

3761
02:34:32,159 --> 02:34:38,478
this calculator holds the pricing for

3762
02:34:35,120 --> 02:34:41,040
almost all resources encapsulated within

3763
02:34:38,478 --> 02:34:44,159
gcp and so you can get a pretty good

3764
02:34:41,040 --> 02:34:46,640
idea of what your architecture will cost

3765
02:34:44,159 --> 02:34:49,359
you without having to find out the hard

3766
02:34:46,639 --> 02:34:52,318
way this calculator can be found at the

3767
02:34:49,359 --> 02:34:54,720
url shown here and i will include this

3768
02:34:52,318 --> 02:34:57,519
in the lesson text below now moving

3769
02:34:54,719 --> 02:35:00,159
right along to cloud billing budgets so

3770
02:34:57,520 --> 02:35:01,120
budgets enable you to track your actual

3771
02:35:00,159 --> 02:35:03,119
spend

3772
02:35:01,120 --> 02:35:05,520
against your plan spend

3773
02:35:03,120 --> 02:35:07,840
after you've set a budget amount you set

3774
02:35:05,520 --> 02:35:10,720
budget alert threshold rules that are

3775
02:35:07,840 --> 02:35:13,200
used to trigger email notifications and

3776
02:35:10,719 --> 02:35:15,519
budget alert emails help you stay

3777
02:35:13,200 --> 02:35:17,760
informed about how your spend is

3778
02:35:15,520 --> 02:35:21,040
tracking against your budget this

3779
02:35:17,760 --> 02:35:23,760
example here is a diagram of a budget

3780
02:35:21,040 --> 02:35:26,319
alert notification and is the default

3781
02:35:23,760 --> 02:35:28,159
functionality for any budget alert

3782
02:35:26,318 --> 02:35:30,799
notifications

3783
02:35:28,159 --> 02:35:33,119
now to get a little bit more granular

3784
02:35:30,799 --> 02:35:36,398
you can define the scope of the budget

3785
02:35:33,120 --> 02:35:40,000
so for example you can scope the budget

3786
02:35:36,398 --> 02:35:42,799
to apply to the spend of an entire cloud

3787
02:35:40,000 --> 02:35:44,799
billing account or get more granular to

3788
02:35:42,799 --> 02:35:47,840
one or more projects

3789
02:35:44,799 --> 02:35:50,000
and even down to a specific product you

3790
02:35:47,840 --> 02:35:51,520
can set the budget amount to a total

3791
02:35:50,000 --> 02:35:53,359
that you specify

3792
02:35:51,520 --> 02:35:56,000
or base the budget amount on the

3793
02:35:53,359 --> 02:35:58,479
previous month's spend when costs exceed

3794
02:35:56,000 --> 02:36:01,120
a percentage of your budget based on the

3795
02:35:58,478 --> 02:36:03,119
rules that you set by default alert

3796
02:36:01,120 --> 02:36:06,479
emails are sent to billing account

3797
02:36:03,120 --> 02:36:08,960
administrators and billing account users

3798
02:36:06,478 --> 02:36:11,438
on the target cloud billing account and

3799
02:36:08,959 --> 02:36:14,079
again this is the default behavior of a

3800
02:36:11,439 --> 02:36:16,479
budget email notification

3801
02:36:14,079 --> 02:36:19,680
now as said before the default behavior

3802
02:36:16,478 --> 02:36:21,760
of a budget is to send alert emails to

3803
02:36:19,680 --> 02:36:24,239
billing account administrators and

3804
02:36:21,760 --> 02:36:26,398
billing account users on the target

3805
02:36:24,239 --> 02:36:29,280
cloud billing account when the budget

3806
02:36:26,398 --> 02:36:32,478
alert threshold rules trigger an email

3807
02:36:29,280 --> 02:36:34,800
notification now these email recipients

3808
02:36:32,478 --> 02:36:37,438
can be customized by using cloud

3809
02:36:34,799 --> 02:36:39,920
monitoring to specify other people in

3810
02:36:37,439 --> 02:36:42,559
your organization to receive these

3811
02:36:39,920 --> 02:36:45,359
budget alert emails a great example of

3812
02:36:42,559 --> 02:36:48,799
this would be a project manager or a

3813
02:36:45,359 --> 02:36:50,880
director knowing how much spend has been

3814
02:36:48,799 --> 02:36:52,799
used up in your budget and the last

3815
02:36:50,879 --> 02:36:55,199
concept i wanted to touch on when it

3816
02:36:52,799 --> 02:36:57,920
comes to cloud billing budgets is that

3817
02:36:55,200 --> 02:37:00,640
you can also use pub sub for

3818
02:36:57,920 --> 02:37:03,040
programmatic notifications to automate

3819
02:37:00,639 --> 02:37:04,639
your cost control response based on the

3820
02:37:03,040 --> 02:37:07,200
budget notification

3821
02:37:04,639 --> 02:37:09,760
you can also use pub sub in conjunction

3822
02:37:07,200 --> 02:37:12,640
with billing budgets to automate cost

3823
02:37:09,760 --> 02:37:15,439
management tasks and this will provide a

3824
02:37:12,639 --> 02:37:18,318
real-time status of the cloud billing

3825
02:37:15,439 --> 02:37:21,200
budget and allow you to do things like

3826
02:37:18,318 --> 02:37:23,519
send notifications to slack or disable

3827
02:37:21,200 --> 02:37:26,399
billing to stop usage as well as

3828
02:37:23,520 --> 02:37:28,479
selectively control usage when budget

3829
02:37:26,398 --> 02:37:31,119
has been met and so these are all the

3830
02:37:28,478 --> 02:37:33,679
concepts that i wanted to cover when it

3831
02:37:31,120 --> 02:37:36,000
came to cloud billing budgets now i know

3832
02:37:33,680 --> 02:37:38,079
this lesson may have been a bit dry and

3833
02:37:36,000 --> 02:37:40,639
not the most exciting service to dive

3834
02:37:38,079 --> 02:37:42,478
into but it is very important to know

3835
02:37:40,639 --> 02:37:45,199
both for the exam

3836
02:37:42,478 --> 02:37:48,000
and for your role as an engineer when it

3837
02:37:45,200 --> 02:37:50,079
comes to cutting costs in environments

3838
02:37:48,000 --> 02:37:52,398
where your business owners deem

3839
02:37:50,079 --> 02:37:53,600
necessary and so that's all i had for

3840
02:37:52,398 --> 02:37:55,358
this lesson

3841
02:37:53,600 --> 02:37:57,680
so you can now mark this lesson as

3842
02:37:55,359 --> 02:38:00,479
complete and please join me in the next

3843
02:37:57,680 --> 02:38:02,800
one where i dive into the console and do

3844
02:38:00,478 --> 02:38:04,879
some hands-on demos when it comes to

3845
02:38:02,799 --> 02:38:07,679
committed use discounts

3846
02:38:04,879 --> 02:38:09,358
budget alerts and editing budget alerts

3847
02:38:07,680 --> 02:38:12,409
as well as adding a little bit of

3848
02:38:09,359 --> 02:38:16,239
automation into the budgeting alerts

3849
02:38:12,409 --> 02:38:18,879
[Music]

3850
02:38:16,239 --> 02:38:22,159
welcome back in the last lesson i went

3851
02:38:18,879 --> 02:38:24,959
over a few ways to do cost management

3852
02:38:22,159 --> 02:38:28,079
and the behaviors of budget alerts

3853
02:38:24,959 --> 02:38:30,639
in this lesson i will be doing a demo to

3854
02:38:28,079 --> 02:38:33,120
show you committed use discounts and

3855
02:38:30,639 --> 02:38:34,398
reservations along with how to create

3856
02:38:33,120 --> 02:38:36,960
budget alerts

3857
02:38:34,398 --> 02:38:39,599
and as well how to edit them so with

3858
02:38:36,959 --> 02:38:41,519
that being said let's dive in so now i'm

3859
02:38:39,600 --> 02:38:44,318
going to start off with committed use

3860
02:38:41,520 --> 02:38:46,560
discounts in order to get there i'm

3861
02:38:44,318 --> 02:38:48,398
going to find it in compute engine so

3862
02:38:46,559 --> 02:38:50,478
i'm going to simply go up here on the

3863
02:38:48,398 --> 02:38:52,959
top left hand corner back to the

3864
02:38:50,478 --> 02:38:55,760
navigation menu

3865
02:38:52,959 --> 02:38:56,959
i'm going to go down to compute engine

3866
02:38:55,760 --> 02:38:59,280
and i'm going to go over here to

3867
02:38:56,959 --> 02:39:01,519
committed use discounts

3868
02:38:59,280 --> 02:39:03,920
and as we discussed earlier these

3869
02:39:01,520 --> 02:39:06,319
commitments for compute engine are

3870
02:39:03,920 --> 02:39:07,840
resource based and as you can see here

3871
02:39:06,318 --> 02:39:10,639
we have hardware commitments and

3872
02:39:07,840 --> 02:39:13,280
reservations now reservations i will get

3873
02:39:10,639 --> 02:39:15,119
into just a little bit later but with

3874
02:39:13,280 --> 02:39:17,680
regards to hardware commitments we're

3875
02:39:15,120 --> 02:39:20,319
going to get into that right now and as

3876
02:39:17,680 --> 02:39:21,760
expected i have no current commitments

3877
02:39:20,318 --> 02:39:24,079
so i'm going to go up to purchase

3878
02:39:21,760 --> 02:39:24,880
commitment and so i need to start off

3879
02:39:24,079 --> 02:39:26,879
with

3880
02:39:24,879 --> 02:39:28,799
finding a name for this commitment and

3881
02:39:26,879 --> 02:39:32,079
so i'm going to name this commitment

3882
02:39:28,799 --> 02:39:32,079
demo dash commitment

3883
02:39:34,879 --> 02:39:38,799
it's going to ask me for a region i'm

3884
02:39:36,478 --> 02:39:40,959
going to keep it in us central one with

3885
02:39:38,799 --> 02:39:42,959
the commitment type here is where i can

3886
02:39:40,959 --> 02:39:45,279
select the type of machine that i'm

3887
02:39:42,959 --> 02:39:47,599
looking for so i can go into general

3888
02:39:45,280 --> 02:39:51,760
purpose and 1 and 2

3889
02:39:47,600 --> 02:39:53,920
and 2d e2 as well as memory optimize

3890
02:39:51,760 --> 02:39:56,159
and compute optimized and so i'm going

3891
02:39:53,920 --> 02:39:59,200
to keep it at general purpose and one

3892
02:39:56,159 --> 02:40:02,239
again the duration one or three years

3893
02:39:59,200 --> 02:40:04,640
and we get down to cores i can have as

3894
02:40:02,239 --> 02:40:07,359
many vcpus as i'd like

3895
02:40:04,639 --> 02:40:09,279
so if i needed 10 i can do that and i'll

3896
02:40:07,359 --> 02:40:11,840
get a pop-up here on the right showing

3897
02:40:09,280 --> 02:40:15,120
me the estimated monthly total as well

3898
02:40:11,840 --> 02:40:17,680
as an hourly rate for this specific vm

3899
02:40:15,120 --> 02:40:20,399
with 10 cores i can also select the

3900
02:40:17,680 --> 02:40:22,559
duration for three years and as expected

3901
02:40:20,398 --> 02:40:24,719
i'll get a higher savings because i'm

3902
02:40:22,559 --> 02:40:27,278
giving a bigger commitment so bring it

3903
02:40:24,719 --> 02:40:31,438
back down to one year and let's put the

3904
02:40:27,279 --> 02:40:34,239
memory up to 64 gigabytes here i can add

3905
02:40:31,439 --> 02:40:37,840
gpus and i have quite a few to choose

3906
02:40:34,239 --> 02:40:40,559
from as well as local ssds and here with

3907
02:40:37,840 --> 02:40:42,960
the local ssds i can choose as many

3908
02:40:40,559 --> 02:40:45,600
disks as i'd like as long as it's within

3909
02:40:42,959 --> 02:40:48,879
my quota and each disk size is going to

3910
02:40:45,600 --> 02:40:51,120
be 375 gigabytes so if you're looking

3911
02:40:48,879 --> 02:40:54,079
into committed use discounts and using

3912
02:40:51,120 --> 02:40:56,399
local ssds please keep that in mind

3913
02:40:54,079 --> 02:40:58,239
again the reservation can be added here

3914
02:40:56,398 --> 02:41:00,559
and i'll be getting into that in just a

3915
02:40:58,239 --> 02:41:03,439
second and now i don't want to actually

3916
02:41:00,559 --> 02:41:05,519
purchase it but i did want to show you

3917
02:41:03,439 --> 02:41:07,840
exactly what a committed use discount

3918
02:41:05,520 --> 02:41:10,560
would look like and how you would apply

3919
02:41:07,840 --> 02:41:13,040
it again here on the right hand side it

3920
02:41:10,559 --> 02:41:16,239
shows me the details of the estimated

3921
02:41:13,040 --> 02:41:18,319
monthly total and the hourly rate so i'm

3922
02:41:16,239 --> 02:41:20,559
going to go over here and hit cancel

3923
02:41:18,318 --> 02:41:22,398
and if i were to have applied it

3924
02:41:20,559 --> 02:41:24,639
the commitment would show up here in

3925
02:41:22,398 --> 02:41:26,079
this table and give me all the specified

3926
02:41:24,639 --> 02:41:28,879
configurations

3927
02:41:26,079 --> 02:41:30,719
of that instance right here now touching

3928
02:41:28,879 --> 02:41:33,358
on reservations

3929
02:41:30,719 --> 02:41:35,039
reservations is when you reserve the vm

3930
02:41:33,359 --> 02:41:37,520
instances you need

3931
02:41:35,040 --> 02:41:40,000
so when the reservation has been placed

3932
02:41:37,520 --> 02:41:43,040
the reservation ensures that those

3933
02:41:40,000 --> 02:41:45,439
resources are always available for you

3934
02:41:43,040 --> 02:41:47,920
as some of you might know when you go to

3935
02:41:45,439 --> 02:41:50,239
spin up a new compute engine vm

3936
02:41:47,920 --> 02:41:52,398
especially when it comes to auto scaling

3937
02:41:50,239 --> 02:41:55,600
instance groups the instances can

3938
02:41:52,398 --> 02:41:58,478
sometimes be delayed or unavailable now

3939
02:41:55,600 --> 02:42:01,680
the thing with reservations is that a vm

3940
02:41:58,478 --> 02:42:04,398
instance can only use a reservation if

3941
02:42:01,680 --> 02:42:06,720
its properties exactly match the

3942
02:42:04,398 --> 02:42:09,039
properties of the reservation which is

3943
02:42:06,719 --> 02:42:10,959
why it's such a great pairing with

3944
02:42:09,040 --> 02:42:12,240
committed use discounts

3945
02:42:10,959 --> 02:42:14,639
so if you're looking to make a

3946
02:42:12,239 --> 02:42:16,959
resource-based commitment and you always

3947
02:42:14,639 --> 02:42:19,599
want your instance available you can

3948
02:42:16,959 --> 02:42:21,519
simply create a reservation attach it to

3949
02:42:19,600 --> 02:42:24,159
the commitment and you will never have

3950
02:42:21,520 --> 02:42:26,319
to worry about having the resources to

3951
02:42:24,159 --> 02:42:28,799
satisfy your workload as they will

3952
02:42:26,318 --> 02:42:31,278
always be there so again going into

3953
02:42:28,799 --> 02:42:34,079
create reservation it'll show me here

3954
02:42:31,279 --> 02:42:36,560
the name the description i can choose to

3955
02:42:34,079 --> 02:42:39,520
use the reservation automatically or

3956
02:42:36,559 --> 02:42:40,719
select a specific reservation the region

3957
02:42:39,520 --> 02:42:43,040
and zone

3958
02:42:40,719 --> 02:42:46,079
number of instances and here i can

3959
02:42:43,040 --> 02:42:48,080
specify the machine type or specify an

3960
02:42:46,079 --> 02:42:50,559
instance template and again this is

3961
02:42:48,079 --> 02:42:53,680
another use case where if you need

3962
02:42:50,559 --> 02:42:56,159
compute engine instances spun up due to

3963
02:42:53,680 --> 02:42:58,479
auto scaling this is where reservations

3964
02:42:56,159 --> 02:43:02,398
would apply so getting back to machine

3965
02:42:58,478 --> 02:43:05,679
type i can choose from vcpus

3966
02:43:02,398 --> 02:43:08,318
as well as the memory i can customize it

3967
02:43:05,680 --> 02:43:10,880
i can add as many local ssds as my

3968
02:43:08,318 --> 02:43:13,199
quotas will allow me and i can select my

3969
02:43:10,879 --> 02:43:15,119
interface type and i'm going to cancel

3970
02:43:13,200 --> 02:43:17,840
out of here now when it comes to

3971
02:43:15,120 --> 02:43:20,240
committed use discounts and reservations

3972
02:43:17,840 --> 02:43:22,799
as it pertains to the exam

3973
02:43:20,239 --> 02:43:25,680
i have not seen it but since this is an

3974
02:43:22,799 --> 02:43:28,398
option to save money i wanted to make

3975
02:43:25,680 --> 02:43:30,880
sure that i included it in this lesson

3976
02:43:28,398 --> 02:43:32,719
as this could be a great option for use

3977
02:43:30,879 --> 02:43:34,639
in your environment so now that we

3978
02:43:32,719 --> 02:43:37,199
covered resource-based committed use

3979
02:43:34,639 --> 02:43:39,519
discounts i wanted to move into spend

3980
02:43:37,200 --> 02:43:42,399
based commitments and so where you would

3981
02:43:39,520 --> 02:43:43,920
find that would be over in billing

3982
02:43:42,398 --> 02:43:46,079
so again i'm going to go up to the

3983
02:43:43,920 --> 02:43:49,359
navigation menu in the top left hand

3984
02:43:46,079 --> 02:43:51,039
corner and go into billing

3985
02:43:49,359 --> 02:43:53,760
now you'd think that you would find it

3986
02:43:51,040 --> 02:43:56,240
here under commitments but only when you

3987
02:43:53,760 --> 02:43:58,719
have purchased a commitment will it

3988
02:43:56,239 --> 02:44:00,879
actually show up here but as you can see

3989
02:43:58,719 --> 02:44:03,119
here it's prompting us to go to the

3990
02:44:00,879 --> 02:44:06,000
billing overview page

3991
02:44:03,120 --> 02:44:07,359
so going back to the overview page

3992
02:44:06,000 --> 02:44:10,398
you'll find it

3993
02:44:07,359 --> 02:44:12,399
down here on the right and so i can now

3994
02:44:10,398 --> 02:44:13,840
purchase a commitment and as we

3995
02:44:12,398 --> 02:44:16,239
discussed before

3996
02:44:13,840 --> 02:44:19,920
a spend based commitment can be used for

3997
02:44:16,239 --> 02:44:22,239
either cloud sql or for vmware engine

3998
02:44:19,920 --> 02:44:24,639
i select my billing account

3999
02:44:22,239 --> 02:44:27,119
the commitment name the period either

4000
02:44:24,639 --> 02:44:29,519
one year or three years and it also

4001
02:44:27,120 --> 02:44:32,720
shows me the discount which could help

4002
02:44:29,520 --> 02:44:34,960
sway my decision as well as the region

4003
02:44:32,719 --> 02:44:36,879
as well as the hourly on-demand

4004
02:44:34,959 --> 02:44:38,079
commitment now you're probably wondering

4005
02:44:36,879 --> 02:44:40,799
what this is

4006
02:44:38,079 --> 02:44:43,120
and as explained here this commitment is

4007
02:44:40,799 --> 02:44:45,358
based on the on-demand price

4008
02:44:43,120 --> 02:44:48,079
and once this is all filled out the

4009
02:44:45,359 --> 02:44:49,760
commitment summary will be populated and

4010
02:44:48,079 --> 02:44:52,799
after you agree to all the terms and

4011
02:44:49,760 --> 02:44:54,880
services you can simply hit purchase

4012
02:44:52,799 --> 02:44:57,679
but i'm going to cancel out of here

4013
02:44:54,879 --> 02:44:59,599
and so that is an overview for the spend

4014
02:44:57,680 --> 02:45:02,318
based commitment and again these

4015
02:44:59,600 --> 02:45:03,600
committed use discounts i have not seen

4016
02:45:02,318 --> 02:45:05,680
on the exam

4017
02:45:03,600 --> 02:45:08,239
but i do think that it's good to know

4018
02:45:05,680 --> 02:45:10,639
for your day-to-day environment if

4019
02:45:08,239 --> 02:45:12,079
you're looking to save money and really

4020
02:45:10,639 --> 02:45:14,159
break down costs

4021
02:45:12,079 --> 02:45:16,639
so now that i've covered committed use

4022
02:45:14,159 --> 02:45:18,799
discounts and reservations

4023
02:45:16,639 --> 02:45:21,519
i wanted to move over to budgets and

4024
02:45:18,799 --> 02:45:23,840
budget alerts and because i'm already on

4025
02:45:21,520 --> 02:45:25,680
the billing page all i need to do is go

4026
02:45:23,840 --> 02:45:28,639
over here to the left hand menu and

4027
02:45:25,680 --> 02:45:31,920
click on budgets and alerts now setting

4028
02:45:28,639 --> 02:45:34,559
up a budget for yourself for this course

4029
02:45:31,920 --> 02:45:37,040
would be a great idea especially for

4030
02:45:34,559 --> 02:45:39,119
those who are cost conscious on how much

4031
02:45:37,040 --> 02:45:41,680
you're spending with regards to your

4032
02:45:39,120 --> 02:45:43,920
cloud usage and so we're to go ahead and

4033
02:45:41,680 --> 02:45:46,880
create a new budget right now so let's

4034
02:45:43,920 --> 02:45:48,398
go up here to the top to create budget

4035
02:45:46,879 --> 02:45:50,799
and i'm going to be brought to a new

4036
02:45:48,398 --> 02:45:52,959
window where i can put in the name of

4037
02:45:50,799 --> 02:45:54,079
the budget and i'm going to call this

4038
02:45:52,959 --> 02:45:57,278
ace

4039
02:45:54,079 --> 02:45:59,840
dash budget and because i want to

4040
02:45:57,279 --> 02:46:02,159
monitor all projects and all products

4041
02:45:59,840 --> 02:46:04,719
i'm going to leave this as is but if you

4042
02:46:02,159 --> 02:46:07,039
did have multiple projects you could get

4043
02:46:04,719 --> 02:46:10,519
a little bit more granular and the same

4044
02:46:07,040 --> 02:46:10,520
thing with products

4045
02:46:13,040 --> 02:46:17,120
so i'm going to go ahead and leave it as

4046
02:46:14,639 --> 02:46:18,318
is and just click on next now under

4047
02:46:17,120 --> 02:46:20,560
budget type

4048
02:46:18,318 --> 02:46:23,600
i can select from either a specified

4049
02:46:20,559 --> 02:46:25,600
amount or the last month's spend and so

4050
02:46:23,600 --> 02:46:27,200
for this demo i'm going to keep it at

4051
02:46:25,600 --> 02:46:28,720
specified amount

4052
02:46:27,200 --> 02:46:31,040
and because i want to be really

4053
02:46:28,719 --> 02:46:33,519
conscious about how much i spend in this

4054
02:46:31,040 --> 02:46:35,439
course i'm going to put in 10

4055
02:46:33,520 --> 02:46:37,760
for my target amount i'm going to

4056
02:46:35,439 --> 02:46:40,318
include the credits and cost and then

4057
02:46:37,760 --> 02:46:42,398
i'm going to click on next now these

4058
02:46:40,318 --> 02:46:45,439
threshold rules are where billing

4059
02:46:42,398 --> 02:46:48,079
administrators will be emailed when a

4060
02:46:45,439 --> 02:46:50,398
certain percent of the budget is hit

4061
02:46:48,079 --> 02:46:51,439
so if my spend happens to hit five

4062
02:46:50,398 --> 02:46:54,239
dollars

4063
02:46:51,439 --> 02:46:56,880
because i am a billing administrator i

4064
02:46:54,239 --> 02:46:59,279
will be sent an email telling me that my

4065
02:46:56,879 --> 02:47:02,000
spend has hit five dollars i also have

4066
02:46:59,279 --> 02:47:03,920
the option of changing these percentages

4067
02:47:02,000 --> 02:47:05,120
so if i decided to change it to forty

4068
02:47:03,920 --> 02:47:07,920
percent

4069
02:47:05,120 --> 02:47:10,399
now my amount goes to four dollars and

4070
02:47:07,920 --> 02:47:12,478
this is done automatically so no need to

4071
02:47:10,398 --> 02:47:14,559
do any calculations

4072
02:47:12,478 --> 02:47:15,599
but i'm going to keep this here at 50

4073
02:47:14,559 --> 02:47:18,079
percent

4074
02:47:15,600 --> 02:47:19,200
and vice versa if i wanted to change the

4075
02:47:18,079 --> 02:47:21,279
amount

4076
02:47:19,200 --> 02:47:23,840
the percentage of budget will actually

4077
02:47:21,279 --> 02:47:27,040
change now with the trigger i actually

4078
02:47:23,840 --> 02:47:29,439
have the option of selecting forecasted

4079
02:47:27,040 --> 02:47:31,840
or actual and so i'm going to keep it on

4080
02:47:29,439 --> 02:47:33,920
actual and if i want i can add more

4081
02:47:31,840 --> 02:47:35,920
threshold rules now i'm going to leave

4082
02:47:33,920 --> 02:47:36,879
everything as is and just click on

4083
02:47:35,920 --> 02:47:38,879
finish

4084
02:47:36,879 --> 02:47:41,599
and now as you can see here i have a

4085
02:47:38,879 --> 02:47:43,358
budget name of ace budget now because

4086
02:47:41,600 --> 02:47:46,079
the budget name doesn't have to be

4087
02:47:43,359 --> 02:47:48,559
globally unique in your environment you

4088
02:47:46,079 --> 02:47:50,639
can name your budget exactly the same

4089
02:47:48,559 --> 02:47:52,959
and again it'll give me all the specific

4090
02:47:50,639 --> 02:47:55,278
configurations that i filled out shows

4091
02:47:52,959 --> 02:47:57,278
me how much credits i've used and that's

4092
02:47:55,279 --> 02:48:00,000
it and that's how you would create a

4093
02:47:57,279 --> 02:48:03,200
budget alert now if i needed to edit it

4094
02:48:00,000 --> 02:48:05,439
i can always go back to ace budget and

4095
02:48:03,200 --> 02:48:06,800
here i can edit it but i'm not going to

4096
02:48:05,439 --> 02:48:07,760
touch it and i'm just going to hit

4097
02:48:06,799 --> 02:48:09,358
cancel

4098
02:48:07,760 --> 02:48:11,680
and so the last thing i wanted to show

4099
02:48:09,359 --> 02:48:14,239
you before we end this lesson is how to

4100
02:48:11,680 --> 02:48:17,120
create another budget but being able to

4101
02:48:14,239 --> 02:48:18,478
send out the trigger alert emails to

4102
02:48:17,120 --> 02:48:20,160
different users

4103
02:48:18,478 --> 02:48:22,639
and so in order to do that i'm going to

4104
02:48:20,159 --> 02:48:26,398
go back up here to create budget i'm

4105
02:48:22,639 --> 02:48:27,840
going to name this to ace dash

4106
02:48:26,398 --> 02:48:28,840
budget

4107
02:48:27,840 --> 02:48:32,000
dash

4108
02:48:28,840 --> 02:48:34,079
users i'm going to leave the rest as is

4109
02:48:32,000 --> 02:48:35,520
i'm going to click on next again i'm

4110
02:48:34,079 --> 02:48:38,159
going to leave the budget type the way

4111
02:48:35,520 --> 02:48:39,439
it is the target amount i'm going to put

4112
02:48:38,159 --> 02:48:41,600
ten dollars

4113
02:48:39,439 --> 02:48:43,200
leave the include credits and cost and

4114
02:48:41,600 --> 02:48:44,559
just click on next

4115
02:48:43,200 --> 02:48:46,800
and so here i'm going to leave the

4116
02:48:44,559 --> 02:48:49,359
threshold rules the way they are and

4117
02:48:46,799 --> 02:48:51,599
right here under manage notifications

4118
02:48:49,359 --> 02:48:53,840
i'm going to click off link monitoring

4119
02:48:51,600 --> 02:48:56,000
email notification channels to this

4120
02:48:53,840 --> 02:48:58,398
budget now because the email

4121
02:48:56,000 --> 02:49:00,719
notification channel needs cloud

4122
02:48:58,398 --> 02:49:03,278
monitoring in order to work i am

4123
02:49:00,719 --> 02:49:05,760
prompted here to select a workspace

4124
02:49:03,279 --> 02:49:07,680
which is needed by cloud monitoring so

4125
02:49:05,760 --> 02:49:10,398
because i have none i'm going to go

4126
02:49:07,680 --> 02:49:12,880
ahead and create one and so clicking on

4127
02:49:10,398 --> 02:49:14,959
managing monitoring workspaces will

4128
02:49:12,879 --> 02:49:17,759
bring you to the documentation but in

4129
02:49:14,959 --> 02:49:20,159
order for me to get a workspace created

4130
02:49:17,760 --> 02:49:23,040
i need to go to cloud monitoring now

4131
02:49:20,159 --> 02:49:25,840
workspace is the top level container

4132
02:49:23,040 --> 02:49:28,240
that is used to organize and control

4133
02:49:25,840 --> 02:49:30,880
access to your monitoring notification

4134
02:49:28,239 --> 02:49:33,680
channels in order for your notification

4135
02:49:30,879 --> 02:49:36,079
channels to work they must belong to a

4136
02:49:33,680 --> 02:49:38,960
monitoring workspace so you need to

4137
02:49:36,079 --> 02:49:40,398
create at least one workspace before

4138
02:49:38,959 --> 02:49:42,959
adding monitoring

4139
02:49:40,398 --> 02:49:45,358
notification channels and don't worry

4140
02:49:42,959 --> 02:49:48,000
we'll be getting into greater depth with

4141
02:49:45,359 --> 02:49:50,159
regards to monitoring in a later section

4142
02:49:48,000 --> 02:49:51,680
in this course so i'm going to go ahead

4143
02:49:50,159 --> 02:49:53,520
and cancel this

4144
02:49:51,680 --> 02:49:54,559
and i'm going to go up to the navigation

4145
02:49:53,520 --> 02:49:56,079
menu

4146
02:49:54,559 --> 02:50:00,398
click on there

4147
02:49:56,079 --> 02:50:00,398
and scroll down to monitoring

4148
02:50:01,040 --> 02:50:05,040
and then overview and this may take a

4149
02:50:03,359 --> 02:50:07,600
minute to start up

4150
02:50:05,040 --> 02:50:10,640
as the apis are being enabled and the

4151
02:50:07,600 --> 02:50:12,000
default workspace for cloud monitoring

4152
02:50:10,639 --> 02:50:14,559
is being built

4153
02:50:12,000 --> 02:50:17,359
okay and now that the monitoring api has

4154
02:50:14,559 --> 02:50:19,439
been enabled we are now in monitoring

4155
02:50:17,359 --> 02:50:21,840
the workspace that was created is my

4156
02:50:19,439 --> 02:50:24,398
first project so now that we have our

4157
02:50:21,840 --> 02:50:27,040
monitoring workspace created i need to

4158
02:50:24,398 --> 02:50:29,519
add the emails to the users that i want

4159
02:50:27,040 --> 02:50:31,840
the alerts to be sent out to and added

4160
02:50:29,520 --> 02:50:34,079
to the notification channel so in order

4161
02:50:31,840 --> 02:50:36,398
to do that i'm going to go over here to

4162
02:50:34,079 --> 02:50:38,239
alerting and up here at the top i'm

4163
02:50:36,398 --> 02:50:39,278
going to click on edit notification

4164
02:50:38,239 --> 02:50:41,039
channels

4165
02:50:39,279 --> 02:50:42,800
and here as you can see are many

4166
02:50:41,040 --> 02:50:45,920
notification channels that you can

4167
02:50:42,799 --> 02:50:48,559
enable by simply clicking on add new

4168
02:50:45,920 --> 02:50:51,520
over here on the right so now what i'm

4169
02:50:48,559 --> 02:50:53,920
looking for is under email i'm going to

4170
02:50:51,520 --> 02:50:56,560
click on add new now here i can add the

4171
02:50:53,920 --> 02:50:58,318
new email address and so for me i'm

4172
02:50:56,559 --> 02:51:00,719
going to add antony

4173
02:50:58,318 --> 02:51:02,559
at antonyt.com

4174
02:51:00,719 --> 02:51:03,599
and you can add whatever email address

4175
02:51:02,559 --> 02:51:06,159
you'd like

4176
02:51:03,600 --> 02:51:08,800
and under display name i'm going to add

4177
02:51:06,159 --> 02:51:11,680
billing admin

4178
02:51:08,799 --> 02:51:11,679
notification

4179
02:51:12,398 --> 02:51:17,199
and just click on save

4180
02:51:14,879 --> 02:51:19,839
and as you can see my email has been

4181
02:51:17,200 --> 02:51:22,079
added to the notification channel and so

4182
02:51:19,840 --> 02:51:24,639
this is all i needed to do in order to

4183
02:51:22,079 --> 02:51:26,879
move on to the next step and so now that

4184
02:51:24,639 --> 02:51:29,680
i've covered creating my monitoring

4185
02:51:26,879 --> 02:51:32,719
workspace as well as adding another

4186
02:51:29,680 --> 02:51:35,120
email to my email notification channels

4187
02:51:32,719 --> 02:51:38,318
i can now go back to billing and finish

4188
02:51:35,120 --> 02:51:38,319
off my budget alert

4189
02:51:39,040 --> 02:51:43,120
let's go over here to budgets and alerts

4190
02:51:43,279 --> 02:51:46,399
create budget

4191
02:51:44,959 --> 02:51:47,759
and we're gonna go through the same

4192
02:51:46,398 --> 02:51:50,719
steps

4193
02:51:47,760 --> 02:51:53,120
call this billing

4194
02:51:50,719 --> 02:51:53,119
alert

4195
02:51:53,200 --> 02:51:55,680
users

4196
02:51:55,920 --> 02:51:59,279
leave everything else as is and click on

4197
02:51:58,239 --> 02:52:00,879
next

4198
02:51:59,279 --> 02:52:03,279
i'm just going to change the target

4199
02:52:00,879 --> 02:52:04,719
amount to 10

4200
02:52:03,279 --> 02:52:07,279
click on next

4201
02:52:04,719 --> 02:52:09,358
i'm going to leave everything here as is

4202
02:52:07,279 --> 02:52:11,520
and i'm going to go back to click on

4203
02:52:09,359 --> 02:52:13,680
link monitoring email notification

4204
02:52:11,520 --> 02:52:16,319
channels to this budget now if you

4205
02:52:13,680 --> 02:52:19,200
notice when i click on select workspace

4206
02:52:16,318 --> 02:52:22,079
my first project shows up and here it

4207
02:52:19,200 --> 02:52:24,800
will ask me for my notification channels

4208
02:52:22,079 --> 02:52:27,039
and because i've already set it up i can

4209
02:52:24,799 --> 02:52:29,920
simply click on it and you'll see the

4210
02:52:27,040 --> 02:52:32,160
billing admin notification channel

4211
02:52:29,920 --> 02:52:34,239
and so if i didn't have this set up i

4212
02:52:32,159 --> 02:52:36,239
can always go to manage notification

4213
02:52:34,239 --> 02:52:38,398
channels and it'll bring me back to the

4214
02:52:36,239 --> 02:52:40,398
screen which you saw earlier

4215
02:52:38,398 --> 02:52:42,478
and so now that that's set up i can

4216
02:52:40,398 --> 02:52:44,719
simply click on finish

4217
02:52:42,478 --> 02:52:47,599
and so now that i have a

4218
02:52:44,719 --> 02:52:49,679
regular budget alert i also have another

4219
02:52:47,600 --> 02:52:52,720
budget alert that can go to a different

4220
02:52:49,680 --> 02:52:54,960
email so if you have a project manager

4221
02:52:52,719 --> 02:52:57,438
or a director that you want to send

4222
02:52:54,959 --> 02:53:00,239
budget alerts to this is how you would

4223
02:52:57,439 --> 02:53:03,600
do it and so that about covers this demo

4224
02:53:00,239 --> 02:53:06,398
on committed use discounts reservations

4225
02:53:03,600 --> 02:53:08,800
budgets and budget alerts and so that's

4226
02:53:06,398 --> 02:53:10,559
all i wanted to cover for this lesson

4227
02:53:08,799 --> 02:53:11,519
so you can now mark this lesson as

4228
02:53:10,559 --> 02:53:13,619
complete

4229
02:53:11,520 --> 02:53:17,520
and let's move on to the next one

4230
02:53:13,620 --> 02:53:18,880
[Music]

4231
02:53:17,520 --> 02:53:21,279
welcome back

4232
02:53:18,879 --> 02:53:24,159
in this short lesson i will be covering

4233
02:53:21,279 --> 02:53:26,720
the exporting of your billing data so

4234
02:53:24,159 --> 02:53:28,959
that you're able to analyze that data

4235
02:53:26,719 --> 02:53:30,559
and understand your spend at a more

4236
02:53:28,959 --> 02:53:32,398
granular level

4237
02:53:30,559 --> 02:53:35,680
i will also be going through a short

4238
02:53:32,398 --> 02:53:38,239
demo where i will show you how to enable

4239
02:53:35,680 --> 02:53:41,920
the export billing feature and bring it

4240
02:53:38,239 --> 02:53:44,639
into bigquery to be analyzed

4241
02:53:41,920 --> 02:53:48,000
now cloud billing export to bigquery

4242
02:53:44,639 --> 02:53:51,358
enables you to export granular google

4243
02:53:48,000 --> 02:53:54,000
cloud billing data such as usage

4244
02:53:51,359 --> 02:53:56,960
cost details and pricing data

4245
02:53:54,000 --> 02:54:00,000
automatically to a bigquery data set

4246
02:53:56,959 --> 02:54:02,799
that you specify then you can access

4247
02:54:00,000 --> 02:54:04,799
your cloud billing data from bigquery

4248
02:54:02,799 --> 02:54:07,840
for detailed analysis

4249
02:54:04,799 --> 02:54:10,239
or use a tool like data studio to

4250
02:54:07,840 --> 02:54:12,639
visualize your data just a quick note

4251
02:54:10,239 --> 02:54:15,279
here that billing export is not

4252
02:54:12,639 --> 02:54:18,079
retroactive and this should be taken

4253
02:54:15,279 --> 02:54:20,720
into consideration when planning for

4254
02:54:18,079 --> 02:54:23,439
analysis on this data and so there are

4255
02:54:20,719 --> 02:54:24,959
two types of cloud billing data that you

4256
02:54:23,439 --> 02:54:28,159
can export

4257
02:54:24,959 --> 02:54:30,559
there's the daily cost detail data

4258
02:54:28,159 --> 02:54:32,959
and the pricing data and these can be

4259
02:54:30,559 --> 02:54:35,519
selected right within the console

4260
02:54:32,959 --> 02:54:37,839
depending on your use case and so now

4261
02:54:35,520 --> 02:54:40,960
that we've gone through exactly what

4262
02:54:37,840 --> 02:54:43,600
billing export is i wanted to get into a

4263
02:54:40,959 --> 02:54:46,719
demo and show you how to export your

4264
02:54:43,600 --> 02:54:49,040
cloud billing data to bigquery and go

4265
02:54:46,719 --> 02:54:51,519
through all the necessary steps to get

4266
02:54:49,040 --> 02:54:53,760
it enabled so when you're ready join me

4267
02:54:51,520 --> 02:54:56,399
in the console and so here we are back

4268
02:54:53,760 --> 02:54:58,719
in the console and so in order to enable

4269
02:54:56,398 --> 02:55:01,199
billing export i'm going to be going to

4270
02:54:58,719 --> 02:55:03,358
the billing page so i'm going to move up

4271
02:55:01,200 --> 02:55:05,040
to the top left hand corner to the

4272
02:55:03,359 --> 02:55:08,159
navigation menu

4273
02:55:05,040 --> 02:55:10,479
and click on billing

4274
02:55:08,159 --> 02:55:12,799
here in the left hand menu you'll see

4275
02:55:10,478 --> 02:55:13,679
billing export and you can just click on

4276
02:55:12,799 --> 02:55:15,599
there

4277
02:55:13,680 --> 02:55:17,760
and so for those just coming to billing

4278
02:55:15,600 --> 02:55:19,760
export for the first time there's a

4279
02:55:17,760 --> 02:55:22,318
quick summary of exactly what the

4280
02:55:19,760 --> 02:55:24,960
bigquery export is used for and as we

4281
02:55:22,318 --> 02:55:28,719
discussed earlier there is an option for

4282
02:55:24,959 --> 02:55:30,559
the daily cost detail and for pricing

4283
02:55:28,719 --> 02:55:33,199
and i'm going to use the daily cost

4284
02:55:30,559 --> 02:55:35,600
detail in this demo and export that data

4285
02:55:33,200 --> 02:55:36,479
to bigquery so the first step i'm going

4286
02:55:35,600 --> 02:55:38,960
to do

4287
02:55:36,478 --> 02:55:41,278
is to click on edit settings and it's

4288
02:55:38,959 --> 02:55:43,679
going to bring me to a new page where it

4289
02:55:41,279 --> 02:55:45,439
will ask me for my project and this is

4290
02:55:43,680 --> 02:55:47,439
where my billing data is going to be

4291
02:55:45,439 --> 02:55:49,279
stored but as you can see here i'm

4292
02:55:47,439 --> 02:55:52,239
getting a prompt that says you need to

4293
02:55:49,279 --> 02:55:55,200
create a bigquery data set first now the

4294
02:55:52,239 --> 02:55:57,039
bigquery data set that is asking for is

4295
02:55:55,200 --> 02:55:59,359
where the billing data is going to be

4296
02:55:57,040 --> 02:56:01,680
stored so in order to move forward with

4297
02:55:59,359 --> 02:56:04,159
my billing export i need to go to

4298
02:56:01,680 --> 02:56:05,680
bigquery and set up a data set so i'm

4299
02:56:04,159 --> 02:56:09,439
going to simply click on this button

4300
02:56:05,680 --> 02:56:09,439
here that says go to bigquery

4301
02:56:09,600 --> 02:56:13,279
and it's going to bring me to the

4302
02:56:10,959 --> 02:56:15,358
bigquery page where i'll be prompted

4303
02:56:13,279 --> 02:56:17,520
with a big welcome note you can just

4304
02:56:15,359 --> 02:56:20,318
click on done and over here in the right

4305
02:56:17,520 --> 02:56:22,479
hand side where it says create data set

4306
02:56:20,318 --> 02:56:24,799
i'm just going to click on there and i'm

4307
02:56:22,478 --> 02:56:27,519
going to create my new data set and so

4308
02:56:24,799 --> 02:56:28,398
for my data set id i'm going to call

4309
02:56:27,520 --> 02:56:29,359
this

4310
02:56:28,398 --> 02:56:31,039
billing

4311
02:56:29,359 --> 02:56:33,920
export

4312
02:56:31,040 --> 02:56:35,760
and just as a note with the data set id

4313
02:56:33,920 --> 02:56:38,799
you can't use any characters like

4314
02:56:35,760 --> 02:56:41,760
hyphens commas or periods and therefore

4315
02:56:38,799 --> 02:56:44,799
i capitalize the b and the e now with

4316
02:56:41,760 --> 02:56:47,600
the data location the default location

4317
02:56:44,799 --> 02:56:49,679
is the us multi region but i can simply

4318
02:56:47,600 --> 02:56:52,079
click on the drop down and have an

4319
02:56:49,680 --> 02:56:53,200
option to store my data in a different

4320
02:56:52,079 --> 02:56:55,520
location

4321
02:56:53,200 --> 02:56:58,319
but i'm going to keep it at default i

4322
02:56:55,520 --> 02:57:00,560
have the option of expiring this table

4323
02:56:58,318 --> 02:57:02,959
in either a certain amount of days or to

4324
02:57:00,559 --> 02:57:05,039
never expire as well when it comes to

4325
02:57:02,959 --> 02:57:07,358
encryption i'm going to leave it as

4326
02:57:05,040 --> 02:57:10,080
google manage key as opposed to a

4327
02:57:07,359 --> 02:57:12,640
customer manage key and i'll get into

4328
02:57:10,079 --> 02:57:14,959
encryption and key management a little

4329
02:57:12,639 --> 02:57:16,639
later on in this course i'm going to go

4330
02:57:14,959 --> 02:57:18,719
ahead and move right down to the bottom

4331
02:57:16,639 --> 02:57:21,119
and click on create data set

4332
02:57:18,719 --> 02:57:23,358
and now my data set has been created i

4333
02:57:21,120 --> 02:57:27,760
can now see it over here on the left

4334
02:57:23,359 --> 02:57:30,399
hand side menu where subtle poet 28400

4335
02:57:27,760 --> 02:57:32,880
is the id for my project if i simply

4336
02:57:30,398 --> 02:57:35,199
click on the arrow beside it it'll show

4337
02:57:32,879 --> 02:57:37,599
my billing export data set because

4338
02:57:35,200 --> 02:57:40,240
there's nothing in it nothing is showing

4339
02:57:37,600 --> 02:57:42,239
and so now that the data set is set up i

4340
02:57:40,239 --> 02:57:44,879
can now go back to the billing export

4341
02:57:42,239 --> 02:57:47,039
page and finish setting up my billing

4342
02:57:44,879 --> 02:57:49,920
export so with that being said i'm going

4343
02:57:47,040 --> 02:57:52,160
to go back up to the navigation menu

4344
02:57:49,920 --> 02:57:54,719
head over to billing

4345
02:57:52,159 --> 02:57:56,719
and go to billing export under daily

4346
02:57:54,719 --> 02:57:59,039
cost detail i'm going to click on edit

4347
02:57:56,719 --> 02:58:01,438
settings and because i have a data set

4348
02:57:59,040 --> 02:58:04,080
already set up and since it's the only

4349
02:58:01,439 --> 02:58:06,880
one it has been propagated in my billing

4350
02:58:04,079 --> 02:58:08,719
export data set field if i had more data

4351
02:58:06,879 --> 02:58:10,398
sets then i would be able to select them

4352
02:58:08,719 --> 02:58:12,719
here as well so i'm going to leave the

4353
02:58:10,398 --> 02:58:15,680
data set at billing export

4354
02:58:12,719 --> 02:58:17,760
and simply click on save

4355
02:58:15,680 --> 02:58:19,840
and so now that billing export has been

4356
02:58:17,760 --> 02:58:22,478
enabled i'll be able to check on my

4357
02:58:19,840 --> 02:58:24,478
billing as it is updated each day as it

4358
02:58:22,478 --> 02:58:27,278
says here and to go right to the data

4359
02:58:24,478 --> 02:58:29,519
set i can simply click on this hot link

4360
02:58:27,279 --> 02:58:31,520
and it'll bring me right to bigquery and

4361
02:58:29,520 --> 02:58:34,479
so there is one last step that still

4362
02:58:31,520 --> 02:58:37,439
needs to be done to enable the billing

4363
02:58:34,478 --> 02:58:41,278
export to work and that is to enable the

4364
02:58:37,439 --> 02:58:43,439
bigquery data transfer service api so in

4365
02:58:41,279 --> 02:58:45,200
order to do that we need to go back to

4366
02:58:43,439 --> 02:58:48,559
the navigation menu

4367
02:58:45,200 --> 02:58:51,279
go into apis and services

4368
02:58:48,559 --> 02:58:53,119
into the dashboard

4369
02:58:51,279 --> 02:58:55,760
and now i'm going to do a search for the

4370
02:58:53,120 --> 02:58:57,520
bigquery data transfer service and i'm

4371
02:58:55,760 --> 02:58:58,639
going to simply go up here to the top

4372
02:58:57,520 --> 02:59:02,399
search bar

4373
02:58:58,639 --> 02:59:04,559
and simply type in bigquery

4374
02:59:02,398 --> 02:59:07,680
and here it is bigquery data transfer

4375
02:59:04,559 --> 02:59:09,920
api i'm going to simply click on that

4376
02:59:07,680 --> 02:59:11,920
and hit enable

4377
02:59:09,920 --> 02:59:13,920
and this might take a minute and you may

4378
02:59:11,920 --> 02:59:15,920
be asked to create credentials over here

4379
02:59:13,920 --> 02:59:18,000
on the top right and you can simply

4380
02:59:15,920 --> 02:59:20,799
ignore that as they are not currently

4381
02:59:18,000 --> 02:59:23,520
needed and so now that the bigquery data

4382
02:59:20,799 --> 02:59:26,719
transfer service api has been enabled

4383
02:59:23,520 --> 02:59:28,880
i'm now able to go over to bigquery and

4384
02:59:26,719 --> 02:59:30,879
take a look at my billing export data

4385
02:59:28,879 --> 02:59:33,358
without any issues now it's going to

4386
02:59:30,879 --> 02:59:35,599
take time to propagate but by the time i

4387
02:59:33,359 --> 02:59:37,920
come here tomorrow the data will be

4388
02:59:35,600 --> 02:59:40,720
fully propagated and i'll be able to

4389
02:59:37,920 --> 02:59:43,200
query the data as i see fit and so

4390
02:59:40,719 --> 02:59:45,760
although this is a short demo this is

4391
02:59:43,200 --> 02:59:48,640
necessary to know for the exam

4392
02:59:45,760 --> 02:59:50,719
as well being an engineer and looking to

4393
02:59:48,639 --> 02:59:52,719
query your billing data you will now

4394
02:59:50,719 --> 02:59:55,199
have the knowledge in order to take the

4395
02:59:52,719 --> 02:59:57,519
steps necessary that will allow you to

4396
02:59:55,200 --> 03:00:00,960
do so and so that's all i have for this

4397
02:59:57,520 --> 03:00:02,800
lesson and demo on export billing data

4398
03:00:00,959 --> 03:00:03,759
so you can now mark this lesson as

4399
03:00:02,799 --> 03:00:08,199
complete

4400
03:00:03,760 --> 03:00:08,200
and let's move on to the next one

4401
03:00:10,079 --> 03:00:13,680
welcome back

4402
03:00:11,200 --> 03:00:17,120
in this hands-on demo i'm going to go

4403
03:00:13,680 --> 03:00:19,680
over apis in google cloud

4404
03:00:17,120 --> 03:00:22,399
now the google cloud platform is pretty

4405
03:00:19,680 --> 03:00:25,840
much run on apis

4406
03:00:22,398 --> 03:00:29,358
whether it's in the console or the sdk

4407
03:00:25,840 --> 03:00:31,600
under the hood it's hitting the apis now

4408
03:00:29,359 --> 03:00:32,800
some of you may be wondering what is an

4409
03:00:31,600 --> 03:00:35,359
api

4410
03:00:32,799 --> 03:00:38,159
well this is an acronym standing for

4411
03:00:35,359 --> 03:00:40,318
application programming interface and

4412
03:00:38,159 --> 03:00:42,719
it's a standard used amongst the

4413
03:00:40,318 --> 03:00:46,079
programming community in this specific

4414
03:00:42,719 --> 03:00:48,318
context it is the programming interface

4415
03:00:46,079 --> 03:00:51,680
for google cloud services

4416
03:00:48,318 --> 03:00:54,879
and as i said before both the cloud sdk

4417
03:00:51,680 --> 03:00:57,120
and the console are using apis under the

4418
03:00:54,879 --> 03:00:59,759
hood and it provides similar

4419
03:00:57,120 --> 03:01:02,399
functionality now when using the apis

4420
03:00:59,760 --> 03:01:05,120
directly it allows you to enable

4421
03:01:02,398 --> 03:01:08,079
automation in your workflow by using the

4422
03:01:05,120 --> 03:01:10,319
software libraries that you use for your

4423
03:01:08,079 --> 03:01:12,159
favorite programming language now as

4424
03:01:10,318 --> 03:01:14,159
seen in previous lessons

4425
03:01:12,159 --> 03:01:17,119
to use a cloud api

4426
03:01:14,159 --> 03:01:19,760
you must enable it first so if i went to

4427
03:01:17,120 --> 03:01:22,000
compute engine or when i was enabling

4428
03:01:19,760 --> 03:01:24,880
monitoring

4429
03:01:22,000 --> 03:01:26,639
i had to enable the api so no matter the

4430
03:01:24,879 --> 03:01:28,799
service you're requesting here in google

4431
03:01:26,639 --> 03:01:30,959
cloud and some of them may be even

4432
03:01:28,799 --> 03:01:33,358
linked together it always has to be

4433
03:01:30,959 --> 03:01:35,599
enabled in order to use it now getting a

4434
03:01:33,359 --> 03:01:38,640
little bit more granular when using an

4435
03:01:35,600 --> 03:01:41,200
api you need to have a project so when

4436
03:01:38,639 --> 03:01:42,559
you enable the api you enable it for

4437
03:01:41,200 --> 03:01:45,439
your project

4438
03:01:42,559 --> 03:01:48,478
using the permissions on the project and

4439
03:01:45,439 --> 03:01:51,040
permissions on the api to enable it now

4440
03:01:48,478 --> 03:01:53,519
since this is a demo i want to go over

4441
03:01:51,040 --> 03:01:56,000
to the navigation menu and go straight

4442
03:01:53,520 --> 03:01:58,880
into apis and services

4443
03:01:56,000 --> 03:02:01,040
and so here is the dashboard of the apis

4444
03:01:58,879 --> 03:02:04,559
and services you can see the traffic

4445
03:02:01,040 --> 03:02:08,000
here the errors and the latency with

4446
03:02:04,559 --> 03:02:10,559
regards to these apis as well up here it

4447
03:02:08,000 --> 03:02:12,879
has a time frame for the median latency

4448
03:02:10,559 --> 03:02:15,439
that you can select for a more granular

4449
03:02:12,879 --> 03:02:18,719
search now when it comes to what is

4450
03:02:15,439 --> 03:02:21,279
enabled already you can see list here of

4451
03:02:18,719 --> 03:02:23,840
the apis that are enabled and since we

4452
03:02:21,279 --> 03:02:26,560
haven't done much there's only a few

4453
03:02:23,840 --> 03:02:29,520
apis that are enabled now this hands-on

4454
03:02:26,559 --> 03:02:32,639
demo is not meant to go into depth with

4455
03:02:29,520 --> 03:02:35,439
apis but is merely an overview so that

4456
03:02:32,639 --> 03:02:38,398
you understand what the apis are used

4457
03:02:35,439 --> 03:02:40,239
for in context with google cloud if

4458
03:02:38,398 --> 03:02:42,959
you'd like to go more in depth with

4459
03:02:40,239 --> 03:02:46,000
regards to apis and possibly get

4460
03:02:42,959 --> 03:02:48,478
certified in it the apogee certification

4461
03:02:46,000 --> 03:02:50,398
with its corresponding lessons would be

4462
03:02:48,478 --> 03:02:52,478
a great way to get a little bit more

4463
03:02:50,398 --> 03:02:54,639
understanding but for this demo we're

4464
03:02:52,478 --> 03:02:57,039
going to stick with this overview and so

4465
03:02:54,639 --> 03:02:59,199
in order to search for more apis that

4466
03:02:57,040 --> 03:03:00,960
need to be enabled or if you're looking

4467
03:02:59,200 --> 03:03:03,680
for something specific

4468
03:03:00,959 --> 03:03:04,879
you can come up here to enable apis and

4469
03:03:03,680 --> 03:03:06,639
services

4470
03:03:04,879 --> 03:03:08,879
or you can do a quick search on the

4471
03:03:06,639 --> 03:03:10,799
search bar at the top of the page but

4472
03:03:08,879 --> 03:03:14,000
just as a quick glance i'm going to go

4473
03:03:10,799 --> 03:03:16,159
into enable apis and services and so you

4474
03:03:14,000 --> 03:03:19,520
will be brought to a new page where you

4475
03:03:16,159 --> 03:03:21,840
will see the api library on the left you

4476
03:03:19,520 --> 03:03:25,040
will see a menu where the apis are

4477
03:03:21,840 --> 03:03:28,318
categorized and all the apis that are

4478
03:03:25,040 --> 03:03:30,960
available when it comes to google cloud

4479
03:03:28,318 --> 03:03:34,239
and other google services so as you saw

4480
03:03:30,959 --> 03:03:35,919
before when i needed to enable the api

4481
03:03:34,239 --> 03:03:38,879
for bigquery

4482
03:03:35,920 --> 03:03:41,840
i would simply type in bigquery

4483
03:03:38,879 --> 03:03:44,318
and i can go to the api and since the

4484
03:03:41,840 --> 03:03:47,200
api is enabled there's nothing for me to

4485
03:03:44,318 --> 03:03:49,359
do but if i needed to enable it i could

4486
03:03:47,200 --> 03:03:52,079
do that right there and just as a quick

4487
03:03:49,359 --> 03:03:54,720
note when going to a service that's

4488
03:03:52,079 --> 03:03:57,200
available in the console the api

4489
03:03:54,719 --> 03:03:59,438
automatically gets enabled when you go

4490
03:03:57,200 --> 03:04:02,079
and use it for the first time and so

4491
03:03:59,439 --> 03:04:06,159
again this is just a quick overview of

4492
03:04:02,079 --> 03:04:09,520
apis and the api library with regards to

4493
03:04:06,159 --> 03:04:12,318
google cloud a short yet important demo

4494
03:04:09,520 --> 03:04:15,120
to understand the under workings of the

4495
03:04:12,318 --> 03:04:17,680
cloud sdk and the console so just

4496
03:04:15,120 --> 03:04:18,960
remember that when using any service in

4497
03:04:17,680 --> 03:04:22,079
google cloud

4498
03:04:18,959 --> 03:04:24,079
again you must enable the api in order

4499
03:04:22,079 --> 03:04:27,359
to start using it and so that about

4500
03:04:24,079 --> 03:04:29,600
wraps up this demo for cloud apis so you

4501
03:04:27,359 --> 03:04:31,460
can now mark this lesson as complete and

4502
03:04:29,600 --> 03:04:35,359
let's move on to the next one

4503
03:04:31,459 --> 03:04:36,799
[Music]

4504
03:04:35,359 --> 03:04:39,120
welcome back

4505
03:04:36,799 --> 03:04:42,398
in this demo i'll be creating and

4506
03:04:39,120 --> 03:04:46,160
setting up a new gmail user as an admin

4507
03:04:42,398 --> 03:04:48,079
user for use moving ahead in this course

4508
03:04:46,159 --> 03:04:51,039
as well as following google's best

4509
03:04:48,079 --> 03:04:53,680
practices we need a user that has lesser

4510
03:04:51,040 --> 03:04:55,920
privileges than the user account that we

4511
03:04:53,680 --> 03:04:58,318
set up previously and i'll be going

4512
03:04:55,920 --> 03:05:00,398
through a full demo to show you how to

4513
03:04:58,318 --> 03:05:03,359
configure it

4514
03:05:00,398 --> 03:05:06,719
now in a google cloud setup that uses a

4515
03:05:03,359 --> 03:05:09,279
g suite or cloud identity account a

4516
03:05:06,719 --> 03:05:11,840
super administrator account is created

4517
03:05:09,279 --> 03:05:14,319
to administer the domain this super

4518
03:05:11,840 --> 03:05:16,478
admin account has irrevocable

4519
03:05:14,318 --> 03:05:18,799
administrative permissions

4520
03:05:16,478 --> 03:05:21,438
that should not be used for day-to-day

4521
03:05:18,799 --> 03:05:24,000
administration this means that no

4522
03:05:21,439 --> 03:05:27,120
permissions can be taken away from this

4523
03:05:24,000 --> 03:05:29,200
account and has the power to grant

4524
03:05:27,120 --> 03:05:31,279
organization admin role

4525
03:05:29,200 --> 03:05:33,760
or any other role for that matter and

4526
03:05:31,279 --> 03:05:36,159
recover accounts at the domain level

4527
03:05:33,760 --> 03:05:38,960
which makes this account extremely

4528
03:05:36,159 --> 03:05:42,639
powerful now since i do not have a

4529
03:05:38,959 --> 03:05:44,959
domain setup or using a g suite or cloud

4530
03:05:42,639 --> 03:05:47,039
identity account i don't need to worry

4531
03:05:44,959 --> 03:05:50,159
about a super admin account in this

4532
03:05:47,040 --> 03:05:52,240
specific environment as gmail accounts

4533
03:05:50,159 --> 03:05:55,840
are standalone accounts that are meant

4534
03:05:52,239 --> 03:05:58,639
to be personal and hold no organization

4535
03:05:55,840 --> 03:06:00,639
and usually start at the project level

4536
03:05:58,639 --> 03:06:01,680
and so to explain it in a bit more

4537
03:06:00,639 --> 03:06:04,318
detail

4538
03:06:01,680 --> 03:06:06,639
i have a diagram here showing the two

4539
03:06:04,318 --> 03:06:09,119
different accounts i will be using

4540
03:06:06,639 --> 03:06:11,439
and the structure behind it

4541
03:06:09,120 --> 03:06:14,000
now as we discussed before billing

4542
03:06:11,439 --> 03:06:16,880
accounts have the option of paying for

4543
03:06:14,000 --> 03:06:19,760
projects in a different organization so

4544
03:06:16,879 --> 03:06:21,920
when creating new projects using the two

4545
03:06:19,760 --> 03:06:25,040
different gmail accounts they were

4546
03:06:21,920 --> 03:06:27,359
created without any organization and so

4547
03:06:25,040 --> 03:06:29,920
each account is standalone and can

4548
03:06:27,359 --> 03:06:33,279
create their own projects now what makes

4549
03:06:29,920 --> 03:06:36,478
them different is that the antony gcloud

4550
03:06:33,279 --> 03:06:38,239
ace account owns the billing account and

4551
03:06:36,478 --> 03:06:41,199
is set as a billing account

4552
03:06:38,239 --> 03:06:44,159
administrator and the tony bowtie ace

4553
03:06:41,200 --> 03:06:46,720
account is a billing account user that

4554
03:06:44,159 --> 03:06:49,840
is able to link projects to that billing

4555
03:06:46,719 --> 03:06:51,278
account but does not hold full access to

4556
03:06:49,840 --> 03:06:53,040
billing

4557
03:06:51,279 --> 03:06:55,279
so in the spirit of sticking to the

4558
03:06:53,040 --> 03:06:58,080
principle of lease privilege

4559
03:06:55,279 --> 03:07:00,720
i will be using the tony bowtie ace

4560
03:06:58,079 --> 03:07:03,359
account that i had created earlier with

4561
03:07:00,719 --> 03:07:05,599
lesser privileges on billing it will

4562
03:07:03,359 --> 03:07:09,200
still give me all the permissions i need

4563
03:07:05,600 --> 03:07:11,760
to create edit and delete resources

4564
03:07:09,200 --> 03:07:14,079
without all the powerful permissions

4565
03:07:11,760 --> 03:07:17,279
needed for billing i will be assigning

4566
03:07:14,079 --> 03:07:19,840
this new gmail user the billing account

4567
03:07:17,279 --> 03:07:22,640
user role and it will allow you to

4568
03:07:19,840 --> 03:07:25,200
achieve everything you need to build for

4569
03:07:22,639 --> 03:07:28,079
the remainder of the course

4570
03:07:25,200 --> 03:07:30,720
so just as a review i will be using a

4571
03:07:28,079 --> 03:07:32,879
new google account that i have created

4572
03:07:30,719 --> 03:07:35,199
or if you'd like you can use a

4573
03:07:32,879 --> 03:07:38,239
pre-existing google account and as

4574
03:07:35,200 --> 03:07:40,640
always i recommend enabling two-step

4575
03:07:38,239 --> 03:07:43,359
verification on your account

4576
03:07:40,639 --> 03:07:46,239
as this user will hold some powerful

4577
03:07:43,359 --> 03:07:49,439
permissions to access a ton of different

4578
03:07:46,239 --> 03:07:52,000
resources in google cloud

4579
03:07:49,439 --> 03:07:54,880
so now that we've gone over the details

4580
03:07:52,000 --> 03:07:57,840
of the what and why for setting up this

4581
03:07:54,879 --> 03:07:59,759
second account let's head into the demo

4582
03:07:57,840 --> 03:08:02,719
and get things started so whenever

4583
03:07:59,760 --> 03:08:05,200
you're ready join me over in the console

4584
03:08:02,719 --> 03:08:08,239
and so here i am back in the console and

4585
03:08:05,200 --> 03:08:10,560
so before switching over to my new user

4586
03:08:08,239 --> 03:08:13,279
i need to assign the specific roles that

4587
03:08:10,559 --> 03:08:16,000
i will need for that user which is the

4588
03:08:13,279 --> 03:08:18,640
billing account user role so to assign

4589
03:08:16,000 --> 03:08:20,799
this role to my new user i need to head

4590
03:08:18,639 --> 03:08:22,959
over to billing so i'm going to go back

4591
03:08:20,799 --> 03:08:25,358
up here to the left-hand corner

4592
03:08:22,959 --> 03:08:27,759
and click on the navigation menu

4593
03:08:25,359 --> 03:08:29,840
and go to billing

4594
03:08:27,760 --> 03:08:31,760
again in the left-hand menu i'm going to

4595
03:08:29,840 --> 03:08:34,239
move down to account management and

4596
03:08:31,760 --> 03:08:36,719
click on there and over here under my

4597
03:08:34,239 --> 03:08:39,359
billing account you will see that i have

4598
03:08:36,719 --> 03:08:42,079
permissions assigned to one member of

4599
03:08:39,359 --> 03:08:45,279
the billing account administrator

4600
03:08:42,079 --> 03:08:46,840
and as expected i am seeing anthony g

4601
03:08:45,279 --> 03:08:49,439
cloud ace

4602
03:08:46,840 --> 03:08:52,159
gmail.com and so i want to add another

4603
03:08:49,439 --> 03:08:54,800
member to my billing account so i'm

4604
03:08:52,159 --> 03:08:57,920
going to simply click on add members and

4605
03:08:54,799 --> 03:09:01,759
here i will enter in my new second user

4606
03:08:57,920 --> 03:09:04,719
which is tony bowtie ace

4607
03:09:01,760 --> 03:09:04,719
gmail.com

4608
03:09:07,120 --> 03:09:11,920
and under select a role i'm going to

4609
03:09:09,439 --> 03:09:14,559
move down to billing and over to billing

4610
03:09:11,920 --> 03:09:17,120
account user and as you can see here

4611
03:09:14,559 --> 03:09:19,600
this role billing account user will

4612
03:09:17,120 --> 03:09:22,079
allow permissions to associate projects

4613
03:09:19,600 --> 03:09:23,680
with billing accounts which is exactly

4614
03:09:22,079 --> 03:09:25,920
what i want to do

4615
03:09:23,680 --> 03:09:29,120
and so i'm going to simply click on that

4616
03:09:25,920 --> 03:09:30,960
and simply click on save

4617
03:09:29,120 --> 03:09:32,800
and so now that i've assigned my second

4618
03:09:30,959 --> 03:09:35,438
user the proper permissions that i

4619
03:09:32,799 --> 03:09:38,079
needed i am now going to log out

4620
03:09:35,439 --> 03:09:40,079
and log in as my new user by simply

4621
03:09:38,079 --> 03:09:43,120
going up to the right hand corner in the

4622
03:09:40,079 --> 03:09:45,920
icon clicking on the icon and going to

4623
03:09:43,120 --> 03:09:48,399
add account by adding the account i'll

4624
03:09:45,920 --> 03:09:50,318
be able to switch back and forth between

4625
03:09:48,398 --> 03:09:52,639
the different users and i would only

4626
03:09:50,318 --> 03:09:54,478
recommend this if you are the sole user

4627
03:09:52,639 --> 03:09:57,278
of your computer if you are on a

4628
03:09:54,478 --> 03:09:59,840
computer that has multiple users simply

4629
03:09:57,279 --> 03:10:01,680
sign out and sign back in again with

4630
03:09:59,840 --> 03:10:03,680
your different user

4631
03:10:01,680 --> 03:10:06,439
and here i'm asked for the email which

4632
03:10:03,680 --> 03:10:08,000
would be tony bowtie ace

4633
03:10:06,439 --> 03:10:11,960
gmail.com

4634
03:10:08,000 --> 03:10:11,959
i'm gonna plug in my password

4635
03:10:12,478 --> 03:10:17,039
and it's going to ask me for my two-step

4636
03:10:14,238 --> 03:10:17,039
verification

4637
03:10:21,359 --> 03:10:27,840
i'm going to click on yes

4638
03:10:24,238 --> 03:10:27,840
and i should be in

4639
03:10:28,478 --> 03:10:32,959
and because it's my first time logging

4640
03:10:30,478 --> 03:10:35,199
into google cloud with this user i get a

4641
03:10:32,959 --> 03:10:37,679
prompt asking me to agree to the terms

4642
03:10:35,200 --> 03:10:40,479
of service i'm going to agree to them

4643
03:10:37,680 --> 03:10:42,159
and simply click on agree and continue

4644
03:10:40,478 --> 03:10:44,799
and so now i'm going to move back up to

4645
03:10:42,159 --> 03:10:47,520
overview and as you can see here i don't

4646
03:10:44,799 --> 03:10:49,278
have the permissions to view costs for

4647
03:10:47,520 --> 03:10:51,680
this billing account and so all the

4648
03:10:49,279 --> 03:10:54,479
permissions assigned for the billing

4649
03:10:51,680 --> 03:10:57,760
account administrator which is antony g

4650
03:10:54,478 --> 03:11:00,559
cloud ace is not applied to tony bowtie

4651
03:10:57,760 --> 03:11:03,760
ace and therefore things like budgets

4652
03:11:00,559 --> 03:11:05,359
and alerts even billing exports i do not

4653
03:11:03,760 --> 03:11:07,920
have access to

4654
03:11:05,359 --> 03:11:10,399
so moving forward in the course if you

4655
03:11:07,920 --> 03:11:13,120
need to access anything in billing that

4656
03:11:10,398 --> 03:11:15,519
you currently don't have access to like

4657
03:11:13,120 --> 03:11:17,920
budgets and alerts you can simply switch

4658
03:11:15,520 --> 03:11:20,640
over to your other account and take care

4659
03:11:17,920 --> 03:11:23,520
of any necessary changes but what i do

4660
03:11:20,639 --> 03:11:25,840
have access to is if i go up here to my

4661
03:11:23,520 --> 03:11:28,000
billing account click on the drop down

4662
03:11:25,840 --> 03:11:30,478
menu and click on manage billing

4663
03:11:28,000 --> 03:11:32,719
accounts but as you can see here i do

4664
03:11:30,478 --> 03:11:35,119
have access to view all the billing

4665
03:11:32,719 --> 03:11:37,119
accounts along with the projects that

4666
03:11:35,120 --> 03:11:39,840
are linked to them now because these

4667
03:11:37,120 --> 03:11:42,160
gmail accounts are standalone accounts

4668
03:11:39,840 --> 03:11:45,680
this project here that is owned by

4669
03:11:42,159 --> 03:11:48,478
antony gcloud ace i do not have access

4670
03:11:45,680 --> 03:11:51,040
to in order to access the project i

4671
03:11:48,478 --> 03:11:53,438
would have to have permissions assigned

4672
03:11:51,040 --> 03:11:56,239
to me directly in order for me to

4673
03:11:53,439 --> 03:11:58,559
actually view the project or possibly

4674
03:11:56,238 --> 03:12:01,760
creating any resources within that

4675
03:11:58,559 --> 03:12:04,719
project now if i go back to my home page

4676
03:12:01,760 --> 03:12:07,680
i can see here that i have no projects

4677
03:12:04,719 --> 03:12:10,159
available and therefore no resources

4678
03:12:07,680 --> 03:12:13,200
within my environment and so to kick it

4679
03:12:10,159 --> 03:12:15,439
off i'm going to create a new project

4680
03:12:13,200 --> 03:12:16,560
and so under project name i am going to

4681
03:12:15,439 --> 03:12:18,720
call this

4682
03:12:16,559 --> 03:12:20,639
project tony

4683
03:12:18,719 --> 03:12:21,679
and you can name your project whatever

4684
03:12:20,639 --> 03:12:23,840
you'd like

4685
03:12:21,680 --> 03:12:25,200
under location i don't have any

4686
03:12:23,840 --> 03:12:27,040
organization

4687
03:12:25,200 --> 03:12:28,319
and so therefore i'm just going to click

4688
03:12:27,040 --> 03:12:30,840
on create

4689
03:12:28,318 --> 03:12:34,000
and this may take a minute to

4690
03:12:30,840 --> 03:12:35,040
create and here we are with my first

4691
03:12:34,000 --> 03:12:37,439
project

4692
03:12:35,040 --> 03:12:39,760
named project tony as well as my

4693
03:12:37,439 --> 03:12:42,318
notification came up saying that my

4694
03:12:39,760 --> 03:12:44,559
project has been created and so now that

4695
03:12:42,318 --> 03:12:46,959
this project has been created it should

4696
03:12:44,559 --> 03:12:49,119
be linked to my billing account so in

4697
03:12:46,959 --> 03:12:52,079
order to verify this i'm going to go

4698
03:12:49,120 --> 03:12:52,079
over into billing

4699
03:12:53,439 --> 03:12:56,960
and under the drop down

4700
03:12:55,200 --> 03:12:58,640
i'm going to click on manage billing

4701
03:12:56,959 --> 03:13:00,719
accounts

4702
03:12:58,639 --> 03:13:03,439
and as you can see here the number of

4703
03:13:00,719 --> 03:13:05,599
projects has gone from one to two and if

4704
03:13:03,439 --> 03:13:08,880
i click on the menu up here under my

4705
03:13:05,600 --> 03:13:11,120
projects you can see that project tony

4706
03:13:08,879 --> 03:13:12,959
is a project that is linked to my

4707
03:13:11,120 --> 03:13:15,920
billing account i also have the

4708
03:13:12,959 --> 03:13:18,799
permissions to either disable billing or

4709
03:13:15,920 --> 03:13:21,359
change billing for this specific project

4710
03:13:18,799 --> 03:13:23,920
yet in order to change billing i will

4711
03:13:21,359 --> 03:13:25,600
have to have another billing account but

4712
03:13:23,920 --> 03:13:26,719
there are no other billing accounts

4713
03:13:25,600 --> 03:13:29,359
available

4714
03:13:26,719 --> 03:13:31,760
and so moving forward i will only have

4715
03:13:29,359 --> 03:13:34,318
this one billing account and so any

4716
03:13:31,760 --> 03:13:36,719
projects i decide to create will be

4717
03:13:34,318 --> 03:13:39,359
linked to this billing account and so

4718
03:13:36,719 --> 03:13:41,760
this is a great example of trimming down

4719
03:13:39,359 --> 03:13:44,238
the permissions needed for different

4720
03:13:41,760 --> 03:13:46,559
users and even though this is not a

4721
03:13:44,238 --> 03:13:49,279
domain owned account but a personal

4722
03:13:46,559 --> 03:13:51,199
account it's always recommended to

4723
03:13:49,279 --> 03:13:53,520
practice the principle of lease

4724
03:13:51,200 --> 03:13:56,560
privilege whenever you come across

4725
03:13:53,520 --> 03:13:59,600
assigning permissions to any user now as

4726
03:13:56,559 --> 03:14:02,478
i said before any billing related tasks

4727
03:13:59,600 --> 03:14:04,720
that you decide to do moving forward

4728
03:14:02,478 --> 03:14:08,000
you can simply switch over to your other

4729
03:14:04,719 --> 03:14:10,719
user and do the necessary changes and so

4730
03:14:08,000 --> 03:14:12,639
that's all i have for this lesson

4731
03:14:10,719 --> 03:14:13,599
so you can now mark this lesson as

4732
03:14:12,639 --> 03:14:15,760
complete

4733
03:14:13,600 --> 03:14:19,840
and let's move on to the next one

4734
03:14:15,760 --> 03:14:21,120
[Music]

4735
03:14:19,840 --> 03:14:23,359
welcome back

4736
03:14:21,120 --> 03:14:27,120
in this short lesson i'm going to be

4737
03:14:23,359 --> 03:14:29,840
covering an overview of the cloud sdk

4738
03:14:27,120 --> 03:14:32,800
and the command line interface as it is

4739
03:14:29,840 --> 03:14:35,600
an essential component of interacting

4740
03:14:32,799 --> 03:14:37,438
with google cloud for the exam you will

4741
03:14:35,600 --> 03:14:40,159
need to get familiar with the command

4742
03:14:37,439 --> 03:14:41,200
line and the commands needed in order to

4743
03:14:40,159 --> 03:14:44,879
create

4744
03:14:41,200 --> 03:14:48,079
modify and delete resources this is also

4745
03:14:44,879 --> 03:14:50,559
an extremely valuable tool for your tool

4746
03:14:48,079 --> 03:14:53,600
belt in the world of being a cloud

4747
03:14:50,559 --> 03:14:56,959
engineer as i have found that is a very

4748
03:14:53,600 --> 03:14:59,920
common and easy way to implement small

4749
03:14:56,959 --> 03:15:02,959
operations within google cloud as well

4750
03:14:59,920 --> 03:15:05,680
as automating the complex ones so what

4751
03:15:02,959 --> 03:15:08,639
exactly is the cloud sdk

4752
03:15:05,680 --> 03:15:10,079
well the cloud sdk is a set of command

4753
03:15:08,639 --> 03:15:12,799
line tools

4754
03:15:10,079 --> 03:15:15,760
that allows you to manage resources

4755
03:15:12,799 --> 03:15:18,840
through the terminal in google cloud and

4756
03:15:15,760 --> 03:15:23,040
includes commands such as gcloud

4757
03:15:18,840 --> 03:15:24,079
gsutil bq and cubectl using these

4758
03:15:23,040 --> 03:15:26,479
commands

4759
03:15:24,079 --> 03:15:27,920
allow you to manage resources such as

4760
03:15:26,478 --> 03:15:31,920
compute engine

4761
03:15:27,920 --> 03:15:35,359
cloud storage bigquery kubernetes and so

4762
03:15:31,920 --> 03:15:38,159
many other resources these tools can be

4763
03:15:35,359 --> 03:15:40,399
run interactively or through automated

4764
03:15:38,159 --> 03:15:43,840
scripts giving you the power and

4765
03:15:40,398 --> 03:15:47,599
flexibility that you need to get the job

4766
03:15:43,840 --> 03:15:49,680
done the cloud sdk is so powerful that

4767
03:15:47,600 --> 03:15:52,000
you can do everything that the console

4768
03:15:49,680 --> 03:15:53,760
can do yet has more options than the

4769
03:15:52,000 --> 03:15:56,398
console you can use it for

4770
03:15:53,760 --> 03:15:58,639
infrastructure as code autocompletion

4771
03:15:56,398 --> 03:16:00,879
helps you finish all of your command

4772
03:15:58,639 --> 03:16:04,159
line statements and for those of you who

4773
03:16:00,879 --> 03:16:08,159
run windows the cloud sdk has got you

4774
03:16:04,159 --> 03:16:10,639
covered with availability for powershell

4775
03:16:08,159 --> 03:16:13,119
now in order to access google cloud

4776
03:16:10,639 --> 03:16:17,199
platform you will usually have to

4777
03:16:13,120 --> 03:16:20,960
authorize google cloud sdk tools so to

4778
03:16:17,200 --> 03:16:24,000
grant authorization to cloud sdk tools

4779
03:16:20,959 --> 03:16:26,959
you can either use a user account or a

4780
03:16:24,000 --> 03:16:30,079
service account now a user account is a

4781
03:16:26,959 --> 03:16:32,318
google account that allows end users to

4782
03:16:30,079 --> 03:16:35,200
authenticate directly to your

4783
03:16:32,318 --> 03:16:38,318
application for most common use cases on

4784
03:16:35,200 --> 03:16:40,720
a single machine using a user account is

4785
03:16:38,318 --> 03:16:43,439
best practice now going the route of a

4786
03:16:40,719 --> 03:16:47,039
service account this is a google account

4787
03:16:43,439 --> 03:16:49,760
that is associated with your gcp project

4788
03:16:47,040 --> 03:16:52,319
and not a specific user a service

4789
03:16:49,760 --> 03:16:54,960
account can be used by providing a

4790
03:16:52,318 --> 03:16:58,318
service account key to your application

4791
03:16:54,959 --> 03:17:01,839
and is recommended to script cloud sdk

4792
03:16:58,318 --> 03:17:04,799
tools for use on multiple machines now

4793
03:17:01,840 --> 03:17:07,359
having installed the cloud sdk it comes

4794
03:17:04,799 --> 03:17:09,920
with some built-in commands that allow

4795
03:17:07,359 --> 03:17:12,800
you to configure different options using

4796
03:17:09,920 --> 03:17:16,000
gcloud init this initializes and

4797
03:17:12,799 --> 03:17:19,920
authorizes access and performs other

4798
03:17:16,000 --> 03:17:21,520
common cloud sdk setup steps using some

4799
03:17:19,920 --> 03:17:25,279
optional commands

4800
03:17:21,520 --> 03:17:28,640
gcloud auth login authorizes your access

4801
03:17:25,279 --> 03:17:31,520
for gcloud with google user credentials

4802
03:17:28,639 --> 03:17:33,199
and sets the current account as active

4803
03:17:31,520 --> 03:17:35,760
gcloud config

4804
03:17:33,200 --> 03:17:38,079
is another optional configuration that

4805
03:17:35,760 --> 03:17:41,760
allows you to configure accounts and

4806
03:17:38,079 --> 03:17:43,680
projects as well gcloud components

4807
03:17:41,760 --> 03:17:45,840
allow you to install

4808
03:17:43,680 --> 03:17:48,960
update and delete

4809
03:17:45,840 --> 03:17:51,520
optional components of the sdk that give

4810
03:17:48,959 --> 03:17:54,478
you more flexibility with different

4811
03:17:51,520 --> 03:17:57,920
resources now after having installed the

4812
03:17:54,478 --> 03:18:01,119
cloud sdk almost all gcloud commands

4813
03:17:57,920 --> 03:18:03,439
will follow a specific format shown here

4814
03:18:01,120 --> 03:18:05,760
is an example of this format and is

4815
03:18:03,439 --> 03:18:06,800
broken down through component

4816
03:18:05,760 --> 03:18:10,719
entity

4817
03:18:06,799 --> 03:18:12,639
operation positional arguments and flags

4818
03:18:10,719 --> 03:18:15,278
and i'll be going through some specific

4819
03:18:12,639 --> 03:18:17,599
examples in the demonstration a little

4820
03:18:15,279 --> 03:18:20,479
bit later on and so that's all i wanted

4821
03:18:17,600 --> 03:18:24,159
to cover in this overview of the cloud

4822
03:18:20,478 --> 03:18:26,478
sdk and the cli so you can now mark this

4823
03:18:24,159 --> 03:18:28,559
lesson as complete and you can join me

4824
03:18:26,478 --> 03:18:31,909
in the next one where i go ahead and

4825
03:18:28,559 --> 03:18:36,238
demonstrate installing the cloud sdk

4826
03:18:31,909 --> 03:18:39,039
[Music]

4827
03:18:36,238 --> 03:18:41,840
back in this demonstration i will show

4828
03:18:39,040 --> 03:18:44,640
you how to download install and

4829
03:18:41,840 --> 03:18:47,359
configure the cloud sdk and i will be

4830
03:18:44,639 --> 03:18:51,119
using the quick start guide that lies in

4831
03:18:47,359 --> 03:18:53,680
the cloud sdk documentation which holds

4832
03:18:51,120 --> 03:18:57,040
all the steps for installing the cloud

4833
03:18:53,680 --> 03:18:58,960
sdk on different operating systems and i

4834
03:18:57,040 --> 03:19:01,840
will make sure to include it in the

4835
03:18:58,959 --> 03:19:04,639
lesson text below this demo will show

4836
03:19:01,840 --> 03:19:06,960
you how to install the cloud sdk

4837
03:19:04,639 --> 03:19:08,079
on each of the most common operating

4838
03:19:06,959 --> 03:19:09,199
systems

4839
03:19:08,079 --> 03:19:12,639
windows

4840
03:19:09,200 --> 03:19:15,680
mac os and ubuntu linux all you need to

4841
03:19:12,639 --> 03:19:18,478
do is follow the process on each of the

4842
03:19:15,680 --> 03:19:20,720
pages and you should be well on your way

4843
03:19:18,478 --> 03:19:23,760
so with that being said let's get this

4844
03:19:20,719 --> 03:19:26,318
demo started and bring the cloud sdk to

4845
03:19:23,760 --> 03:19:28,880
life by getting it all installed and

4846
03:19:26,318 --> 03:19:30,238
configured for your specific operating

4847
03:19:28,879 --> 03:19:32,959
system

4848
03:19:30,238 --> 03:19:36,238
so as i explained before i'm gonna go

4849
03:19:32,959 --> 03:19:38,318
ahead and install the cloud sdk

4850
03:19:36,238 --> 03:19:39,520
on each of the three different operating

4851
03:19:38,318 --> 03:19:43,600
systems

4852
03:19:39,520 --> 03:19:45,600
windows mac os and ubuntu linux and i

4853
03:19:43,600 --> 03:19:47,920
will be installing it with the help of

4854
03:19:45,600 --> 03:19:50,000
the quick start guide that you see here

4855
03:19:47,920 --> 03:19:52,639
and as i said before i'll be including

4856
03:19:50,000 --> 03:19:55,600
this link in the lesson text and so to

4857
03:19:52,639 --> 03:19:58,879
kick off this demo i wanted to start by

4858
03:19:55,600 --> 03:20:00,559
installing the cloud sdk on windows so

4859
03:19:58,879 --> 03:20:02,799
i'm going to move over to my windows

4860
03:20:00,559 --> 03:20:05,039
virtual machine and i'm going to open up

4861
03:20:02,799 --> 03:20:07,840
a browser and i'm going to paste in the

4862
03:20:05,040 --> 03:20:10,080
link for the quick start guide

4863
03:20:07,840 --> 03:20:12,398
and you can click on either link for the

4864
03:20:10,079 --> 03:20:15,600
quick start for windows and each quick

4865
03:20:12,398 --> 03:20:18,000
start page will give me the instructions

4866
03:20:15,600 --> 03:20:20,640
of exactly what i need to do for each

4867
03:20:18,000 --> 03:20:23,359
operating system so now it says that we

4868
03:20:20,639 --> 03:20:25,680
need to have a project created which i

4869
03:20:23,359 --> 03:20:28,318
did in the last lesson which is project

4870
03:20:25,680 --> 03:20:30,880
tony so next i'm going to download the

4871
03:20:28,318 --> 03:20:33,278
cloud sdk installer

4872
03:20:30,879 --> 03:20:35,278
so i'm going to click on there

4873
03:20:33,279 --> 03:20:37,520
and i'll see a prompt in the bottom left

4874
03:20:35,279 --> 03:20:39,439
hand corner that the installer has been

4875
03:20:37,520 --> 03:20:41,439
downloaded i'm going to click on it to

4876
03:20:39,439 --> 03:20:43,600
open the file and i'm going to be

4877
03:20:41,439 --> 03:20:45,760
prompted to go through this wizard and

4878
03:20:43,600 --> 03:20:47,200
so i'm just going to click on next

4879
03:20:45,760 --> 03:20:49,680
i'm going to agree to the terms of the

4880
03:20:47,200 --> 03:20:52,319
agreement it's going to be for just me

4881
03:20:49,680 --> 03:20:54,398
anthony and my destination folder i'll

4882
03:20:52,318 --> 03:20:56,559
keep it as is and here's all the

4883
03:20:54,398 --> 03:20:58,000
components that it's going to install

4884
03:20:56,559 --> 03:21:00,318
i'm going to keep the beta commands

4885
03:20:58,000 --> 03:21:02,318
unchecked as i don't really need them

4886
03:21:00,318 --> 03:21:04,398
and if i need them later then i can

4887
03:21:02,318 --> 03:21:07,278
install that component for those who are

4888
03:21:04,398 --> 03:21:09,599
more experienced or even a bit curious

4889
03:21:07,279 --> 03:21:11,520
you could click on the beta commands and

4890
03:21:09,600 --> 03:21:13,120
take it for a test drive but i'm going

4891
03:21:11,520 --> 03:21:15,200
to keep it off and i'm going to click

4892
03:21:13,120 --> 03:21:16,399
install and depending on the power of

4893
03:21:15,200 --> 03:21:18,560
your machine

4894
03:21:16,398 --> 03:21:21,358
it should take anywhere from two to five

4895
03:21:18,559 --> 03:21:24,079
minutes to install and the google cloud

4896
03:21:21,359 --> 03:21:26,318
sdk has been installed and so i'm just

4897
03:21:24,079 --> 03:21:28,318
going to click on next and as shown here

4898
03:21:26,318 --> 03:21:30,318
in the documentation you want to make

4899
03:21:28,318 --> 03:21:32,719
sure that you have all your options

4900
03:21:30,318 --> 03:21:35,439
checked off is to create a start menu

4901
03:21:32,719 --> 03:21:38,238
shortcut a desktop shortcut you want to

4902
03:21:35,439 --> 03:21:41,200
start the google cloud sdk shell and

4903
03:21:38,238 --> 03:21:43,920
lastly you want to run gcloud init in

4904
03:21:41,200 --> 03:21:46,159
order to initialize and configure the

4905
03:21:43,920 --> 03:21:48,318
cloud sdk now i'm going to click on

4906
03:21:46,159 --> 03:21:50,639
finish to exit the setup and i'm going

4907
03:21:48,318 --> 03:21:52,318
to get a command shell that pops up and

4908
03:21:50,639 --> 03:21:53,199
i'm just going to zoom in for better

4909
03:21:52,318 --> 03:21:54,799
viewing

4910
03:21:53,200 --> 03:21:57,680
and so it says here my current

4911
03:21:54,799 --> 03:22:00,159
configuration has been set to default so

4912
03:21:57,680 --> 03:22:03,200
when it comes to configuration this is

4913
03:22:00,159 --> 03:22:05,200
all about selecting the active account

4914
03:22:03,200 --> 03:22:07,600
and so my current active account is

4915
03:22:05,200 --> 03:22:09,920
going to be set as the default account

4916
03:22:07,600 --> 03:22:12,079
it also needed to do a diagnostic check

4917
03:22:09,920 --> 03:22:14,478
just to make sure that it can connect to

4918
03:22:12,079 --> 03:22:16,398
the internet so that it's able to verify

4919
03:22:14,478 --> 03:22:18,719
the account and so now the prompt is

4920
03:22:16,398 --> 03:22:21,199
saying you must log in to continue would

4921
03:22:18,719 --> 03:22:24,959
you like to log in yes

4922
03:22:21,200 --> 03:22:26,560
you can just click on y and then enter

4923
03:22:24,959 --> 03:22:29,599
and it's going to prompt me with a new

4924
03:22:26,559 --> 03:22:32,079
browser window where i need to log in

4925
03:22:29,600 --> 03:22:34,399
using my current account so that i can

4926
03:22:32,079 --> 03:22:37,359
authorize the cloud sdk so i'm going to

4927
03:22:34,398 --> 03:22:38,799
log in with my tony bowtie ace account

4928
03:22:37,359 --> 03:22:41,840
click on next

4929
03:22:38,799 --> 03:22:43,519
type in my password

4930
03:22:41,840 --> 03:22:46,079
again it's going to ask me for my

4931
03:22:43,520 --> 03:22:48,079
two-step verification

4932
03:22:46,079 --> 03:22:50,478
and i'm going to get a prompt saying

4933
03:22:48,079 --> 03:22:51,760
that the google sdk wants to access my

4934
03:22:50,478 --> 03:22:54,159
google account

4935
03:22:51,760 --> 03:22:56,719
i'm going to click on allow

4936
03:22:54,159 --> 03:22:59,119
and success you are now authenticated

4937
03:22:56,719 --> 03:23:01,599
with the google cloud sdk

4938
03:22:59,120 --> 03:23:03,840
and if i go back to my terminal i am

4939
03:23:01,600 --> 03:23:06,159
prompted to enter some values

4940
03:23:03,840 --> 03:23:09,200
so that i can properly configure the

4941
03:23:06,159 --> 03:23:10,959
google cloud sdk so i'm going to pick a

4942
03:23:09,200 --> 03:23:13,040
cloud project to use

4943
03:23:10,959 --> 03:23:15,759
and i'm going to use project tony that i

4944
03:23:13,040 --> 03:23:18,319
created earlier so i'm going to enter 1

4945
03:23:15,760 --> 03:23:20,079
and hit enter

4946
03:23:18,318 --> 03:23:23,119
and again whatever project that you've

4947
03:23:20,079 --> 03:23:26,000
created use that one for your default

4948
03:23:23,120 --> 03:23:28,160
configuration and it states here that my

4949
03:23:26,000 --> 03:23:30,959
current project has been set to project

4950
03:23:28,159 --> 03:23:32,398
tony and again this configuration is

4951
03:23:30,959 --> 03:23:34,559
called default

4952
03:23:32,398 --> 03:23:36,639
so if i have a second configuration that

4953
03:23:34,559 --> 03:23:38,719
i wanted to use i can call it a

4954
03:23:36,639 --> 03:23:42,159
different configuration but other than

4955
03:23:38,719 --> 03:23:44,559
that my google cloud sdk is configured

4956
03:23:42,159 --> 03:23:46,079
and ready to use so just to make sure

4957
03:23:44,559 --> 03:23:48,159
that it's working i'm going to run a

4958
03:23:46,079 --> 03:23:50,639
couple commands i'm going to run the

4959
03:23:48,159 --> 03:23:52,238
gcloud

4960
03:23:50,639 --> 03:23:53,760
help

4961
03:23:52,238 --> 03:23:56,719
command

4962
03:23:53,760 --> 03:23:58,478
and as you can see it's given me a list

4963
03:23:56,719 --> 03:24:00,719
of a bunch of different commands that i

4964
03:23:58,478 --> 03:24:04,000
can run and to exit you can just hit

4965
03:24:00,719 --> 03:24:06,959
ctrl c i'm going to run gcloud

4966
03:24:04,000 --> 03:24:06,959
config list

4967
03:24:07,200 --> 03:24:11,760
and this will give me

4968
03:24:08,799 --> 03:24:14,238
my properties in my active configuration

4969
03:24:11,760 --> 03:24:17,680
so my account is tony bowtie ace

4970
03:24:14,238 --> 03:24:20,639
gmail.com i've disabled usage reporting

4971
03:24:17,680 --> 03:24:23,840
and my project is project tony and my

4972
03:24:20,639 --> 03:24:26,079
active configuration is set as default

4973
03:24:23,840 --> 03:24:28,799
now don't worry i'm going to be covering

4974
03:24:26,079 --> 03:24:31,439
all these commands in the next lesson

4975
03:24:28,799 --> 03:24:34,159
and i'm going to be going into detail on

4976
03:24:31,439 --> 03:24:35,200
how you can configure and add other

4977
03:24:34,159 --> 03:24:38,398
users

4978
03:24:35,200 --> 03:24:40,800
within your cloud sdk configuration so

4979
03:24:38,398 --> 03:24:42,879
as we go deeper into the course i'm

4980
03:24:40,799 --> 03:24:44,879
going to be using a lot more command

4981
03:24:42,879 --> 03:24:47,278
line just so you can get familiar with

4982
03:24:44,879 --> 03:24:49,358
the syntax and become a bit more

4983
03:24:47,279 --> 03:24:52,479
comfortable with it so now that i've

4984
03:24:49,359 --> 03:24:54,640
installed the cloud sdk on windows the

4985
03:24:52,478 --> 03:24:56,959
process will be a little bit different

4986
03:24:54,639 --> 03:24:59,599
when it comes to installation on the

4987
03:24:56,959 --> 03:25:01,358
other operating systems but will be very

4988
03:24:59,600 --> 03:25:04,399
similar when it comes to the

4989
03:25:01,359 --> 03:25:08,720
configuration so now let's head over to

4990
03:25:04,398 --> 03:25:11,519
mac os and install the cloud sdk there

4991
03:25:08,719 --> 03:25:13,358
and so here we are in mac os and so the

4992
03:25:11,520 --> 03:25:15,760
first thing i want to do is i want to

4993
03:25:13,359 --> 03:25:18,800
open up a web browser and i want to go

4994
03:25:15,760 --> 03:25:22,000
to the cloud sdk quick start page so i'm

4995
03:25:18,799 --> 03:25:23,519
just going to paste in the url here

4996
03:25:22,000 --> 03:25:26,000
and we're looking for the quick start

4997
03:25:23,520 --> 03:25:28,560
for mac os and so you can either click

4998
03:25:26,000 --> 03:25:31,120
on the menu from the left hand side or

4999
03:25:28,559 --> 03:25:32,959
the menu here on the main page

5000
03:25:31,120 --> 03:25:34,960
and so like i said before

5001
03:25:32,959 --> 03:25:37,039
this installation is going to be a

5002
03:25:34,959 --> 03:25:39,358
little bit different than what it was in

5003
03:25:37,040 --> 03:25:41,920
windows and so there's a few steps here

5004
03:25:39,359 --> 03:25:44,559
to follow and so the first step asks us

5005
03:25:41,920 --> 03:25:46,879
if we have a project already created

5006
03:25:44,559 --> 03:25:49,278
which we've already done and is project

5007
03:25:46,879 --> 03:25:50,879
tony and so the next step tells us that

5008
03:25:49,279 --> 03:25:53,600
the cloud sdk

5009
03:25:50,879 --> 03:25:56,398
requires python and so we want to check

5010
03:25:53,600 --> 03:25:59,200
our system to see if we have a supported

5011
03:25:56,398 --> 03:26:00,799
version so in order to check our version

5012
03:25:59,200 --> 03:26:02,479
we're going to use this command here

5013
03:26:00,799 --> 03:26:03,840
python minus v

5014
03:26:02,478 --> 03:26:05,039
and i'm going to copy that to my

5015
03:26:03,840 --> 03:26:07,200
clipboard

5016
03:26:05,040 --> 03:26:09,359
and then open up a terminal and i'm

5017
03:26:07,200 --> 03:26:11,120
going to zoom in for better viewing and

5018
03:26:09,359 --> 03:26:12,079
so i'm going to paste the command in

5019
03:26:11,120 --> 03:26:14,479
here

5020
03:26:12,079 --> 03:26:19,359
and simply click on enter and as you can

5021
03:26:14,478 --> 03:26:21,760
see here i'm running python 2.7

5022
03:26:19,359 --> 03:26:25,520
but the starred note here says that the

5023
03:26:21,760 --> 03:26:28,000
cloud sdk will soon move to python 3 and

5024
03:26:25,520 --> 03:26:30,079
so in order to avoid having to upgrade

5025
03:26:28,000 --> 03:26:32,478
later you'd want to check your version

5026
03:26:30,079 --> 03:26:37,200
for python 3 and so you can use a

5027
03:26:32,478 --> 03:26:39,840
similar command by typing in python 3

5028
03:26:37,200 --> 03:26:42,000
space minus capital v

5029
03:26:39,840 --> 03:26:44,398
and as you can see i'm running version

5030
03:26:42,000 --> 03:26:46,719
3.7.3

5031
03:26:44,398 --> 03:26:49,680
and so moving back to the guide i can

5032
03:26:46,719 --> 03:26:52,000
see here that it is a supportive version

5033
03:26:49,680 --> 03:26:54,720
if you do not have a supportive version

5034
03:26:52,000 --> 03:26:55,840
i will include a link on how to upgrade

5035
03:26:54,719 --> 03:26:58,398
your version

5036
03:26:55,840 --> 03:27:00,719
in the lesson text below and so now that

5037
03:26:58,398 --> 03:27:02,238
i've finished off this step let's move

5038
03:27:00,719 --> 03:27:05,519
on to the next one

5039
03:27:02,238 --> 03:27:08,559
where i can download the archive file

5040
03:27:05,520 --> 03:27:12,159
for the google cloud sdk again most

5041
03:27:08,559 --> 03:27:14,238
machines will run the 64-bit package so

5042
03:27:12,159 --> 03:27:16,398
if you do have the latest operating

5043
03:27:14,238 --> 03:27:18,719
system for mac os

5044
03:27:16,398 --> 03:27:20,318
you should be good to go so i'm going to

5045
03:27:18,719 --> 03:27:22,799
click on this package

5046
03:27:20,318 --> 03:27:24,799
and it'll start downloading for me and

5047
03:27:22,799 --> 03:27:27,679
once it's finished you can click on

5048
03:27:24,799 --> 03:27:30,000
downloads and click on the file itself

5049
03:27:27,680 --> 03:27:32,318
and it should extract itself in the same

5050
03:27:30,000 --> 03:27:34,719
folder with all the files and folders

5051
03:27:32,318 --> 03:27:37,519
within it and so just as another quick

5052
03:27:34,719 --> 03:27:40,559
note google prefers that you keep the

5053
03:27:37,520 --> 03:27:42,399
google cloud sdk in your home directory

5054
03:27:40,559 --> 03:27:45,600
and so following the guide i'm going to

5055
03:27:42,398 --> 03:27:47,920
do exactly that and so the easiest way

5056
03:27:45,600 --> 03:27:51,359
to move the folder into your home

5057
03:27:47,920 --> 03:27:53,120
directory is to simply drag and drop it

5058
03:27:51,359 --> 03:27:55,200
into the home folder

5059
03:27:53,120 --> 03:27:58,160
on the left hand menu it should be

5060
03:27:55,200 --> 03:28:00,640
marked with a little house icon and

5061
03:27:58,159 --> 03:28:03,760
nested under favorites i can now move

5062
03:28:00,639 --> 03:28:06,398
into my home folder and confirm that it

5063
03:28:03,760 --> 03:28:09,520
is indeed in here and so now moving to

5064
03:28:06,398 --> 03:28:12,159
the last step which shows as optional

5065
03:28:09,520 --> 03:28:16,319
the guide asks us to install a script to

5066
03:28:12,159 --> 03:28:18,719
add cloud sdk tools to our path now i

5067
03:28:16,318 --> 03:28:22,079
highly recommend that you install this

5068
03:28:18,719 --> 03:28:24,639
script so that you can add the tools for

5069
03:28:22,079 --> 03:28:27,359
command completion and i will get into

5070
03:28:24,639 --> 03:28:29,920
command completion a little bit later on

5071
03:28:27,359 --> 03:28:32,000
in the next couple of lessons and so

5072
03:28:29,920 --> 03:28:33,359
here is the command that i need to run

5073
03:28:32,000 --> 03:28:35,600
so i'm going to copy that to my

5074
03:28:33,359 --> 03:28:37,840
clipboard again and i'm going to move

5075
03:28:35,600 --> 03:28:40,479
back over to my terminal i'm going to

5076
03:28:37,840 --> 03:28:43,359
clear my screen and so to make sure i'm

5077
03:28:40,478 --> 03:28:47,119
in my home directory where the cloud sdk

5078
03:28:43,359 --> 03:28:49,120
folder is i'm going to simply type ls

5079
03:28:47,120 --> 03:28:52,479
and so for those who don't know

5080
03:28:49,120 --> 03:28:54,880
ls is a linux command that will list all

5081
03:28:52,478 --> 03:28:57,519
your files and folders in your current

5082
03:28:54,879 --> 03:29:01,039
path and as you can see here the google

5083
03:28:57,520 --> 03:29:03,520
cloud sdk is in my path and therefore i

5084
03:29:01,040 --> 03:29:05,040
can run that script so i'm going to

5085
03:29:03,520 --> 03:29:07,040
paste it in here

5086
03:29:05,040 --> 03:29:09,520
and i'm going to hit enter

5087
03:29:07,040 --> 03:29:11,600
and so a prompt comes up asking me

5088
03:29:09,520 --> 03:29:13,920
whether or not i want to disable usage

5089
03:29:11,600 --> 03:29:16,640
reporting and because i want to help

5090
03:29:13,920 --> 03:29:19,920
improve the google cloud sdk i'm going

5091
03:29:16,639 --> 03:29:22,159
to type in y for yes and hit enter and

5092
03:29:19,920 --> 03:29:25,120
so as i was explaining before

5093
03:29:22,159 --> 03:29:27,600
the cloud sdk tools will be installed in

5094
03:29:25,120 --> 03:29:29,600
my path and so this is the step that

5095
03:29:27,600 --> 03:29:30,960
takes care of it and so i'm going to

5096
03:29:29,600 --> 03:29:32,479
type y

5097
03:29:30,959 --> 03:29:35,278
and enter

5098
03:29:32,478 --> 03:29:37,679
for yes to continue and usually the path

5099
03:29:35,279 --> 03:29:39,840
that comes up is the right one unless

5100
03:29:37,680 --> 03:29:42,159
you've changed it otherwise so i'm going

5101
03:29:39,840 --> 03:29:44,398
to leave this blank and just hit enter

5102
03:29:42,159 --> 03:29:46,478
and that's it i've installed the tools

5103
03:29:44,398 --> 03:29:49,358
so now in order for me to run gcloud

5104
03:29:46,478 --> 03:29:52,318
init i have to start a new shell as it

5105
03:29:49,359 --> 03:29:54,000
says here for the changes to take effect

5106
03:29:52,318 --> 03:29:56,799
so i'm going to go up here to the top

5107
03:29:54,000 --> 03:29:59,200
left hand menu click on terminal and

5108
03:29:56,799 --> 03:30:00,478
quit terminal and so now i can restart

5109
03:29:59,200 --> 03:30:02,159
the terminal

5110
03:30:00,478 --> 03:30:03,438
again i'm going to zoom in for better

5111
03:30:02,159 --> 03:30:06,478
viewing

5112
03:30:03,439 --> 03:30:10,720
and now i'm able to run gcloud init in

5113
03:30:06,478 --> 03:30:10,719
order to initialize the installation

5114
03:30:12,000 --> 03:30:16,879
again the prompt to do the diagnostic

5115
03:30:14,318 --> 03:30:18,879
tests and i can see i have no network

5116
03:30:16,879 --> 03:30:21,759
issues but it shows me that i have to

5117
03:30:18,879 --> 03:30:24,398
login to continue i would like to log in

5118
03:30:21,760 --> 03:30:26,719
so i'm going to type y for yes and hit

5119
03:30:24,398 --> 03:30:26,719
enter

5120
03:30:27,680 --> 03:30:33,120
and so a new browser has popped open

5121
03:30:30,318 --> 03:30:37,439
prompting me to enter my email and

5122
03:30:33,120 --> 03:30:37,439
password and so i'm going to do that now

5123
03:30:39,600 --> 03:30:44,840
i'm going to authorize my account with

5124
03:30:41,359 --> 03:30:44,840
two-step verification

5125
03:30:44,879 --> 03:30:50,318
i'm not going to save this password and

5126
03:30:47,040 --> 03:30:53,840
yes i want to allow the google cloud sdk

5127
03:30:50,318 --> 03:30:57,119
to access my google account

5128
03:30:53,840 --> 03:30:57,120
so i'm going to click on allow

5129
03:30:57,279 --> 03:31:00,800
and it shows that i've been

5130
03:30:58,639 --> 03:31:02,959
authenticated so now i'm going to move

5131
03:31:00,799 --> 03:31:05,438
back to my terminal and so just as a

5132
03:31:02,959 --> 03:31:07,919
note before we move forward in case you

5133
03:31:05,439 --> 03:31:10,318
don't get a browser pop-up for you to

5134
03:31:07,920 --> 03:31:13,120
log into your google account you can

5135
03:31:10,318 --> 03:31:15,278
simply highlight this url copy it into

5136
03:31:13,120 --> 03:31:18,000
your browser and it should prompt you

5137
03:31:15,279 --> 03:31:19,439
just the same so moving right ahead it

5138
03:31:18,000 --> 03:31:21,079
shows that i'm logged in as

5139
03:31:19,439 --> 03:31:24,318
tonybowtieace

5140
03:31:21,079 --> 03:31:26,238
gmail.com which is exactly what i wanted

5141
03:31:24,318 --> 03:31:28,719
and it's asking me to pick a cloud

5142
03:31:26,238 --> 03:31:32,159
project to use now i want to use project

5143
03:31:28,719 --> 03:31:34,238
tony so i'm going to type in 1 and enter

5144
03:31:32,159 --> 03:31:36,719
and that's it the cloud sdk has been

5145
03:31:34,238 --> 03:31:39,119
configured and just to double check i'm

5146
03:31:36,719 --> 03:31:41,599
going to run the gcloud

5147
03:31:39,120 --> 03:31:44,160
config list command to show me my

5148
03:31:41,600 --> 03:31:46,399
configuration and as you can see here my

5149
03:31:44,159 --> 03:31:49,439
account is tonybowties

5150
03:31:46,398 --> 03:31:50,799
gmail.com my disable usage reporting is

5151
03:31:49,439 --> 03:31:53,680
equal to false

5152
03:31:50,799 --> 03:31:56,159
and my project is project tony and again

5153
03:31:53,680 --> 03:31:58,639
my active configuration is set as

5154
03:31:56,159 --> 03:32:02,719
default and so that about covers the

5155
03:31:58,639 --> 03:32:05,439
cloud sdk install for mac os and so

5156
03:32:02,719 --> 03:32:09,278
finally i'm going to move over to ubuntu

5157
03:32:05,439 --> 03:32:11,840
linux and configure the cloud sdk there

5158
03:32:09,279 --> 03:32:13,760
and so here we are in ubuntu and like i

5159
03:32:11,840 --> 03:32:15,600
did in the other operating systems i'm

5160
03:32:13,760 --> 03:32:17,439
going to open up the browser and i'm

5161
03:32:15,600 --> 03:32:19,600
going to paste in the url for the quick

5162
03:32:17,439 --> 03:32:21,200
start guide

5163
03:32:19,600 --> 03:32:24,318
and so we want to click on the quick

5164
03:32:21,200 --> 03:32:26,079
start for debian and ubuntu and so again

5165
03:32:24,318 --> 03:32:27,840
you have your choice from either

5166
03:32:26,079 --> 03:32:30,799
clicking on the link on the left hand

5167
03:32:27,840 --> 03:32:32,719
menu or the one here in the main menu

5168
03:32:30,799 --> 03:32:35,039
and so following the guide

5169
03:32:32,719 --> 03:32:38,159
it is telling us that when it comes to

5170
03:32:35,040 --> 03:32:41,439
an ubuntu release it is recommended that

5171
03:32:38,159 --> 03:32:44,159
the sdk should be installed on an ubuntu

5172
03:32:41,439 --> 03:32:47,200
release that has not reached end of life

5173
03:32:44,159 --> 03:32:49,200
the guide also asks to create a project

5174
03:32:47,200 --> 03:32:50,399
if we don't have one already which we

5175
03:32:49,200 --> 03:32:52,560
have already done

5176
03:32:50,398 --> 03:32:55,199
and so now we can continue on with the

5177
03:32:52,559 --> 03:32:57,600
steps and so since we are not installing

5178
03:32:55,200 --> 03:32:59,840
it inside a docker image we're gonna go

5179
03:32:57,600 --> 03:33:01,760
ahead and use the commands right here

5180
03:32:59,840 --> 03:33:02,719
now you can copy all the commands at

5181
03:33:01,760 --> 03:33:05,279
once

5182
03:33:02,719 --> 03:33:08,719
by copying this to the clipboard but my

5183
03:33:05,279 --> 03:33:11,680
recommendation is to install each one

5184
03:33:08,719 --> 03:33:14,000
one by one so i'm going to copy this

5185
03:33:11,680 --> 03:33:16,079
and i'm going to open up my terminal i'm

5186
03:33:14,000 --> 03:33:18,238
going to zoom in for better viewing and

5187
03:33:16,079 --> 03:33:20,159
i'm going to paste that command in and

5188
03:33:18,238 --> 03:33:21,840
click on enter it's going to prompt me

5189
03:33:20,159 --> 03:33:24,238
for my password

5190
03:33:21,840 --> 03:33:26,799
and it didn't come up with any errors so

5191
03:33:24,238 --> 03:33:28,398
that means it was successfully executed

5192
03:33:26,799 --> 03:33:30,318
and so i'm going to move on to the next

5193
03:33:28,398 --> 03:33:32,559
command

5194
03:33:30,318 --> 03:33:35,039
i'm going to copy this

5195
03:33:32,559 --> 03:33:37,119
go back over to my terminal

5196
03:33:35,040 --> 03:33:39,040
and paste it in

5197
03:33:37,120 --> 03:33:41,439
now for those of you who do not have

5198
03:33:39,040 --> 03:33:44,000
curl installed you will be prompted to

5199
03:33:41,439 --> 03:33:46,000
install it and given the command to run

5200
03:33:44,000 --> 03:33:47,760
it so i'm going to copy and paste this

5201
03:33:46,000 --> 03:33:50,398
command

5202
03:33:47,760 --> 03:33:52,639
and click on enter

5203
03:33:50,398 --> 03:33:55,199
i'm going to type in y for yes to

5204
03:33:52,639 --> 03:33:57,760
continue and it's going to install it

5205
03:33:55,200 --> 03:34:00,399
after a couple of minutes okay now that

5206
03:33:57,760 --> 03:34:02,318
curl has been installed i'm able to run

5207
03:34:00,398 --> 03:34:04,478
that command again i'm going to clear

5208
03:34:02,318 --> 03:34:07,039
the screen first

5209
03:34:04,478 --> 03:34:09,599
and that executed with no errors as well

5210
03:34:07,040 --> 03:34:11,680
and so now moving on to the last command

5211
03:34:09,600 --> 03:34:15,640
this command will download and install

5212
03:34:11,680 --> 03:34:15,639
the google cloud sdk

5213
03:34:18,879 --> 03:34:23,920
i am prompted to install some packages

5214
03:34:21,359 --> 03:34:26,800
and so i'm going to type y for yes to

5215
03:34:23,920 --> 03:34:29,359
continue so now it's going to download

5216
03:34:26,799 --> 03:34:32,159
and install the necessary packages

5217
03:34:29,359 --> 03:34:34,318
needed for the google cloud sdk and

5218
03:34:32,159 --> 03:34:36,398
depending on the speed of your internet

5219
03:34:34,318 --> 03:34:38,799
and the speed of your machine this could

5220
03:34:36,398 --> 03:34:41,680
take anywhere from two to five minutes

5221
03:34:38,799 --> 03:34:42,639
okay and the google cloud sdk has been

5222
03:34:41,680 --> 03:34:44,800
installed

5223
03:34:42,639 --> 03:34:47,199
and so now that the cloud sdk has been

5224
03:34:44,799 --> 03:34:48,719
installed we can now initialize the

5225
03:34:47,200 --> 03:34:52,640
configuration

5226
03:34:48,719 --> 03:34:52,639
so i'm going to type in gcloud init

5227
03:34:52,959 --> 03:34:57,519
again the prompt with the network

5228
03:34:54,840 --> 03:34:59,439
diagnostics i'm going to type y for yes

5229
03:34:57,520 --> 03:35:01,279
to log in

5230
03:34:59,439 --> 03:35:04,318
and i'm going to get the prompt for my

5231
03:35:01,279 --> 03:35:04,319
email and password

5232
03:35:04,879 --> 03:35:08,719
i'm going to take care of my two-step

5233
03:35:06,478 --> 03:35:11,199
verification and i'm going to allow the

5234
03:35:08,719 --> 03:35:13,760
google cloud sdk to access my google

5235
03:35:11,200 --> 03:35:15,920
account and success i am now

5236
03:35:13,760 --> 03:35:18,639
authenticated and moving back to the

5237
03:35:15,920 --> 03:35:21,359
terminal just to verify it and again i'm

5238
03:35:18,639 --> 03:35:24,879
going to pick project tony as the cloud

5239
03:35:21,359 --> 03:35:27,840
project to use

5240
03:35:24,879 --> 03:35:29,839
and the cloud sdk has been configured as

5241
03:35:27,840 --> 03:35:34,719
always i'm going to do a double check by

5242
03:35:29,840 --> 03:35:34,719
running a gcloud config list

5243
03:35:36,799 --> 03:35:41,679
and as expected the same details has

5244
03:35:39,439 --> 03:35:44,559
come up and so this is a quick run

5245
03:35:41,680 --> 03:35:48,559
through on all three operating systems

5246
03:35:44,559 --> 03:35:52,238
windows mac os and ubuntu linux on how

5247
03:35:48,559 --> 03:35:54,799
to install the google cloud sdk and this

5248
03:35:52,238 --> 03:35:58,000
will help you get started with becoming

5249
03:35:54,799 --> 03:36:00,318
more familiar and more comfortable using

5250
03:35:58,000 --> 03:36:02,478
the command line interface and so that

5251
03:36:00,318 --> 03:36:04,318
about wraps up for this lesson

5252
03:36:02,478 --> 03:36:05,358
so you can now mark this lesson as

5253
03:36:04,318 --> 03:36:07,609
complete

5254
03:36:05,359 --> 03:36:11,359
and let's move on to the next one

5255
03:36:07,610 --> 03:36:14,159
[Music]

5256
03:36:11,359 --> 03:36:16,640
welcome back in the last demo we went

5257
03:36:14,159 --> 03:36:17,760
through a complete install of the cloud

5258
03:36:16,639 --> 03:36:20,079
sdk

5259
03:36:17,760 --> 03:36:22,960
and configured our admin account to be

5260
03:36:20,079 --> 03:36:25,439
used within it in this demonstration i

5261
03:36:22,959 --> 03:36:28,398
will be walking through how to manage

5262
03:36:25,439 --> 03:36:31,040
the cloud sdk and this will involve how

5263
03:36:28,398 --> 03:36:33,840
to utilize it and how to customize it to

5264
03:36:31,040 --> 03:36:36,479
your environment as well as configuring

5265
03:36:33,840 --> 03:36:39,760
our other user account so that we are

5266
03:36:36,478 --> 03:36:42,398
able to apply switching configurations

5267
03:36:39,760 --> 03:36:44,559
from one user to another and so i will

5268
03:36:42,398 --> 03:36:45,920
be going through initializing and

5269
03:36:44,559 --> 03:36:48,639
authorization

5270
03:36:45,920 --> 03:36:51,040
configurations and properties installing

5271
03:36:48,639 --> 03:36:53,199
and removing components as well as a

5272
03:36:51,040 --> 03:36:55,840
full run through of the gcloud

5273
03:36:53,200 --> 03:36:58,560
interactive shell so let's kick off this

5274
03:36:55,840 --> 03:37:01,760
demo by diving into a pre-configured

5275
03:36:58,559 --> 03:37:04,478
terminal with the sdk installed and

5276
03:37:01,760 --> 03:37:07,200
configured with my second user tony

5277
03:37:04,478 --> 03:37:10,238
bowtie ace gmail.com

5278
03:37:07,200 --> 03:37:12,720
and so here i am in the mac os terminal

5279
03:37:10,238 --> 03:37:15,039
and just be aware that it doesn't matter

5280
03:37:12,719 --> 03:37:17,519
which operating system you're running as

5281
03:37:15,040 --> 03:37:19,920
long as the sdk is installed and you

5282
03:37:17,520 --> 03:37:22,560
have your user configured and so as you

5283
03:37:19,920 --> 03:37:26,238
saw in the last lesson after you install

5284
03:37:22,559 --> 03:37:29,119
the cloud sdk the next step is typically

5285
03:37:26,238 --> 03:37:31,920
to initialize the cloud sdk

5286
03:37:29,120 --> 03:37:34,160
by running the gcloud init command and

5287
03:37:31,920 --> 03:37:37,040
this is to perform the initial setup

5288
03:37:34,159 --> 03:37:40,559
tasks as well as authorizing the cloud

5289
03:37:37,040 --> 03:37:42,960
sdk to use your user account credentials

5290
03:37:40,559 --> 03:37:45,760
so that it can access google cloud and

5291
03:37:42,959 --> 03:37:48,478
so in short it sets up a cloud sdk

5292
03:37:45,760 --> 03:37:51,200
configuration and sets a base set of

5293
03:37:48,478 --> 03:37:53,840
properties and this usually covers the

5294
03:37:51,200 --> 03:37:56,880
active account the current project and

5295
03:37:53,840 --> 03:37:59,680
if the api is enabled the default google

5296
03:37:56,879 --> 03:38:02,000
compute engine region and zone now as a

5297
03:37:59,680 --> 03:38:04,880
note if you're in a remote terminal

5298
03:38:02,000 --> 03:38:07,359
session with no access to a browser you

5299
03:38:04,879 --> 03:38:11,278
can still run the gcloud init command

5300
03:38:07,359 --> 03:38:12,720
but adding a flag of dash dash console

5301
03:38:11,279 --> 03:38:14,319
dash only

5302
03:38:12,719 --> 03:38:17,278
and this will prevent the command from

5303
03:38:14,318 --> 03:38:19,359
launching a browser-based authorization

5304
03:38:17,279 --> 03:38:22,079
like you saw when setting up your last

5305
03:38:19,359 --> 03:38:24,960
user so now even though i have a user

5306
03:38:22,079 --> 03:38:27,279
already set up i can still run gcloud

5307
03:38:24,959 --> 03:38:29,519
init and it will give me a couple

5308
03:38:27,279 --> 03:38:32,238
different options to choose from so i

5309
03:38:29,520 --> 03:38:35,040
can re-initialize this configuration

5310
03:38:32,238 --> 03:38:37,840
with some new settings or i can create a

5311
03:38:35,040 --> 03:38:41,040
new configuration now for this demo

5312
03:38:37,840 --> 03:38:42,880
since we already have two users and to

5313
03:38:41,040 --> 03:38:45,520
demonstrate how to switch between

5314
03:38:42,879 --> 03:38:48,799
different users i want to create a new

5315
03:38:45,520 --> 03:38:51,439
configuration with my very first user so

5316
03:38:48,799 --> 03:38:53,599
i'm going to type in 2 and hit enter and

5317
03:38:51,439 --> 03:38:56,238
it's going to ask me for a configuration

5318
03:38:53,600 --> 03:38:58,960
name now it asks me for a configuration

5319
03:38:56,238 --> 03:39:01,920
name because when setting up your first

5320
03:38:58,959 --> 03:39:04,238
configuration it's set as default and

5321
03:39:01,920 --> 03:39:06,799
because i know that this user account

5322
03:39:04,238 --> 03:39:09,198
has full access to billing as well as

5323
03:39:06,799 --> 03:39:11,438
administration privileges i'm going to

5324
03:39:09,199 --> 03:39:12,720
call this configuration master and i'm

5325
03:39:11,439 --> 03:39:15,120
going to hit enter

5326
03:39:12,719 --> 03:39:17,519
it did the necessary network checks and

5327
03:39:15,120 --> 03:39:19,840
now it's asking me for which account i

5328
03:39:17,520 --> 03:39:23,359
want to use this configuration for now

5329
03:39:19,840 --> 03:39:25,600
if tony bowtie ace had access to two

5330
03:39:23,359 --> 03:39:27,920
different google cloud accounts i would

5331
03:39:25,600 --> 03:39:30,238
be able to add a different configuration

5332
03:39:27,920 --> 03:39:32,478
here and so because i'm going to log in

5333
03:39:30,238 --> 03:39:33,279
with a new account i'm going to put in

5334
03:39:32,478 --> 03:39:36,478
two

5335
03:39:33,279 --> 03:39:38,319
and hit enter

5336
03:39:36,478 --> 03:39:41,039
and so again it brought me to my browser

5337
03:39:38,318 --> 03:39:42,478
window and i'm going to log in using

5338
03:39:41,040 --> 03:39:44,720
another account

5339
03:39:42,478 --> 03:39:47,438
and so here you can type in the first

5340
03:39:44,719 --> 03:39:51,599
account that you created and for me it

5341
03:39:47,439 --> 03:39:54,079
was antony gcloud ace gmail.com

5342
03:39:51,600 --> 03:39:56,000
i hit next and i'm going to enter my

5343
03:39:54,079 --> 03:39:57,600
password

5344
03:39:56,000 --> 03:39:59,920
it's going to ask me for my two-step

5345
03:39:57,600 --> 03:40:01,840
verification

5346
03:39:59,920 --> 03:40:03,840
and i don't want to save this password

5347
03:40:01,840 --> 03:40:07,520
and i'm going to allow the google cloud

5348
03:40:03,840 --> 03:40:09,760
sdk to access my google account and i am

5349
03:40:07,520 --> 03:40:11,920
now authenticated so moving back to the

5350
03:40:09,760 --> 03:40:14,318
console you can see here that i am

5351
03:40:11,920 --> 03:40:16,960
currently logged in and it's asking me

5352
03:40:14,318 --> 03:40:19,519
to pick a cloud project to use now since

5353
03:40:16,959 --> 03:40:22,159
i only have one project in that google

5354
03:40:19,520 --> 03:40:24,399
cloud account which is subtle poet i'm

5355
03:40:22,159 --> 03:40:26,799
going to choose one

5356
03:40:24,398 --> 03:40:29,840
and since i have the compute engine api

5357
03:40:26,799 --> 03:40:32,719
enabled i am now able to configure a

5358
03:40:29,840 --> 03:40:35,199
default compute region and zone and so

5359
03:40:32,719 --> 03:40:37,920
i'm going to hit y for yes to configure

5360
03:40:35,199 --> 03:40:40,159
it and as you can see there are 74

5361
03:40:37,920 --> 03:40:42,318
different options to choose from and if

5362
03:40:40,159 --> 03:40:43,760
you scroll up a little bit you should be

5363
03:40:42,318 --> 03:40:46,159
able to find the zone that you're

5364
03:40:43,760 --> 03:40:49,040
looking for and so for this course we

5365
03:40:46,159 --> 03:40:51,920
are going to be using us central one

5366
03:40:49,040 --> 03:40:53,680
dash a and so this is number eight so

5367
03:40:51,920 --> 03:40:56,079
i'm going to scroll back down

5368
03:40:53,680 --> 03:40:58,960
and type in eight

5369
03:40:56,079 --> 03:41:02,000
and so now my master configuration has

5370
03:40:58,959 --> 03:41:05,759
been configured with my antony g cloud

5371
03:41:02,000 --> 03:41:08,639
ace account using us central 1a as the

5372
03:41:05,760 --> 03:41:11,199
compute engine zone now touching back on

5373
03:41:08,639 --> 03:41:14,000
authorization if i didn't want to set up

5374
03:41:11,199 --> 03:41:15,840
a whole configuration i can simply type

5375
03:41:14,000 --> 03:41:17,520
in gcloud

5376
03:41:15,840 --> 03:41:20,159
auth login

5377
03:41:17,520 --> 03:41:23,359
and this will allow me to authorize just

5378
03:41:20,159 --> 03:41:26,000
the user account only so gcloud init

5379
03:41:23,359 --> 03:41:29,279
would authorize access and perform the

5380
03:41:26,000 --> 03:41:32,879
cloud sdk setup steps and gcloud auth

5381
03:41:29,279 --> 03:41:35,120
login will authorize the access only now

5382
03:41:32,879 --> 03:41:36,959
as i mentioned in a previous lesson you

5383
03:41:35,120 --> 03:41:39,840
can use a service account for

5384
03:41:36,959 --> 03:41:41,679
authorization to the cloud sdk tools and

5385
03:41:39,840 --> 03:41:44,079
this would be great for a compute

5386
03:41:41,680 --> 03:41:46,960
instance or an application but would

5387
03:41:44,079 --> 03:41:49,120
need a service account key file in order

5388
03:41:46,959 --> 03:41:51,759
to authorize it and so moving back to

5389
03:41:49,120 --> 03:41:55,520
our user accounts when running the cloud

5390
03:41:51,760 --> 03:41:58,000
sdk you can only have one active account

5391
03:41:55,520 --> 03:42:00,880
at any given time and so to check my

5392
03:41:58,000 --> 03:42:03,359
active account i can type in the command

5393
03:42:00,879 --> 03:42:05,198
gcloud auth list

5394
03:42:03,359 --> 03:42:07,520
and this will give me a list of all the

5395
03:42:05,199 --> 03:42:10,319
accounts that have been authorized and

5396
03:42:07,520 --> 03:42:13,040
so whenever you run a gcloud init it

5397
03:42:10,318 --> 03:42:15,519
will use that account as the active

5398
03:42:13,040 --> 03:42:19,279
account and as you can see here the

5399
03:42:15,520 --> 03:42:21,920
antony gcloud ace gmail.com has a star

5400
03:42:19,279 --> 03:42:24,238
beside it and this is marked as the

5401
03:42:21,920 --> 03:42:26,559
active account and so in essence the

5402
03:42:24,238 --> 03:42:29,039
account with the star beside it is the

5403
03:42:26,559 --> 03:42:31,680
active account and so i'm looking to

5404
03:42:29,040 --> 03:42:34,319
change my active account back to tony

5405
03:42:31,680 --> 03:42:37,040
bowtie ace and in order for me to do

5406
03:42:34,318 --> 03:42:38,879
that the command is conveniently shown

5407
03:42:37,040 --> 03:42:40,960
here and so i'm going to go ahead and

5408
03:42:38,879 --> 03:42:43,278
run that

5409
03:42:40,959 --> 03:42:46,159
and the account would be the user shown

5410
03:42:43,279 --> 03:42:47,199
above and so when i do a gcloud auth

5411
03:42:46,159 --> 03:42:49,760
list

5412
03:42:47,199 --> 03:42:53,199
i can see that my active account is now

5413
03:42:49,760 --> 03:42:55,040
back to tony bowtie bowtieace gmail.com

5414
03:42:53,199 --> 03:42:58,079
now if you wanted to switch the account

5415
03:42:55,040 --> 03:43:01,199
on a per command basis you can always do

5416
03:42:58,079 --> 03:43:03,439
that using the flag dash dash account

5417
03:43:01,199 --> 03:43:05,520
after the command and put in the user

5418
03:43:03,439 --> 03:43:07,760
account that you want to use and so

5419
03:43:05,520 --> 03:43:09,279
let's say i wanted to revoke credentials

5420
03:43:07,760 --> 03:43:12,238
from an account that i don't need

5421
03:43:09,279 --> 03:43:14,399
anymore i can simply use the command

5422
03:43:12,238 --> 03:43:16,398
gcloud auth revoke

5423
03:43:14,398 --> 03:43:19,039
followed by the username and it will

5424
03:43:16,398 --> 03:43:20,398
revoke the credentials for that account

5425
03:43:19,040 --> 03:43:22,960
and so doing this

5426
03:43:20,398 --> 03:43:26,238
would remove your credentials and any

5427
03:43:22,959 --> 03:43:28,639
access tokens for any specific account

5428
03:43:26,238 --> 03:43:30,639
that you choose that's currently on your

5429
03:43:28,639 --> 03:43:33,198
computer and so if we're looking for

5430
03:43:30,639 --> 03:43:36,159
that specific account we can always use

5431
03:43:33,199 --> 03:43:38,640
the gcloud info command and it will give

5432
03:43:36,159 --> 03:43:41,600
us the path for the user config

5433
03:43:38,639 --> 03:43:43,680
directory and it is this directory that

5434
03:43:41,600 --> 03:43:45,199
holds your encrypted credentials and

5435
03:43:43,680 --> 03:43:46,840
access tokens

5436
03:43:45,199 --> 03:43:48,720
alongside with your active

5437
03:43:46,840 --> 03:43:50,960
configurations and any other

5438
03:43:48,719 --> 03:43:53,920
configurations as well now as you can

5439
03:43:50,959 --> 03:43:55,919
see here running the gcloud info command

5440
03:43:53,920 --> 03:43:58,879
will also give you some other

5441
03:43:55,920 --> 03:44:01,840
information everything from the account

5442
03:43:58,879 --> 03:44:04,079
the project the current properties and

5443
03:44:01,840 --> 03:44:06,559
where the logs can be found so now

5444
03:44:04,079 --> 03:44:09,760
moving on to configurations

5445
03:44:06,559 --> 03:44:11,519
a configuration is a named set of gcloud

5446
03:44:09,760 --> 03:44:13,840
cli properties

5447
03:44:11,520 --> 03:44:16,960
and it works kind of like a profile and

5448
03:44:13,840 --> 03:44:19,840
so earlier on i demonstrated how to set

5449
03:44:16,959 --> 03:44:23,039
up another configuration through gcloud

5450
03:44:19,840 --> 03:44:25,680
init so now if i run a gcloud config

5451
03:44:23,040 --> 03:44:28,640
list command it would give me all the

5452
03:44:25,680 --> 03:44:31,040
information of the active configuration

5453
03:44:28,639 --> 03:44:33,840
so as you can see here my user has

5454
03:44:31,040 --> 03:44:36,399
changed but my configuration has stayed

5455
03:44:33,840 --> 03:44:39,359
the same now as seen previously in a

5456
03:44:36,398 --> 03:44:42,318
different lesson tony bow tie ace does

5457
03:44:39,359 --> 03:44:45,520
not have access to the project subtle

5458
03:44:42,318 --> 03:44:48,318
poet this project belongs to antony g

5459
03:44:45,520 --> 03:44:51,279
cloud ace and the configuration was set

5460
03:44:48,318 --> 03:44:53,920
for that account now if tony bowtie ace

5461
03:44:51,279 --> 03:44:55,760
did have access to the subtle poet

5462
03:44:53,920 --> 03:44:58,398
project then i could use this

5463
03:44:55,760 --> 03:45:00,318
configuration but it doesn't and so i

5464
03:44:58,398 --> 03:45:03,119
want to switch back to my other

5465
03:45:00,318 --> 03:45:04,639
configuration and how i would do this is

5466
03:45:03,120 --> 03:45:08,239
type in the command

5467
03:45:04,639 --> 03:45:10,639
gcloud config configurations

5468
03:45:08,238 --> 03:45:13,198
activate and the configuration that i

5469
03:45:10,639 --> 03:45:15,840
set up for tony bowtie ace is the

5470
03:45:13,199 --> 03:45:18,399
default configuration

5471
03:45:15,840 --> 03:45:22,000
and so now that it has been activated i

5472
03:45:18,398 --> 03:45:24,000
can now run a gcloud config list and as

5473
03:45:22,000 --> 03:45:26,478
you can see here the configuration is

5474
03:45:24,000 --> 03:45:29,439
back to default setup during the

5475
03:45:26,478 --> 03:45:32,159
initialization process for tony bowtie

5476
03:45:29,439 --> 03:45:35,439
ace now if i wanted to create multiple

5477
03:45:32,159 --> 03:45:38,478
configurations for the same user account

5478
03:45:35,439 --> 03:45:41,120
i can simply type in the command gcloud

5479
03:45:38,478 --> 03:45:42,559
config configurations

5480
03:45:41,120 --> 03:45:44,399
create

5481
03:45:42,559 --> 03:45:47,039
but if i wanted to just view the

5482
03:45:44,398 --> 03:45:49,719
configuration properties i can always

5483
03:45:47,040 --> 03:45:52,319
type in the command gcloud config

5484
03:45:49,719 --> 03:45:55,039
configurations describe

5485
03:45:52,318 --> 03:45:57,278
and as you can see after the describe i

5486
03:45:55,040 --> 03:45:59,279
needed the configuration name to

5487
03:45:57,279 --> 03:46:02,000
complete the command and so i'm going to

5488
03:45:59,279 --> 03:46:02,000
do that now

5489
03:46:02,639 --> 03:46:07,039
and i've been given all the properties

5490
03:46:04,559 --> 03:46:09,359
for this configuration now another thing

5491
03:46:07,040 --> 03:46:11,680
that i wanted to share when it comes to

5492
03:46:09,359 --> 03:46:14,720
properties is that you can change the

5493
03:46:11,680 --> 03:46:17,279
project or the compute region and zone

5494
03:46:14,719 --> 03:46:20,238
by simply typing in the command

5495
03:46:17,279 --> 03:46:22,720
gcloud config set now if i wanted to

5496
03:46:20,238 --> 03:46:25,600
change the project i can simply type in

5497
03:46:22,719 --> 03:46:28,159
project and the project name if it was

5498
03:46:25,600 --> 03:46:29,840
for the compute instance i can simply

5499
03:46:28,159 --> 03:46:32,879
type in compute

5500
03:46:29,840 --> 03:46:35,439
forward slash zone for the specific zone

5501
03:46:32,879 --> 03:46:37,358
and just as a note only the properties

5502
03:46:35,439 --> 03:46:40,318
that are not in the core property

5503
03:46:37,359 --> 03:46:42,800
section are the ones that can be set as

5504
03:46:40,318 --> 03:46:45,439
well when you are setting the properties

5505
03:46:42,799 --> 03:46:47,679
this only applies to the active

5506
03:46:45,439 --> 03:46:50,800
configuration if you want to change the

5507
03:46:47,680 --> 03:46:53,199
configuration of one that is not active

5508
03:46:50,799 --> 03:46:55,759
then you'd have to switch to it and run

5509
03:46:53,199 --> 03:46:57,600
the gcloud config set command and so

5510
03:46:55,760 --> 03:47:00,398
moving on i wanted to touch on

5511
03:46:57,600 --> 03:47:02,720
components which are the installable

5512
03:47:00,398 --> 03:47:08,398
parts of the sdk and when you install

5513
03:47:02,719 --> 03:47:11,198
the sdk the components gcloud bq gsutil

5514
03:47:08,398 --> 03:47:13,760
and the core libraries are installed by

5515
03:47:11,199 --> 03:47:16,640
default now you probably saw a list of

5516
03:47:13,760 --> 03:47:19,199
components when you ran the gcloud init

5517
03:47:16,639 --> 03:47:22,159
command and so to see all the components

5518
03:47:19,199 --> 03:47:23,600
again you can simply type in the gcloud

5519
03:47:22,159 --> 03:47:25,359
components

5520
03:47:23,600 --> 03:47:28,479
list command

5521
03:47:25,359 --> 03:47:30,720
and if you scroll up you're able to see

5522
03:47:28,478 --> 03:47:33,278
all the components that are available

5523
03:47:30,719 --> 03:47:35,039
that you can install at your convenience

5524
03:47:33,279 --> 03:47:37,920
and so if i wanted to install the

5525
03:47:35,040 --> 03:47:41,120
cubectl component i can type in the

5526
03:47:37,920 --> 03:47:44,079
command gcloud components install

5527
03:47:41,120 --> 03:47:46,160
cubectl and a prompt will come up asking

5528
03:47:44,079 --> 03:47:48,478
me if i want to continue with this i

5529
03:47:46,159 --> 03:47:50,639
want to say yes and now it will go

5530
03:47:48,478 --> 03:47:52,559
through the process of installing these

5531
03:47:50,639 --> 03:47:54,799
components

5532
03:47:52,559 --> 03:47:58,159
and so just to verify if i run the

5533
03:47:54,799 --> 03:48:01,039
command gcloud components list you can

5534
03:47:58,159 --> 03:48:03,359
see here that i have the cube ctl

5535
03:48:01,040 --> 03:48:06,080
component installed now if i wanted to

5536
03:48:03,359 --> 03:48:06,800
remove that component i can simply type

5537
03:48:06,079 --> 03:48:08,959
in

5538
03:48:06,799 --> 03:48:10,398
gcloud components

5539
03:48:08,959 --> 03:48:12,159
remove

5540
03:48:10,398 --> 03:48:13,119
and then the component that i want to

5541
03:48:12,159 --> 03:48:15,439
remove

5542
03:48:13,120 --> 03:48:17,439
which is cubectl i'm going to be

5543
03:48:15,439 --> 03:48:19,520
prompted if i want to do this i'm going

5544
03:48:17,439 --> 03:48:23,040
to say yes and it's going to go through

5545
03:48:19,520 --> 03:48:25,359
the stages of removing this component

5546
03:48:23,040 --> 03:48:27,439
and it's been successfully uninstalled

5547
03:48:25,359 --> 03:48:29,840
and so if you're working with a resource

5548
03:48:27,439 --> 03:48:33,120
that you need a component for you can

5549
03:48:29,840 --> 03:48:35,439
simply install or uninstall it using the

5550
03:48:33,120 --> 03:48:37,359
gcloud components command and so one

5551
03:48:35,439 --> 03:48:38,479
last thing about components before we

5552
03:48:37,359 --> 03:48:40,559
move on

5553
03:48:38,478 --> 03:48:42,719
is that you can update your components

5554
03:48:40,559 --> 03:48:44,719
to make sure you have the latest version

5555
03:48:42,719 --> 03:48:47,198
and so in order to update all of your

5556
03:48:44,719 --> 03:48:50,159
installed components you would simply

5557
03:48:47,199 --> 03:48:52,560
run the command gcloud components update

5558
03:48:50,159 --> 03:48:55,039
and so before i go ahead and finish off

5559
03:48:52,559 --> 03:48:57,920
this demonstration i wanted to touch on

5560
03:48:55,040 --> 03:49:00,399
the gcloud interactive shell the gcloud

5561
03:48:57,920 --> 03:49:03,439
interactive shell provides a richer

5562
03:49:00,398 --> 03:49:06,559
shell experience simplifying commands

5563
03:49:03,439 --> 03:49:09,359
and documentation discovery with as you

5564
03:49:06,559 --> 03:49:12,478
type autocompletion and help text

5565
03:49:09,359 --> 03:49:17,279
snippets below it produces suggestions

5566
03:49:12,478 --> 03:49:20,398
and autocompletion for gcloud bq gsutil

5567
03:49:17,279 --> 03:49:24,238
and cubectl command line tools as well

5568
03:49:20,398 --> 03:49:27,119
as any command that has a man page sub

5569
03:49:24,238 --> 03:49:29,760
commands and flags can be completed

5570
03:49:27,120 --> 03:49:32,319
along with online help as you type the

5571
03:49:29,760 --> 03:49:35,279
command and because this is part of the

5572
03:49:32,318 --> 03:49:38,559
beta component i need to install it and

5573
03:49:35,279 --> 03:49:41,680
so i'm going to run the command gcloud

5574
03:49:38,559 --> 03:49:43,840
components install beta and i want to

5575
03:49:41,680 --> 03:49:46,559
hit yes to continue and this will go

5576
03:49:43,840 --> 03:49:48,880
ahead and kick off the installation of

5577
03:49:46,559 --> 03:49:50,879
the gcloud beta commands

5578
03:49:48,879 --> 03:49:53,278
and so now that it's installed i'm going

5579
03:49:50,879 --> 03:49:55,438
to simply clear the screen and so now in

5580
03:49:53,279 --> 03:49:59,120
order to run the gcloud interactive

5581
03:49:55,439 --> 03:50:00,159
shell i need to run the command gcloud

5582
03:49:59,120 --> 03:50:01,760
beta

5583
03:50:00,159 --> 03:50:04,318
interactive

5584
03:50:01,760 --> 03:50:06,719
and so now for every command that i type

5585
03:50:04,318 --> 03:50:09,198
i will get auto suggestions that will

5586
03:50:06,719 --> 03:50:11,358
help me with my commands and so to see

5587
03:50:09,199 --> 03:50:12,800
it in all of its glory i'm going to

5588
03:50:11,359 --> 03:50:14,720
start typing

5589
03:50:12,799 --> 03:50:17,840
and as you can see it's giving me the

5590
03:50:14,719 --> 03:50:20,559
option between g cloud or gsutil and i

5591
03:50:17,840 --> 03:50:22,960
can use the arrow to choose either one

5592
03:50:20,559 --> 03:50:25,278
and below it it'll also show me the

5593
03:50:22,959 --> 03:50:27,759
different flags that i can use for these

5594
03:50:25,279 --> 03:50:29,600
specific commands and how to structure

5595
03:50:27,760 --> 03:50:31,840
them and so for now i'm going to run

5596
03:50:29,600 --> 03:50:34,159
gsutil version

5597
03:50:31,840 --> 03:50:36,478
minus l and as you can see here it's

5598
03:50:34,159 --> 03:50:38,959
giving me all the information about this

5599
03:50:36,478 --> 03:50:40,639
command and what it can do and so i'm

5600
03:50:38,959 --> 03:50:43,519
going to hit enter

5601
03:50:40,639 --> 03:50:45,039
and as you can see my gsutil version is

5602
03:50:43,520 --> 03:50:47,199
4.52

5603
03:50:45,040 --> 03:50:50,239
and along with the version number i'm

5604
03:50:47,199 --> 03:50:53,359
also given all the specific information

5605
03:50:50,238 --> 03:50:55,840
with regards to this gsutil version and

5606
03:50:53,359 --> 03:50:58,238
this can be used with absolutely any

5607
03:50:55,840 --> 03:51:00,000
command used on the google cloud

5608
03:50:58,238 --> 03:51:01,680
platform and so i'm going to go ahead

5609
03:51:00,000 --> 03:51:03,520
and do that again but running a

5610
03:51:01,680 --> 03:51:05,760
different command so i'm just going to

5611
03:51:03,520 --> 03:51:07,600
first clear the screen and i'm going to

5612
03:51:05,760 --> 03:51:08,719
type gcloud

5613
03:51:07,600 --> 03:51:11,920
compute

5614
03:51:08,719 --> 03:51:14,079
instances and as you can see the snippet

5615
03:51:11,920 --> 03:51:16,478
on the bottom of the screen is showing

5616
03:51:14,079 --> 03:51:19,199
me not only the command and how it's

5617
03:51:16,478 --> 03:51:22,318
structured but also the url for the

5618
03:51:19,199 --> 03:51:25,439
documentation so continuing on gcloud

5619
03:51:22,318 --> 03:51:28,159
compute instances i'm going to do a list

5620
03:51:25,439 --> 03:51:31,040
and i'm going to filter it by using the

5621
03:51:28,159 --> 03:51:34,238
flag dash dash filter and i'm going to

5622
03:51:31,040 --> 03:51:37,120
filter the us east one a zone and i'm

5623
03:51:34,238 --> 03:51:37,119
going to hit enter

5624
03:51:37,199 --> 03:51:43,040
and as expected there are no instances

5625
03:51:40,398 --> 03:51:46,000
in us east 1a and as you've just

5626
03:51:43,040 --> 03:51:47,840
experienced this is a great tool and i

5627
03:51:46,000 --> 03:51:50,159
highly recommend that you use it

5628
03:51:47,840 --> 03:51:51,520
whenever you can now i know this is a

5629
03:51:50,159 --> 03:51:53,439
lot to take in

5630
03:51:51,520 --> 03:51:56,159
and a lot of these commands will not

5631
03:51:53,439 --> 03:51:58,800
show up on the exam but again getting

5632
03:51:56,159 --> 03:52:01,760
comfortable with the command line and

5633
03:51:58,799 --> 03:52:04,478
the sdk will help you on your path to

5634
03:52:01,760 --> 03:52:06,800
becoming a cloud engineer as well it

5635
03:52:04,478 --> 03:52:08,879
will help you get really comfortable

5636
03:52:06,799 --> 03:52:10,879
with the command line and before you

5637
03:52:08,879 --> 03:52:13,119
know it you'll be running commands in

5638
03:52:10,879 --> 03:52:15,358
the command line and prefer it over

5639
03:52:13,120 --> 03:52:18,399
using the console and so that's all i

5640
03:52:15,359 --> 03:52:21,279
have for this demo on managing the cloud

5641
03:52:18,398 --> 03:52:23,439
sdk so you can now mark this lesson as

5642
03:52:21,279 --> 03:52:26,439
complete and let's move on to the next

5643
03:52:23,439 --> 03:52:26,439
one

5644
03:52:28,079 --> 03:52:33,199
welcome back in this demonstration i'm

5645
03:52:31,120 --> 03:52:36,079
going to be talking about the always

5646
03:52:33,199 --> 03:52:38,319
available browser-based shell called

5647
03:52:36,079 --> 03:52:40,959
cloud shell cloud shell is a virtual

5648
03:52:38,318 --> 03:52:44,000
machine that is loaded with development

5649
03:52:40,959 --> 03:52:46,719
tools and offers a persistent five

5650
03:52:44,000 --> 03:52:48,959
gigabyte home directory that runs on

5651
03:52:46,719 --> 03:52:52,079
google cloud cloud shell is what

5652
03:52:48,959 --> 03:52:54,639
provides you command line access to your

5653
03:52:52,079 --> 03:52:57,199
google cloud resources within the

5654
03:52:54,639 --> 03:52:59,599
console cloud shell also comes with a

5655
03:52:57,199 --> 03:53:02,319
built-in code editor that i will be

5656
03:52:59,600 --> 03:53:05,279
diving into and allows you to browse

5657
03:53:02,318 --> 03:53:07,840
file directories as well as view and

5658
03:53:05,279 --> 03:53:10,479
edit files while still accessing the

5659
03:53:07,840 --> 03:53:13,199
cloud shell the code editor is available

5660
03:53:10,478 --> 03:53:16,238
by default with every cloud shell

5661
03:53:13,199 --> 03:53:18,319
instance and is based on the open source

5662
03:53:16,238 --> 03:53:20,478
editor thea

5663
03:53:18,318 --> 03:53:22,879
now cloud shell is available from

5664
03:53:20,478 --> 03:53:25,278
anywhere in the console by merely

5665
03:53:22,879 --> 03:53:26,318
clicking on the icon showed here in the

5666
03:53:25,279 --> 03:53:28,640
picture

5667
03:53:26,318 --> 03:53:30,959
and is positioned in the top right hand

5668
03:53:28,639 --> 03:53:33,358
corner of the console in the blue

5669
03:53:30,959 --> 03:53:36,079
toolbar so let's get started with the

5670
03:53:33,359 --> 03:53:38,159
cloud shell by getting our hands dirty

5671
03:53:36,079 --> 03:53:40,478
and jumping right into it

5672
03:53:38,159 --> 03:53:43,920
and so here we are back in the console

5673
03:53:40,478 --> 03:53:46,559
and i am logged in as tony bowtie ace

5674
03:53:43,920 --> 03:53:48,000
gmail.com and as you can see up here in

5675
03:53:46,559 --> 03:53:50,238
the right hand corner

5676
03:53:48,000 --> 03:53:53,120
as mentioned earlier you will find the

5677
03:53:50,238 --> 03:53:55,198
cloud shell logo and so to open it up

5678
03:53:53,120 --> 03:53:57,279
you simply click on it and it'll

5679
03:53:55,199 --> 03:53:59,359
activate the cloud shell here at the

5680
03:53:57,279 --> 03:54:02,000
bottom and because it's my first time

5681
03:53:59,359 --> 03:54:04,479
using cloud shell i'll get this prompt

5682
03:54:02,000 --> 03:54:06,799
quickly explaining an overview of what

5683
03:54:04,478 --> 03:54:09,198
cloud shell is and i'm going to simply

5684
03:54:06,799 --> 03:54:10,478
hit continue

5685
03:54:09,199 --> 03:54:13,279
and i'm going to make the terminal a

5686
03:54:10,478 --> 03:54:15,198
little bit bigger by dragging this line

5687
03:54:13,279 --> 03:54:17,520
up to the middle of the screen and so

5688
03:54:15,199 --> 03:54:19,279
when you start cloud shell it provisions

5689
03:54:17,520 --> 03:54:22,079
an e2 small

5690
03:54:19,279 --> 03:54:24,960
google compute engine instance running a

5691
03:54:22,079 --> 03:54:27,920
debian-based linux operating system now

5692
03:54:24,959 --> 03:54:30,079
this is an ephemeral pre-configured vm

5693
03:54:27,920 --> 03:54:33,040
and the environment you work with is a

5694
03:54:30,079 --> 03:54:35,520
docker container running on that vm

5695
03:54:33,040 --> 03:54:38,399
cloud shell instances are provisioned on

5696
03:54:35,520 --> 03:54:40,960
a per user per session basis the

5697
03:54:38,398 --> 03:54:43,680
instance persists while your cloud shell

5698
03:54:40,959 --> 03:54:46,398
session is active and after an hour of

5699
03:54:43,680 --> 03:54:48,720
inactivity your session terminates and

5700
03:54:46,398 --> 03:54:51,439
the vm is discarded you can also

5701
03:54:48,719 --> 03:54:53,840
customize your environment automatically

5702
03:54:51,439 --> 03:54:56,318
on boot time and it will allow you to

5703
03:54:53,840 --> 03:54:58,799
have your preferred tools when cloud

5704
03:54:56,318 --> 03:55:01,198
shell boots up so when your cloud shell

5705
03:54:58,799 --> 03:55:04,398
instance is provision it's provisioned

5706
03:55:01,199 --> 03:55:06,880
with 5 gigabytes of free persistent disk

5707
03:55:04,398 --> 03:55:09,039
storage and it's mounted at your home

5708
03:55:06,879 --> 03:55:11,198
directory on the virtual machine

5709
03:55:09,040 --> 03:55:14,479
instance and you can check your disk

5710
03:55:11,199 --> 03:55:17,920
storage by simply typing in the command

5711
03:55:14,478 --> 03:55:21,840
df minus h and here where it shows dev

5712
03:55:17,920 --> 03:55:25,120
disk by id google home part one it shows

5713
03:55:21,840 --> 03:55:27,680
here the size as 4.8 gigabytes and this

5714
03:55:25,120 --> 03:55:30,399
would be the persistent disk storage

5715
03:55:27,680 --> 03:55:32,639
that's mounted on your home directory

5716
03:55:30,398 --> 03:55:35,599
now if you've noticed it shows here that

5717
03:55:32,639 --> 03:55:38,478
i'm logged in as tony bowtie ace at

5718
03:55:35,600 --> 03:55:40,960
cloud shell and that my project id is

5719
03:55:38,478 --> 03:55:42,398
set at project tony so the great thing

5720
03:55:40,959 --> 03:55:43,919
about cloud shell

5721
03:55:42,398 --> 03:55:46,079
is that you're automatically

5722
03:55:43,920 --> 03:55:48,478
authenticated as the google account

5723
03:55:46,079 --> 03:55:51,439
you're logged in with so here you can

5724
03:55:48,478 --> 03:55:54,238
see i'm logged in as tony bowtie ace and

5725
03:55:51,439 --> 03:55:57,120
so picture it like running gcloud auth

5726
03:55:54,238 --> 03:55:59,520
login and specifying your google account

5727
03:55:57,120 --> 03:56:01,680
but without having to actually do it now

5728
03:55:59,520 --> 03:56:04,238
when the cloud shell is started the

5729
03:56:01,680 --> 03:56:07,279
active project in the console is

5730
03:56:04,238 --> 03:56:09,520
propagated to your gcloud configuration

5731
03:56:07,279 --> 03:56:13,120
inside cloud shell so as you can see

5732
03:56:09,520 --> 03:56:14,560
here my project is set at project tony

5733
03:56:13,120 --> 03:56:16,880
now if i wanted to change it to a

5734
03:56:14,559 --> 03:56:18,719
different project i could simply use the

5735
03:56:16,879 --> 03:56:21,839
command stated up here

5736
03:56:18,719 --> 03:56:24,238
gcloud config set project along with the

5737
03:56:21,840 --> 03:56:26,639
project id and this will change me to a

5738
03:56:24,238 --> 03:56:29,279
different project now behind the scenes

5739
03:56:26,639 --> 03:56:31,760
cloud shell is globally distributed

5740
03:56:29,279 --> 03:56:34,079
across multiple regions so when you

5741
03:56:31,760 --> 03:56:36,478
first connect to cloud shell you'll be

5742
03:56:34,079 --> 03:56:39,359
automatically assigned to the closest

5743
03:56:36,478 --> 03:56:42,000
available region and thus avoiding

5744
03:56:39,359 --> 03:56:44,238
any unnecessary latency you do not have

5745
03:56:42,000 --> 03:56:46,799
the option to choose your own region and

5746
03:56:44,238 --> 03:56:49,198
so cloud shell does that for you by

5747
03:56:46,799 --> 03:56:51,920
optimizing it to migrate to a closer

5748
03:56:49,199 --> 03:56:54,239
region whenever it can so if you're ever

5749
03:56:51,920 --> 03:56:55,840
curious where your cloud shell session

5750
03:56:54,238 --> 03:56:58,639
is currently active

5751
03:56:55,840 --> 03:57:02,238
you can simply type in this command

5752
03:56:58,639 --> 03:57:05,680
curl metadata slash compute metadata

5753
03:57:02,238 --> 03:57:06,398
slash version one slash instance slash

5754
03:57:05,680 --> 03:57:08,159
zone

5755
03:57:06,398 --> 03:57:11,039
and this will give me the zone where my

5756
03:57:08,159 --> 03:57:14,000
instance is located and as shown here it

5757
03:57:11,040 --> 03:57:16,160
is in us east 1b now as you've probably

5758
03:57:14,000 --> 03:57:18,079
been seeing every time i highlight

5759
03:57:16,159 --> 03:57:20,398
something that there is a picture of

5760
03:57:18,079 --> 03:57:23,120
scissors coming up the cloud shell has

5761
03:57:20,398 --> 03:57:25,039
some automated and available tools that

5762
03:57:23,120 --> 03:57:27,359
are built in and so one of those

5763
03:57:25,040 --> 03:57:29,040
available tools is that whenever i

5764
03:57:27,359 --> 03:57:31,359
highlight something it will

5765
03:57:29,040 --> 03:57:34,160
automatically copy it to the clipboard

5766
03:57:31,359 --> 03:57:36,880
for me cloud shell also has a bunch of

5767
03:57:34,159 --> 03:57:40,719
very powerful pre-installed tools that

5768
03:57:36,879 --> 03:57:42,478
come with it such as the cloud sdk bash

5769
03:57:40,719 --> 03:57:43,278
vim helm

5770
03:57:42,478 --> 03:57:46,559
git

5771
03:57:43,279 --> 03:57:48,800
docker and more as well cloud shell has

5772
03:57:46,559 --> 03:57:52,398
support for a lot of major different

5773
03:57:48,799 --> 03:57:54,959
programming languages like java go

5774
03:57:52,398 --> 03:57:57,519
python node.js

5775
03:57:54,959 --> 03:57:59,599
ruby and net core for those who run

5776
03:57:57,520 --> 03:58:02,720
windows now if you're looking for an

5777
03:57:59,600 --> 03:58:04,318
available tool that is not pre-installed

5778
03:58:02,719 --> 03:58:07,119
you can actually customize your

5779
03:58:04,318 --> 03:58:09,600
environment when your instance boots up

5780
03:58:07,120 --> 03:58:12,000
and automatically run a script that will

5781
03:58:09,600 --> 03:58:14,640
install the tool of your choice and the

5782
03:58:12,000 --> 03:58:17,120
script runs as root and you can install

5783
03:58:14,639 --> 03:58:19,358
any package that you please and so in

5784
03:58:17,120 --> 03:58:22,160
order for this environment customization

5785
03:58:19,359 --> 03:58:25,359
to work there needs to be a file labeled

5786
03:58:22,159 --> 03:58:28,238
as dot customize underscore environment

5787
03:58:25,359 --> 03:58:30,479
now if we do an ls here you can see that

5788
03:58:28,238 --> 03:58:34,639
all we have is the readme dash cloud

5789
03:58:30,478 --> 03:58:37,920
shell text file if we do ls space minus

5790
03:58:34,639 --> 03:58:40,238
al to show all the hidden files as well

5791
03:58:37,920 --> 03:58:42,238
you can see that the dot customize

5792
03:58:40,238 --> 03:58:44,959
underscore environment file does not

5793
03:58:42,238 --> 03:58:47,119
exist and this is because we need to

5794
03:58:44,959 --> 03:58:50,318
create it ourselves and so for this

5795
03:58:47,120 --> 03:58:53,680
example i want terraform installed as an

5796
03:58:50,318 --> 03:58:56,318
available tool when my instance boots up

5797
03:58:53,680 --> 03:58:58,479
and so i have to create this file so i'm

5798
03:58:56,318 --> 03:59:01,039
going to do so by using the touch

5799
03:58:58,478 --> 03:59:02,639
command and then the name of the file

5800
03:59:01,040 --> 03:59:06,000
dot customize

5801
03:59:02,639 --> 03:59:09,599
underscore environment hit enter and if

5802
03:59:06,000 --> 03:59:12,478
i clear the screen and do another ls

5803
03:59:09,600 --> 03:59:15,279
space minus al i can see that my dot

5804
03:59:12,478 --> 03:59:17,438
customize underscore environment file

5805
03:59:15,279 --> 03:59:20,079
has been created and so now i'm going to

5806
03:59:17,439 --> 03:59:22,318
need the script to install terraform

5807
03:59:20,079 --> 03:59:25,120
which means i would have to edit it and

5808
03:59:22,318 --> 03:59:27,600
so another great feature of cloud shell

5809
03:59:25,120 --> 03:59:29,920
is that it comes with a code editor and

5810
03:59:27,600 --> 03:59:32,318
i can do it one of two ways i can either

5811
03:59:29,920 --> 03:59:34,559
come up here and click on the open

5812
03:59:32,318 --> 03:59:37,600
editor button which will open up a new

5813
03:59:34,559 --> 03:59:39,680
tab or i can simply use the edit command

5814
03:59:37,600 --> 03:59:43,359
with the file name and i'm going to do

5815
03:59:39,680 --> 03:59:43,359
just that so edit

5816
03:59:43,600 --> 03:59:48,800
dot customize underscore environment and

5817
03:59:46,719 --> 03:59:51,358
i'm just going to hit enter and as you

5818
03:59:48,799 --> 03:59:53,920
can see i got a prompt saying that it's

5819
03:59:51,359 --> 03:59:56,640
unable to load the code editor and this

5820
03:59:53,920 --> 03:59:59,199
is because when using code editor you

5821
03:59:56,639 --> 04:00:01,599
need cookies enabled on your browser and

5822
03:59:59,199 --> 04:00:04,560
because i am using a private browser

5823
04:00:01,600 --> 04:00:07,040
session cookies are disabled and because

5824
04:00:04,559 --> 04:00:08,719
my cloud shell environment persists i'm

5825
04:00:07,040 --> 04:00:11,120
going to open up a regular browser

5826
04:00:08,719 --> 04:00:13,519
window and i'm going to continue where i

5827
04:00:11,120 --> 04:00:16,000
left off and so here i am back with a

5828
04:00:13,520 --> 04:00:18,560
new browser window again logged in as

5829
04:00:16,000 --> 04:00:20,559
tony bowtie ace and so just to show you

5830
04:00:18,559 --> 04:00:23,680
the persistence that happens in cloud

5831
04:00:20,559 --> 04:00:26,639
shell i'm going to run the command ls

5832
04:00:23,680 --> 04:00:29,600
space minus al and as you can see here

5833
04:00:26,639 --> 04:00:31,599
the customize environment is still here

5834
04:00:29,600 --> 04:00:34,479
and so again i wanted to install

5835
04:00:31,600 --> 04:00:36,559
terraform as an extra tool to have in my

5836
04:00:34,478 --> 04:00:39,519
environment and so i'm going to open up

5837
04:00:36,559 --> 04:00:42,238
the editor by typing in edit dot

5838
04:00:39,520 --> 04:00:44,159
customize underscore environment and i'm

5839
04:00:42,238 --> 04:00:46,000
going to hit enter and here is the

5840
04:00:44,159 --> 04:00:47,920
editor that popped up

5841
04:00:46,000 --> 04:00:50,639
as you can see here it's built with

5842
04:00:47,920 --> 04:00:52,879
eclipse thea and this is an open source

5843
04:00:50,639 --> 04:00:55,039
code editor that you can download from

5844
04:00:52,879 --> 04:00:57,759
eclipse and this is what the editor is

5845
04:00:55,040 --> 04:01:00,000
built on now this menu here on the left

5846
04:00:57,760 --> 04:01:02,238
i can make it a little bit bigger and

5847
04:01:00,000 --> 04:01:05,279
because the only viewable file on my

5848
04:01:02,238 --> 04:01:08,559
persistent disk is the readme cloud

5849
04:01:05,279 --> 04:01:11,120
shell dot text file i'm not able to see

5850
04:01:08,559 --> 04:01:13,359
my dot customize underscore environment

5851
04:01:11,120 --> 04:01:15,120
so in order to open it and edit it i'm

5852
04:01:13,359 --> 04:01:18,559
going to go to the menu at the top of

5853
04:01:15,120 --> 04:01:20,800
the editor and click on file open

5854
04:01:18,559 --> 04:01:22,398
and here i'll be able to select the file

5855
04:01:20,799 --> 04:01:24,959
that i need so i'm going to select

5856
04:01:22,398 --> 04:01:27,358
customize environment and click on open

5857
04:01:24,959 --> 04:01:29,679
and so i'm going to paste in my script

5858
04:01:27,359 --> 04:01:32,479
to install terraform and i'm just going

5859
04:01:29,680 --> 04:01:34,079
to paste in my script from my clipboard

5860
04:01:32,478 --> 04:01:36,398
and i'll be including the script in the

5861
04:01:34,079 --> 04:01:38,559
github repo for those of you who use

5862
04:01:36,398 --> 04:01:41,439
terraform and i'm going to move over to

5863
04:01:38,559 --> 04:01:44,159
the menu on the left click on file and

5864
04:01:41,439 --> 04:01:46,479
then hit save and so now in order for me

5865
04:01:44,159 --> 04:01:48,478
to allow this to work

5866
04:01:46,478 --> 04:01:50,799
the customize environment needs to be

5867
04:01:48,478 --> 04:01:53,198
loaded into my cloud shell so i'm going

5868
04:01:50,799 --> 04:01:55,679
to have to restart it and so in order to

5869
04:01:53,199 --> 04:01:57,840
accomplish this i'm going to move over

5870
04:01:55,680 --> 04:02:00,159
to the menu on the right i'm going to

5871
04:01:57,840 --> 04:02:02,159
click on the icon with the three dots

5872
04:02:00,159 --> 04:02:04,398
and click on restart and you'll be

5873
04:02:02,159 --> 04:02:06,879
presented with a prompt it's saying that

5874
04:02:04,398 --> 04:02:08,879
it will immediately terminate my session

5875
04:02:06,879 --> 04:02:11,599
and then a new vm will be provisioned

5876
04:02:08,879 --> 04:02:14,238
for me and you'll also be presented with

5877
04:02:11,600 --> 04:02:16,960
an optional response from google telling

5878
04:02:14,238 --> 04:02:19,680
them why you're restarting the vm and

5879
04:02:16,959 --> 04:02:21,599
this is merely for statistical purposes

5880
04:02:19,680 --> 04:02:23,279
so i'm going to click on restart and i'm

5881
04:02:21,600 --> 04:02:25,199
going to wait till a new cloud shell is

5882
04:02:23,279 --> 04:02:27,439
provisioned and my new cloud shell is

5883
04:02:25,199 --> 04:02:29,439
provisioned and up and running and so i

5884
04:02:27,439 --> 04:02:31,439
want to double check to see if terraform

5885
04:02:29,439 --> 04:02:33,920
has been installed so i'm going to go

5886
04:02:31,439 --> 04:02:35,920
over here to the open terminal button on

5887
04:02:33,920 --> 04:02:37,680
the right hand side toolbar and i'm

5888
04:02:35,920 --> 04:02:39,680
going to move back to my terminal and

5889
04:02:37,680 --> 04:02:42,479
i'm going to simply run the command

5890
04:02:39,680 --> 04:02:44,479
terraform dash dash version

5891
04:02:42,478 --> 04:02:46,679
and so it looks like terraform has been

5892
04:02:44,478 --> 04:02:49,519
installed and as you can see i'm running

5893
04:02:46,680 --> 04:02:51,520
version.12 but it says my terraform

5894
04:02:49,520 --> 04:02:54,800
version is out of date and that the

5895
04:02:51,520 --> 04:02:56,479
latest version is dot 13. and so because

5896
04:02:54,799 --> 04:02:59,198
i really want to be up to date with

5897
04:02:56,478 --> 04:03:01,920
terraform i want to be able to go into

5898
04:02:59,199 --> 04:03:04,640
my customize environment file and edit

5899
04:03:01,920 --> 04:03:07,079
my version of terraform so that when my

5900
04:03:04,639 --> 04:03:09,760
cloud shell is initiated

5901
04:03:07,079 --> 04:03:12,478
terraform.13 can be installed and so i'm

5902
04:03:09,760 --> 04:03:15,520
going to simply type in the command edit

5903
04:03:12,478 --> 04:03:17,679
dot customize underscore environment and

5904
04:03:15,520 --> 04:03:20,720
i'm back to my editor and i'm going to

5905
04:03:17,680 --> 04:03:23,600
change the terraform version from dot 12

5906
04:03:20,719 --> 04:03:26,639
to dot 13 and then go over here to the

5907
04:03:23,600 --> 04:03:29,279
left-hand menu click on file and then

5908
04:03:26,639 --> 04:03:31,039
save and now i'm going to restart my

5909
04:03:29,279 --> 04:03:32,720
machine again

5910
04:03:31,040 --> 04:03:35,279
and come back when it's fully

5911
04:03:32,719 --> 04:03:37,198
provisioned and i'm back again my

5912
04:03:35,279 --> 04:03:39,120
machine has been provisioned and i'm

5913
04:03:37,199 --> 04:03:41,439
going to go back to my terminal by

5914
04:03:39,120 --> 04:03:43,920
clicking on the open terminal button and

5915
04:03:41,439 --> 04:03:46,960
so i'm going to type in the command

5916
04:03:43,920 --> 04:03:49,920
terraform dash dash version and as you

5917
04:03:46,959 --> 04:03:51,839
can see i'm at version dot 13 and i'm

5918
04:03:49,920 --> 04:03:54,000
going to run a simple terraform command

5919
04:03:51,840 --> 04:03:56,799
to see if it's working and as you can

5920
04:03:54,000 --> 04:03:59,120
see i am successful in running terraform

5921
04:03:56,799 --> 04:04:02,318
on cloud shell now customizing the

5922
04:03:59,120 --> 04:04:04,880
environment is not on the exam but it is

5923
04:04:02,318 --> 04:04:07,278
such an amazing feature that i wanted to

5924
04:04:04,879 --> 04:04:09,599
highlight it for you with a real world

5925
04:04:07,279 --> 04:04:11,359
example like terraform in case you're

5926
04:04:09,600 --> 04:04:13,439
away from your computer

5927
04:04:11,359 --> 04:04:16,479
and you're logged into a browser and you

5928
04:04:13,439 --> 04:04:19,199
need some special tools to use in cloud

5929
04:04:16,478 --> 04:04:22,559
shell this is the best way to do it now

5930
04:04:19,199 --> 04:04:25,040
as i mentioned before the cloud sdk is

5931
04:04:22,559 --> 04:04:27,359
pre-installed on this and so everything

5932
04:04:25,040 --> 04:04:30,399
that i've showed you in the last lesson

5933
04:04:27,359 --> 04:04:32,800
with regards to cloud sdk can be done in

5934
04:04:30,398 --> 04:04:34,959
the cloud shell as well so if i run the

5935
04:04:32,799 --> 04:04:38,000
command gcloud

5936
04:04:34,959 --> 04:04:40,238
beta interactive i'd be able to bring up

5937
04:04:38,000 --> 04:04:42,799
the interactive cloud shell and i'll be

5938
04:04:40,238 --> 04:04:44,959
able to run the same commands so now if

5939
04:04:42,799 --> 04:04:48,238
i go ahead and run the command

5940
04:04:44,959 --> 04:04:50,639
gcloud components list i'll be able to

5941
04:04:48,238 --> 04:04:52,639
see all the components installed and as

5942
04:04:50,639 --> 04:04:54,959
you can see with the cloud shell there

5943
04:04:52,639 --> 04:04:56,719
are more components installed than

5944
04:04:54,959 --> 04:05:00,000
what's installed on the default

5945
04:04:56,719 --> 04:05:03,438
installation of the sdk i can also run

5946
04:05:00,000 --> 04:05:04,959
the gcloud config list command to see

5947
04:05:03,439 --> 04:05:07,279
all the properties in my active

5948
04:05:04,959 --> 04:05:10,559
configuration and so this goes to show

5949
04:05:07,279 --> 04:05:13,600
you that the sdk installation that's on

5950
04:05:10,559 --> 04:05:15,359
cloud shell is just as capable as the

5951
04:05:13,600 --> 04:05:17,600
one that you've installed on your

5952
04:05:15,359 --> 04:05:20,159
computer the only difference here is

5953
04:05:17,600 --> 04:05:22,960
that the sdk along with all the other

5954
04:05:20,159 --> 04:05:25,680
tools that come installed in cloud shell

5955
04:05:22,959 --> 04:05:27,919
is updated every week and so you can

5956
04:05:25,680 --> 04:05:30,000
always depend that they're up to date

5957
04:05:27,920 --> 04:05:32,478
and so moving on to a few more features

5958
04:05:30,000 --> 04:05:33,760
of cloud shell i wanted to point out the

5959
04:05:32,478 --> 04:05:36,000
obvious ones

5960
04:05:33,760 --> 04:05:38,800
up here in the cloud shell toolbar right

5961
04:05:36,000 --> 04:05:41,279
beside the open terminal i can open

5962
04:05:38,799 --> 04:05:42,398
brand new tabs opening up different

5963
04:05:41,279 --> 04:05:44,479
projects

5964
04:05:42,398 --> 04:05:46,719
or even the same project

5965
04:05:44,478 --> 04:05:48,639
but just a different terminal and moving

5966
04:05:46,719 --> 04:05:52,159
over to the right hand menu of cloud

5967
04:05:48,639 --> 04:05:54,799
shell this keyboard icon can send key

5968
04:05:52,159 --> 04:05:57,119
combinations that you would normally not

5969
04:05:54,799 --> 04:05:59,759
have access to moving on to the gear

5970
04:05:57,120 --> 04:06:01,120
icon with this you're able to change

5971
04:05:59,760 --> 04:06:02,880
your preferences

5972
04:06:01,120 --> 04:06:05,199
and looking at the first item on the

5973
04:06:02,879 --> 04:06:07,358
list when it comes to color themes you

5974
04:06:05,199 --> 04:06:10,079
can go from a dark theme to a light

5975
04:06:07,359 --> 04:06:13,760
theme or if you prefer a different color

5976
04:06:10,079 --> 04:06:16,639
in my case i prefer the dark theme

5977
04:06:13,760 --> 04:06:21,040
as well you have the options of changing

5978
04:06:16,639 --> 04:06:23,039
your text size we can go to largest

5979
04:06:21,040 --> 04:06:25,520
but i think we'll just keep things back

5980
04:06:23,040 --> 04:06:26,479
down to medium and as well

5981
04:06:25,520 --> 04:06:29,359
we have

5982
04:06:26,478 --> 04:06:31,438
the different fonts the copy settings

5983
04:06:29,359 --> 04:06:33,600
from which i showed you earlier as well

5984
04:06:31,439 --> 04:06:35,600
as keyboard preferences you also have

5985
04:06:33,600 --> 04:06:38,079
the option of showing your scroll bar

5986
04:06:35,600 --> 04:06:39,279
now moving on to this icon right beside

5987
04:06:38,079 --> 04:06:41,920
the gear

5988
04:06:39,279 --> 04:06:44,399
is the web preview button and so the web

5989
04:06:41,920 --> 04:06:47,439
preview button is designed so that you

5990
04:06:44,398 --> 04:06:51,119
can run any web application that listens

5991
04:06:47,439 --> 04:06:53,760
to http requests on the cloud shell and

5992
04:06:51,120 --> 04:06:56,479
be able to view it in a new web browser

5993
04:06:53,760 --> 04:06:59,040
tab when running these web applications

5994
04:06:56,478 --> 04:07:01,358
web preview also supports applications

5995
04:06:59,040 --> 04:07:04,080
run in app engine now mind you these

5996
04:07:01,359 --> 04:07:06,479
ports are only available to the secure

5997
04:07:04,079 --> 04:07:10,799
cloud shell proxy service which

5998
04:07:06,478 --> 04:07:13,599
restricts access over https to your user

5999
04:07:10,799 --> 04:07:17,039
account only and so to demonstrate this

6000
04:07:13,600 --> 04:07:20,399
feature i am going to run a simple http

6001
04:07:17,040 --> 04:07:22,239
server running a hello world page so

6002
04:07:20,398 --> 04:07:24,478
first i'm going to clear my screen and

6003
04:07:22,238 --> 04:07:26,799
then i'm going to exit the interactive

6004
04:07:24,478 --> 04:07:29,198
shell and again i'm going to paste in

6005
04:07:26,799 --> 04:07:32,478
for my clipboard a simple script that

6006
04:07:29,199 --> 04:07:35,040
will run my simple http server and as

6007
04:07:32,478 --> 04:07:37,119
you can see it's running on port 8080

6008
04:07:35,040 --> 04:07:39,520
and now i'm able to click on the web

6009
04:07:37,120 --> 04:07:41,600
preview button and i'm able to preview

6010
04:07:39,520 --> 04:07:44,000
it on port 8080

6011
04:07:41,600 --> 04:07:47,120
and a new web browser tab will open up

6012
04:07:44,000 --> 04:07:49,600
and here i'll see my hello world page

6013
04:07:47,120 --> 04:07:51,680
now this is just a simple example and so

6014
04:07:49,600 --> 04:07:53,680
i'm sure that many of you can find great

6015
04:07:51,680 --> 04:07:57,279
use for this and so i'm going to stop

6016
04:07:53,680 --> 04:08:00,000
this http server now by hitting ctrl c

6017
04:07:57,279 --> 04:08:02,880
and just as a quick note web preview can

6018
04:08:00,000 --> 04:08:04,559
also run on a different port anywhere

6019
04:08:02,879 --> 04:08:07,438
from port 2000

6020
04:08:04,559 --> 04:08:09,198
all the way up to 65 000. now moving on

6021
04:08:07,439 --> 04:08:11,120
to the rest of the features

6022
04:08:09,199 --> 04:08:14,000
hitting on the more button here with the

6023
04:08:11,120 --> 04:08:16,479
three dots starting from the top we

6024
04:08:14,000 --> 04:08:18,879
covered restart earlier when we had to

6025
04:08:16,478 --> 04:08:22,000
restart our cloud shell you're able to

6026
04:08:18,879 --> 04:08:24,398
both upload and download a file within

6027
04:08:22,000 --> 04:08:26,318
cloud shell when the demands are needed

6028
04:08:24,398 --> 04:08:29,358
as well if i have a misconfigured

6029
04:08:26,318 --> 04:08:32,000
configuration i can boot into safe mode

6030
04:08:29,359 --> 04:08:34,640
and fix the issue instead of having to

6031
04:08:32,000 --> 04:08:37,120
start from scratch again moving on to

6032
04:08:34,639 --> 04:08:39,920
boost cloud shell also known as boost

6033
04:08:37,120 --> 04:08:43,760
mode is a feature that increases your

6034
04:08:39,920 --> 04:08:46,879
cloud shell vm from the default e2 small

6035
04:08:43,760 --> 04:08:50,559
to an e2 medium so in essence a memory

6036
04:08:46,879 --> 04:08:52,719
bump from 2 gigabytes to 4 gigabytes and

6037
04:08:50,559 --> 04:08:55,840
once it's activated all your sessions

6038
04:08:52,719 --> 04:08:57,599
will be boosted for the next 24 hours

6039
04:08:55,840 --> 04:09:00,158
and just as a quick note

6040
04:08:57,600 --> 04:09:02,479
enabling boost mode restarts your cloud

6041
04:09:00,158 --> 04:09:04,959
shell and immediately terminates your

6042
04:09:02,478 --> 04:09:07,519
session but don't worry the data in your

6043
04:09:04,959 --> 04:09:09,599
home directory will persist but any of

6044
04:09:07,520 --> 04:09:12,720
the processes that you are running will

6045
04:09:09,600 --> 04:09:16,000
be lost now when it comes to usage quota

6046
04:09:12,719 --> 04:09:18,559
cloud shell has a 50 hour weekly usage

6047
04:09:16,000 --> 04:09:20,799
limit so if you reach your usage limit

6048
04:09:18,559 --> 04:09:23,680
you'll need to wait until your quota is

6049
04:09:20,799 --> 04:09:25,840
reset before you can use cloud shell

6050
04:09:23,680 --> 04:09:28,479
again so it's always good to keep your

6051
04:09:25,840 --> 04:09:30,559
eyes on this in case you're a heavy user

6052
04:09:28,478 --> 04:09:32,879
of cloud shell

6053
04:09:30,559 --> 04:09:35,119
and moving back to the menu again you

6054
04:09:32,879 --> 04:09:37,358
have your usage statistics which

6055
04:09:35,120 --> 04:09:39,680
collects statistics on commands that

6056
04:09:37,359 --> 04:09:41,279
come pre-installed in the vm and you can

6057
04:09:39,680 --> 04:09:43,840
turn them on or off

6058
04:09:41,279 --> 04:09:46,319
and as well help for cloud shell is

6059
04:09:43,840 --> 04:09:49,199
available here as well if you wanted to

6060
04:09:46,318 --> 04:09:51,600
give feedback to the google cloud team

6061
04:09:49,199 --> 04:09:53,920
with regards to cloud shell this is the

6062
04:09:51,600 --> 04:09:55,760
place to do it and so one last thing

6063
04:09:53,920 --> 04:09:58,478
about cloud shell before we end this

6064
04:09:55,760 --> 04:10:02,478
demo is that if you do not access cloud

6065
04:09:58,478 --> 04:10:04,799
shell for 120 days your home disk will

6066
04:10:02,478 --> 04:10:07,198
be deleted now don't worry you'll

6067
04:10:04,799 --> 04:10:10,000
receive an email notification before its

6068
04:10:07,199 --> 04:10:12,319
deletion and if you just log in and

6069
04:10:10,000 --> 04:10:14,799
start up a session you'll prevent it

6070
04:10:12,318 --> 04:10:17,680
being removed now moving ahead in this

6071
04:10:14,799 --> 04:10:20,158
course i will be using cloud shell quite

6072
04:10:17,680 --> 04:10:23,040
a bit and so feel free to use either

6073
04:10:20,158 --> 04:10:25,520
cloud shell or the cloud sdk installed

6074
04:10:23,040 --> 04:10:28,080
on your computer or feel free to follow

6075
04:10:25,520 --> 04:10:30,399
along with me in the cloud shell within

6076
04:10:28,079 --> 04:10:32,879
your google cloud environment and so if

6077
04:10:30,398 --> 04:10:35,119
you are following along please make sure

6078
04:10:32,879 --> 04:10:37,519
that you keep an eye on your quota and

6079
04:10:35,120 --> 04:10:40,319
so i hope this demonstration has given

6080
04:10:37,520 --> 04:10:42,560
you some really good insight as to what

6081
04:10:40,318 --> 04:10:44,959
you can do with cloud shell and its

6082
04:10:42,559 --> 04:10:46,398
limitations and so that's pretty much

6083
04:10:44,959 --> 04:10:48,799
all i wanted to cover in this

6084
04:10:46,398 --> 04:10:51,198
demonstration of cloud shell so you can

6085
04:10:48,799 --> 04:10:52,699
now mark this as complete and let's move

6086
04:10:51,199 --> 04:11:00,479
on to the next one

6087
04:10:52,700 --> 04:11:02,720
[Music]

6088
04:11:00,478 --> 04:11:05,119
welcome back in this lesson and

6089
04:11:02,719 --> 04:11:07,840
demonstration i am going to go over

6090
04:11:05,120 --> 04:11:11,120
limits and quotas and how they affect

6091
04:11:07,840 --> 04:11:13,439
your cloud usage within google cloud i'm

6092
04:11:11,120 --> 04:11:16,159
going to quickly go over some theory

6093
04:11:13,439 --> 04:11:18,840
followed by a demonstration on where to

6094
04:11:16,158 --> 04:11:21,840
find the quotas and how to edit them

6095
04:11:18,840 --> 04:11:24,880
accordingly so google cloud enforces

6096
04:11:21,840 --> 04:11:25,840
quotas on resource usage for project

6097
04:11:24,879 --> 04:11:28,879
owners

6098
04:11:25,840 --> 04:11:31,680
setting a hard limit on how much of a

6099
04:11:28,879 --> 04:11:34,398
particular google cloud resource your

6100
04:11:31,680 --> 04:11:37,120
project can use and so there are two

6101
04:11:34,398 --> 04:11:40,318
types of resource usage that google

6102
04:11:37,120 --> 04:11:44,000
limits with quota the first one is rate

6103
04:11:40,318 --> 04:11:47,920
quota such as api requests per day this

6104
04:11:44,000 --> 04:11:51,439
quota resets after a specified time such

6105
04:11:47,920 --> 04:11:53,120
as a minute or a day the second one is

6106
04:11:51,439 --> 04:11:55,199
allocation quota

6107
04:11:53,120 --> 04:11:57,920
an example is the number of virtual

6108
04:11:55,199 --> 04:11:59,040
machines or load balancers used by your

6109
04:11:57,920 --> 04:12:02,318
project

6110
04:11:59,040 --> 04:12:05,520
and this quota does not reset over time

6111
04:12:02,318 --> 04:12:08,238
but must be explicitly released when you

6112
04:12:05,520 --> 04:12:12,399
no longer want to use the resource

6113
04:12:08,238 --> 04:12:15,279
for example by deleting a gke cluster

6114
04:12:12,398 --> 04:12:16,398
now quotas are enforced for a variety of

6115
04:12:15,279 --> 04:12:19,199
reasons

6116
04:12:16,398 --> 04:12:22,719
for example they protect other google

6117
04:12:19,199 --> 04:12:24,158
cloud users by preventing unforeseen

6118
04:12:22,719 --> 04:12:26,318
usage spikes

6119
04:12:24,158 --> 04:12:28,478
quotas also help with resource

6120
04:12:26,318 --> 04:12:31,198
management so you can set your own

6121
04:12:28,478 --> 04:12:33,760
limits on service usage within your

6122
04:12:31,199 --> 04:12:35,040
quota while developing and testing your

6123
04:12:33,760 --> 04:12:38,559
applications

6124
04:12:35,040 --> 04:12:41,760
each quota limit is expressed in terms

6125
04:12:38,559 --> 04:12:45,439
of a particular countable resource from

6126
04:12:41,760 --> 04:12:47,439
requests per day to an api to the number

6127
04:12:45,439 --> 04:12:50,000
of load balancers used by your

6128
04:12:47,439 --> 04:12:53,279
application not all projects have the

6129
04:12:50,000 --> 04:12:55,920
same quotas for the same services and so

6130
04:12:53,279 --> 04:12:59,120
using this free trial account you may

6131
04:12:55,920 --> 04:13:01,680
have very limited quota compared to a

6132
04:12:59,120 --> 04:13:04,399
higher quota on a regular account as

6133
04:13:01,680 --> 04:13:06,800
well with your use of google cloud over

6134
04:13:04,398 --> 04:13:09,519
time your quotas may increase

6135
04:13:06,799 --> 04:13:12,238
accordingly and so you can also request

6136
04:13:09,520 --> 04:13:14,238
more quota if you need it and set up

6137
04:13:12,238 --> 04:13:16,879
monitoring and alerts

6138
04:13:14,238 --> 04:13:19,680
and cloud monitoring to warn you about

6139
04:13:16,879 --> 04:13:22,079
unusual quota usage behavior or when

6140
04:13:19,680 --> 04:13:24,479
you're actually running out of quota now

6141
04:13:22,079 --> 04:13:26,398
in addition to viewing basic quota

6142
04:13:24,478 --> 04:13:28,879
information in the console

6143
04:13:26,398 --> 04:13:30,000
google cloud lets you monitor quota

6144
04:13:28,879 --> 04:13:33,519
usage

6145
04:13:30,000 --> 04:13:37,520
limits and errors in greater depth using

6146
04:13:33,520 --> 04:13:40,079
the cloud monitoring api and ui along

6147
04:13:37,520 --> 04:13:42,720
with quota metrics appearing in the

6148
04:13:40,079 --> 04:13:45,680
metrics explorer you can then use these

6149
04:13:42,719 --> 04:13:46,959
metrics to create custom dashboards and

6150
04:13:45,680 --> 04:13:49,439
alerts

6151
04:13:46,959 --> 04:13:50,318
letting you monitor quota usage over

6152
04:13:49,439 --> 04:13:53,600
time

6153
04:13:50,318 --> 04:13:56,000
and receive alerts when for example

6154
04:13:53,600 --> 04:13:58,800
you're near a quota limit only your

6155
04:13:56,000 --> 04:14:01,279
services that support quota metrics are

6156
04:13:58,799 --> 04:14:04,398
displayed and so popular supported

6157
04:14:01,279 --> 04:14:05,600
services include compute engine

6158
04:14:04,398 --> 04:14:08,478
data flow

6159
04:14:05,600 --> 04:14:10,559
cloud spanner cloud monitoring and cloud

6160
04:14:08,478 --> 04:14:13,438
logging common services that are not

6161
04:14:10,559 --> 04:14:17,039
supported include app engine cloud

6162
04:14:13,439 --> 04:14:19,840
storage and cloud sql now as a note be

6163
04:14:17,040 --> 04:14:20,880
aware that quota limits are updated once

6164
04:14:19,840 --> 04:14:23,920
a day

6165
04:14:20,879 --> 04:14:26,398
and hence new limits may take up to 24

6166
04:14:23,920 --> 04:14:29,120
hours to be reflected in the google

6167
04:14:26,398 --> 04:14:32,079
cloud console if your project exceeds a

6168
04:14:29,120 --> 04:14:35,359
particular quota while using a service

6169
04:14:32,079 --> 04:14:36,398
the platform will return an error

6170
04:14:35,359 --> 04:14:40,158
in general

6171
04:14:36,398 --> 04:14:45,358
google cloud will return an http

6172
04:14:40,158 --> 04:14:48,079
429 error code if you're using http or

6173
04:14:45,359 --> 04:14:51,439
rest to access the service

6174
04:14:48,079 --> 04:14:54,639
or resource exhausted if you're using

6175
04:14:51,439 --> 04:14:56,960
grpc if you're using cloud monitoring

6176
04:14:54,639 --> 04:14:59,278
you can use it to identify the quota

6177
04:14:56,959 --> 04:15:01,759
associated with the error

6178
04:14:59,279 --> 04:15:04,079
and then create custom alerts upon

6179
04:15:01,760 --> 04:15:07,279
getting a quota error and we will be

6180
04:15:04,079 --> 04:15:10,000
going into greater depth with regards to

6181
04:15:07,279 --> 04:15:12,238
monitoring later on in the course now

6182
04:15:10,000 --> 04:15:15,279
there are two ways to view your current

6183
04:15:12,238 --> 04:15:18,238
quota limits in the google cloud console

6184
04:15:15,279 --> 04:15:20,479
the first is using the quotas page which

6185
04:15:18,238 --> 04:15:23,600
gives you a list of all of your

6186
04:15:20,478 --> 04:15:27,278
project's quota usage and limits the

6187
04:15:23,600 --> 04:15:29,680
second is using the api dashboard which

6188
04:15:27,279 --> 04:15:31,680
gives you the quota information for a

6189
04:15:29,680 --> 04:15:35,199
particular api

6190
04:15:31,680 --> 04:15:37,680
including resource usage over time quota

6191
04:15:35,199 --> 04:15:39,840
limits are also accessible

6192
04:15:37,680 --> 04:15:43,040
programmatically through the service

6193
04:15:39,840 --> 04:15:45,439
usage api and so let's head into the

6194
04:15:43,040 --> 04:15:46,800
console where i will provide a

6195
04:15:45,439 --> 04:15:48,880
demonstration

6196
04:15:46,799 --> 04:15:50,959
on where to look for quotas

6197
04:15:48,879 --> 04:15:51,920
and how to increase them when you need

6198
04:15:50,959 --> 04:15:54,238
to

6199
04:15:51,920 --> 04:15:56,318
and so here we are back in the console

6200
04:15:54,238 --> 04:15:59,520
and so as i explained before there are

6201
04:15:56,318 --> 04:16:00,398
two main ways to view your current quota

6202
04:15:59,520 --> 04:16:02,640
limits

6203
04:16:00,398 --> 04:16:05,278
in the console and so the first one is

6204
04:16:02,639 --> 04:16:07,840
using the quotas page and so in order to

6205
04:16:05,279 --> 04:16:10,560
get to the quotas page i need to go to

6206
04:16:07,840 --> 04:16:12,880
iam so i'm going to do that now by going

6207
04:16:10,559 --> 04:16:14,398
up to the navigation menu in the top

6208
04:16:12,879 --> 04:16:16,799
left hand corner

6209
04:16:14,398 --> 04:16:19,840
i'm going to go to i am and admin and

6210
04:16:16,799 --> 04:16:22,799
over to quotas

6211
04:16:19,840 --> 04:16:25,760
and so here i am shown all the quotas of

6212
04:16:22,799 --> 04:16:28,719
the current apis that i have enabled as

6213
04:16:25,760 --> 04:16:30,238
you can see here it shows me the service

6214
04:16:28,719 --> 04:16:33,679
the limit name

6215
04:16:30,238 --> 04:16:36,158
the quota status and the details in this

6216
04:16:33,680 --> 04:16:38,559
panel here on the right hand side shows

6217
04:16:36,158 --> 04:16:40,879
me a little bit more information with

6218
04:16:38,559 --> 04:16:43,519
regards to the service and the quota

6219
04:16:40,879 --> 04:16:46,478
itself and so let's say i wanted to

6220
04:16:43,520 --> 04:16:47,680
increase my quota on the compute engine

6221
04:16:46,478 --> 04:16:50,318
api

6222
04:16:47,680 --> 04:16:52,720
within networks so i'm going to select

6223
04:16:50,318 --> 04:16:55,278
this service and over here on the right

6224
04:16:52,719 --> 04:16:57,519
hand panel i'm going to tick the box

6225
04:16:55,279 --> 04:17:00,238
that says global and i'm going to go

6226
04:16:57,520 --> 04:17:02,640
back over here to the top left

6227
04:17:00,238 --> 04:17:05,600
and click on the edit quotas button and

6228
04:17:02,639 --> 04:17:07,680
a panel will pop up and i am prompted to

6229
04:17:05,600 --> 04:17:10,318
enter a new quota limit

6230
04:17:07,680 --> 04:17:12,720
along with a description explaining to

6231
04:17:10,318 --> 04:17:15,119
google why i need this quota limit

6232
04:17:12,719 --> 04:17:16,238
increase and so once i've completed my

6233
04:17:15,120 --> 04:17:18,880
request

6234
04:17:16,238 --> 04:17:21,760
i can click on done and then submit

6235
04:17:18,879 --> 04:17:24,318
request and like i said before once the

6236
04:17:21,760 --> 04:17:26,719
request has been submitted it will go to

6237
04:17:24,318 --> 04:17:29,600
somebody at google to evaluate the

6238
04:17:26,719 --> 04:17:32,478
requests for approval and don't worry

6239
04:17:29,600 --> 04:17:35,359
these quota limit increases are usually

6240
04:17:32,478 --> 04:17:38,559
approved within two business days and

6241
04:17:35,359 --> 04:17:40,960
can often times be sooner than that also

6242
04:17:38,559 --> 04:17:44,639
a great way to enter multiple quota

6243
04:17:40,959 --> 04:17:46,879
changes is to click on the selected apis

6244
04:17:44,639 --> 04:17:49,439
let's do bigquery api

6245
04:17:46,879 --> 04:17:51,920
and cloud data store api and so i've

6246
04:17:49,439 --> 04:17:54,238
clicked off three and now i can go back

6247
04:17:51,920 --> 04:17:56,478
up to the top and click on the edit

6248
04:17:54,238 --> 04:18:00,478
quotas button and as you can see in the

6249
04:17:56,478 --> 04:18:03,438
panel i have all three apis that i want

6250
04:18:00,478 --> 04:18:06,959
to increase my quotas on so i can enter

6251
04:18:03,439 --> 04:18:09,359
all my new limit requests for each api

6252
04:18:06,959 --> 04:18:11,919
and then i can submit it as a bulk

6253
04:18:09,359 --> 04:18:14,318
request with all my new quota limit

6254
04:18:11,920 --> 04:18:16,158
changes and so doing it this way would

6255
04:18:14,318 --> 04:18:18,719
increase the efficiency

6256
04:18:16,158 --> 04:18:21,760
instead of increasing the quotas for

6257
04:18:18,719 --> 04:18:24,318
each service one by one and because i'm

6258
04:18:21,760 --> 04:18:26,800
not going to submit any quota changes

6259
04:18:24,318 --> 04:18:29,359
i'm going to close this panel and so

6260
04:18:26,799 --> 04:18:31,759
again using the quotas page will give

6261
04:18:29,359 --> 04:18:34,880
you a list of all your project quota

6262
04:18:31,760 --> 04:18:37,439
usage and its limits and allow you to

6263
04:18:34,879 --> 04:18:39,358
request changes accordingly and so now

6264
04:18:37,439 --> 04:18:41,840
moving on to the second way which you

6265
04:18:39,359 --> 04:18:44,399
can view your current quota limits i'm

6266
04:18:41,840 --> 04:18:46,719
going to go to the api dashboard which

6267
04:18:44,398 --> 04:18:49,599
will give me a more granular view

6268
04:18:46,719 --> 04:18:51,519
including the resource usage over time

6269
04:18:49,600 --> 04:18:54,000
so to get there i'm going to go back up

6270
04:18:51,520 --> 04:18:56,319
to the left hand side to the navigation

6271
04:18:54,000 --> 04:19:00,079
menu i'm going to go to apis and

6272
04:18:56,318 --> 04:19:02,238
services and click on dashboard

6273
04:19:00,079 --> 04:19:05,120
and here i will see all the names of the

6274
04:19:02,238 --> 04:19:08,559
apis and i'm going to click on compute

6275
04:19:05,120 --> 04:19:11,040
engine api for this demonstration

6276
04:19:08,559 --> 04:19:12,879
and over here on the left hand menu you

6277
04:19:11,040 --> 04:19:15,600
will see quotas

6278
04:19:12,879 --> 04:19:18,079
and in here as i said before

6279
04:19:15,600 --> 04:19:21,600
you can get some really granular data

6280
04:19:18,079 --> 04:19:23,920
with regards to queries read requests

6281
04:19:21,600 --> 04:19:26,158
list requests and a whole bunch of other

6282
04:19:23,920 --> 04:19:28,879
requests i'm going to drill down into

6283
04:19:26,158 --> 04:19:32,318
queries here and i can see my queries

6284
04:19:28,879 --> 04:19:35,278
per day per 100 seconds per user and per

6285
04:19:32,318 --> 04:19:38,398
100 seconds and i can see here that my

6286
04:19:35,279 --> 04:19:41,040
queries per 100 seconds is at a limit of

6287
04:19:38,398 --> 04:19:43,519
2 000 so if i wanted to increase that

6288
04:19:41,040 --> 04:19:44,560
limit i can simply click on the pencil

6289
04:19:43,520 --> 04:19:47,199
icon

6290
04:19:44,559 --> 04:19:50,079
and a panel on the right hand side will

6291
04:19:47,199 --> 04:19:52,800
prompt me to enter a new quota limit but

6292
04:19:50,079 --> 04:19:55,760
i currently see that my quota limit is

6293
04:19:52,799 --> 04:19:58,398
at its maximum and that i need to apply

6294
04:19:55,760 --> 04:20:01,680
for a higher quota so when i click on

6295
04:19:58,398 --> 04:20:04,959
the link it will bring me back to my iam

6296
04:20:01,680 --> 04:20:07,279
page where my services are filtered and

6297
04:20:04,959 --> 04:20:10,318
i can easily find the service that i was

6298
04:20:07,279 --> 04:20:12,800
looking at to raise my quota limit and i

6299
04:20:10,318 --> 04:20:15,680
can increase the quota by checking off

6300
04:20:12,799 --> 04:20:18,238
this box and clicking on the edit quotas

6301
04:20:15,680 --> 04:20:21,279
button at the top of the page and so as

6302
04:20:18,238 --> 04:20:24,879
you can see the quotas page as well as

6303
04:20:21,279 --> 04:20:27,760
the api dashboard work in tandem so that

6304
04:20:24,879 --> 04:20:30,879
you can get all the information you need

6305
04:20:27,760 --> 04:20:33,359
with regards to quotas and limits and to

6306
04:20:30,879 --> 04:20:36,398
edit them accordingly and so i hope this

6307
04:20:33,359 --> 04:20:37,520
gave you a good idea and some great

6308
04:20:36,398 --> 04:20:40,639
insight

6309
04:20:37,520 --> 04:20:42,960
on how you can view and edit your quotas

6310
04:20:40,639 --> 04:20:45,358
and quota limits according to the

6311
04:20:42,959 --> 04:20:48,398
resources you use and so that about

6312
04:20:45,359 --> 04:20:51,279
wraps up this brief yet important demo

6313
04:20:48,398 --> 04:20:53,519
on limits and quotas so you can now mark

6314
04:20:51,279 --> 04:20:54,860
this as complete and let's move on to

6315
04:20:53,520 --> 04:20:58,720
the next section

6316
04:20:54,860 --> 04:21:00,000
[Music]

6317
04:20:58,719 --> 04:21:02,079
welcome back

6318
04:21:00,000 --> 04:21:04,559
and in this section we're going to be

6319
04:21:02,079 --> 04:21:08,158
going through in my opinion one of the

6320
04:21:04,559 --> 04:21:11,039
most important services in google cloud

6321
04:21:08,158 --> 04:21:14,079
identity and access management also

6322
04:21:11,040 --> 04:21:17,199
known as iam for short and i'll be

6323
04:21:14,079 --> 04:21:19,760
diving into identities roles and the

6324
04:21:17,199 --> 04:21:22,319
architecture of policies that will give

6325
04:21:19,760 --> 04:21:25,120
you a very good understanding of how

6326
04:21:22,318 --> 04:21:28,079
permissions are granted and how policies

6327
04:21:25,120 --> 04:21:30,640
are inherited so before i jump into i am

6328
04:21:28,079 --> 04:21:33,039
i wanted to touch on the principle of

6329
04:21:30,639 --> 04:21:35,439
least privilege just for a second now

6330
04:21:33,040 --> 04:21:38,640
the principle of least privilege states

6331
04:21:35,439 --> 04:21:41,040
that a user program or process

6332
04:21:38,639 --> 04:21:42,959
should have access to the bare minimum

6333
04:21:41,040 --> 04:21:46,000
privileges necessary

6334
04:21:42,959 --> 04:21:49,039
or the exact resources it needs in order

6335
04:21:46,000 --> 04:21:52,079
to perform its function so for example

6336
04:21:49,040 --> 04:21:54,159
if lisa is performing a create function

6337
04:21:52,079 --> 04:21:56,639
to a cloud storage bucket

6338
04:21:54,158 --> 04:21:59,920
lisa should be restricted to create

6339
04:21:56,639 --> 04:22:01,278
permissions only on exactly one cloud

6340
04:21:59,920 --> 04:22:04,158
storage bucket

6341
04:22:01,279 --> 04:22:06,238
she doesn't need read edit or even

6342
04:22:04,158 --> 04:22:09,439
delete permissions on a cloud storage

6343
04:22:06,238 --> 04:22:11,840
bucket to perform her job and so this is

6344
04:22:09,439 --> 04:22:13,279
a great illustration of how this

6345
04:22:11,840 --> 04:22:15,439
principle works

6346
04:22:13,279 --> 04:22:18,560
and this is something that happens in

6347
04:22:15,439 --> 04:22:21,840
not only google cloud but in every cloud

6348
04:22:18,559 --> 04:22:24,079
environment as well as any on-premises

6349
04:22:21,840 --> 04:22:26,398
environment so note that the principle

6350
04:22:24,079 --> 04:22:29,520
of least privilege is something that i

6351
04:22:26,398 --> 04:22:32,398
have previously and will continue to be

6352
04:22:29,520 --> 04:22:35,040
talking about a lot in this course and

6353
04:22:32,398 --> 04:22:35,760
this is a key term that comes up quite a

6354
04:22:35,040 --> 04:22:37,840
bit

6355
04:22:35,760 --> 04:22:40,398
in any major exam

6356
04:22:37,840 --> 04:22:42,880
and is a rule that most apply in their

6357
04:22:40,398 --> 04:22:45,680
working environment to avoid any

6358
04:22:42,879 --> 04:22:48,639
unnecessary granted permissions a

6359
04:22:45,680 --> 04:22:51,040
well-known and unsaid rule when it comes

6360
04:22:48,639 --> 04:22:53,519
to security hence me wanting to touch on

6361
04:22:51,040 --> 04:22:55,840
this for a brief moment so now with that

6362
04:22:53,520 --> 04:22:59,439
out of the way i'd like to move on to

6363
04:22:55,840 --> 04:23:02,799
identity and access management or i am

6364
04:22:59,439 --> 04:23:05,840
for short so what is it really well with

6365
04:23:02,799 --> 04:23:08,719
iam you manage access control by

6366
04:23:05,840 --> 04:23:12,000
defining who the identity

6367
04:23:08,719 --> 04:23:14,959
has what access which is the role for

6368
04:23:12,000 --> 04:23:16,398
which resource and this also includes

6369
04:23:14,959 --> 04:23:18,639
organizations

6370
04:23:16,398 --> 04:23:21,920
folders and projects

6371
04:23:18,639 --> 04:23:24,879
in iam permission to access a resource

6372
04:23:21,920 --> 04:23:27,279
isn't granted directly to the end user

6373
04:23:24,879 --> 04:23:30,079
instead permissions are grouped into

6374
04:23:27,279 --> 04:23:33,359
roles and roles are then granted to

6375
04:23:30,079 --> 04:23:36,559
authenticated members an iam policy

6376
04:23:33,359 --> 04:23:38,720
defines and enforces what roles are

6377
04:23:36,559 --> 04:23:40,959
granted to which members

6378
04:23:38,719 --> 04:23:43,679
and this policy is attached to a

6379
04:23:40,959 --> 04:23:46,959
resource so when an authenticated member

6380
04:23:43,680 --> 04:23:49,680
attempts to access a resource iam checks

6381
04:23:46,959 --> 04:23:52,079
the resources policy to determine

6382
04:23:49,680 --> 04:23:54,559
whether the action is permitted and so

6383
04:23:52,079 --> 04:23:57,199
with that being said i want to dive into

6384
04:23:54,559 --> 04:23:59,760
the policy architecture breaking it down

6385
04:23:57,199 --> 04:24:01,840
by means of components in this policy

6386
04:23:59,760 --> 04:24:04,318
architecture will give you a better

6387
04:24:01,840 --> 04:24:07,359
understanding of how policies are put

6388
04:24:04,318 --> 04:24:10,238
together so now what is a policy a

6389
04:24:07,359 --> 04:24:12,880
policy is a collection of bindings audit

6390
04:24:10,238 --> 04:24:15,680
configuration and metadata now the

6391
04:24:12,879 --> 04:24:17,759
binding specifies how access should be

6392
04:24:15,680 --> 04:24:20,398
granted on resources

6393
04:24:17,760 --> 04:24:23,199
and it binds one or more members with a

6394
04:24:20,398 --> 04:24:26,639
single role and any contact specific

6395
04:24:23,199 --> 04:24:29,199
conditions that change how and when the

6396
04:24:26,639 --> 04:24:31,358
role is granted now the metadata

6397
04:24:29,199 --> 04:24:34,720
includes additional information about

6398
04:24:31,359 --> 04:24:37,120
the policy such as an etag and version

6399
04:24:34,719 --> 04:24:40,478
to facilitate policy management and

6400
04:24:37,120 --> 04:24:43,359
finally the audit config field specifies

6401
04:24:40,478 --> 04:24:46,000
the configuration data of how access

6402
04:24:43,359 --> 04:24:48,640
attempts should be audited and so now i

6403
04:24:46,000 --> 04:24:52,000
wanted to take a moment to dive deeper

6404
04:24:48,639 --> 04:24:54,478
into each component starting with member

6405
04:24:52,000 --> 04:24:57,680
now when it comes to members this is an

6406
04:24:54,478 --> 04:25:00,318
identity that can access a resource

6407
04:24:57,680 --> 04:25:03,279
so the identity of a member is an email

6408
04:25:00,318 --> 04:25:06,639
address associated with a user

6409
04:25:03,279 --> 04:25:09,680
service account or google group or even

6410
04:25:06,639 --> 04:25:12,158
a domain name associated with a g suite

6411
04:25:09,680 --> 04:25:14,398
or cloud identity domains now when it

6412
04:25:12,158 --> 04:25:17,279
comes to a google account this

6413
04:25:14,398 --> 04:25:20,158
represents any person who interacts with

6414
04:25:17,279 --> 04:25:23,040
google cloud any email address that is

6415
04:25:20,158 --> 04:25:26,719
associated with a google account can be

6416
04:25:23,040 --> 04:25:29,439
an identity including gmail.com or other

6417
04:25:26,719 --> 04:25:32,398
domains now a service account is an

6418
04:25:29,439 --> 04:25:35,199
account that belongs to your application

6419
04:25:32,398 --> 04:25:37,439
instead of an individual end user

6420
04:25:35,199 --> 04:25:38,800
so when you run your code that is hosted

6421
04:25:37,439 --> 04:25:41,359
on gcp

6422
04:25:38,799 --> 04:25:44,158
this is the identity you would specify

6423
04:25:41,359 --> 04:25:47,120
to run your code a google group is a

6424
04:25:44,158 --> 04:25:50,000
named collection of google accounts and

6425
04:25:47,120 --> 04:25:52,479
can also include service accounts now

6426
04:25:50,000 --> 04:25:54,000
the advantages of using google groups is

6427
04:25:52,478 --> 04:25:55,198
that you can grant and change

6428
04:25:54,000 --> 04:25:57,520
permissions

6429
04:25:55,199 --> 04:26:00,640
for the collection of accounts all at

6430
04:25:57,520 --> 04:26:03,199
once instead of changing access one by

6431
04:26:00,639 --> 04:26:05,519
one google groups can help you manage

6432
04:26:03,199 --> 04:26:08,720
users at scale and each member of a

6433
04:26:05,520 --> 04:26:11,439
google group inherits the iam roles

6434
04:26:08,719 --> 04:26:13,358
granted to that group the inheritance

6435
04:26:11,439 --> 04:26:16,639
means that you can use a group's

6436
04:26:13,359 --> 04:26:19,520
membership to manage users roles instead

6437
04:26:16,639 --> 04:26:22,559
of granting iam roles to individual

6438
04:26:19,520 --> 04:26:24,800
users moving on to g suite domains this

6439
04:26:22,559 --> 04:26:26,840
represents your organization's internet

6440
04:26:24,799 --> 04:26:29,438
domain name such as

6441
04:26:26,840 --> 04:26:32,158
antonyt.com and when you add a user to

6442
04:26:29,439 --> 04:26:34,800
your g suite domain a new google account

6443
04:26:32,158 --> 04:26:37,559
is created for the user inside this

6444
04:26:34,799 --> 04:26:40,158
virtual group such as antony

6445
04:26:37,559 --> 04:26:43,920
antonyt.com a g suite domain in

6446
04:26:40,158 --> 04:26:45,600
actuality represents a virtual group of

6447
04:26:43,920 --> 04:26:48,639
all of the google accounts that have

6448
04:26:45,600 --> 04:26:50,720
been created like google groups g suite

6449
04:26:48,639 --> 04:26:53,119
domains cannot be used to establish

6450
04:26:50,719 --> 04:26:55,039
identity but they simply enable

6451
04:26:53,120 --> 04:26:58,079
permission management now a cloud

6452
04:26:55,040 --> 04:27:00,880
identity domain is like a g suite domain

6453
04:26:58,079 --> 04:27:03,039
but the difference is that domain users

6454
04:27:00,879 --> 04:27:05,679
don't have access to g suite

6455
04:27:03,040 --> 04:27:08,000
applications and features so a couple

6456
04:27:05,680 --> 04:27:10,398
more members that i wanted to address

6457
04:27:08,000 --> 04:27:13,120
is the all authenticated users and the

6458
04:27:10,398 --> 04:27:15,840
all users members the all authenticated

6459
04:27:13,120 --> 04:27:18,640
users is a special identifier that

6460
04:27:15,840 --> 04:27:20,799
represents anyone who is authenticated

6461
04:27:18,639 --> 04:27:23,358
with a google account or a service

6462
04:27:20,799 --> 04:27:25,759
account users who are not authenticated

6463
04:27:23,359 --> 04:27:28,079
such as anonymous visitors are not

6464
04:27:25,760 --> 04:27:30,719
included and finally the all users

6465
04:27:28,079 --> 04:27:34,079
member is a special identifier that

6466
04:27:30,719 --> 04:27:36,879
represents anyone and everyone so any

6467
04:27:34,079 --> 04:27:40,158
user who is on the internet including

6468
04:27:36,879 --> 04:27:42,000
authenticated and unauthenticated users

6469
04:27:40,158 --> 04:27:44,478
and this covers the slew of the

6470
04:27:42,000 --> 04:27:47,520
different types of members now touching

6471
04:27:44,478 --> 04:27:50,719
on the next component of policies is

6472
04:27:47,520 --> 04:27:53,040
roles now diving into roles this is a

6473
04:27:50,719 --> 04:27:56,000
named collection of permissions that

6474
04:27:53,040 --> 04:27:58,080
grant access to perform actions on

6475
04:27:56,000 --> 04:28:00,799
google cloud resources

6476
04:27:58,079 --> 04:28:03,439
so at the heart of it permissions are

6477
04:28:00,799 --> 04:28:06,158
what determines what operations are

6478
04:28:03,439 --> 04:28:09,600
allowed on a resource they usually but

6479
04:28:06,158 --> 04:28:12,799
not always correspond one-to-one with

6480
04:28:09,600 --> 04:28:15,760
rest methods that is each google cloud

6481
04:28:12,799 --> 04:28:18,559
service has an associated permission for

6482
04:28:15,760 --> 04:28:20,398
each rest method that it has so to call

6483
04:28:18,559 --> 04:28:22,959
a method the caller needs that

6484
04:28:20,398 --> 04:28:25,439
permission now these permissions are not

6485
04:28:22,959 --> 04:28:27,919
granted to the users directly but

6486
04:28:25,439 --> 04:28:30,960
grouped together within the role you

6487
04:28:27,920 --> 04:28:32,719
would then grant roles which contain one

6488
04:28:30,959 --> 04:28:34,719
or more permissions

6489
04:28:32,719 --> 04:28:37,760
you can also create a custom role by

6490
04:28:34,719 --> 04:28:40,639
combining one or more of the available

6491
04:28:37,760 --> 04:28:44,238
iam permissions and again permissions

6492
04:28:40,639 --> 04:28:46,799
allow users to perform specific actions

6493
04:28:44,238 --> 04:28:48,959
on google cloud resources so you will

6494
04:28:46,799 --> 04:28:50,398
typically see a permission such as the

6495
04:28:48,959 --> 04:28:53,039
one you see here

6496
04:28:50,398 --> 04:28:56,079
compute.instances.list

6497
04:28:53,040 --> 04:28:59,720
and within google cloud iam permissions

6498
04:28:56,079 --> 04:29:01,279
are represented in this form

6499
04:28:59,719 --> 04:29:04,478
service.resource.verb

6500
04:29:01,279 --> 04:29:06,560
so just as a recap on roles this is a

6501
04:29:04,478 --> 04:29:08,959
collection of permissions

6502
04:29:06,559 --> 04:29:11,920
and you cannot grant a permission

6503
04:29:08,959 --> 04:29:14,879
directly to the user but you grant a

6504
04:29:11,920 --> 04:29:17,600
role to a user and all the permissions

6505
04:29:14,879 --> 04:29:20,158
that the role contains so an example is

6506
04:29:17,600 --> 04:29:22,559
shown here where the compute instances

6507
04:29:20,158 --> 04:29:24,959
permissions are grouped together in a

6508
04:29:22,559 --> 04:29:28,559
role now you can grant permissions by

6509
04:29:24,959 --> 04:29:31,198
granting roles to a user a group or a

6510
04:29:28,559 --> 04:29:33,760
service account so moving up into a more

6511
04:29:31,199 --> 04:29:35,760
broader level there are three types of

6512
04:29:33,760 --> 04:29:37,920
roles in iam

6513
04:29:35,760 --> 04:29:39,600
there are the primitive roles the

6514
04:29:37,920 --> 04:29:41,680
predefined roles

6515
04:29:39,600 --> 04:29:43,520
and the custom roles

6516
04:29:41,680 --> 04:29:46,000
with the primitive roles

6517
04:29:43,520 --> 04:29:48,158
these are roles that existed prior to

6518
04:29:46,000 --> 04:29:51,680
the introduction of iam

6519
04:29:48,158 --> 04:29:54,879
and they consist of three specific roles

6520
04:29:51,680 --> 04:29:57,040
owner editor and viewer and these roles

6521
04:29:54,879 --> 04:29:59,278
are concentric which means that the

6522
04:29:57,040 --> 04:30:01,840
owner role includes the permissions in

6523
04:29:59,279 --> 04:30:03,840
the editor role and the editor role

6524
04:30:01,840 --> 04:30:06,719
includes the permissions in the viewer

6525
04:30:03,840 --> 04:30:08,960
role and you can apply primitive roles

6526
04:30:06,719 --> 04:30:12,318
at the project or service resource

6527
04:30:08,959 --> 04:30:15,119
levels by using the console the api and

6528
04:30:12,318 --> 04:30:18,079
the gcloud tool just as a note you

6529
04:30:15,120 --> 04:30:22,079
cannot grant the owner role to a member

6530
04:30:18,079 --> 04:30:24,879
for a project using the iam api or the

6531
04:30:22,079 --> 04:30:27,520
gcloud command line tool you can only

6532
04:30:24,879 --> 04:30:29,278
add owners to a project using the cloud

6533
04:30:27,520 --> 04:30:31,520
console as well

6534
04:30:29,279 --> 04:30:34,319
google recommends avoiding these roles

6535
04:30:31,520 --> 04:30:37,199
if possible due to the nature of how

6536
04:30:34,318 --> 04:30:40,079
much access the permissions are given in

6537
04:30:37,199 --> 04:30:42,640
these specific roles google recommends

6538
04:30:40,079 --> 04:30:44,799
that you use pre-defined roles over

6539
04:30:42,639 --> 04:30:46,398
primitive roles and so moving into

6540
04:30:44,799 --> 04:30:49,119
predefined roles

6541
04:30:46,398 --> 04:30:51,760
these are roles that give granular and

6542
04:30:49,120 --> 04:30:54,640
finer-grained access control than the

6543
04:30:51,760 --> 04:30:57,680
primitive roles to specific google cloud

6544
04:30:54,639 --> 04:31:00,639
resources and prevent any unwanted

6545
04:30:57,680 --> 04:31:03,279
access to other resources predefined

6546
04:31:00,639 --> 04:31:05,358
roles are created and maintained by

6547
04:31:03,279 --> 04:31:08,158
google their permissions are

6548
04:31:05,359 --> 04:31:10,559
automatically updated as necessary when

6549
04:31:08,158 --> 04:31:13,039
new features or services are added to

6550
04:31:10,559 --> 04:31:16,158
google cloud now when it comes to custom

6551
04:31:13,040 --> 04:31:18,800
roles these are user defined and allow

6552
04:31:16,158 --> 04:31:22,079
you to bundle one or more supported

6553
04:31:18,799 --> 04:31:24,879
permissions to meet your specific needs

6554
04:31:22,079 --> 04:31:27,359
unlike predefined roles custom roles are

6555
04:31:24,879 --> 04:31:29,759
not maintained by google so when new

6556
04:31:27,359 --> 04:31:32,640
permissions features or services are

6557
04:31:29,760 --> 04:31:35,279
added to google cloud your custom roles

6558
04:31:32,639 --> 04:31:37,920
will not be updated automatically when

6559
04:31:35,279 --> 04:31:40,319
you create a custom role you must choose

6560
04:31:37,920 --> 04:31:43,120
an organization or project to create it

6561
04:31:40,318 --> 04:31:46,000
in you can then grant the custom role on

6562
04:31:43,120 --> 04:31:48,640
the organization or project as well as

6563
04:31:46,000 --> 04:31:51,600
any resources within that organization

6564
04:31:48,639 --> 04:31:54,318
or project and just as a note you cannot

6565
04:31:51,600 --> 04:31:56,399
create custom roles at the folder level

6566
04:31:54,318 --> 04:31:59,278
if you need to use a custom role within

6567
04:31:56,398 --> 04:32:02,318
a folder define the custom role on the

6568
04:31:59,279 --> 04:32:05,359
parent of that folder as well the custom

6569
04:32:02,318 --> 04:32:08,639
roles user interface is only available

6570
04:32:05,359 --> 04:32:12,158
to users who have permissions to create

6571
04:32:08,639 --> 04:32:15,599
or manage custom roles by default only

6572
04:32:12,158 --> 04:32:17,680
project owners can create new roles now

6573
04:32:15,600 --> 04:32:18,800
there is one limitation that i wanted to

6574
04:32:17,680 --> 04:32:21,520
point out

6575
04:32:18,799 --> 04:32:23,358
and that is that some predefined roles

6576
04:32:21,520 --> 04:32:26,079
contain permissions that are not

6577
04:32:23,359 --> 04:32:28,158
permitted in custom roles so i highly

6578
04:32:26,079 --> 04:32:30,959
recommend that you check whether you can

6579
04:32:28,158 --> 04:32:34,158
use a specific permission when making a

6580
04:32:30,959 --> 04:32:36,559
custom role custom roles also have a

6581
04:32:34,158 --> 04:32:38,959
really cool feature that includes a

6582
04:32:36,559 --> 04:32:42,000
launch stage which is stored in the

6583
04:32:38,959 --> 04:32:44,959
stage property for the role the stage is

6584
04:32:42,000 --> 04:32:47,359
informational and helps you keep track

6585
04:32:44,959 --> 04:32:49,679
of how close each role is to being

6586
04:32:47,359 --> 04:32:52,640
generally available and these launch

6587
04:32:49,680 --> 04:32:53,600
stages are available in the stages shown

6588
04:32:52,639 --> 04:32:56,478
here

6589
04:32:53,600 --> 04:32:58,880
alpha which is in testing beta which is

6590
04:32:56,478 --> 04:33:02,238
tested and awaiting approval and of

6591
04:32:58,879 --> 04:33:04,079
course ga which is generally available

6592
04:33:02,238 --> 04:33:07,278
and i'll be getting hands-on later with

6593
04:33:04,080 --> 04:33:09,840
these roles in an upcoming demonstration

6594
04:33:07,278 --> 04:33:13,038
so now moving on to the next component

6595
04:33:09,840 --> 04:33:16,000
is conditions and so a condition is a

6596
04:33:13,039 --> 04:33:17,279
logic expression and is used to define

6597
04:33:16,000 --> 04:33:18,438
and enforce

6598
04:33:17,278 --> 04:33:21,038
conditional

6599
04:33:18,438 --> 04:33:23,759
attribute-based access control for

6600
04:33:21,039 --> 04:33:25,119
google cloud resources conditions allow

6601
04:33:23,759 --> 04:33:28,560
you to choose

6602
04:33:25,118 --> 04:33:31,359
granting resource access to identities

6603
04:33:28,561 --> 04:33:34,080
also known as members only if configured

6604
04:33:31,359 --> 04:33:36,240
conditions are met for example this

6605
04:33:34,080 --> 04:33:39,600
could be done to configure temporary

6606
04:33:36,240 --> 04:33:42,480
access for users that are contractors

6607
04:33:39,599 --> 04:33:44,958
and have been given specific access for

6608
04:33:42,479 --> 04:33:47,359
a certain amount of time a condition

6609
04:33:44,958 --> 04:33:50,159
could be put in place to remove the

6610
04:33:47,359 --> 04:33:52,719
access they needed once the contract has

6611
04:33:50,159 --> 04:33:56,400
ended conditions are specified in the

6612
04:33:52,719 --> 04:33:59,039
role bindings of a resources im policy

6613
04:33:56,400 --> 04:34:02,080
so when a condition exists the access

6614
04:33:59,039 --> 04:34:04,798
request is only granted if the condition

6615
04:34:02,080 --> 04:34:07,920
expression is true so now moving on to

6616
04:34:04,798 --> 04:34:11,840
metadata this component carries both e

6617
04:34:07,919 --> 04:34:14,319
tags and version so first touching on e

6618
04:34:11,840 --> 04:34:17,680
when multiple systems try to write to

6619
04:34:14,319 --> 04:34:20,400
the same im policy at the same time

6620
04:34:17,680 --> 04:34:22,798
there is a risk that those systems might

6621
04:34:20,400 --> 04:34:25,600
overwrite each other's changes and the

6622
04:34:22,798 --> 04:34:29,199
risk exists because updating an im

6623
04:34:25,599 --> 04:34:32,000
policy involves multiple operations so

6624
04:34:29,199 --> 04:34:34,638
in order to help prevent this issue iam

6625
04:34:32,000 --> 04:34:38,000
supports concurrency control through the

6626
04:34:34,638 --> 04:34:41,118
use of an etag field in the policy the

6627
04:34:38,000 --> 04:34:43,759
value of this field changes each time a

6628
04:34:41,118 --> 04:34:44,718
policy is updated now when it comes to a

6629
04:34:43,759 --> 04:34:46,958
version

6630
04:34:44,719 --> 04:34:49,279
this is a version number that is added

6631
04:34:46,958 --> 04:34:50,399
to determine features such as a

6632
04:34:49,278 --> 04:34:53,599
condition

6633
04:34:50,400 --> 04:34:56,080
and for future releases of new features

6634
04:34:53,599 --> 04:34:58,638
it is also used to avoid breaking your

6635
04:34:56,080 --> 04:35:01,840
existing integrations on new feature

6636
04:34:58,638 --> 04:35:03,359
releases that rely on consistency in the

6637
04:35:01,840 --> 04:35:05,680
policy structure

6638
04:35:03,359 --> 04:35:08,561
also when new policy schema versions are

6639
04:35:05,680 --> 04:35:11,118
introduced and lastly we have the

6640
04:35:08,561 --> 04:35:13,439
auditconfig component and this is used

6641
04:35:11,118 --> 04:35:15,840
in order to configure audit logging for

6642
04:35:13,438 --> 04:35:18,079
the policy it determines which

6643
04:35:15,840 --> 04:35:20,958
permission types are logged and what

6644
04:35:18,080 --> 04:35:23,840
identities if any are exempted from

6645
04:35:20,958 --> 04:35:26,638
logging and so to sum it up this is a

6646
04:35:23,840 --> 04:35:28,879
policy in all its entirety each

6647
04:35:26,638 --> 04:35:30,958
component as you can see plays a

6648
04:35:28,879 --> 04:35:32,561
different part and i will be going

6649
04:35:30,958 --> 04:35:34,798
through policies and how they are

6650
04:35:32,561 --> 04:35:36,959
assembled in statements in a later

6651
04:35:34,798 --> 04:35:39,199
lesson and so there is one more thing

6652
04:35:36,958 --> 04:35:41,919
that i wanted to touch on before ending

6653
04:35:39,199 --> 04:35:44,319
this lesson and that is the policy

6654
04:35:41,919 --> 04:35:46,560
inheritance when it comes to resource

6655
04:35:44,319 --> 04:35:49,759
hierarchy and so as explained in an

6656
04:35:46,561 --> 04:35:52,400
earlier lesson you can set an im policy

6657
04:35:49,759 --> 04:35:55,198
at any level in the resource hierarchy

6658
04:35:52,400 --> 04:35:57,920
the organization level the folder level

6659
04:35:55,199 --> 04:36:01,039
the project level or the resource level

6660
04:35:57,919 --> 04:36:03,679
and resources inherit the policies of

6661
04:36:01,039 --> 04:36:06,000
all their parent resources the effective

6662
04:36:03,680 --> 04:36:09,199
policy for a resource

6663
04:36:06,000 --> 04:36:12,400
is the union of the policy set on that

6664
04:36:09,199 --> 04:36:14,879
resource and the policies inherited from

6665
04:36:12,400 --> 04:36:17,520
higher up in the hierarchy and so again

6666
04:36:14,879 --> 04:36:20,638
i wanted to reiterate that this policy

6667
04:36:17,520 --> 04:36:23,039
inheritance is transitive in other words

6668
04:36:20,638 --> 04:36:24,079
resources inherit policies from the

6669
04:36:23,039 --> 04:36:26,638
project

6670
04:36:24,080 --> 04:36:28,719
which inherit policies from folders

6671
04:36:26,638 --> 04:36:31,680
which inherit policies from the

6672
04:36:28,719 --> 04:36:33,279
organization therefore the organization

6673
04:36:31,680 --> 04:36:36,080
level policies

6674
04:36:33,278 --> 04:36:39,438
also apply at the resource level and so

6675
04:36:36,080 --> 04:36:41,039
just a quick example if i apply a policy

6676
04:36:39,438 --> 04:36:43,680
on project x

6677
04:36:41,039 --> 04:36:46,561
on any resources within that project the

6678
04:36:43,680 --> 04:36:49,118
effective policy is going to be a union

6679
04:36:46,561 --> 04:36:51,840
of these policies as the resources will

6680
04:36:49,118 --> 04:36:54,399
inherit the policy that is granted to

6681
04:36:51,840 --> 04:36:57,118
project x so i hope this gave you a

6682
04:36:54,400 --> 04:37:00,000
better understanding of how policies are

6683
04:36:57,118 --> 04:37:02,399
granted as well as the course structure

6684
04:37:00,000 --> 04:37:04,159
and so that's all i have for this lesson

6685
04:37:02,400 --> 04:37:06,561
so you can now mark this lesson as

6686
04:37:04,159 --> 04:37:07,130
complete and let's move on to the next

6687
04:37:06,561 --> 04:37:11,039
one

6688
04:37:07,130 --> 04:37:13,760
[Music]

6689
04:37:11,039 --> 04:37:16,319
welcome back and in this lesson i wanted

6690
04:37:13,759 --> 04:37:19,599
to build on the last lesson where we

6691
04:37:16,319 --> 04:37:21,840
went through iam and policy architecture

6692
04:37:19,599 --> 04:37:24,079
and dive deeper into policies and

6693
04:37:21,840 --> 04:37:26,958
conditions when it comes to putting them

6694
04:37:24,080 --> 04:37:29,520
together in policy statements as cloud

6695
04:37:26,958 --> 04:37:31,919
engineers you should be able to read and

6696
04:37:29,520 --> 04:37:34,240
decipher policy statements and

6697
04:37:31,919 --> 04:37:36,000
understand how they're put together by

6698
04:37:34,240 --> 04:37:39,039
using all the components that we

6699
04:37:36,000 --> 04:37:40,879
discussed earlier so just as a refresher

6700
04:37:39,039 --> 04:37:43,119
i wanted to go over the policy

6701
04:37:40,879 --> 04:37:45,760
architecture again now as i discussed

6702
04:37:43,118 --> 04:37:48,638
previously a policy is a collection of

6703
04:37:45,759 --> 04:37:51,840
statements that define who has what type

6704
04:37:48,638 --> 04:37:54,560
of access it is attached to a resource

6705
04:37:51,840 --> 04:37:57,278
and is used to enforce access control

6706
04:37:54,561 --> 04:38:00,319
whenever that resource is accessed now

6707
04:37:57,278 --> 04:38:03,278
the binding within that policy binds one

6708
04:38:00,319 --> 04:38:06,239
or more members with a single role and

6709
04:38:03,278 --> 04:38:08,479
any context specific conditions so in

6710
04:38:06,240 --> 04:38:11,119
other words the member roles and

6711
04:38:08,479 --> 04:38:13,919
conditions are bound together using a

6712
04:38:11,118 --> 04:38:17,118
binding combined with the metadata and

6713
04:38:13,919 --> 04:38:18,718
audit config we have a policy so now

6714
04:38:17,118 --> 04:38:21,359
taking all of this and putting it

6715
04:38:18,719 --> 04:38:24,638
together in a policy statement shown

6716
04:38:21,359 --> 04:38:28,080
here you can see the bindings which have

6717
04:38:24,638 --> 04:38:30,479
the role the members and conditions the

6718
04:38:28,080 --> 04:38:33,359
first member being tony beauties

6719
04:38:30,479 --> 04:38:36,039
gmail.com holding the role of storage

6720
04:38:33,359 --> 04:38:38,719
admin and the second member as

6721
04:38:36,039 --> 04:38:41,039
larkfetterlogin at gmail.com

6722
04:38:38,719 --> 04:38:43,439
holding the role of storage object

6723
04:38:41,039 --> 04:38:46,400
viewer now because lark only needs to

6724
04:38:43,438 --> 04:38:48,958
view the files for this project in cloud

6725
04:38:46,400 --> 04:38:51,199
storage till the new year a condition

6726
04:38:48,958 --> 04:38:53,759
has been applied that does not grant

6727
04:38:51,199 --> 04:38:56,638
access for lark to view these files

6728
04:38:53,759 --> 04:38:59,919
after january the 1st an e tag has been

6729
04:38:56,638 --> 04:39:02,479
put in and the version is numbered 3 due

6730
04:38:59,919 --> 04:39:05,278
to the condition which i will get into a

6731
04:39:02,479 --> 04:39:08,159
little bit later this policy statement

6732
04:39:05,278 --> 04:39:10,319
has been structured in json format and

6733
04:39:08,159 --> 04:39:13,278
is a common format used in policy

6734
04:39:10,319 --> 04:39:15,599
statements moving on we have the exact

6735
04:39:13,278 --> 04:39:18,319
same policy statement but has been

6736
04:39:15,599 --> 04:39:20,560
formatted in yaml as you can see the

6737
04:39:18,319 --> 04:39:23,680
members roles and conditions in the

6738
04:39:20,561 --> 04:39:26,080
bindings are exactly the same as well as

6739
04:39:23,680 --> 04:39:29,118
the etag and version but due to the

6740
04:39:26,080 --> 04:39:31,600
formatting it is much more condensed so

6741
04:39:29,118 --> 04:39:34,958
as you can see policy statements can be

6742
04:39:31,599 --> 04:39:36,798
written in both json or yaml depending

6743
04:39:34,958 --> 04:39:39,119
on your preference my personal

6744
04:39:36,798 --> 04:39:41,599
preference is to write my policy

6745
04:39:39,119 --> 04:39:44,079
statements in yaml due to the shorter

6746
04:39:41,599 --> 04:39:46,319
and cleaner format so i will be moving

6747
04:39:44,080 --> 04:39:48,560
ahead in this course with more

6748
04:39:46,319 --> 04:39:51,279
statements written in yaml when you are

6749
04:39:48,560 --> 04:39:52,958
looking to query your projects for its

6750
04:39:51,279 --> 04:39:55,680
granted policies

6751
04:39:52,957 --> 04:39:58,239
an easy way to do this would be to query

6752
04:39:55,680 --> 04:40:00,560
it from the command line as shown here

6753
04:39:58,240 --> 04:40:03,360
here i've taken a screenshot from tony

6754
04:40:00,560 --> 04:40:07,040
bowtie ace in the cloud shell and have

6755
04:40:03,360 --> 04:40:08,958
used the command gcloud projects get

6756
04:40:07,040 --> 04:40:12,000
dash iam

6757
04:40:08,957 --> 04:40:14,079
policy with the project id and this

6758
04:40:12,000 --> 04:40:15,680
brought up all the members and roles

6759
04:40:14,080 --> 04:40:18,798
within the bindings

6760
04:40:15,680 --> 04:40:21,040
as well as the etag and version for the

6761
04:40:18,797 --> 04:40:23,680
policy that has been attached to this

6762
04:40:21,040 --> 04:40:26,000
project and as you can see here i have

6763
04:40:23,680 --> 04:40:29,279
no conditions in place for any of my

6764
04:40:26,000 --> 04:40:31,360
bindings and so again using the command

6765
04:40:29,279 --> 04:40:35,199
gcloud projects

6766
04:40:31,360 --> 04:40:37,760
get dash iam dash policy along with the

6767
04:40:35,200 --> 04:40:40,000
project id will bring up any policies

6768
04:40:37,759 --> 04:40:42,239
that are attached to this resource and

6769
04:40:40,000 --> 04:40:44,718
the resource being the project id if the

6770
04:40:42,240 --> 04:40:47,120
resource were to be the folder id then

6771
04:40:44,718 --> 04:40:49,280
you could use the command gcloud

6772
04:40:47,119 --> 04:40:53,200
resource dash manager

6773
04:40:49,279 --> 04:40:56,479
folders get dash iam-policy

6774
04:40:53,200 --> 04:40:58,080
with the folder id and for organizations

6775
04:40:56,479 --> 04:41:00,759
the command would be gcloud

6776
04:40:58,080 --> 04:41:03,600
organizations get dash

6777
04:41:00,759 --> 04:41:06,797
iam-policy along with the organization

6778
04:41:03,599 --> 04:41:09,359
id now because we don't have any folders

6779
04:41:06,797 --> 04:41:11,199
or organizations in our environment

6780
04:41:09,360 --> 04:41:13,440
typing these commands in wouldn't bring

6781
04:41:11,200 --> 04:41:15,680
up anything and just as a note using

6782
04:41:13,439 --> 04:41:18,239
these commands in the cloud shell or in

6783
04:41:15,680 --> 04:41:21,040
the sdk will bring up the policy

6784
04:41:18,240 --> 04:41:23,520
statement formatted in yaml so now i

6785
04:41:21,040 --> 04:41:26,240
wanted to just take a second to dive

6786
04:41:23,520 --> 04:41:28,637
into policy versions now as i haven't

6787
04:41:26,240 --> 04:41:31,360
covered versions in detail i wanted to

6788
04:41:28,637 --> 04:41:34,637
quickly go over it and the reasons for

6789
04:41:31,360 --> 04:41:37,760
each numbered version now version one of

6790
04:41:34,637 --> 04:41:41,200
the i am syntax schema for policies

6791
04:41:37,759 --> 04:41:42,399
supports binding one role to one or more

6792
04:41:41,200 --> 04:41:44,479
members

6793
04:41:42,400 --> 04:41:47,360
it does not support conditional role

6794
04:41:44,479 --> 04:41:50,079
bindings and so usually with version 1

6795
04:41:47,360 --> 04:41:53,600
you will not see any conditions version

6796
04:41:50,080 --> 04:41:55,520
2 is used for google's internal use and

6797
04:41:53,599 --> 04:41:58,079
so querying policies

6798
04:41:55,520 --> 04:42:00,797
usually you will not see a version 2.

6799
04:41:58,080 --> 04:42:03,520
and finally with version 3 this

6800
04:42:00,797 --> 04:42:06,000
introduces the condition field in the

6801
04:42:03,520 --> 04:42:09,279
role binding which constrains the role

6802
04:42:06,000 --> 04:42:12,080
binding via contact space and attributes

6803
04:42:09,279 --> 04:42:14,479
based rules so just as a note if your

6804
04:42:12,080 --> 04:42:15,520
request does not specify a policy

6805
04:42:14,479 --> 04:42:18,718
version

6806
04:42:15,520 --> 04:42:21,360
iam will assume that you want a version

6807
04:42:18,718 --> 04:42:23,440
1 policy and again if the policy does

6808
04:42:21,360 --> 04:42:26,958
not contain any conditions

6809
04:42:23,439 --> 04:42:29,599
then iam always returns a version one

6810
04:42:26,957 --> 04:42:32,000
policy regardless of the version number

6811
04:42:29,599 --> 04:42:34,957
in the request so moving on to some

6812
04:42:32,000 --> 04:42:38,080
policy limitations each resource can

6813
04:42:34,957 --> 04:42:41,199
only have one policy and this includes

6814
04:42:38,080 --> 04:42:42,878
organizations folders and projects

6815
04:42:41,200 --> 04:42:46,319
another limitation

6816
04:42:42,878 --> 04:42:48,400
is that each iam policy can contain up

6817
04:42:46,319 --> 04:42:51,759
to 1500 members

6818
04:42:48,400 --> 04:42:54,400
and up to 250 of these members

6819
04:42:51,759 --> 04:42:57,119
can be google groups now when making

6820
04:42:54,400 --> 04:42:59,840
policy changes it will take up to seven

6821
04:42:57,119 --> 04:43:02,159
minutes to fully propagate across the

6822
04:42:59,840 --> 04:43:06,000
google cloud platform this does not

6823
04:43:02,159 --> 04:43:08,718
happen instantaneously as iam is global

6824
04:43:06,000 --> 04:43:11,759
as well there is a limit of 100

6825
04:43:08,718 --> 04:43:13,360
conditional role bindings per policy now

6826
04:43:11,759 --> 04:43:14,717
getting a little bit deeper into

6827
04:43:13,360 --> 04:43:16,637
conditions

6828
04:43:14,718 --> 04:43:19,440
these are attributes that are either

6829
04:43:16,637 --> 04:43:21,680
based on resource or based on details

6830
04:43:19,439 --> 04:43:24,637
about the request and this could vary

6831
04:43:21,680 --> 04:43:27,279
from time stamp to originating or

6832
04:43:24,637 --> 04:43:29,840
destination ip address now as you

6833
04:43:27,279 --> 04:43:32,319
probably heard me use the term earlier

6834
04:43:29,840 --> 04:43:35,200
conditional role bindings are another

6835
04:43:32,319 --> 04:43:37,439
name for a policy that holds a condition

6836
04:43:35,200 --> 04:43:40,479
within the binding conditional role

6837
04:43:37,439 --> 04:43:42,159
bindings can be added to new or existing

6838
04:43:40,479 --> 04:43:44,560
iam policies

6839
04:43:42,159 --> 04:43:46,957
to further control access to google

6840
04:43:44,560 --> 04:43:49,360
cloud resources so when it comes to

6841
04:43:46,957 --> 04:43:52,159
resource attributes this would enable

6842
04:43:49,360 --> 04:43:55,119
you to create conditions that evaluate

6843
04:43:52,159 --> 04:43:57,680
the resource in the access request

6844
04:43:55,119 --> 04:44:00,399
including the resource type the resource

6845
04:43:57,680 --> 04:44:03,439
name and the google cloud service being

6846
04:44:00,400 --> 04:44:06,798
used request attributes allow you to

6847
04:44:03,439 --> 04:44:09,520
manage access based on days or hours of

6848
04:44:06,797 --> 04:44:12,637
the week a conditional role binding can

6849
04:44:09,520 --> 04:44:15,600
be used to grant time bounded access to

6850
04:44:12,637 --> 04:44:18,159
a resource ensuring that a user can no

6851
04:44:15,599 --> 04:44:21,199
longer access that resource after the

6852
04:44:18,159 --> 04:44:24,079
specified expiry date and time and this

6853
04:44:21,200 --> 04:44:26,560
sets temporary access to google cloud

6854
04:44:24,080 --> 04:44:29,600
resources using conditional role

6855
04:44:26,560 --> 04:44:32,798
bindings in iam policies by using the

6856
04:44:29,599 --> 04:44:35,680
date time attributes shown here you can

6857
04:44:32,797 --> 04:44:38,479
enforce time-based controls when

6858
04:44:35,680 --> 04:44:40,479
accessing a given resource now showing

6859
04:44:38,479 --> 04:44:43,040
another example of a time-based

6860
04:44:40,479 --> 04:44:45,680
condition it is possible to get even

6861
04:44:43,040 --> 04:44:46,638
more granular and scope the geographic

6862
04:44:45,680 --> 04:44:49,680
region

6863
04:44:46,637 --> 04:44:52,878
along with the day and time for access

6864
04:44:49,680 --> 04:44:55,360
in this policy lark only has access

6865
04:44:52,878 --> 04:44:57,840
during business hours to view any

6866
04:44:55,360 --> 04:45:00,479
objects within cloud storage lark can

6867
04:44:57,840 --> 04:45:03,840
only access these objects from monday to

6868
04:45:00,479 --> 04:45:06,079
friday nine to five this policy can also

6869
04:45:03,840 --> 04:45:09,119
be used as a great example for

6870
04:45:06,080 --> 04:45:11,760
contractors coming into your business

6871
04:45:09,119 --> 04:45:14,479
yet only needing access during business

6872
04:45:11,759 --> 04:45:18,000
hours now an example of a resource-based

6873
04:45:14,479 --> 04:45:21,040
condition shown here a group member has

6874
04:45:18,000 --> 04:45:23,599
a condition tied to it where dev only

6875
04:45:21,040 --> 04:45:25,760
access has been implemented any

6876
04:45:23,599 --> 04:45:29,279
developers that are part of this group

6877
04:45:25,759 --> 04:45:32,479
will only have access to vm resources

6878
04:45:29,279 --> 04:45:35,279
within project cat bowties and tied to

6879
04:45:32,479 --> 04:45:36,957
any resources that's name starts with

6880
04:45:35,279 --> 04:45:39,759
the word development now some

6881
04:45:36,957 --> 04:45:41,599
limitations when it comes to conditions

6882
04:45:39,759 --> 04:45:43,439
is that conditions are limited to

6883
04:45:41,599 --> 04:45:46,159
specific services

6884
04:45:43,439 --> 04:45:49,680
primitive roles are unsupported and

6885
04:45:46,159 --> 04:45:52,159
members cannot be of the all users or

6886
04:45:49,680 --> 04:45:55,439
all authenticated users members

6887
04:45:52,159 --> 04:45:58,479
conditions also hold a limit of 100

6888
04:45:55,439 --> 04:46:01,840
conditional role bindings per policy as

6889
04:45:58,479 --> 04:46:04,957
well as 20 role bindings for the same

6890
04:46:01,840 --> 04:46:07,200
role and same member and so for the last

6891
04:46:04,957 --> 04:46:10,000
part of the policy statements i wanted

6892
04:46:07,200 --> 04:46:12,718
to touch on audit config logs and this

6893
04:46:10,000 --> 04:46:15,759
specifies the audit configuration for a

6894
04:46:12,718 --> 04:46:18,159
service the configuration determines

6895
04:46:15,759 --> 04:46:21,279
which permission types are logged and

6896
04:46:18,159 --> 04:46:23,360
what identities if any are exempted from

6897
04:46:21,279 --> 04:46:26,717
logging and when specifying audit

6898
04:46:23,360 --> 04:46:29,760
configs they must have one or more audit

6899
04:46:26,718 --> 04:46:33,760
log configs now as shown here

6900
04:46:29,759 --> 04:46:37,519
this policy enables data read data write

6901
04:46:33,759 --> 04:46:40,439
and admin read logging on all services

6902
04:46:37,520 --> 04:46:42,000
while exempting tony bowtie ace

6903
04:46:40,439 --> 04:46:45,520
gmail.com

6904
04:46:42,000 --> 04:46:47,439
from admin read logging on cloud storage

6905
04:46:45,520 --> 04:46:49,439
and so that's pretty much all i wanted

6906
04:46:47,439 --> 04:46:52,637
to cover in this lesson

6907
04:46:49,439 --> 04:46:55,680
on policies policy statements

6908
04:46:52,637 --> 04:46:57,840
and conditions and so i highly recommend

6909
04:46:55,680 --> 04:47:00,240
as you come across more policy

6910
04:46:57,840 --> 04:47:02,400
statements take the time to read through

6911
04:47:00,240 --> 04:47:04,878
it and get to know exactly

6912
04:47:02,400 --> 04:47:07,440
what the statement is referring to and

6913
04:47:04,878 --> 04:47:09,360
what type of permissions that are given

6914
04:47:07,439 --> 04:47:12,717
and this will help you not only in the

6915
04:47:09,360 --> 04:47:15,520
exam but will also help you in reading

6916
04:47:12,718 --> 04:47:17,840
and writing policy statements in future

6917
04:47:15,520 --> 04:47:19,520
and so that's all i have for this lesson

6918
04:47:17,840 --> 04:47:21,840
so you can now mark this lesson as

6919
04:47:19,520 --> 04:47:22,619
complete and let's move on to the next

6920
04:47:21,840 --> 04:47:26,560
one

6921
04:47:22,619 --> 04:47:27,840
[Music]

6922
04:47:26,560 --> 04:47:30,240
welcome back

6923
04:47:27,840 --> 04:47:34,000
and in this demonstration i'm going to

6924
04:47:30,240 --> 04:47:36,000
do a hands-on tour working with iam here

6925
04:47:34,000 --> 04:47:38,319
in the google cloud console we're going

6926
04:47:36,000 --> 04:47:41,360
to go through the available services in

6927
04:47:38,319 --> 04:47:44,000
the iam console as well as touching on

6928
04:47:41,360 --> 04:47:46,797
the command line in the cloud shell to

6929
04:47:44,000 --> 04:47:48,957
show how policies can be both added and

6930
04:47:46,797 --> 04:47:51,680
edited we're also going to be bringing

6931
04:47:48,957 --> 04:47:54,717
in another new user to really bring this

6932
04:47:51,680 --> 04:47:57,279
demo to life and to show you how to edit

6933
04:47:54,718 --> 04:48:00,479
existing policies so with that being

6934
04:47:57,279 --> 04:48:03,119
said let's dive in so if i go over here

6935
04:48:00,479 --> 04:48:05,919
to my user icon in the top right hand

6936
04:48:03,119 --> 04:48:07,919
corner i can see that i am logged in as

6937
04:48:05,919 --> 04:48:10,957
tony bowtie ace

6938
04:48:07,919 --> 04:48:13,519
gmail.com and as you can see at the top

6939
04:48:10,957 --> 04:48:15,279
i'm here in project tony so now to get

6940
04:48:13,520 --> 04:48:17,119
to iam i'm going to go over to the

6941
04:48:15,279 --> 04:48:19,599
navigation menu

6942
04:48:17,119 --> 04:48:22,399
and i'm going to go to i am in admin and

6943
04:48:19,599 --> 04:48:24,877
over to iam now moving over here to the

6944
04:48:22,400 --> 04:48:27,120
menu on the left i wanted to go through

6945
04:48:24,878 --> 04:48:30,797
the different options that we have in

6946
04:48:27,119 --> 04:48:33,520
iam so under iam itself this is where

6947
04:48:30,797 --> 04:48:36,399
you would add or edit permissions

6948
04:48:33,520 --> 04:48:39,360
with regards to members and roles for

6949
04:48:36,400 --> 04:48:42,400
the policy added to your given project

6950
04:48:39,360 --> 04:48:44,637
which in my case is project tony and

6951
04:48:42,400 --> 04:48:47,280
i'll be coming back in just a bit to go

6952
04:48:44,637 --> 04:48:49,680
greater in depth with regards to adding

6953
04:48:47,279 --> 04:48:52,399
and editing the policy permissions

6954
04:48:49,680 --> 04:48:54,240
moving on to identity and organization

6955
04:48:52,400 --> 04:48:56,798
now although we haven't touched on cloud

6956
04:48:54,240 --> 04:48:59,120
identity yet i will be covering this in

6957
04:48:56,797 --> 04:49:02,079
high level detail in a different lesson

6958
04:48:59,119 --> 04:49:04,399
but for now know that cloud identity is

6959
04:49:02,080 --> 04:49:07,360
google cloud's identity as a service

6960
04:49:04,400 --> 04:49:09,840
solution and it allows you to create and

6961
04:49:07,360 --> 04:49:12,240
manage users and groups within google

6962
04:49:09,840 --> 04:49:14,080
cloud now if i was signed into cloud

6963
04:49:12,240 --> 04:49:16,080
identity i would have a whole bunch of

6964
04:49:14,080 --> 04:49:18,718
options here but since this is a

6965
04:49:16,080 --> 04:49:21,760
personal account i cannot create or

6966
04:49:18,718 --> 04:49:24,319
manage any users as well i do not have a

6967
04:49:21,759 --> 04:49:27,439
domain tied to any cloud identity

6968
04:49:24,319 --> 04:49:29,439
account as well as any g suite account

6969
04:49:27,439 --> 04:49:32,399
so just know that if you had cloud

6970
04:49:29,439 --> 04:49:34,239
identity or g suite set up you would

6971
04:49:32,400 --> 04:49:36,958
have a bunch of different options to

6972
04:49:34,240 --> 04:49:39,440
choose from in order to help you manage

6973
04:49:36,957 --> 04:49:41,439
your users and groups and here under

6974
04:49:39,439 --> 04:49:44,239
organization policies

6975
04:49:41,439 --> 04:49:46,399
i'm able to manage organization policies

6976
04:49:44,240 --> 04:49:48,878
but since i am not an organization

6977
04:49:46,400 --> 04:49:51,200
policy administrator and i don't have an

6978
04:49:48,878 --> 04:49:53,920
organization there's not much that i can

6979
04:49:51,200 --> 04:49:56,637
do here just know that when you have an

6980
04:49:53,919 --> 04:49:59,519
organization set up you are able to come

6981
04:49:56,637 --> 04:50:02,319
here in order to manage and edit your

6982
04:49:59,520 --> 04:50:04,878
organization policies now moving under

6983
04:50:02,319 --> 04:50:08,079
quotas we went over this in a little bit

6984
04:50:04,878 --> 04:50:10,797
of detail in a previous lesson and again

6985
04:50:08,080 --> 04:50:13,280
this is to edit any quotas for any of

6986
04:50:10,797 --> 04:50:16,079
your services in case you need a limit

6987
04:50:13,279 --> 04:50:18,717
increase moving on to service accounts

6988
04:50:16,080 --> 04:50:21,120
i will be covering this topic in great

6989
04:50:18,718 --> 04:50:23,119
depth in a later lesson and we'll be

6990
04:50:21,119 --> 04:50:25,439
going through a hands-on demonstration

6991
04:50:23,119 --> 04:50:28,079
as well now i know i haven't touched

6992
04:50:25,439 --> 04:50:30,877
much on labels as of yet but know that

6993
04:50:28,080 --> 04:50:33,280
labels are a key value pair that helps

6994
04:50:30,878 --> 04:50:36,000
you organize and then filter your

6995
04:50:33,279 --> 04:50:38,479
resources based on their labels these

6996
04:50:36,000 --> 04:50:40,718
same labels are also forwarded to your

6997
04:50:38,479 --> 04:50:43,360
billing system so you can then break

6998
04:50:40,718 --> 04:50:46,159
down your billing charges by label and

6999
04:50:43,360 --> 04:50:48,878
you can also use labels based on teams

7000
04:50:46,159 --> 04:50:50,079
cost centers components and even

7001
04:50:48,878 --> 04:50:52,797
environments

7002
04:50:50,080 --> 04:50:56,000
so for example if i wanted to label my

7003
04:50:52,797 --> 04:50:58,957
virtual machines by environment i can

7004
04:50:56,000 --> 04:51:01,919
simply use environment as the key and as

7005
04:50:58,957 --> 04:51:03,279
the value i can use anything from

7006
04:51:01,919 --> 04:51:04,797
development

7007
04:51:03,279 --> 04:51:06,399
to qa

7008
04:51:04,797 --> 04:51:08,637
to testing

7009
04:51:06,400 --> 04:51:10,878
to production and i could simply add

7010
04:51:08,637 --> 04:51:13,360
this label and add all the different

7011
04:51:10,878 --> 04:51:16,240
environments and later i'd be able to

7012
04:51:13,360 --> 04:51:19,119
query based on these specific labels now

7013
04:51:16,240 --> 04:51:21,840
a good rule of thumb is to label all of

7014
04:51:19,119 --> 04:51:23,840
your resources so that this way you're

7015
04:51:21,840 --> 04:51:26,240
able to find them a lot easier and

7016
04:51:23,840 --> 04:51:28,560
you're able to query them a lot easier

7017
04:51:26,240 --> 04:51:31,040
so moving forward with any of your

7018
04:51:28,560 --> 04:51:33,840
resources that you are creating be sure

7019
04:51:31,040 --> 04:51:35,920
to add some labels to give you maximum

7020
04:51:33,840 --> 04:51:38,080
flexibility so i'm going to discard

7021
04:51:35,919 --> 04:51:40,559
these changes and we're going to move on

7022
04:51:38,080 --> 04:51:43,120
to settings and we touched on settings

7023
04:51:40,560 --> 04:51:45,360
in an earlier lesson with regards to

7024
04:51:43,119 --> 04:51:47,680
projects and so here i could change the

7025
04:51:45,360 --> 04:51:50,319
project name it'll give me the project

7026
04:51:47,680 --> 04:51:52,718
id the project number and i'm able to

7027
04:51:50,319 --> 04:51:55,279
migrate or shut down the project now

7028
04:51:52,718 --> 04:51:58,000
when it comes to access transparency

7029
04:51:55,279 --> 04:52:01,360
this provides you with logs that capture

7030
04:51:58,000 --> 04:52:03,439
the actions that google personnel take

7031
04:52:01,360 --> 04:52:05,840
when they're accessing your content for

7032
04:52:03,439 --> 04:52:08,797
troubleshooting so they're like cloud

7033
04:52:05,840 --> 04:52:11,840
audit logs but for google support now in

7034
04:52:08,797 --> 04:52:14,079
order to enable access transparency for

7035
04:52:11,840 --> 04:52:16,878
your google cloud organization

7036
04:52:14,080 --> 04:52:20,000
your google cloud account must have a

7037
04:52:16,878 --> 04:52:23,119
premium support plan or a minimum level

7038
04:52:20,000 --> 04:52:25,279
of a 400 a month support plan and

7039
04:52:23,119 --> 04:52:28,079
because i don't have this i wouldn't be

7040
04:52:25,279 --> 04:52:30,559
able to enable access transparency now

7041
04:52:28,080 --> 04:52:31,760
although access transparency is not on

7042
04:52:30,560 --> 04:52:34,560
the exam

7043
04:52:31,759 --> 04:52:36,637
this is a great feature to know about in

7044
04:52:34,560 --> 04:52:38,798
case you are working in any bigger

7045
04:52:36,637 --> 04:52:42,079
environments that have these support

7046
04:52:38,797 --> 04:52:44,717
plans and compliance is of the utmost

7047
04:52:42,080 --> 04:52:47,840
importance now moving into privacy and

7048
04:52:44,718 --> 04:52:50,400
security this is where google supplies

7049
04:52:47,840 --> 04:52:52,797
all of their clients of google cloud the

7050
04:52:50,400 --> 04:52:55,520
compliance that they need in order to

7051
04:52:52,797 --> 04:52:58,399
meet regulations across the world and

7052
04:52:55,520 --> 04:53:01,040
across various industries such as health

7053
04:52:58,400 --> 04:53:03,920
care and education and because google

7054
04:53:01,040 --> 04:53:06,878
has a broad base in europe google

7055
04:53:03,919 --> 04:53:09,279
provides capabilities and contractual

7056
04:53:06,878 --> 04:53:11,840
commitments created to meet data

7057
04:53:09,279 --> 04:53:14,159
protection recommendations which is why

7058
04:53:11,840 --> 04:53:15,279
you can see here eu model contract

7059
04:53:14,159 --> 04:53:18,479
clauses

7060
04:53:15,279 --> 04:53:21,199
and eu representative contacts as well

7061
04:53:18,479 --> 04:53:23,840
under transparency and control i'm able

7062
04:53:21,200 --> 04:53:26,560
to disable the usage data that google

7063
04:53:23,840 --> 04:53:29,200
collects in order to provide better data

7064
04:53:26,560 --> 04:53:31,520
insights and recommendations and this is

7065
04:53:29,200 --> 04:53:33,920
done at the project level and as well i

7066
04:53:31,520 --> 04:53:36,000
have the option of going over to my

7067
04:53:33,919 --> 04:53:37,919
billing account and i could select a

7068
04:53:36,000 --> 04:53:40,080
different billing account that's linked

7069
04:53:37,919 --> 04:53:42,559
to some other projects that you can get

7070
04:53:40,080 --> 04:53:45,120
recommendations on and so continuing

7071
04:53:42,560 --> 04:53:46,878
forward identity aware proxy is

7072
04:53:45,119 --> 04:53:49,279
something that i will be covering in a

7073
04:53:46,878 --> 04:53:51,680
later lesson and so i won't be getting

7074
04:53:49,279 --> 04:53:53,840
into any detail about that right now and

7075
04:53:51,680 --> 04:53:56,560
so what i really wanted to dig into is

7076
04:53:53,840 --> 04:53:59,040
roles now this may look familiar as i

7077
04:53:56,560 --> 04:54:01,360
touched on this very briefly in a

7078
04:53:59,040 --> 04:54:03,040
previous lesson and here's where i can

7079
04:54:01,360 --> 04:54:05,040
create roles

7080
04:54:03,040 --> 04:54:07,440
i can create some custom roles from

7081
04:54:05,040 --> 04:54:09,760
different selections and here i have

7082
04:54:07,439 --> 04:54:12,637
access to all the permissions

7083
04:54:09,759 --> 04:54:15,119
and if i wanted to i can filter down

7084
04:54:12,637 --> 04:54:17,840
from the different types the names the

7085
04:54:15,119 --> 04:54:20,079
permissions even the status so let's say

7086
04:54:17,840 --> 04:54:22,080
i was looking for a specific permission

7087
04:54:20,080 --> 04:54:24,718
and i'm looking all the permissions for

7088
04:54:22,080 --> 04:54:26,480
projects this could help me find exactly

7089
04:54:24,718 --> 04:54:28,958
what it is that i'm looking for and

7090
04:54:26,479 --> 04:54:31,439
these filters allow me to get really

7091
04:54:28,957 --> 04:54:33,599
granular so i can find the exact

7092
04:54:31,439 --> 04:54:35,599
permission and so you can get really

7093
04:54:33,599 --> 04:54:37,919
granular with regards to your

7094
04:54:35,599 --> 04:54:40,399
permissions and create roles that are

7095
04:54:37,919 --> 04:54:43,439
custom to your environment now moving on

7096
04:54:40,400 --> 04:54:45,920
to audit logs here i can enable the auto

7097
04:54:43,439 --> 04:54:48,479
logs without having to use a specific

7098
04:54:45,919 --> 04:54:51,359
policy by simply clicking on default

7099
04:54:48,479 --> 04:54:52,159
autoconfig and here i can turn on and

7100
04:54:51,360 --> 04:54:54,560
off

7101
04:54:52,159 --> 04:54:57,680
all the selected logging

7102
04:54:54,560 --> 04:55:00,000
as well as add any exempted users now i

7103
04:54:57,680 --> 04:55:02,878
don't recommend that you turn these on

7104
04:55:00,000 --> 04:55:05,200
as audit logging can create an extremely

7105
04:55:02,878 --> 04:55:08,560
large amount of data and can quickly

7106
04:55:05,200 --> 04:55:10,798
blow through all of your 300 credit so

7107
04:55:08,560 --> 04:55:13,520
i'm going to keep that off move back to

7108
04:55:10,797 --> 04:55:15,520
the main screen of the audit logs and as

7109
04:55:13,520 --> 04:55:18,319
well here i'm able to get really

7110
04:55:15,520 --> 04:55:20,400
granular about what i want to log now

7111
04:55:18,319 --> 04:55:23,119
quickly touching on audit logs in the

7112
04:55:20,400 --> 04:55:26,159
command line i wanted to quickly open up

7113
04:55:23,119 --> 04:55:28,878
cloud shell and show you an example of

7114
04:55:26,159 --> 04:55:31,119
how i can edit the policy in order to

7115
04:55:28,878 --> 04:55:32,878
enable audit logging just going to make

7116
04:55:31,119 --> 04:55:35,360
this a little bit bigger

7117
04:55:32,878 --> 04:55:39,200
and i'm going to paste in my command

7118
04:55:35,360 --> 04:55:40,400
gcloud projects get dash iam

7119
04:55:39,200 --> 04:55:42,560
dash policy

7120
04:55:40,400 --> 04:55:44,360
with the project id which is project

7121
04:55:42,560 --> 04:55:47,600
tony

7122
04:55:44,360 --> 04:55:49,600
286016 and i'm gonna just hit enter

7123
04:55:47,599 --> 04:55:52,877
and as you can see here this is my

7124
04:55:49,599 --> 04:55:55,359
current policy and as well as expected

7125
04:55:52,878 --> 04:55:58,159
audit logs are not enabled due to the

7126
04:55:55,360 --> 04:56:00,637
fact that the audit config field is not

7127
04:55:58,159 --> 04:56:03,040
present so in order for me to enable the

7128
04:56:00,637 --> 04:56:05,360
audit config logs i'm going to have to

7129
04:56:03,040 --> 04:56:07,920
edit the policy and so the easiest way

7130
04:56:05,360 --> 04:56:10,958
for me to do that is for me to run the

7131
04:56:07,919 --> 04:56:12,957
same command and output it to a file

7132
04:56:10,957 --> 04:56:14,000
where i can edit it and i'm going to

7133
04:56:12,957 --> 04:56:17,759
call this

7134
04:56:14,000 --> 04:56:19,680
new dash policy dot yaml and so now that

7135
04:56:17,759 --> 04:56:22,797
my policy has been outputted to this

7136
04:56:19,680 --> 04:56:25,279
file i'm going to now go into the editor

7137
04:56:22,797 --> 04:56:27,759
and as you can see my new policy.yaml is

7138
04:56:25,279 --> 04:56:30,239
right here and so for me to enable the

7139
04:56:27,759 --> 04:56:32,479
autoconfig logs i'm going to simply

7140
04:56:30,240 --> 04:56:35,360
append it to the file and then i'm going

7141
04:56:32,479 --> 04:56:38,000
to go over here to the top menu

7142
04:56:35,360 --> 04:56:40,479
and click on file and save and so now

7143
04:56:38,000 --> 04:56:42,718
for me to apply this new policy i'm

7144
04:56:40,479 --> 04:56:44,159
going to go back over to the terminal

7145
04:56:42,718 --> 04:56:45,200
and now i'm going to paste in the

7146
04:56:44,159 --> 04:56:48,840
command

7147
04:56:45,200 --> 04:56:51,760
gcloud projects set dash

7148
04:56:48,840 --> 04:56:54,878
iam-policy with the project id and the

7149
04:56:51,759 --> 04:56:57,519
file name new dash policy dot yaml and

7150
04:56:54,878 --> 04:57:00,080
i'm just going to hit enter

7151
04:56:57,520 --> 04:57:02,957
and as you can see the audit log configs

7152
04:57:00,080 --> 04:57:05,200
have been enabled for all services and

7153
04:57:02,957 --> 04:57:07,680
because this may take some time to

7154
04:57:05,200 --> 04:57:10,958
reflect in the console it will not show

7155
04:57:07,680 --> 04:57:13,360
up right away but either way audit logs

7156
04:57:10,957 --> 04:57:16,239
usually take up a lot of data and i

7157
04:57:13,360 --> 04:57:18,560
don't want to blow through my 300 credit

7158
04:57:16,240 --> 04:57:21,040
and so i'm going to disable them now the

7159
04:57:18,560 --> 04:57:24,000
easiest way for me to do this is to

7160
04:57:21,040 --> 04:57:26,080
output this policy to another file edit

7161
04:57:24,000 --> 04:57:28,080
it and set it again and so i'm going to

7162
04:57:26,080 --> 04:57:29,920
go ahead and do that i'm going to first

7163
04:57:28,080 --> 04:57:32,638
clear the screen and then i'm going to

7164
04:57:29,919 --> 04:57:35,759
paste in my command while outputting it

7165
04:57:32,637 --> 04:57:38,239
to a new file called updated dash policy

7166
04:57:35,759 --> 04:57:40,637
dot yaml and i'm gonna hit enter and now

7167
04:57:38,240 --> 04:57:43,200
i'm gonna go into the editor so i can

7168
04:57:40,637 --> 04:57:45,360
edit the file now the one thing i wanted

7169
04:57:43,200 --> 04:57:46,479
to point out is that i could have

7170
04:57:45,360 --> 04:57:49,520
overwritten

7171
04:57:46,479 --> 04:57:53,200
the file new dash policy but if you look

7172
04:57:49,520 --> 04:57:55,920
here in the updated policy the e-tag

7173
04:57:53,200 --> 04:57:57,920
is different than the e-tag in the old

7174
04:57:55,919 --> 04:58:00,479
policy and so this allowed me to

7175
04:57:57,919 --> 04:58:03,359
highlight e-tags when it comes to

7176
04:58:00,479 --> 04:58:06,000
editing and creating new policies and so

7177
04:58:03,360 --> 04:58:08,637
when editing policies make sure that the

7178
04:58:06,000 --> 04:58:11,200
etag is correct otherwise you will

7179
04:58:08,637 --> 04:58:13,919
receive an error and not be able to set

7180
04:58:11,200 --> 04:58:16,400
the new policy so going back to the

7181
04:58:13,919 --> 04:58:18,637
updated policy file i'm going to take

7182
04:58:16,400 --> 04:58:20,718
out the audit log configs and i'm going

7183
04:58:18,637 --> 04:58:22,878
to leave the auto configs field there

7184
04:58:20,718 --> 04:58:25,119
and i'm going to go to the menu click on

7185
04:58:22,878 --> 04:58:27,040
file and then save now i'm going to go

7186
04:58:25,119 --> 04:58:29,279
back to the terminal and i'm going to

7187
04:58:27,040 --> 04:58:31,920
paste in the new command and this will

7188
04:58:29,279 --> 04:58:34,559
update my policy and as you can see the

7189
04:58:31,919 --> 04:58:36,957
audit config logs have been disabled and

7190
04:58:34,560 --> 04:58:39,360
the policy has been updated now this is

7191
04:58:36,957 --> 04:58:41,279
the same process that you can use when

7192
04:58:39,360 --> 04:58:44,878
you want to update any parts of the

7193
04:58:41,279 --> 04:58:48,159
policy when it comes to your members or

7194
04:58:44,878 --> 04:58:50,878
roles and even adding any conditions so

7195
04:58:48,159 --> 04:58:51,840
now moving on to the last item on the

7196
04:58:50,878 --> 04:58:53,360
menu

7197
04:58:51,840 --> 04:58:55,680
is groups

7198
04:58:53,360 --> 04:58:58,159
and as you can see here because i do not

7199
04:58:55,680 --> 04:59:00,957
have an organization i'm not able to

7200
04:58:58,159 --> 04:59:03,680
view any groups and so if i did have an

7201
04:59:00,957 --> 04:59:06,159
organization i could manage my groups

7202
04:59:03,680 --> 04:59:07,840
right here in this page now moving back

7203
04:59:06,159 --> 04:59:10,319
over to iam

7204
04:59:07,840 --> 04:59:12,797
i wanted to dig into policies in a

7205
04:59:10,319 --> 04:59:15,759
little bit of further detail now what we

7206
04:59:12,797 --> 04:59:17,919
see here are the permissions and roles

7207
04:59:15,759 --> 04:59:20,877
that have been granted to selected

7208
04:59:17,919 --> 04:59:23,679
members in this specific project which

7209
04:59:20,878 --> 04:59:26,718
is project tony now remember an im

7210
04:59:23,680 --> 04:59:29,040
policy is a total collection of members

7211
04:59:26,718 --> 04:59:31,200
that have roles granted to them in

7212
04:59:29,040 --> 04:59:33,840
what's known as a binding and then the

7213
04:59:31,200 --> 04:59:36,240
binding is applied to that layer and all

7214
04:59:33,840 --> 04:59:38,718
other layers underneath it and since i'm

7215
04:59:36,240 --> 04:59:41,120
at the project layer this policy is

7216
04:59:38,718 --> 04:59:43,520
inherited by all the resources

7217
04:59:41,119 --> 04:59:45,360
underneath it and so just to verify

7218
04:59:43,520 --> 04:59:48,400
through the command line i'm going to

7219
04:59:45,360 --> 04:59:48,400
open up cloud shell

7220
04:59:50,797 --> 04:59:55,878
and i'm going to paste in the command

7221
04:59:52,957 --> 04:59:59,119
gcloud projects get dash

7222
04:59:55,878 --> 05:00:00,718
iam-policy with my project id

7223
04:59:59,119 --> 05:00:03,520
and i'm going to hit enter

7224
05:00:00,718 --> 05:00:05,760
and as you can see here the policy is a

7225
05:00:03,520 --> 05:00:08,319
reflection of exactly what you see here

7226
05:00:05,759 --> 05:00:10,637
in the console so as you can see here

7227
05:00:08,319 --> 05:00:12,560
here's the service agent which you will

7228
05:00:10,637 --> 05:00:14,637
find here and the other two service

7229
05:00:12,560 --> 05:00:18,479
accounts which you will find above

7230
05:00:14,637 --> 05:00:21,039
as well as tony bowtie ace gmail.com and

7231
05:00:18,479 --> 05:00:23,840
all the other roles that accompany those

7232
05:00:21,040 --> 05:00:26,718
members so as i mentioned earlier i've

7233
05:00:23,840 --> 05:00:28,878
gone ahead and created a new user and so

7234
05:00:26,718 --> 05:00:31,440
for those who are following along you

7235
05:00:28,878 --> 05:00:34,159
can go ahead and feel free to create a

7236
05:00:31,439 --> 05:00:37,119
new gmail user now going ahead with this

7237
05:00:34,159 --> 05:00:40,000
demonstration the user i created is

7238
05:00:37,119 --> 05:00:42,159
named laura delightful now tony needed

7239
05:00:40,000 --> 05:00:44,560
an extra hand and decided to bring her

7240
05:00:42,159 --> 05:00:47,119
onto the team from another department

7241
05:00:44,560 --> 05:00:49,920
now unfortunately in order for laura to

7242
05:00:47,119 --> 05:00:52,239
help tony on the project she needs

7243
05:00:49,919 --> 05:00:55,199
access to this project and as you can

7244
05:00:52,240 --> 05:00:57,360
see she doesn't have any access and so

7245
05:00:55,200 --> 05:00:59,760
we're going to go ahead and change that

7246
05:00:57,360 --> 05:01:02,400
and give her access to this project so

7247
05:00:59,759 --> 05:01:05,039
i'm going to go back over to my open tab

7248
05:01:02,400 --> 05:01:07,360
for tony bowtie ace and we're gonna go

7249
05:01:05,040 --> 05:01:09,200
ahead and give laura permissions and so

7250
05:01:07,360 --> 05:01:11,360
i'm gonna go ahead and click on this add

7251
05:01:09,200 --> 05:01:14,080
button at the top of the page and the

7252
05:01:11,360 --> 05:01:16,560
prompt will ask me to add a new member

7253
05:01:14,080 --> 05:01:18,958
so i'm gonna add laura in here now

7254
05:01:16,560 --> 05:01:20,000
and here she is and i'm going to select

7255
05:01:18,957 --> 05:01:22,559
the role

7256
05:01:20,000 --> 05:01:25,040
as project viewer i'm not going to add

7257
05:01:22,560 --> 05:01:27,440
any conditions and i'm simply going to

7258
05:01:25,040 --> 05:01:30,319
click on save and the policy has been

7259
05:01:27,439 --> 05:01:32,079
updated and as you can see here laura

7260
05:01:30,319 --> 05:01:34,319
has been granted the role of project

7261
05:01:32,080 --> 05:01:36,798
viewer so i'm going to move over to the

7262
05:01:34,319 --> 05:01:38,637
other open tab where laura's console is

7263
05:01:36,797 --> 05:01:41,199
open and i'm going to simply do a

7264
05:01:38,637 --> 05:01:41,200
refresh

7265
05:01:41,520 --> 05:01:48,560
and now laura has access to view all the

7266
05:01:45,119 --> 05:01:50,159
resources within project tony now laura

7267
05:01:48,560 --> 05:01:52,798
is able to view everything in the

7268
05:01:50,159 --> 05:01:55,279
project but laura isn't actually able to

7269
05:01:52,797 --> 05:01:58,479
do anything and so in order for laura to

7270
05:01:55,279 --> 05:02:01,360
get things done a big part of her job is

7271
05:01:58,479 --> 05:02:04,479
going to be creating files with new

7272
05:02:01,360 --> 05:02:08,400
ideas for the fall winter line of bow

7273
05:02:04,479 --> 05:02:10,957
ties in 2021 and so because laura holds

7274
05:02:08,400 --> 05:02:13,760
the project viewer role she is able to

7275
05:02:10,957 --> 05:02:16,239
see everything in cloud storage but she

7276
05:02:13,759 --> 05:02:20,079
is unable to create buckets

7277
05:02:16,240 --> 05:02:22,878
to upload edit or delete any files or

7278
05:02:20,080 --> 05:02:25,840
even folders and as you can see here

7279
05:02:22,878 --> 05:02:29,440
there is a folder marked bowtie inc

7280
05:02:25,840 --> 05:02:31,520
fallwinter 2021 ideas but laura cannot

7281
05:02:29,439 --> 05:02:33,840
create any new buckets because she

7282
05:02:31,520 --> 05:02:36,400
doesn't have the required permissions as

7283
05:02:33,840 --> 05:02:39,360
well drilling down into this bucket

7284
05:02:36,400 --> 05:02:41,040
laura is unable to create any folders as

7285
05:02:39,360 --> 05:02:43,600
explained earlier

7286
05:02:41,040 --> 05:02:45,760
and the same stands for uploading any

7287
05:02:43,599 --> 05:02:47,919
files and so i'm going to cancel out of

7288
05:02:45,759 --> 05:02:51,039
this and so in order to give laura the

7289
05:02:47,919 --> 05:02:52,797
proper permissions for her to do her job

7290
05:02:51,040 --> 05:02:56,000
we're going to give laura the storage

7291
05:02:52,797 --> 05:02:58,717
admin role and so moving back over to

7292
05:02:56,000 --> 05:03:01,040
the open console for tony bowtie i'm

7293
05:02:58,718 --> 05:03:03,119
going to give laura access by using the

7294
05:03:01,040 --> 05:03:06,240
command line so i'm going to go up to

7295
05:03:03,119 --> 05:03:08,479
the top right and open up cloud shell

7296
05:03:06,240 --> 05:03:11,440
and so the command i need to run

7297
05:03:08,479 --> 05:03:14,560
to give laura the role of storage admin

7298
05:03:11,439 --> 05:03:18,559
would be the following gcloud projects

7299
05:03:14,560 --> 05:03:21,600
add dash iam dash policy dash binding

7300
05:03:18,560 --> 05:03:24,240
with the project id dash dash member

7301
05:03:21,599 --> 05:03:27,759
user followed by colon and then the user

7302
05:03:24,240 --> 05:03:30,000
name which is laura delightful gmail.com

7303
05:03:27,759 --> 05:03:32,319
dash dash role and the role which is

7304
05:03:30,000 --> 05:03:34,000
storage admin and i'm going to go ahead

7305
05:03:32,319 --> 05:03:36,319
and hit enter

7306
05:03:34,000 --> 05:03:38,797
and as you can see it has been executed

7307
05:03:36,319 --> 05:03:40,797
successfully so if i do a refresh of the

7308
05:03:38,797 --> 05:03:44,079
web page here i'm going to be able to

7309
05:03:40,797 --> 05:03:46,479
see the changes reflected in the console

7310
05:03:44,080 --> 05:03:49,200
and after a refresh you can see here

7311
05:03:46,479 --> 05:03:52,479
storage admin has been added to the role

7312
05:03:49,200 --> 05:03:54,958
for laura delightful gmail.com and so if

7313
05:03:52,479 --> 05:03:57,680
i go over to the open tab where laura

7314
05:03:54,957 --> 05:03:59,919
has her console open i can simply do a

7315
05:03:57,680 --> 05:04:02,080
refresh

7316
05:03:59,919 --> 05:04:04,717
and if i go back to the home page for

7317
05:04:02,080 --> 05:04:07,440
cloud storage you can see here that

7318
05:04:04,718 --> 05:04:10,878
laura now has the permissions to create

7319
05:04:07,439 --> 05:04:14,319
a bucket laura also now has permissions

7320
05:04:10,878 --> 05:04:17,440
to create new folders create edit and

7321
05:04:14,319 --> 05:04:20,079
delete new files on top of being able to

7322
05:04:17,439 --> 05:04:22,717
create new storage buckets and so that

7323
05:04:20,080 --> 05:04:25,200
about wraps up this demonstration on

7324
05:04:22,718 --> 05:04:28,159
getting hands-on with iam

7325
05:04:25,200 --> 05:04:30,479
in both the console and the command line

7326
05:04:28,159 --> 05:04:32,479
and i also hope that this demo has given

7327
05:04:30,479 --> 05:04:34,797
you a bit more confidence

7328
05:04:32,479 --> 05:04:37,520
on working in the shell running the

7329
05:04:34,797 --> 05:04:40,559
commands needed in order to create new

7330
05:04:37,520 --> 05:04:41,920
bindings along with editing existing

7331
05:04:40,560 --> 05:04:43,840
policies

7332
05:04:41,919 --> 05:04:46,957
and this will get you comfortable for

7333
05:04:43,840 --> 05:04:49,599
when you need to assign roles to new and

7334
05:04:46,957 --> 05:04:52,319
existing users that are added to your

7335
05:04:49,599 --> 05:04:54,079
gcp environment and so you can now mark

7336
05:04:52,319 --> 05:04:58,520
this lesson as complete

7337
05:04:54,080 --> 05:04:58,520
and let's move on to the next one

7338
05:05:00,319 --> 05:05:06,319
welcome back in this lesson i'm going to

7339
05:05:03,040 --> 05:05:08,718
take a deep dive into service accounts

7340
05:05:06,319 --> 05:05:11,520
now service accounts play a powerful

7341
05:05:08,718 --> 05:05:14,000
part in google cloud and can allow a

7342
05:05:11,520 --> 05:05:16,957
different approach for application

7343
05:05:14,000 --> 05:05:20,080
interaction with the resources in google

7344
05:05:16,957 --> 05:05:22,957
cloud now service accounts being both an

7345
05:05:20,080 --> 05:05:25,360
identity and a resource can cause some

7346
05:05:22,957 --> 05:05:27,680
confusion for some and so i really

7347
05:05:25,360 --> 05:05:30,240
wanted to spend some time breaking it

7348
05:05:27,680 --> 05:05:32,718
down for better understanding and so i'm

7349
05:05:30,240 --> 05:05:35,360
first going to start off by explaining

7350
05:05:32,718 --> 05:05:37,760
what exactly is a service account and so

7351
05:05:35,360 --> 05:05:41,119
a service account is a special kind of

7352
05:05:37,759 --> 05:05:44,079
account that is used by an application

7353
05:05:41,119 --> 05:05:45,039
or a virtual machine instance and not a

7354
05:05:44,080 --> 05:05:48,160
person

7355
05:05:45,040 --> 05:05:51,120
an application uses the service account

7356
05:05:48,159 --> 05:05:54,240
to authenticate between the application

7357
05:05:51,119 --> 05:05:56,957
and gcp services so that the users

7358
05:05:54,240 --> 05:05:59,520
aren't directly involved in short it is

7359
05:05:56,957 --> 05:06:03,119
a special type of google account

7360
05:05:59,520 --> 05:06:05,520
intended to represent a non-human user

7361
05:06:03,119 --> 05:06:09,680
that needs to authenticate and be

7362
05:06:05,520 --> 05:06:11,920
authorized to access data in google apis

7363
05:06:09,680 --> 05:06:14,479
this way the service account is the

7364
05:06:11,919 --> 05:06:16,957
identity of the service and the service

7365
05:06:14,479 --> 05:06:19,919
accounts permissions control which

7366
05:06:16,957 --> 05:06:22,637
resources the service can access and as

7367
05:06:19,919 --> 05:06:24,399
a note a service account is identified

7368
05:06:22,637 --> 05:06:27,200
by its email address

7369
05:06:24,400 --> 05:06:29,600
which is unique to the account now the

7370
05:06:27,200 --> 05:06:32,000
different service account types

7371
05:06:29,599 --> 05:06:33,519
come in three different flavors

7372
05:06:32,000 --> 05:06:35,919
user managed

7373
05:06:33,520 --> 05:06:37,920
default and google managed service

7374
05:06:35,919 --> 05:06:39,679
accounts when it comes to the user

7375
05:06:37,919 --> 05:06:41,519
managed service accounts

7376
05:06:39,680 --> 05:06:42,637
these are service accounts that you

7377
05:06:41,520 --> 05:06:44,718
create

7378
05:06:42,637 --> 05:06:46,559
you're responsible for managing and

7379
05:06:44,718 --> 05:06:49,920
securing these accounts

7380
05:06:46,560 --> 05:06:52,400
and by default you can create up to 100

7381
05:06:49,919 --> 05:06:55,359
user managed service accounts in a

7382
05:06:52,400 --> 05:06:58,080
project or you can also request a quota

7383
05:06:55,360 --> 05:07:00,240
increase in case you need more now when

7384
05:06:58,080 --> 05:07:02,718
you create a user managed service

7385
05:07:00,240 --> 05:07:04,878
account in your project it is you that

7386
05:07:02,718 --> 05:07:07,680
chooses a name for the service account

7387
05:07:04,878 --> 05:07:09,840
this name appears in the email address

7388
05:07:07,680 --> 05:07:12,240
that identifies the service account

7389
05:07:09,840 --> 05:07:14,797
which uses the following format seen

7390
05:07:12,240 --> 05:07:17,280
here the service account name

7391
05:07:14,797 --> 05:07:20,279
at the project id dot

7392
05:07:17,279 --> 05:07:20,279
iam.gserviceaccount.com

7393
05:07:20,479 --> 05:07:23,680
now moving on to the default service

7394
05:07:22,637 --> 05:07:26,878
accounts

7395
05:07:23,680 --> 05:07:28,797
when you use some google cloud services

7396
05:07:26,878 --> 05:07:31,520
they create user managed service

7397
05:07:28,797 --> 05:07:34,637
accounts that enable the service to

7398
05:07:31,520 --> 05:07:37,520
deploy jobs that access other google

7399
05:07:34,637 --> 05:07:39,919
cloud resources these accounts are known

7400
05:07:37,520 --> 05:07:42,400
as default service accounts so when it

7401
05:07:39,919 --> 05:07:45,439
comes to production workloads google

7402
05:07:42,400 --> 05:07:48,400
strongly recommends that you create your

7403
05:07:45,439 --> 05:07:50,717
own user managed service accounts and

7404
05:07:48,400 --> 05:07:52,718
grant the appropriate roles to each

7405
05:07:50,718 --> 05:07:55,600
service account when a default service

7406
05:07:52,718 --> 05:07:58,798
account is created it is automatically

7407
05:07:55,599 --> 05:08:00,957
granted the editor role on your project

7408
05:07:58,797 --> 05:08:04,000
now following the principle of lease

7409
05:08:00,957 --> 05:08:06,399
privilege google strongly recommends

7410
05:08:04,000 --> 05:08:07,360
that you disable the automatic role

7411
05:08:06,400 --> 05:08:09,440
grant

7412
05:08:07,360 --> 05:08:11,279
by adding a constraint to your

7413
05:08:09,439 --> 05:08:14,399
organization policy

7414
05:08:11,279 --> 05:08:16,637
or by revoking the editor role manually

7415
05:08:14,400 --> 05:08:18,718
the default service account will be

7416
05:08:16,637 --> 05:08:21,119
assigned an email address

7417
05:08:18,718 --> 05:08:22,479
following the format you see here

7418
05:08:21,119 --> 05:08:25,718
project id

7419
05:08:22,479 --> 05:08:25,718
at appspot.gserviceaccount.com

7420
05:08:25,840 --> 05:08:32,080
for any service accounts created by app

7421
05:08:28,797 --> 05:08:35,239
engine and project number dash compute

7422
05:08:32,080 --> 05:08:35,240
at developer.gserviceaccount.com

7423
05:08:35,599 --> 05:08:41,199
for compute engine and so lastly when it

7424
05:08:38,479 --> 05:08:44,239
comes to google managed service accounts

7425
05:08:41,200 --> 05:08:47,040
these are created and managed by google

7426
05:08:44,240 --> 05:08:49,520
and they are used by google services the

7427
05:08:47,040 --> 05:08:50,878
display name of most google managed

7428
05:08:49,520 --> 05:08:52,600
service accounts

7429
05:08:50,878 --> 05:08:55,040
ends with a

7430
05:08:52,599 --> 05:08:57,199
gserviceaccount.com address now some of

7431
05:08:55,040 --> 05:08:59,840
these service accounts are visible but

7432
05:08:57,200 --> 05:09:03,040
others are hidden so for example

7433
05:08:59,840 --> 05:09:05,680
google api service agent is a service

7434
05:09:03,040 --> 05:09:07,920
account named with an email address that

7435
05:09:05,680 --> 05:09:12,439
uses the following format

7436
05:09:07,919 --> 05:09:12,439
project number at cloudservices.gerisa

7437
05:09:13,040 --> 05:09:18,479
and this runs internal google processes

7438
05:09:16,159 --> 05:09:20,878
on your behalf and this is just one

7439
05:09:18,479 --> 05:09:23,439
example of the many google managed

7440
05:09:20,878 --> 05:09:25,440
services that run in your environment

7441
05:09:23,439 --> 05:09:28,159
and just as a warning it is not

7442
05:09:25,439 --> 05:09:31,359
recommended to change or revoke the

7443
05:09:28,159 --> 05:09:33,759
roles that are granted to the google api

7444
05:09:31,360 --> 05:09:35,760
service agent or to any other google

7445
05:09:33,759 --> 05:09:38,637
managed service accounts for that matter

7446
05:09:35,759 --> 05:09:41,039
if you change or revoke these roles

7447
05:09:38,637 --> 05:09:43,119
some google cloud services will no

7448
05:09:41,040 --> 05:09:45,840
longer work now when it comes to

7449
05:09:43,119 --> 05:09:48,637
authentication for service accounts they

7450
05:09:45,840 --> 05:09:51,119
authenticate using service account keys

7451
05:09:48,637 --> 05:09:54,878
so each service account is associated

7452
05:09:51,119 --> 05:09:57,599
with two sets of public and private rsa

7453
05:09:54,878 --> 05:09:59,920
key pairs that are used to authenticate

7454
05:09:57,599 --> 05:10:02,957
to google they are the google manage

7455
05:09:59,919 --> 05:10:05,839
keys and the user manage keys with the

7456
05:10:02,957 --> 05:10:08,000
google manage keys google stores both

7457
05:10:05,840 --> 05:10:08,878
the public and private portion of the

7458
05:10:08,000 --> 05:10:11,599
key

7459
05:10:08,878 --> 05:10:14,560
rotates them regularly and the private

7460
05:10:11,599 --> 05:10:17,680
key is always held in escrow and is

7461
05:10:14,560 --> 05:10:21,920
never directly accessible iam provides

7462
05:10:17,680 --> 05:10:24,159
apis to use these keys to sign on behalf

7463
05:10:21,919 --> 05:10:27,119
of the service account now when using

7464
05:10:24,159 --> 05:10:29,840
user managed key pairs this implies that

7465
05:10:27,119 --> 05:10:32,559
you own both the public and private

7466
05:10:29,840 --> 05:10:35,520
portions of a key pair you can create

7467
05:10:32,560 --> 05:10:38,240
one or more user managed key pairs also

7468
05:10:35,520 --> 05:10:41,119
known as external keys that can be used

7469
05:10:38,240 --> 05:10:43,680
from outside of google cloud google only

7470
05:10:41,119 --> 05:10:44,957
stores the public portion of a user

7471
05:10:43,680 --> 05:10:48,479
managed key

7472
05:10:44,957 --> 05:10:51,119
so you are responsible for the security

7473
05:10:48,479 --> 05:10:53,439
of the private key as well as the key

7474
05:10:51,119 --> 05:10:56,399
rotation private keys cannot be

7475
05:10:53,439 --> 05:10:58,000
retrieved by google so if you're using a

7476
05:10:56,400 --> 05:11:00,000
user manage key

7477
05:10:58,000 --> 05:11:02,400
please be aware that if you lose your

7478
05:11:00,000 --> 05:11:04,637
key your service account will

7479
05:11:02,400 --> 05:11:07,360
effectively stop working google

7480
05:11:04,637 --> 05:11:10,399
recommends storing these keys in cloud

7481
05:11:07,360 --> 05:11:12,797
kms for better security and better

7482
05:11:10,400 --> 05:11:15,600
management user managed keys are

7483
05:11:12,797 --> 05:11:18,159
extremely powerful credentials and they

7484
05:11:15,599 --> 05:11:20,559
can represent a security risk if they

7485
05:11:18,159 --> 05:11:23,759
are not managed correctly and as you can

7486
05:11:20,560 --> 05:11:25,600
see here a user managed key has many

7487
05:11:23,759 --> 05:11:27,359
different areas that need to be

7488
05:11:25,599 --> 05:11:29,599
addressed when it comes to key

7489
05:11:27,360 --> 05:11:31,360
management now when it comes to service

7490
05:11:29,599 --> 05:11:33,759
account permissions

7491
05:11:31,360 --> 05:11:36,797
in addition to being an identity a

7492
05:11:33,759 --> 05:11:39,519
service account is a resource which has

7493
05:11:36,797 --> 05:11:42,079
im policies attached to it and these

7494
05:11:39,520 --> 05:11:44,479
policies determine who can use the

7495
05:11:42,080 --> 05:11:46,878
service account so for instance

7496
05:11:44,479 --> 05:11:49,439
lark can have the editor role on a

7497
05:11:46,878 --> 05:11:52,080
service account and laura can have a

7498
05:11:49,439 --> 05:11:54,717
viewer role on a service account so this

7499
05:11:52,080 --> 05:11:57,200
is just like granting roles for any

7500
05:11:54,718 --> 05:11:58,159
other google cloud resource just as a

7501
05:11:57,200 --> 05:12:00,479
note

7502
05:11:58,159 --> 05:12:02,957
the default compute engine and app

7503
05:12:00,479 --> 05:12:05,759
engine service accounts are granted

7504
05:12:02,957 --> 05:12:08,797
editor roles on the project when they

7505
05:12:05,759 --> 05:12:11,919
are created so that the code executing

7506
05:12:08,797 --> 05:12:14,479
in your app or vm instance has the

7507
05:12:11,919 --> 05:12:17,119
necessary permissions now you can grant

7508
05:12:14,479 --> 05:12:19,520
the service account user role at both

7509
05:12:17,119 --> 05:12:21,919
the project level for all service

7510
05:12:19,520 --> 05:12:24,240
accounts in the project or at the

7511
05:12:21,919 --> 05:12:27,279
service account level now granting the

7512
05:12:24,240 --> 05:12:28,560
service account user role to a user for

7513
05:12:27,279 --> 05:12:31,279
a project

7514
05:12:28,560 --> 05:12:33,360
gives the user access to all service

7515
05:12:31,279 --> 05:12:35,759
accounts in the project

7516
05:12:33,360 --> 05:12:37,920
including service accounts that may be

7517
05:12:35,759 --> 05:12:41,359
created in the future granting the

7518
05:12:37,919 --> 05:12:42,479
service account user role to a user for

7519
05:12:41,360 --> 05:12:45,920
a specific

7520
05:12:42,479 --> 05:12:48,479
service account gives a user access to

7521
05:12:45,919 --> 05:12:50,957
only that service account so please be

7522
05:12:48,479 --> 05:12:54,000
aware when granting the service account

7523
05:12:50,957 --> 05:12:55,919
user role to any member now users who

7524
05:12:54,000 --> 05:12:59,279
are granted the service account user

7525
05:12:55,919 --> 05:13:01,199
role on a service account can use it to

7526
05:12:59,279 --> 05:13:03,680
indirectly access

7527
05:13:01,200 --> 05:13:05,680
all the resources to which the service

7528
05:13:03,680 --> 05:13:08,878
account has access

7529
05:13:05,680 --> 05:13:12,560
when this happens the user impersonates

7530
05:13:08,878 --> 05:13:15,360
the service account to perform any tasks

7531
05:13:12,560 --> 05:13:17,680
using its granted roles and permissions

7532
05:13:15,360 --> 05:13:19,840
and is known as service account

7533
05:13:17,680 --> 05:13:22,080
impersonation now when it comes to

7534
05:13:19,840 --> 05:13:24,957
service account permissions there is

7535
05:13:22,080 --> 05:13:28,000
also another method use called access

7536
05:13:24,957 --> 05:13:31,359
scopes service account scopes are the

7537
05:13:28,000 --> 05:13:33,119
legacy method of specifying permissions

7538
05:13:31,360 --> 05:13:36,159
for your instance

7539
05:13:33,119 --> 05:13:39,599
and they are used in substitution of iam

7540
05:13:36,159 --> 05:13:42,637
roles these are used specifically for

7541
05:13:39,599 --> 05:13:45,919
default or automatically created service

7542
05:13:42,637 --> 05:13:49,360
accounts based on enabled apis now

7543
05:13:45,919 --> 05:13:52,079
before the existence of iam roles access

7544
05:13:49,360 --> 05:13:54,400
scopes were the only way for granting

7545
05:13:52,080 --> 05:13:56,718
permissions to service accounts and

7546
05:13:54,400 --> 05:13:58,638
although they are not the primary way of

7547
05:13:56,718 --> 05:14:00,798
granting permissions now

7548
05:13:58,637 --> 05:14:04,239
you must still set service account

7549
05:14:00,797 --> 05:14:07,119
scopes when configuring an instance to

7550
05:14:04,240 --> 05:14:09,840
run as a service account however when

7551
05:14:07,119 --> 05:14:12,797
you are using a custom service account

7552
05:14:09,840 --> 05:14:15,119
you will not be using scopes rather you

7553
05:14:12,797 --> 05:14:17,360
will be using iam roles

7554
05:14:15,119 --> 05:14:20,559
so when you are using a default service

7555
05:14:17,360 --> 05:14:23,760
account for your compute instance it

7556
05:14:20,560 --> 05:14:26,400
will default to using scopes instead of

7557
05:14:23,759 --> 05:14:29,519
iam roles and so i wanted to quickly

7558
05:14:26,400 --> 05:14:31,920
touch on how service accounts are used

7559
05:14:29,520 --> 05:14:34,479
now one way of using a service account

7560
05:14:31,919 --> 05:14:35,679
is to attach this service account to a

7561
05:14:34,479 --> 05:14:37,840
resource

7562
05:14:35,680 --> 05:14:40,319
so if you want to start a long-running

7563
05:14:37,840 --> 05:14:42,957
job that authenticates as a service

7564
05:14:40,319 --> 05:14:45,599
account you need to attach a service

7565
05:14:42,957 --> 05:14:48,319
account to the resource that will run

7566
05:14:45,599 --> 05:14:50,717
the job and this will bind the service

7567
05:14:48,319 --> 05:14:52,957
account to the resource now the other

7568
05:14:50,718 --> 05:14:55,680
way of using a service account is

7569
05:14:52,957 --> 05:14:57,359
directly impersonating a service account

7570
05:14:55,680 --> 05:14:59,599
which i had explained a little bit

7571
05:14:57,360 --> 05:15:02,797
earlier so once granted they require

7572
05:14:59,599 --> 05:15:06,079
permissions a user or a service can

7573
05:15:02,797 --> 05:15:08,399
directly impersonate the identity of a

7574
05:15:06,080 --> 05:15:10,560
service account in a few common

7575
05:15:08,400 --> 05:15:12,878
scenarios you can impersonate the

7576
05:15:10,560 --> 05:15:15,520
service account without requiring the

7577
05:15:12,878 --> 05:15:18,400
use of a downloaded external service

7578
05:15:15,520 --> 05:15:20,957
account key as well a user may get

7579
05:15:18,400 --> 05:15:23,520
artifacts signed by the google managed

7580
05:15:20,957 --> 05:15:26,000
private key of the service account

7581
05:15:23,520 --> 05:15:28,560
without ever actually retrieving a

7582
05:15:26,000 --> 05:15:31,439
credential for the service account and

7583
05:15:28,560 --> 05:15:34,718
this is an advanced use case and is only

7584
05:15:31,439 --> 05:15:36,479
supported for programmatic access now

7585
05:15:34,718 --> 05:15:37,680
although i'm going to be covering best

7586
05:15:36,479 --> 05:15:40,159
practices

7587
05:15:37,680 --> 05:15:42,718
at the end of this section i wanted to

7588
05:15:40,159 --> 05:15:44,957
go over some best practices for service

7589
05:15:42,718 --> 05:15:46,958
accounts specifically so you should

7590
05:15:44,957 --> 05:15:47,919
always look at auditing the service

7591
05:15:46,957 --> 05:15:49,359
accounts

7592
05:15:47,919 --> 05:15:52,000
and their keys

7593
05:15:49,360 --> 05:15:54,319
using either the service account dot

7594
05:15:52,000 --> 05:15:57,200
keys dot list method

7595
05:15:54,319 --> 05:15:59,599
or the logs viewer page in the console

7596
05:15:57,200 --> 05:16:01,119
now if your service accounts don't need

7597
05:15:59,599 --> 05:16:03,199
external keys

7598
05:16:01,119 --> 05:16:05,759
you should definitely delete them you

7599
05:16:03,200 --> 05:16:08,159
should always grant the service account

7600
05:16:05,759 --> 05:16:10,559
only the minimum set of permissions

7601
05:16:08,159 --> 05:16:13,200
required to achieve the goal

7602
05:16:10,560 --> 05:16:16,240
service accounts should also be created

7603
05:16:13,200 --> 05:16:19,200
for each specific service with only the

7604
05:16:16,240 --> 05:16:21,120
permissions required for that service

7605
05:16:19,200 --> 05:16:23,440
and finally when it comes to

7606
05:16:21,119 --> 05:16:25,680
implementing key rotation you should

7607
05:16:23,439 --> 05:16:28,957
take advantage of the iam service

7608
05:16:25,680 --> 05:16:30,878
account api to get the job done and so

7609
05:16:28,957 --> 05:16:32,319
that's all i have for this lesson on

7610
05:16:30,878 --> 05:16:34,080
service accounts

7611
05:16:32,319 --> 05:16:35,119
so you can now mark this lesson as

7612
05:16:34,080 --> 05:16:37,360
complete

7613
05:16:35,119 --> 05:16:40,039
and please join me in the next one where

7614
05:16:37,360 --> 05:16:44,000
we go hands-on in the console

7615
05:16:40,040 --> 05:16:45,200
[Music]

7616
05:16:44,000 --> 05:16:47,119
welcome back

7617
05:16:45,200 --> 05:16:49,440
so in this demonstration i'm going to

7618
05:16:47,119 --> 05:16:52,000
take a hands-on tour diving through

7619
05:16:49,439 --> 05:16:55,119
various aspects of working with both

7620
05:16:52,000 --> 05:16:56,957
default and custom-made service accounts

7621
05:16:55,119 --> 05:16:59,680
we're going to start off fresh

7622
05:16:56,957 --> 05:17:02,559
observing a new service account being

7623
05:16:59,680 --> 05:17:05,200
automatically created along with viewing

7624
05:17:02,560 --> 05:17:07,680
scopes observing how to edit them and

7625
05:17:05,200 --> 05:17:09,920
creating custom service accounts that

7626
05:17:07,680 --> 05:17:12,240
get a little bit more granular with the

7627
05:17:09,919 --> 05:17:14,877
permissions assigned so with that being

7628
05:17:12,240 --> 05:17:17,280
said let's dive in so as you can see

7629
05:17:14,878 --> 05:17:20,080
here from the top right hand corner that

7630
05:17:17,279 --> 05:17:22,957
i am logged in under tony bowtie ace

7631
05:17:20,080 --> 05:17:25,600
gmail.com and looking over here from the

7632
05:17:22,957 --> 05:17:29,840
top drop down menu you can see that i am

7633
05:17:25,599 --> 05:17:31,919
in the project of cat bow ties fall 2021

7634
05:17:29,840 --> 05:17:34,718
and this is a brand new project that i

7635
05:17:31,919 --> 05:17:37,119
had created specifically for this demo

7636
05:17:34,718 --> 05:17:40,400
and so i currently have no resources

7637
05:17:37,119 --> 05:17:43,200
created along with no apis enabled so

7638
05:17:40,400 --> 05:17:44,480
now i want to navigate over to iam so

7639
05:17:43,200 --> 05:17:46,637
i'm going to go up to the left hand

7640
05:17:44,479 --> 05:17:49,119
corner to the navigation menu

7641
05:17:46,637 --> 05:17:52,637
and i'm going to go to i am an admin

7642
05:17:49,119 --> 05:17:55,599
and over to iam and as expected i have

7643
05:17:52,637 --> 05:17:58,718
no members here other than myself tony

7644
05:17:55,599 --> 05:18:00,957
bowtie ace gmail.com with no other

7645
05:17:58,718 --> 05:18:03,600
members and if i go over here to the

7646
05:18:00,957 --> 05:18:05,359
left hand menu under service accounts

7647
05:18:03,599 --> 05:18:07,439
you can see that i have no service

7648
05:18:05,360 --> 05:18:10,319
accounts created so now in order to

7649
05:18:07,439 --> 05:18:12,239
demonstrate a default service account

7650
05:18:10,319 --> 05:18:15,439
i'm going to go over to the navigation

7651
05:18:12,240 --> 05:18:18,320
menu and go into compute engine and as

7652
05:18:15,439 --> 05:18:20,399
you can see the compute engine api is

7653
05:18:18,319 --> 05:18:22,878
starting up and so this may take a

7654
05:18:20,400 --> 05:18:25,840
couple minutes to get ready okay and the

7655
05:18:22,878 --> 05:18:29,360
compute engine api has been enabled so

7656
05:18:25,840 --> 05:18:32,400
now if i go back over to iam to take a

7657
05:18:29,360 --> 05:18:34,797
look at my service accounts as expected

7658
05:18:32,400 --> 05:18:37,440
i have my compute engine default service

7659
05:18:34,797 --> 05:18:40,000
account now again i did not create this

7660
05:18:37,439 --> 05:18:42,637
manually this service account was

7661
05:18:40,000 --> 05:18:45,439
automatically created when i had enabled

7662
05:18:42,637 --> 05:18:48,399
the compute engine api along with the

7663
05:18:45,439 --> 05:18:50,717
api's service agent and the compute

7664
05:18:48,400 --> 05:18:53,600
engine service agent and the same would

7665
05:18:50,718 --> 05:18:56,000
happen to other various apis that are

7666
05:18:53,599 --> 05:18:58,399
enabled as well and so now that i have

7667
05:18:56,000 --> 05:19:00,797
my default service account i want to go

7668
05:18:58,400 --> 05:19:03,120
back over to compute engine

7669
05:19:00,797 --> 05:19:05,439
and i'm going to go ahead and create a

7670
05:19:03,119 --> 05:19:07,039
vm instance so i'm going to just click

7671
05:19:05,439 --> 05:19:08,559
on create

7672
05:19:07,040 --> 05:19:11,040
i'm going to keep everything as the

7673
05:19:08,560 --> 05:19:14,718
default except i'm going to change the

7674
05:19:11,040 --> 05:19:16,958
machine type from an e2 medium to an e2

7675
05:19:14,718 --> 05:19:20,159
micro and so now i'm going to scroll

7676
05:19:16,957 --> 05:19:21,279
down to where it says identity and api

7677
05:19:20,159 --> 05:19:23,840
access

7678
05:19:21,279 --> 05:19:26,000
now here under service account you can

7679
05:19:23,840 --> 05:19:28,240
see that the compute engine default

7680
05:19:26,000 --> 05:19:30,878
service account has been highlighted and

7681
05:19:28,240 --> 05:19:33,040
this is because i don't have any other

7682
05:19:30,878 --> 05:19:35,360
service accounts that i am able to

7683
05:19:33,040 --> 05:19:37,440
select from now when a default service

7684
05:19:35,360 --> 05:19:39,200
account is the only service account you

7685
05:19:37,439 --> 05:19:41,759
have access to

7686
05:19:39,200 --> 05:19:44,080
access scopes are the only permissions

7687
05:19:41,759 --> 05:19:46,637
that will be available for you to select

7688
05:19:44,080 --> 05:19:49,440
from now remember access scopes are the

7689
05:19:46,637 --> 05:19:52,239
legacy method of specifying permissions

7690
05:19:49,439 --> 05:19:54,559
in google cloud now under access scopes

7691
05:19:52,240 --> 05:19:55,760
i can select from the allow default

7692
05:19:54,560 --> 05:19:59,040
access

7693
05:19:55,759 --> 05:20:02,079
allow full access to all cloud apis

7694
05:19:59,040 --> 05:20:04,718
and set access for each api and so i

7695
05:20:02,080 --> 05:20:07,120
want to click on set access for each api

7696
05:20:04,718 --> 05:20:10,319
for just a second and so as you can see

7697
05:20:07,119 --> 05:20:13,360
here i have access to set permissions

7698
05:20:10,319 --> 05:20:16,319
for each api the difference being is

7699
05:20:13,360 --> 05:20:18,560
that i only have access to primitive

7700
05:20:16,319 --> 05:20:21,360
roles and so now that i'm looking to

7701
05:20:18,560 --> 05:20:24,159
grant access to my service account i'm

7702
05:20:21,360 --> 05:20:26,400
going to grant access to cloud storage

7703
05:20:24,159 --> 05:20:27,759
on a read-only capacity

7704
05:20:26,400 --> 05:20:30,080
and so now that i have granted

7705
05:20:27,759 --> 05:20:32,239
permissions for my service account i'm

7706
05:20:30,080 --> 05:20:34,638
going to now create my instance by

7707
05:20:32,240 --> 05:20:37,360
simply clicking on the create button

7708
05:20:34,637 --> 05:20:40,000
and so now that my instance is created

7709
05:20:37,360 --> 05:20:42,558
i want to head over to cloud storage to

7710
05:20:40,000 --> 05:20:44,797
see exactly what my service account will

7711
05:20:42,558 --> 05:20:47,440
have access to so i'm going to go over

7712
05:20:44,797 --> 05:20:49,840
to my navigation menu and scroll down

7713
05:20:47,439 --> 05:20:52,479
and click on storage and as you can see

7714
05:20:49,840 --> 05:20:55,599
here i have created a bucket in advance

7715
05:20:52,479 --> 05:20:58,637
called bow tie ink fall winter 2012

7716
05:20:55,599 --> 05:21:01,840
designs and this is due to bow tie ink

7717
05:20:58,637 --> 05:21:04,319
bringing back some old designs from 2012

7718
05:21:01,840 --> 05:21:07,360
and making them relevant for today and

7719
05:21:04,319 --> 05:21:09,759
within that bucket there are a few files

7720
05:21:07,360 --> 05:21:11,920
of different design ideas that were best

7721
05:21:09,759 --> 05:21:15,119
sellers back in 2012

7722
05:21:11,919 --> 05:21:18,000
that tony bowtie wanted to re-release

7723
05:21:15,119 --> 05:21:20,479
for the fall winter 2012 collection and

7724
05:21:18,000 --> 05:21:22,878
so with the new granted access to my

7725
05:21:20,479 --> 05:21:25,840
default service account i should have

7726
05:21:22,878 --> 05:21:28,159
access to view these files so in order

7727
05:21:25,840 --> 05:21:30,558
to test this i'm going to go back over

7728
05:21:28,159 --> 05:21:33,599
to the navigation menu and go back to

7729
05:21:30,558 --> 05:21:36,400
compute engine and i'm going to ssh into

7730
05:21:33,599 --> 05:21:36,399
my instance

7731
05:21:36,878 --> 05:21:40,319
and so now that i've sshed into my

7732
05:21:38,957 --> 05:21:43,039
virtual machine

7733
05:21:40,319 --> 05:21:45,200
i wanted to first check to see who is it

7734
05:21:43,040 --> 05:21:47,760
that's running the commands is it my

7735
05:21:45,200 --> 05:21:49,440
user account or is it my service account

7736
05:21:47,759 --> 05:21:52,159
and so i'll be able to do this very

7737
05:21:49,439 --> 05:21:54,557
easily by checking the configuration and

7738
05:21:52,159 --> 05:21:57,840
i can do this by running the command

7739
05:21:54,558 --> 05:22:00,319
gcloud config list and as you can see my

7740
05:21:57,840 --> 05:22:02,558
current configuration is showing that my

7741
05:22:00,319 --> 05:22:04,957
service account is the member that is

7742
05:22:02,558 --> 05:22:08,798
being used to run this command in the

7743
05:22:04,957 --> 05:22:11,279
project of cat bow ties fall 2021 now if

7744
05:22:08,797 --> 05:22:13,199
i wanted to run any commands using my

7745
05:22:11,279 --> 05:22:16,319
tony bowtie ace

7746
05:22:13,200 --> 05:22:19,360
gmail.com user account i can simply run

7747
05:22:16,319 --> 05:22:21,759
the command gcloud auth login and it

7748
05:22:19,360 --> 05:22:24,400
will bring me through the login process

7749
05:22:21,759 --> 05:22:26,797
that we've seen earlier on in the course

7750
05:22:24,400 --> 05:22:29,200
for my tony bowtie ace

7751
05:22:26,797 --> 05:22:31,680
gmail.com account but now since i'm

7752
05:22:29,200 --> 05:22:33,920
running all my commands using my service

7753
05:22:31,680 --> 05:22:36,159
account from this compute engine

7754
05:22:33,919 --> 05:22:38,637
instance i'm using the permissions

7755
05:22:36,159 --> 05:22:41,119
granted to that service account that we

7756
05:22:38,637 --> 05:22:43,680
saw earlier and so since i set the

7757
05:22:41,119 --> 05:22:46,000
storage scope for the service account to

7758
05:22:43,680 --> 05:22:48,479
read only we should be able to see the

7759
05:22:46,000 --> 05:22:51,360
cloud storage bucket and all the files

7760
05:22:48,479 --> 05:22:53,599
within it by simply running the gsutil

7761
05:22:51,360 --> 05:22:56,159
command so to list the contents of the

7762
05:22:53,599 --> 05:22:59,599
bucket i'm going to type in the command

7763
05:22:56,159 --> 05:23:01,840
gsutil ls for list and the name of the

7764
05:22:59,599 --> 05:23:02,877
bucket and the syntax for that would be

7765
05:23:01,840 --> 05:23:05,119
gs

7766
05:23:02,878 --> 05:23:07,200
colon forward slash forward slash

7767
05:23:05,119 --> 05:23:09,479
followed by the name of the bucket which

7768
05:23:07,200 --> 05:23:11,119
would be bowtie inc

7769
05:23:09,479 --> 05:23:13,360
fw2012

7770
05:23:11,119 --> 05:23:15,520
designs

7771
05:23:13,360 --> 05:23:18,080
and as you can see we're able to view

7772
05:23:15,520 --> 05:23:20,878
all the files that are in the bucket and

7773
05:23:18,080 --> 05:23:22,798
so it is working as expected and so now

7774
05:23:20,878 --> 05:23:25,600
because i've only granted viewing

7775
05:23:22,797 --> 05:23:28,159
permissions for this service account i

7776
05:23:25,599 --> 05:23:30,877
cannot create any files due to the lack

7777
05:23:28,159 --> 05:23:32,797
of permissions so for instance if i was

7778
05:23:30,878 --> 05:23:35,200
to create a file

7779
05:23:32,797 --> 05:23:37,759
using the command touch

7780
05:23:35,200 --> 05:23:40,637
file one i have now created that file

7781
05:23:37,759 --> 05:23:43,679
here on the instance so now i want to

7782
05:23:40,637 --> 05:23:46,079
copy this file to my bucket and so i'm

7783
05:23:43,680 --> 05:23:48,159
going to run the gsutil command

7784
05:23:46,080 --> 05:23:50,878
cp for copy

7785
05:23:48,159 --> 05:23:52,319
file 1 which is the name of my file and

7786
05:23:50,878 --> 05:23:54,958
gs

7787
05:23:52,319 --> 05:23:57,040
colon forward slash forward slash along

7788
05:23:54,957 --> 05:23:59,119
with the name of the bucket which is bow

7789
05:23:57,040 --> 05:24:00,400
tie inc fw

7790
05:23:59,119 --> 05:24:03,599
2012

7791
05:24:00,400 --> 05:24:06,558
designs and as expected i am getting an

7792
05:24:03,599 --> 05:24:08,557
access denied exception with a prompt

7793
05:24:06,558 --> 05:24:10,718
telling me that i have insufficient

7794
05:24:08,558 --> 05:24:13,200
permissions and so now that i've shown

7795
05:24:10,718 --> 05:24:15,280
you how to create a default service

7796
05:24:13,200 --> 05:24:18,159
account and give it permissions using

7797
05:24:15,279 --> 05:24:20,399
access scopes let's now create a custom

7798
05:24:18,159 --> 05:24:21,599
service account and assign it proper

7799
05:24:20,400 --> 05:24:23,440
permissions

7800
05:24:21,599 --> 05:24:26,239
to not only read files from cloud

7801
05:24:23,439 --> 05:24:28,319
storage but be able to write files to

7802
05:24:26,240 --> 05:24:31,120
cloud storage as well so i'm going to

7803
05:24:28,319 --> 05:24:32,718
now close down this tab

7804
05:24:31,119 --> 05:24:34,159
and i'm going to go back over to the

7805
05:24:32,718 --> 05:24:36,958
navigation menu

7806
05:24:34,159 --> 05:24:39,279
and go back to iam where we can go in

7807
05:24:36,957 --> 05:24:41,439
and create our new service account

7808
05:24:39,279 --> 05:24:43,279
under service accounts

7809
05:24:41,439 --> 05:24:45,439
and so as you can see here this is the

7810
05:24:43,279 --> 05:24:47,599
default service account and since we

7811
05:24:45,439 --> 05:24:49,680
want to create a custom one i'm going to

7812
05:24:47,599 --> 05:24:51,519
go ahead and go up to the top here and

7813
05:24:49,680 --> 05:24:53,439
click on the button that says create

7814
05:24:51,520 --> 05:24:55,360
service account

7815
05:24:53,439 --> 05:24:58,000
and so now i'm prompted to enter some

7816
05:24:55,360 --> 05:24:59,920
information with regards to details of

7817
05:24:58,000 --> 05:25:02,797
this service account including the

7818
05:24:59,919 --> 05:25:04,637
service account name the account id

7819
05:25:02,797 --> 05:25:07,119
along with a description and so i'm

7820
05:25:04,637 --> 05:25:10,557
going to call this service account sa

7821
05:25:07,119 --> 05:25:13,200
hyphen bowtie hyphen demo and as you can

7822
05:25:10,558 --> 05:25:15,440
see it automatically propagated the

7823
05:25:13,200 --> 05:25:18,159
service account id and i'm going to give

7824
05:25:15,439 --> 05:25:20,159
this service account a description

7825
05:25:18,159 --> 05:25:21,599
storage read write access

7826
05:25:20,159 --> 05:25:23,119
and i'm going to click on the button

7827
05:25:21,599 --> 05:25:25,359
create

7828
05:25:23,119 --> 05:25:27,680
and so now i've been prompted to grant

7829
05:25:25,360 --> 05:25:29,840
permissions to the service account and i

7830
05:25:27,680 --> 05:25:32,479
can do that by simply clicking on the

7831
05:25:29,840 --> 05:25:33,920
drop down and selecting a roll but i'm

7832
05:25:32,479 --> 05:25:36,079
looking to get a little bit more

7833
05:25:33,919 --> 05:25:38,637
granular and so i'm going to simply type

7834
05:25:36,080 --> 05:25:40,878
in storage and as you can see i'm coming

7835
05:25:38,637 --> 05:25:43,039
up with some more granular roles as

7836
05:25:40,878 --> 05:25:45,840
opposed to the primitive roles that i

7837
05:25:43,040 --> 05:25:47,760
only had access to prior to the search

7838
05:25:45,840 --> 05:25:50,637
so i'm going to click on storage object

7839
05:25:47,759 --> 05:25:52,797
viewer for read access to cloud storage

7840
05:25:50,637 --> 05:25:54,957
i'm not going to add any conditions and

7841
05:25:52,797 --> 05:25:55,759
i'm going to add another role and this

7842
05:25:54,957 --> 05:25:58,877
time

7843
05:25:55,759 --> 05:26:00,637
i'm going to add storage object creator

7844
05:25:58,878 --> 05:26:02,718
and so those are all the permissions i

7845
05:26:00,637 --> 05:26:05,439
need for read write access to cloud

7846
05:26:02,718 --> 05:26:08,159
storage and so now i can simply click on

7847
05:26:05,439 --> 05:26:10,877
continue and so now i'm being prompted

7848
05:26:08,159 --> 05:26:12,878
to add another user to act as a service

7849
05:26:10,878 --> 05:26:15,440
account and this is what we discussed in

7850
05:26:12,878 --> 05:26:18,240
the last lesson about service accounts

7851
05:26:15,439 --> 05:26:20,479
being both a member and a resource now

7852
05:26:18,240 --> 05:26:22,878
notice that i have an option for both

7853
05:26:20,479 --> 05:26:25,200
the service account users role and the

7854
05:26:22,878 --> 05:26:27,200
service account admins role now as

7855
05:26:25,200 --> 05:26:29,920
discussed earlier the service account

7856
05:26:27,200 --> 05:26:32,798
and men's role has the ability to grant

7857
05:26:29,919 --> 05:26:35,119
other users the role of service account

7858
05:26:32,797 --> 05:26:36,957
user and so because we don't want to do

7859
05:26:35,119 --> 05:26:38,319
that i'm going to leave both of these

7860
05:26:36,957 --> 05:26:40,717
fields blank

7861
05:26:38,319 --> 05:26:43,360
and simply click on done now i know in

7862
05:26:40,718 --> 05:26:46,319
the last lesson i talked about creating

7863
05:26:43,360 --> 05:26:48,240
custom keys for authentication

7864
05:26:46,319 --> 05:26:51,119
in case you're hosting your code on

7865
05:26:48,240 --> 05:26:53,120
premise or on another cloud and so if i

7866
05:26:51,119 --> 05:26:56,239
wanted to do that i can simply go to the

7867
05:26:53,119 --> 05:26:59,039
actions menu and click on create key and

7868
05:26:56,240 --> 05:27:02,320
it'll give me the option on creating a

7869
05:26:59,040 --> 05:27:04,718
private key either using json or p12

7870
05:27:02,319 --> 05:27:07,599
format and because i'm not creating any

7871
05:27:04,718 --> 05:27:09,440
keys i'm going to simply click on cancel

7872
05:27:07,599 --> 05:27:10,877
and so in order for me to apply this

7873
05:27:09,439 --> 05:27:13,520
service account

7874
05:27:10,878 --> 05:27:16,080
to our vm instance i'm going to now go

7875
05:27:13,520 --> 05:27:18,558
back over to the navigation menu and go

7876
05:27:16,080 --> 05:27:20,638
back into compute engine and so now in

7877
05:27:18,558 --> 05:27:23,120
order for me to change this service

7878
05:27:20,637 --> 05:27:25,279
account that's currently assigned to

7879
05:27:23,119 --> 05:27:27,680
this instance i'm going to go ahead and

7880
05:27:25,279 --> 05:27:28,637
check off this instance and click on

7881
05:27:27,680 --> 05:27:31,119
stop

7882
05:27:28,637 --> 05:27:34,079
now please note that in order to change

7883
05:27:31,119 --> 05:27:36,878
service accounts on any instance you

7884
05:27:34,080 --> 05:27:38,798
must stop it first before you can edit

7885
05:27:36,878 --> 05:27:40,718
the service account and so now that the

7886
05:27:38,797 --> 05:27:43,119
instance has stopped i'm going to drill

7887
05:27:40,718 --> 05:27:45,840
down into this instance one

7888
05:27:43,119 --> 05:27:47,119
and i'm going to click on edit

7889
05:27:45,840 --> 05:27:48,878
now i'm going to scroll down to the

7890
05:27:47,119 --> 05:27:50,399
bottom

7891
05:27:48,878 --> 05:27:52,479
and at the bottom you will find the

7892
05:27:50,400 --> 05:27:54,558
service account field and clicking on

7893
05:27:52,479 --> 05:27:57,200
the drop down i'll find my custom

7894
05:27:54,558 --> 05:27:59,840
service account as a bow tie demo so i

7895
05:27:57,200 --> 05:28:02,479
want to select this and simply click on

7896
05:27:59,840 --> 05:28:04,957
save and so now that i've selected my

7897
05:28:02,479 --> 05:28:07,599
new service account to be used in this

7898
05:28:04,957 --> 05:28:09,520
vm instance i can now start up the

7899
05:28:07,599 --> 05:28:11,519
instance again to test out the

7900
05:28:09,520 --> 05:28:13,680
permissions that were granted

7901
05:28:11,520 --> 05:28:15,360
and so just as a quick note here i

7902
05:28:13,680 --> 05:28:18,080
wanted to bring your attention to the

7903
05:28:15,360 --> 05:28:20,558
external ip whenever stopping and

7904
05:28:18,080 --> 05:28:23,280
starting an instance with an ephemeral

7905
05:28:20,558 --> 05:28:26,558
ip in other words it is not assigned a

7906
05:28:23,279 --> 05:28:28,957
static ip your vm instance will receive

7907
05:28:26,558 --> 05:28:31,520
a new ip address and i'll be getting

7908
05:28:28,957 --> 05:28:34,239
into this in a lot deeper detail in the

7909
05:28:31,520 --> 05:28:36,319
compute engine section of the course and

7910
05:28:34,240 --> 05:28:37,760
so now i'm going to ssh into this

7911
05:28:36,319 --> 05:28:40,239
instance

7912
05:28:37,759 --> 05:28:42,957
now i'm going to run the same gsutil

7913
05:28:40,240 --> 05:28:45,040
command that i did previously to list

7914
05:28:42,957 --> 05:28:48,717
all the files in the bucket so i'm going

7915
05:28:45,040 --> 05:28:50,000
to run the command gsutil ls for list

7916
05:28:48,718 --> 05:28:52,637
and gs

7917
05:28:50,000 --> 05:28:57,759
colon forward slash forward slash bow

7918
05:28:52,637 --> 05:29:00,319
tie inc fw 2012 designs

7919
05:28:57,759 --> 05:29:02,079
and as you can see i'm able to read all

7920
05:29:00,319 --> 05:29:04,239
the files in the bucket now the

7921
05:29:02,080 --> 05:29:06,638
difference in the permissions granted

7922
05:29:04,240 --> 05:29:10,000
for the service account is that i'm able

7923
05:29:06,637 --> 05:29:12,479
to write files to cloud storage and so

7924
05:29:10,000 --> 05:29:14,878
in order to test that i'm going to use

7925
05:29:12,479 --> 05:29:17,680
the touch command again and i'm going to

7926
05:29:14,878 --> 05:29:20,400
name the file file2 and so now i'm going

7927
05:29:17,680 --> 05:29:25,040
to copy this file to the cloud storage

7928
05:29:20,400 --> 05:29:27,440
bucket by using the command gsutil cp

7929
05:29:25,040 --> 05:29:30,400
file2 and the bucket name

7930
05:29:27,439 --> 05:29:35,039
gs colon forward slash forward slash bow

7931
05:29:30,400 --> 05:29:37,920
tie inc fw 2012 designs and as expected

7932
05:29:35,040 --> 05:29:40,400
the file copied over successfully as we

7933
05:29:37,919 --> 05:29:42,839
do have permissions to write to cloud

7934
05:29:40,400 --> 05:29:45,280
storage and so before i end this

7935
05:29:42,840 --> 05:29:48,080
demonstration i wanted to quickly go

7936
05:29:45,279 --> 05:29:49,039
over exactly how to create service

7937
05:29:48,080 --> 05:29:50,878
accounts

7938
05:29:49,040 --> 05:29:53,120
using the command line and so i'm going

7939
05:29:50,878 --> 05:29:55,600
to close down this tab and i'm going to

7940
05:29:53,119 --> 05:29:58,479
head up to the top right hand corner and

7941
05:29:55,599 --> 05:30:00,557
activate my cloud shell i'm going to

7942
05:29:58,479 --> 05:30:02,319
make this window a little bit bigger and

7943
05:30:00,558 --> 05:30:04,240
so now in order to view the service

7944
05:30:02,319 --> 05:30:06,079
accounts i currently have

7945
05:30:04,240 --> 05:30:07,200
i'm going to run the command

7946
05:30:06,080 --> 05:30:08,958
gcloud

7947
05:30:07,200 --> 05:30:12,319
iam

7948
05:30:08,957 --> 05:30:14,637
service dash accounts

7949
05:30:12,319 --> 05:30:14,637
list

7950
05:30:15,360 --> 05:30:20,000
and so as expected the compute engine

7951
05:30:17,840 --> 05:30:22,000
default service account along with the

7952
05:30:20,000 --> 05:30:25,200
custom service account that i created

7953
05:30:22,000 --> 05:30:28,000
earlier called sa bowtie demo is now

7954
05:30:25,200 --> 05:30:30,878
displaying and in order to just verify

7955
05:30:28,000 --> 05:30:33,119
that i'm going to go over to iam

7956
05:30:30,878 --> 05:30:35,760
under service accounts and as you can

7957
05:30:33,119 --> 05:30:37,919
see it is reflecting exactly the same in

7958
05:30:35,759 --> 05:30:40,159
the console so now in order for me to

7959
05:30:37,919 --> 05:30:42,239
create a new service account using the

7960
05:30:40,159 --> 05:30:43,200
command line i'm going to run the

7961
05:30:42,240 --> 05:30:47,520
command

7962
05:30:43,200 --> 05:30:49,119
gcloud iam service accounts create

7963
05:30:47,520 --> 05:30:52,159
and the name of the service account

7964
05:30:49,119 --> 05:30:55,119
which i'm going to call sa-tony bowtie

7965
05:30:52,159 --> 05:30:57,279
along with the display name as essay

7966
05:30:55,119 --> 05:30:59,119
tony bowtie as well and i'm going to hit

7967
05:30:57,279 --> 05:31:01,520
enter

7968
05:30:59,119 --> 05:31:04,239
and my service account has been created

7969
05:31:01,520 --> 05:31:06,319
so now if i run the command gcloud i am

7970
05:31:04,240 --> 05:31:08,718
service accounts list

7971
05:31:06,319 --> 05:31:11,599
i should see my new service account and

7972
05:31:08,718 --> 05:31:14,400
as well if i did a refresh here on the

7973
05:31:11,599 --> 05:31:17,359
console i can see that it is reflecting

7974
05:31:14,400 --> 05:31:19,920
the same so now that we've created our

7975
05:31:17,360 --> 05:31:22,319
new service account we need to assign

7976
05:31:19,919 --> 05:31:24,637
some permissions to it in order for us

7977
05:31:22,319 --> 05:31:27,599
to be able to use it and so if i go over

7978
05:31:24,637 --> 05:31:29,360
here to iam in the console i can see

7979
05:31:27,599 --> 05:31:31,840
here that my service account has not

7980
05:31:29,360 --> 05:31:34,080
been assigned any permissions and so in

7981
05:31:31,840 --> 05:31:35,439
order to do that i am going to simply

7982
05:31:34,080 --> 05:31:37,280
run the command

7983
05:31:35,439 --> 05:31:40,479
gcloud projects

7984
05:31:37,279 --> 05:31:42,878
add dash iam-policy-binding

7985
05:31:40,479 --> 05:31:45,279
so we're adding a policy binding and

7986
05:31:42,878 --> 05:31:48,319
then the name of the project catbow ties

7987
05:31:45,279 --> 05:31:50,479
fall 2021 we need to add the member

7988
05:31:48,319 --> 05:31:53,599
which is the new service account email

7989
05:31:50,479 --> 05:31:56,159
address along with the role of storage

7990
05:31:53,599 --> 05:31:57,759
object viewer i'm going to hit enter

7991
05:31:56,159 --> 05:32:00,718
and as you can see

7992
05:31:57,759 --> 05:32:03,279
my member sa tony bowtie has been

7993
05:32:00,718 --> 05:32:05,040
assigned the storage object viewer role

7994
05:32:03,279 --> 05:32:07,360
and so if i wanted to grant some other

7995
05:32:05,040 --> 05:32:09,920
roles to the service account i can do

7996
05:32:07,360 --> 05:32:12,637
that as well and so if i did a refresh

7997
05:32:09,919 --> 05:32:15,039
here i can see that the console reflects

7998
05:32:12,637 --> 05:32:17,840
exactly the same and so in order for me

7999
05:32:15,040 --> 05:32:20,400
to use this account in my instance i'm

8000
05:32:17,840 --> 05:32:22,718
going to first have to stop my instance

8001
05:32:20,400 --> 05:32:24,558
attach my service account and then start

8002
05:32:22,718 --> 05:32:26,479
up my instance again so i'm going to go

8003
05:32:24,558 --> 05:32:28,558
over to my cloud shell i'm just going to

8004
05:32:26,479 --> 05:32:31,360
clear the screen and i'm going to paste

8005
05:32:28,558 --> 05:32:34,159
in the command gcloud compute instances

8006
05:32:31,360 --> 05:32:36,479
stop the name of the instance along with

8007
05:32:34,159 --> 05:32:39,200
the zone and now that the instance has

8008
05:32:36,479 --> 05:32:42,079
stopped i can now add my surface account

8009
05:32:39,200 --> 05:32:45,119
to the instance and so i'm going to use

8010
05:32:42,080 --> 05:32:48,160
the command gcloud compute instances

8011
05:32:45,119 --> 05:32:50,239
set service account instance 1

8012
05:32:48,159 --> 05:32:52,159
along with the zone and the service

8013
05:32:50,240 --> 05:32:55,120
account email address i'm going to go

8014
05:32:52,159 --> 05:32:57,520
ahead and hit enter

8015
05:32:55,119 --> 05:32:59,360
and it has now been successfully added

8016
05:32:57,520 --> 05:33:01,360
and so now that that's done i can now

8017
05:32:59,360 --> 05:33:04,479
start up the instance by using the

8018
05:33:01,360 --> 05:33:06,240
command gcloud compute instances start

8019
05:33:04,479 --> 05:33:09,360
along with the instance name and the

8020
05:33:06,240 --> 05:33:11,840
zone and so now if i go over to my

8021
05:33:09,360 --> 05:33:14,637
navigation menu and go over to compute

8022
05:33:11,840 --> 05:33:16,878
engine and drill down on the instance if

8023
05:33:14,637 --> 05:33:19,200
i scroll down to the bottom

8024
05:33:16,878 --> 05:33:20,958
i'll be able to see that my new service

8025
05:33:19,200 --> 05:33:23,520
account has been added

8026
05:33:20,957 --> 05:33:25,359
and so this is a great demonstration for

8027
05:33:23,520 --> 05:33:28,080
when you want to add different service

8028
05:33:25,360 --> 05:33:30,400
accounts for your different applications

8029
05:33:28,080 --> 05:33:32,638
on different instances or even on

8030
05:33:30,400 --> 05:33:34,480
different resources and so that's pretty

8031
05:33:32,637 --> 05:33:36,797
much all i wanted to cover in this

8032
05:33:34,479 --> 05:33:39,040
demonstration so you can now mark this

8033
05:33:36,797 --> 05:33:42,439
lesson as complete and let's move on to

8034
05:33:39,040 --> 05:33:42,440
the next one

8035
05:33:44,080 --> 05:33:47,760
welcome back

8036
05:33:45,439 --> 05:33:50,557
in this lesson i'm going to dive into

8037
05:33:47,759 --> 05:33:53,679
cloud identity google's identity as a

8038
05:33:50,558 --> 05:33:56,798
service offering for google cloud that

8039
05:33:53,680 --> 05:33:58,159
maximizes end user efficiency protect

8040
05:33:56,797 --> 05:34:00,159
company data

8041
05:33:58,159 --> 05:34:02,718
and so much more

8042
05:34:00,159 --> 05:34:05,439
now cloud identity as i said before is

8043
05:34:02,718 --> 05:34:08,319
an identity as a service solution that

8044
05:34:05,439 --> 05:34:10,079
centrally manages users and groups this

8045
05:34:08,319 --> 05:34:12,797
would be the sole system for

8046
05:34:10,080 --> 05:34:15,520
authentication and that provides a

8047
05:34:12,797 --> 05:34:19,119
single sign-on experience for all

8048
05:34:15,520 --> 05:34:21,680
employees of an organization to be used

8049
05:34:19,119 --> 05:34:24,557
for all your internal and external

8050
05:34:21,680 --> 05:34:27,200
applications cloud identity also gives

8051
05:34:24,558 --> 05:34:29,360
you more control over the accounts that

8052
05:34:27,200 --> 05:34:31,440
are used in your organization for

8053
05:34:29,360 --> 05:34:34,080
example if developers in your

8054
05:34:31,439 --> 05:34:36,797
organization use personal accounts such

8055
05:34:34,080 --> 05:34:38,878
as gmail accounts those accounts are

8056
05:34:36,797 --> 05:34:41,520
outside of your control

8057
05:34:38,878 --> 05:34:44,797
so when you adopt cloud identity you can

8058
05:34:41,520 --> 05:34:47,200
manage access and compliance across all

8059
05:34:44,797 --> 05:34:50,239
the users in your domain now when you

8060
05:34:47,200 --> 05:34:53,119
adopt cloud identity you create a cloud

8061
05:34:50,240 --> 05:34:55,840
identity account for each of your users

8062
05:34:53,119 --> 05:34:58,957
and groups you can then use iam to

8063
05:34:55,840 --> 05:35:01,759
manage access to google cloud resources

8064
05:34:58,957 --> 05:35:04,479
for each cloud identity account and you

8065
05:35:01,759 --> 05:35:07,359
can also configure cloud identity to

8066
05:35:04,479 --> 05:35:10,399
federate identities between google and

8067
05:35:07,360 --> 05:35:13,600
other identity providers such as active

8068
05:35:10,400 --> 05:35:15,680
directory and azure active directory and

8069
05:35:13,599 --> 05:35:17,199
i'll be getting more into that a little

8070
05:35:15,680 --> 05:35:19,760
bit later

8071
05:35:17,200 --> 05:35:23,200
so now when it comes to cloud identity

8072
05:35:19,759 --> 05:35:25,840
it gives you so much more than just user

8073
05:35:23,200 --> 05:35:29,840
and group management it provides a slew

8074
05:35:25,840 --> 05:35:31,520
of features such as device management

8075
05:35:29,840 --> 05:35:33,360
security

8076
05:35:31,520 --> 05:35:34,957
single sign-on

8077
05:35:33,360 --> 05:35:36,958
reporting

8078
05:35:34,957 --> 05:35:39,039
and directory management

8079
05:35:36,957 --> 05:35:41,520
and i will be diving deeper into each

8080
05:35:39,040 --> 05:35:44,080
one of these features of cloud identity

8081
05:35:41,520 --> 05:35:47,119
now starting with device management

8082
05:35:44,080 --> 05:35:49,520
this lets people in any organization

8083
05:35:47,119 --> 05:35:52,399
access their work accounts from mobile

8084
05:35:49,520 --> 05:35:55,360
devices while keeping the organization's

8085
05:35:52,400 --> 05:35:57,680
data more secure in today's world

8086
05:35:55,360 --> 05:36:00,319
employees want to access business

8087
05:35:57,680 --> 05:36:03,040
applications from wherever they are

8088
05:36:00,319 --> 05:36:04,957
whether at home at work

8089
05:36:03,040 --> 05:36:06,958
or even traveling

8090
05:36:04,957 --> 05:36:09,840
and many even want to use their own

8091
05:36:06,957 --> 05:36:13,759
devices which is also known as bring

8092
05:36:09,840 --> 05:36:15,920
your own device or byod for short using

8093
05:36:13,759 --> 05:36:18,079
mobile device management there are

8094
05:36:15,919 --> 05:36:21,039
several ways that you can provide the

8095
05:36:18,080 --> 05:36:23,200
business applications employees need

8096
05:36:21,040 --> 05:36:25,440
on their personal devices while

8097
05:36:23,200 --> 05:36:27,840
implementing policies that keep the

8098
05:36:25,439 --> 05:36:30,479
corporate data safe you can create a

8099
05:36:27,840 --> 05:36:32,718
white list of approved applications

8100
05:36:30,479 --> 05:36:35,200
where users can access corporate data

8101
05:36:32,718 --> 05:36:37,760
securely through those applications

8102
05:36:35,200 --> 05:36:40,240
you can enforce work profiles on android

8103
05:36:37,759 --> 05:36:44,000
devices and requiring managed

8104
05:36:40,240 --> 05:36:46,798
applications on ios devices policies can

8105
05:36:44,000 --> 05:36:50,319
also be pushed out on these devices to

8106
05:36:46,797 --> 05:36:53,199
protect corporate data and identities as

8107
05:36:50,319 --> 05:36:55,439
well as keeping inventory of devices

8108
05:36:53,200 --> 05:36:57,840
with corporate data present then when

8109
05:36:55,439 --> 05:37:00,637
these devices are either no longer being

8110
05:36:57,840 --> 05:37:03,360
used for corporate use or stolen the

8111
05:37:00,637 --> 05:37:06,319
device can then be wiped of all its

8112
05:37:03,360 --> 05:37:09,600
corporate data device management also

8113
05:37:06,319 --> 05:37:10,797
gives organizations the power to enforce

8114
05:37:09,599 --> 05:37:13,359
passcodes

8115
05:37:10,797 --> 05:37:15,919
as well as auditing now moving into the

8116
05:37:13,360 --> 05:37:18,000
security component of cloud identity

8117
05:37:15,919 --> 05:37:20,797
this is where two-step verification

8118
05:37:18,000 --> 05:37:24,000
steps in now as explained earlier

8119
05:37:20,797 --> 05:37:26,319
two-step verification or to sv

8120
05:37:24,000 --> 05:37:29,439
is a security feature that requires

8121
05:37:26,319 --> 05:37:32,000
users to verify their identity through

8122
05:37:29,439 --> 05:37:34,000
something they know such as a password

8123
05:37:32,000 --> 05:37:36,558
plus something they have such as a

8124
05:37:34,000 --> 05:37:39,919
physical key or access code and this can

8125
05:37:36,558 --> 05:37:40,958
be anything from security keys to google

8126
05:37:39,919 --> 05:37:44,079
prompt

8127
05:37:40,957 --> 05:37:47,039
the authenticator app and backup codes

8128
05:37:44,080 --> 05:37:50,240
so cloud identity helps by applying

8129
05:37:47,040 --> 05:37:52,000
security best practices along with being

8130
05:37:50,240 --> 05:37:54,558
able to deploy

8131
05:37:52,000 --> 05:37:57,840
two-step verification for the whole

8132
05:37:54,558 --> 05:38:00,798
company along with enforcement controls

8133
05:37:57,840 --> 05:38:03,599
and can also manage passwords to make

8134
05:38:00,797 --> 05:38:06,717
sure they are meeting the enforced

8135
05:38:03,599 --> 05:38:10,000
password requirements automatically so

8136
05:38:06,718 --> 05:38:11,680
single sign-on is where users can access

8137
05:38:10,000 --> 05:38:14,080
many applications

8138
05:38:11,680 --> 05:38:17,680
without having to enter their username

8139
05:38:14,080 --> 05:38:21,120
and password for each application single

8140
05:38:17,680 --> 05:38:23,920
sign-on also known as sso can provide a

8141
05:38:21,119 --> 05:38:27,279
single point of authentication through

8142
05:38:23,919 --> 05:38:30,479
an identity provider also known as idp

8143
05:38:27,279 --> 05:38:33,520
for short you can set up sso using

8144
05:38:30,479 --> 05:38:36,637
google as an identity provider to access

8145
05:38:33,520 --> 05:38:39,760
a slew of third-party applications

8146
05:38:36,637 --> 05:38:42,159
as well as any on-premise or custom

8147
05:38:39,759 --> 05:38:44,877
in-house applications you can also

8148
05:38:42,159 --> 05:38:47,680
access a centralized dashboard for

8149
05:38:44,878 --> 05:38:50,319
conveniently accessing your applications

8150
05:38:47,680 --> 05:38:52,878
so now when lisa logs in with her

8151
05:38:50,319 --> 05:38:56,079
employee credentials she will then have

8152
05:38:52,878 --> 05:38:59,440
access to many cloud applications that

8153
05:38:56,080 --> 05:39:02,638
bowtie inc it department has approved

8154
05:38:59,439 --> 05:39:05,439
through a catalog of sso applications

8155
05:39:02,637 --> 05:39:09,039
and this will increase both security and

8156
05:39:05,439 --> 05:39:11,119
productivity for lisa and bowtie inc as

8157
05:39:09,040 --> 05:39:13,760
lisa won't have to enter

8158
05:39:11,119 --> 05:39:16,159
a separate username and password for

8159
05:39:13,759 --> 05:39:19,599
separate applications now getting into

8160
05:39:16,159 --> 05:39:24,000
reporting this covers audit logs for

8161
05:39:19,599 --> 05:39:27,039
logins groups devices and even tokens

8162
05:39:24,000 --> 05:39:29,360
you're even able to export these logs to

8163
05:39:27,040 --> 05:39:31,520
bigquery for analysis

8164
05:39:29,360 --> 05:39:34,159
and then you can create reports from

8165
05:39:31,520 --> 05:39:36,878
these logs that cover security

8166
05:39:34,159 --> 05:39:38,957
applications and activity

8167
05:39:36,878 --> 05:39:42,080
now moving on to the last component of

8168
05:39:38,957 --> 05:39:45,039
cloud identity is directory management

8169
05:39:42,080 --> 05:39:47,680
and this provides profile information

8170
05:39:45,040 --> 05:39:48,718
for users in your organization

8171
05:39:47,680 --> 05:39:51,520
email

8172
05:39:48,718 --> 05:39:54,400
and group addresses and shared external

8173
05:39:51,520 --> 05:39:58,000
contacts in the directory using google

8174
05:39:54,400 --> 05:40:00,240
cloud directory sync or gcds you can

8175
05:39:58,000 --> 05:40:02,878
synchronize the data in your google

8176
05:40:00,240 --> 05:40:06,798
account with your microsoft active

8177
05:40:02,878 --> 05:40:09,680
directory or ldap server gcds doesn't

8178
05:40:06,797 --> 05:40:12,399
migrate any content such as your email

8179
05:40:09,680 --> 05:40:15,439
your calendar events or your files to

8180
05:40:12,400 --> 05:40:18,638
your google account gcds is used to

8181
05:40:15,439 --> 05:40:21,520
synchronize all your users groups and

8182
05:40:18,637 --> 05:40:23,919
shared contacts to match the information

8183
05:40:21,520 --> 05:40:26,637
in your ldap server which could be your

8184
05:40:23,919 --> 05:40:28,957
active directory server or your azure

8185
05:40:26,637 --> 05:40:31,919
active directory domain now getting

8186
05:40:28,957 --> 05:40:34,239
deeper into google cloud directory sync

8187
05:40:31,919 --> 05:40:36,877
i'd like to touch on active directory

8188
05:40:34,240 --> 05:40:39,760
for just a minute now active directory

8189
05:40:36,878 --> 05:40:42,159
is a very common directory service

8190
05:40:39,759 --> 05:40:44,717
developed by microsoft and is a

8191
05:40:42,159 --> 05:40:46,718
cornerstone in most big corporate

8192
05:40:44,718 --> 05:40:49,920
on-premises environments it

8193
05:40:46,718 --> 05:40:52,958
authenticates and authorizes all users

8194
05:40:49,919 --> 05:40:56,159
and computers in a windows domain type

8195
05:40:52,957 --> 05:40:58,957
network signing and enforcing security

8196
05:40:56,159 --> 05:41:01,200
policies for all computers and

8197
05:40:58,957 --> 05:41:03,439
installing or updating software as

8198
05:41:01,200 --> 05:41:06,240
necessary now as you can see here in the

8199
05:41:03,439 --> 05:41:09,279
diagram the active directory forest

8200
05:41:06,240 --> 05:41:11,200
contains the active directory domain a

8201
05:41:09,279 --> 05:41:13,439
bowtieinc.co

8202
05:41:11,200 --> 05:41:16,479
and the active directory federation

8203
05:41:13,439 --> 05:41:18,717
services of bowtieinc.co where the

8204
05:41:16,479 --> 05:41:21,200
active directory forest is the

8205
05:41:18,718 --> 05:41:24,240
hierarchical structure for active

8206
05:41:21,200 --> 05:41:26,798
directory the active directory domain is

8207
05:41:24,240 --> 05:41:29,680
responsible for storing information

8208
05:41:26,797 --> 05:41:32,878
about members of the domain including

8209
05:41:29,680 --> 05:41:35,279
devices and users and it verifies their

8210
05:41:32,878 --> 05:41:37,600
credentials and defines their access

8211
05:41:35,279 --> 05:41:40,159
rights active directory federation

8212
05:41:37,599 --> 05:41:42,717
services or adfs

8213
05:41:40,159 --> 05:41:45,279
is a single sign-on service where

8214
05:41:42,718 --> 05:41:47,680
federation is the means of linking a

8215
05:41:45,279 --> 05:41:50,840
person's electronic identity and

8216
05:41:47,680 --> 05:41:54,080
attributes stored across multiple

8217
05:41:50,840 --> 05:41:57,520
distinct identity management systems so

8218
05:41:54,080 --> 05:42:00,400
you can think of it as a subset of sso

8219
05:41:57,520 --> 05:42:03,200
as it relates only to authentication

8220
05:42:00,400 --> 05:42:05,280
technologies used for federated identity

8221
05:42:03,200 --> 05:42:08,319
include some common terms that you may

8222
05:42:05,279 --> 05:42:10,957
hear me or others in the industry use

8223
05:42:08,319 --> 05:42:13,360
from time to time such as saml which

8224
05:42:10,957 --> 05:42:17,279
stands for security assertion markup

8225
05:42:13,360 --> 05:42:20,400
language oauth open id and even security

8226
05:42:17,279 --> 05:42:23,360
tokens such as simple web tokens json

8227
05:42:20,400 --> 05:42:25,840
web tokens and saml assertions and so

8228
05:42:23,360 --> 05:42:28,797
when you have identities already in your

8229
05:42:25,840 --> 05:42:31,360
on-premises environment that live in

8230
05:42:28,797 --> 05:42:34,319
active directory you need a way to tie

8231
05:42:31,360 --> 05:42:36,718
these identities to the cloud and so

8232
05:42:34,319 --> 05:42:39,200
here's where you would use google cloud

8233
05:42:36,718 --> 05:42:42,240
directory sync to automatically

8234
05:42:39,200 --> 05:42:45,920
provision users and groups from active

8235
05:42:42,240 --> 05:42:48,480
directory to cloud identity or g suite

8236
05:42:45,919 --> 05:42:51,359
google cloud directory sync is a free

8237
05:42:48,479 --> 05:42:54,399
google provided tool that implements the

8238
05:42:51,360 --> 05:42:57,440
synchronization process and can be run

8239
05:42:54,400 --> 05:43:01,040
on google cloud or in your on-premises

8240
05:42:57,439 --> 05:43:03,680
environment synchronization is one way

8241
05:43:01,040 --> 05:43:06,558
so that active directory remains the

8242
05:43:03,680 --> 05:43:09,840
source of truth cloud identity or g

8243
05:43:06,558 --> 05:43:14,319
suite uses active directory federation

8244
05:43:09,840 --> 05:43:16,718
services or adfs for single sign-on any

8245
05:43:14,319 --> 05:43:20,239
existing corporate applications and

8246
05:43:16,718 --> 05:43:23,840
other sas services can continue to use

8247
05:43:20,240 --> 05:43:26,000
your adfs as an identity provider now i

8248
05:43:23,840 --> 05:43:28,637
know this may be a review for some who

8249
05:43:26,000 --> 05:43:31,119
are advanced in this topic but for those

8250
05:43:28,637 --> 05:43:34,239
who aren't this is a very important

8251
05:43:31,119 --> 05:43:38,000
topic to know as google cloud directory

8252
05:43:34,240 --> 05:43:40,638
sync is a big part of cloud identity and

8253
05:43:38,000 --> 05:43:43,119
is a common way that is used in many

8254
05:43:40,637 --> 05:43:46,239
corporate environments to sync active

8255
05:43:43,119 --> 05:43:49,119
directory or any other ldap server to

8256
05:43:46,240 --> 05:43:51,840
google cloud especially when you want to

8257
05:43:49,119 --> 05:43:53,919
keep your active directory as the single

8258
05:43:51,840 --> 05:43:55,680
source of truth and so that's pretty

8259
05:43:53,919 --> 05:43:58,159
much all i wanted to cover

8260
05:43:55,680 --> 05:44:00,637
when it comes to cloud identity and

8261
05:43:58,159 --> 05:44:02,878
google cloud directory sync so you can

8262
05:44:00,637 --> 05:44:04,709
now mark this lesson as complete and

8263
05:44:02,878 --> 05:44:08,637
let's move on to the next one

8264
05:44:04,709 --> 05:44:11,040
[Music]

8265
05:44:08,637 --> 05:44:13,919
welcome back now i wanted to close out

8266
05:44:11,040 --> 05:44:16,638
this section by briefly going over the

8267
05:44:13,919 --> 05:44:19,519
best practices to follow when working

8268
05:44:16,637 --> 05:44:21,439
with identity and access management so

8269
05:44:19,520 --> 05:44:23,600
the phrase that was discussed in the

8270
05:44:21,439 --> 05:44:26,479
beginning of this lesson that will

8271
05:44:23,599 --> 05:44:29,439
continuously come up in the exam is the

8272
05:44:26,479 --> 05:44:31,680
principle of least privilege and again

8273
05:44:29,439 --> 05:44:34,399
this is where you would apply only the

8274
05:44:31,680 --> 05:44:36,479
minimal access level required for what

8275
05:44:34,400 --> 05:44:39,280
is needed to be done and this can be

8276
05:44:36,479 --> 05:44:41,680
done using predefined roles which is a

8277
05:44:39,279 --> 05:44:44,399
more granular level role than using

8278
05:44:41,680 --> 05:44:46,797
primitive roles which are very wide

8279
05:44:44,400 --> 05:44:48,958
scoped roles that are applied to the

8280
05:44:46,797 --> 05:44:52,159
whole project roles should also be

8281
05:44:48,957 --> 05:44:54,557
granted at the smallest scope necessary

8282
05:44:52,159 --> 05:44:56,240
so for instance when assigning somebody

8283
05:44:54,558 --> 05:44:58,400
the permissions needed

8284
05:44:56,240 --> 05:45:01,440
for managing pre-existing compute

8285
05:44:58,400 --> 05:45:04,000
instances assigning a compute instance

8286
05:45:01,439 --> 05:45:06,399
admin role might be sufficient for what

8287
05:45:04,000 --> 05:45:09,279
they need to do as opposed to assigning

8288
05:45:06,400 --> 05:45:12,638
them the compute instance role that has

8289
05:45:09,279 --> 05:45:15,119
full control of all compute engine

8290
05:45:12,637 --> 05:45:18,079
instance resources now when it comes to

8291
05:45:15,119 --> 05:45:20,399
child resources they cannot restrict

8292
05:45:18,080 --> 05:45:22,798
access granted on its parent

8293
05:45:20,400 --> 05:45:25,920
so always remember to check the policy

8294
05:45:22,797 --> 05:45:28,479
granted on every resource and make sure

8295
05:45:25,919 --> 05:45:31,119
you understand the hierarchical

8296
05:45:28,479 --> 05:45:33,759
inheritance you also want to make sure

8297
05:45:31,119 --> 05:45:36,637
that you restrict access to members

8298
05:45:33,759 --> 05:45:37,679
abilities to create and manage service

8299
05:45:36,637 --> 05:45:39,919
accounts

8300
05:45:37,680 --> 05:45:43,279
as users who are granted the service

8301
05:45:39,919 --> 05:45:46,079
account actor role for a service account

8302
05:45:43,279 --> 05:45:48,399
can access all the resources for which

8303
05:45:46,080 --> 05:45:50,878
the service account has access and

8304
05:45:48,400 --> 05:45:53,680
granting someone with the owner role

8305
05:45:50,878 --> 05:45:56,240
should be used with caution as they will

8306
05:45:53,680 --> 05:45:57,439
have access to modify almost all

8307
05:45:56,240 --> 05:46:01,040
resources

8308
05:45:57,439 --> 05:46:04,079
project-wide including iam policies and

8309
05:46:01,040 --> 05:46:07,120
billing granting an editor role might be

8310
05:46:04,080 --> 05:46:09,360
more sufficient for the needs of most

8311
05:46:07,119 --> 05:46:12,239
when using primitive roles

8312
05:46:09,360 --> 05:46:14,878
now when dealing with resource hierarchy

8313
05:46:12,240 --> 05:46:16,159
to make it easy on how to structure your

8314
05:46:14,878 --> 05:46:18,240
environment

8315
05:46:16,159 --> 05:46:20,878
you should look at mirroring your google

8316
05:46:18,240 --> 05:46:23,120
cloud resource hierarchy structure to

8317
05:46:20,878 --> 05:46:25,119
your organizational structure in other

8318
05:46:23,119 --> 05:46:27,360
words the google cloud resource

8319
05:46:25,119 --> 05:46:29,840
hierarchy should reflect how your

8320
05:46:27,360 --> 05:46:32,797
company is organized you should also use

8321
05:46:29,840 --> 05:46:34,957
projects to group resources that share

8322
05:46:32,797 --> 05:46:37,279
the same trust boundary as well as

8323
05:46:34,957 --> 05:46:40,079
setting policies at the organization

8324
05:46:37,279 --> 05:46:42,159
level and at the project level rather

8325
05:46:40,080 --> 05:46:44,320
than at the resource level now going

8326
05:46:42,159 --> 05:46:46,637
back to what we discussed earlier about

8327
05:46:44,319 --> 05:46:49,119
the principle of least privilege

8328
05:46:46,637 --> 05:46:51,279
you should use this guideline to grant

8329
05:46:49,119 --> 05:46:53,919
iam roles that is

8330
05:46:51,279 --> 05:46:56,637
only give the least amount of access

8331
05:46:53,919 --> 05:46:59,599
necessary to your resources and when

8332
05:46:56,637 --> 05:47:02,000
granting roles across multiple projects

8333
05:46:59,599 --> 05:47:04,797
it is recommended to grant them at the

8334
05:47:02,000 --> 05:47:05,840
folder level instead of at the project

8335
05:47:04,797 --> 05:47:08,878
level

8336
05:47:05,840 --> 05:47:11,599
now diving back into service accounts a

8337
05:47:08,878 --> 05:47:14,958
separate trust boundary should always be

8338
05:47:11,599 --> 05:47:17,599
applied for any given application in

8339
05:47:14,957 --> 05:47:19,919
other words create a new service account

8340
05:47:17,599 --> 05:47:22,000
when multiple components are involved in

8341
05:47:19,919 --> 05:47:24,637
your application you also want to make

8342
05:47:22,000 --> 05:47:27,040
sure that you don't delete any service

8343
05:47:24,637 --> 05:47:30,239
accounts that are in use by running

8344
05:47:27,040 --> 05:47:31,440
instances as your application is likely

8345
05:47:30,240 --> 05:47:33,680
to fail

8346
05:47:31,439 --> 05:47:37,279
so you will want to schedule this during

8347
05:47:33,680 --> 05:47:39,920
plan down time to avoid any outages now

8348
05:47:37,279 --> 05:47:42,239
earlier on in this section we discussed

8349
05:47:39,919 --> 05:47:44,479
service account keys and how they

8350
05:47:42,240 --> 05:47:47,040
interact with google cloud and that is

8351
05:47:44,479 --> 05:47:49,759
the main authentication mechanism used

8352
05:47:47,040 --> 05:47:52,638
for keys so you want to make sure that

8353
05:47:49,759 --> 05:47:56,000
any user managed keys are rotated

8354
05:47:52,637 --> 05:47:58,637
periodically to avoid being compromised

8355
05:47:56,000 --> 05:48:01,200
you can rotate a key by creating a new

8356
05:47:58,637 --> 05:48:03,759
key switching applications to use the

8357
05:48:01,200 --> 05:48:06,080
new key and then deleting the old key

8358
05:48:03,759 --> 05:48:08,797
but be sure to create the new key first

8359
05:48:06,080 --> 05:48:11,600
before deleting the old one as this will

8360
05:48:08,797 --> 05:48:13,680
result in parts or even your entire

8361
05:48:11,599 --> 05:48:15,840
application failing and also when

8362
05:48:13,680 --> 05:48:18,000
working with service account keys it's

8363
05:48:15,840 --> 05:48:20,479
always good practice to name your

8364
05:48:18,000 --> 05:48:22,718
service keys and this will reflect your

8365
05:48:20,479 --> 05:48:24,718
use for those keys and permissions for

8366
05:48:22,718 --> 05:48:26,718
those keys so you know what they are

8367
05:48:24,718 --> 05:48:28,637
used for when you're looking at them now

8368
05:48:26,718 --> 05:48:31,119
when you are giving access to service

8369
05:48:28,637 --> 05:48:34,319
accounts you want to make sure that only

8370
05:48:31,119 --> 05:48:35,599
those who truly need access are the ones

8371
05:48:34,319 --> 05:48:37,360
that have it

8372
05:48:35,599 --> 05:48:40,557
others in your environment should be

8373
05:48:37,360 --> 05:48:42,718
restricted to avoid any misuse now when

8374
05:48:40,558 --> 05:48:45,760
it comes to keeping your service account

8375
05:48:42,718 --> 05:48:48,319
keys safe i can't stress this enough you

8376
05:48:45,759 --> 05:48:50,319
never want to check in these keys source

8377
05:48:48,319 --> 05:48:53,520
code or leave them in your downloads

8378
05:48:50,319 --> 05:48:56,718
directory as this is a prime way of not

8379
05:48:53,520 --> 05:48:59,520
only getting your keys compromised but

8380
05:48:56,718 --> 05:49:01,760
compromising your entire environment to

8381
05:48:59,520 --> 05:49:04,479
be accessed publicly

8382
05:49:01,759 --> 05:49:07,199
now we touched a bit on auditing but we

8383
05:49:04,479 --> 05:49:09,279
haven't really gone into it in detail

8384
05:49:07,200 --> 05:49:11,119
and we'll be going into it later on in

8385
05:49:09,279 --> 05:49:12,319
the course but touching on best

8386
05:49:11,119 --> 05:49:14,637
practices

8387
05:49:12,319 --> 05:49:17,919
you want to be sure to check your cloud

8388
05:49:14,637 --> 05:49:21,039
audit logs regularly and audit all i am

8389
05:49:17,919 --> 05:49:24,159
policy changes whenever you edit any iam

8390
05:49:21,040 --> 05:49:26,718
policies a log is generated that records

8391
05:49:24,159 --> 05:49:29,439
that change and so you always want to

8392
05:49:26,718 --> 05:49:32,080
periodically check these logs to make

8393
05:49:29,439 --> 05:49:34,557
sure that there are no changes that are

8394
05:49:32,080 --> 05:49:36,080
out of your security scope you also want

8395
05:49:34,558 --> 05:49:39,040
to check to see

8396
05:49:36,080 --> 05:49:41,840
who has editing permissions on these iam

8397
05:49:39,040 --> 05:49:44,718
policies and make sure that those who

8398
05:49:41,840 --> 05:49:47,439
hold them have the rights to do so point

8399
05:49:44,718 --> 05:49:50,400
being is that you want to restrict who

8400
05:49:47,439 --> 05:49:52,079
has the ability to edit policies and

8401
05:49:50,400 --> 05:49:54,638
once these audit logs have been

8402
05:49:52,080 --> 05:49:56,958
generated you want to export them to

8403
05:49:54,637 --> 05:49:59,680
cloud storage so that you're able to

8404
05:49:56,957 --> 05:50:02,637
store them for long term retention as

8405
05:49:59,680 --> 05:50:04,957
these logs are typically held for weeks

8406
05:50:02,637 --> 05:50:06,319
and not years getting back to service

8407
05:50:04,957 --> 05:50:08,717
account keys

8408
05:50:06,319 --> 05:50:11,840
service account key access should be

8409
05:50:08,718 --> 05:50:16,159
periodically audited for viewing of any

8410
05:50:11,840 --> 05:50:19,279
misuse or unauthorized access and lastly

8411
05:50:16,159 --> 05:50:22,479
audit logs should also be restricted to

8412
05:50:19,279 --> 05:50:24,957
only those who need access and others

8413
05:50:22,479 --> 05:50:27,279
should have no permissions to view them

8414
05:50:24,957 --> 05:50:30,239
and this can be done by adding a role to

8415
05:50:27,279 --> 05:50:32,797
be able to view these logs now when

8416
05:50:30,240 --> 05:50:36,240
touching on policy management you want

8417
05:50:32,797 --> 05:50:39,199
to grant access to all projects in your

8418
05:50:36,240 --> 05:50:41,600
organization by using an organization

8419
05:50:39,200 --> 05:50:44,240
level policy you also want to grant

8420
05:50:41,599 --> 05:50:47,759
roles to a google group instead of

8421
05:50:44,240 --> 05:50:50,480
individual users as it is easier to add

8422
05:50:47,759 --> 05:50:53,519
or remove members from a google group

8423
05:50:50,479 --> 05:50:56,239
instead of updating an im policy and

8424
05:50:53,520 --> 05:50:59,040
finally when you need to grant multiple

8425
05:50:56,240 --> 05:51:01,840
roles to a task you should create a

8426
05:50:59,040 --> 05:51:04,558
google group as it is a lot easier to

8427
05:51:01,840 --> 05:51:07,040
grant the roles to that group and then

8428
05:51:04,558 --> 05:51:10,240
add the users to that group as opposed

8429
05:51:07,040 --> 05:51:12,080
to adding roles to each individual user

8430
05:51:10,240 --> 05:51:15,360
and so that's all i wanted to cover on

8431
05:51:12,080 --> 05:51:18,320
this short yet very important lesson on

8432
05:51:15,360 --> 05:51:20,400
best practices when it comes to iam now

8433
05:51:18,319 --> 05:51:22,400
i know this is not the most exciting

8434
05:51:20,400 --> 05:51:24,400
topic but will become extremely

8435
05:51:22,400 --> 05:51:27,760
necessary when you are dealing with

8436
05:51:24,400 --> 05:51:31,280
managing users groups and policies in

8437
05:51:27,759 --> 05:51:34,079
environments that require you to use iam

8438
05:51:31,279 --> 05:51:35,840
securely and so please keep this in mind

8439
05:51:34,080 --> 05:51:38,400
whenever you are working in any

8440
05:51:35,840 --> 05:51:40,797
environment as it will help you grant

8441
05:51:38,400 --> 05:51:43,120
the proper permissions when it comes to

8442
05:51:40,797 --> 05:51:45,680
these different topics so now i highly

8443
05:51:43,119 --> 05:51:48,319
recommend that you take a break grab a

8444
05:51:45,680 --> 05:51:50,957
tea or coffee before moving on into the

8445
05:51:48,319 --> 05:51:52,957
next section and so for now you can mark

8446
05:51:50,957 --> 05:51:55,119
this lesson as complete and whenever

8447
05:51:52,957 --> 05:51:55,899
you're ready please join me in the next

8448
05:51:55,119 --> 05:51:59,840
section

8449
05:51:55,900 --> 05:52:01,200
[Music]

8450
05:51:59,840 --> 05:52:03,360
welcome back

8451
05:52:01,200 --> 05:52:05,920
now i wanted to make this as easy as

8452
05:52:03,360 --> 05:52:08,637
possible for those students who do not

8453
05:52:05,919 --> 05:52:11,199
have a background in networking or any

8454
05:52:08,637 --> 05:52:13,279
networking knowledge in general which is

8455
05:52:11,200 --> 05:52:15,600
why i wanted to add this quick

8456
05:52:13,279 --> 05:52:18,000
networking refresher to kick off the

8457
05:52:15,599 --> 05:52:20,717
networking section of this course so

8458
05:52:18,000 --> 05:52:22,957
with that being said let's dive in so

8459
05:52:20,718 --> 05:52:24,878
before the internet computers were

8460
05:52:22,957 --> 05:52:27,759
standalone and didn't have the

8461
05:52:24,878 --> 05:52:31,600
capabilities to send emails

8462
05:52:27,759 --> 05:52:33,279
transfer files or share any information

8463
05:52:31,599 --> 05:52:34,717
fast forward some time

8464
05:52:33,279 --> 05:52:38,079
people started to connect their

8465
05:52:34,718 --> 05:52:40,479
computers together to share and be able

8466
05:52:38,080 --> 05:52:42,638
to do the things that modern networks

8467
05:52:40,479 --> 05:52:45,439
can do today part of being in this

8468
05:52:42,637 --> 05:52:47,919
network is being able to identify each

8469
05:52:45,439 --> 05:52:49,439
computer to know where to send and

8470
05:52:47,919 --> 05:52:51,839
receive files

8471
05:52:49,439 --> 05:52:54,797
this problem was solved by using an

8472
05:52:51,840 --> 05:52:57,599
address to identify each computer on the

8473
05:52:54,797 --> 05:52:59,759
network like humans use a street address

8474
05:52:57,599 --> 05:53:01,840
to identify where they live

8475
05:52:59,759 --> 05:53:04,557
so that mail and packages can be

8476
05:53:01,840 --> 05:53:08,159
delivered to them an ip address is used

8477
05:53:04,558 --> 05:53:10,558
to identify a computer or device on any

8478
05:53:08,159 --> 05:53:13,599
network so communication between

8479
05:53:10,558 --> 05:53:14,558
machines was done by the use of an ip

8480
05:53:13,599 --> 05:53:17,039
address

8481
05:53:14,558 --> 05:53:20,000
a numerical label assigned to each

8482
05:53:17,040 --> 05:53:22,638
device connected to a computer network

8483
05:53:20,000 --> 05:53:26,637
that uses the internet protocol for

8484
05:53:22,637 --> 05:53:28,479
communication also known as ip for short

8485
05:53:26,637 --> 05:53:31,599
so for this system to work a

8486
05:53:28,479 --> 05:53:33,680
communication system was put in place

8487
05:53:31,599 --> 05:53:34,797
that defined how the network would

8488
05:53:33,680 --> 05:53:37,119
function

8489
05:53:34,797 --> 05:53:40,079
this system was put together as a

8490
05:53:37,119 --> 05:53:42,479
consistent model of protocol layers

8491
05:53:40,080 --> 05:53:45,520
defining interoperability

8492
05:53:42,479 --> 05:53:46,558
between network devices and software in

8493
05:53:45,520 --> 05:53:49,200
layers

8494
05:53:46,558 --> 05:53:51,840
to standardize how different protocols

8495
05:53:49,200 --> 05:53:55,280
would communicate in this stack this

8496
05:53:51,840 --> 05:53:58,240
stack is referred to as the open systems

8497
05:53:55,279 --> 05:54:01,199
interconnection model or you may hear

8498
05:53:58,240 --> 05:54:03,680
many refer to it as the seven layer osi

8499
05:54:01,200 --> 05:54:06,159
model now this is not a deep dive

8500
05:54:03,680 --> 05:54:09,119
networking course but i did feel the

8501
05:54:06,159 --> 05:54:11,439
need to cover that which is necessary

8502
05:54:09,119 --> 05:54:13,119
for the understanding of the elements

8503
05:54:11,439 --> 05:54:14,797
taught in this course

8504
05:54:13,119 --> 05:54:17,919
for those wanting to learn more about

8505
05:54:14,797 --> 05:54:19,680
the osi model and the layers within it

8506
05:54:17,919 --> 05:54:22,399
please check out the links that i have

8507
05:54:19,680 --> 05:54:24,718
included in the lesson text below

8508
05:54:22,400 --> 05:54:27,520
so for this lesson and the next i will

8509
05:54:24,718 --> 05:54:30,637
be covering the specific layers with its

8510
05:54:27,520 --> 05:54:33,119
protocols that are highlighted here and

8511
05:54:30,637 --> 05:54:35,759
will help you understand the networking

8512
05:54:33,119 --> 05:54:37,119
concepts in this course with a bit

8513
05:54:35,759 --> 05:54:39,679
better clarity

8514
05:54:37,119 --> 05:54:42,239
so i'll be covering a layer 3 being the

8515
05:54:39,680 --> 05:54:45,279
network layer layer 4 being the

8516
05:54:42,240 --> 05:54:48,000
transport layer and layer 7 being the

8517
05:54:45,279 --> 05:54:50,717
application layer so first up i will be

8518
05:54:48,000 --> 05:54:54,000
covering layer 3 which is the networking

8519
05:54:50,718 --> 05:54:56,000
layer along with the internet protocol

8520
05:54:54,000 --> 05:54:58,000
now there are two versions of the

8521
05:54:56,000 --> 05:55:00,558
internet protocol and are managed

8522
05:54:58,000 --> 05:55:04,000
globally by the regional internet

8523
05:55:00,558 --> 05:55:06,558
registries also known as the rir the

8524
05:55:04,000 --> 05:55:08,878
first one which is ipv4

8525
05:55:06,558 --> 05:55:11,520
is the original version of the internet

8526
05:55:08,878 --> 05:55:15,760
protocol that first came on the scene in

8527
05:55:11,520 --> 05:55:19,920
1981 the second version is ipv6 which is

8528
05:55:15,759 --> 05:55:22,637
a newer version designed in 2017 to deal

8529
05:55:19,919 --> 05:55:24,797
with the problem of ipv4 address

8530
05:55:22,637 --> 05:55:28,079
exhaustion meaning that the amount of

8531
05:55:24,797 --> 05:55:30,319
usable ips were slowly being used up

8532
05:55:28,080 --> 05:55:32,718
and i will be covering both versions of

8533
05:55:30,319 --> 05:55:36,000
the internet protocol in a little bit of

8534
05:55:32,718 --> 05:55:39,760
depth so let's first dive into ipv

8535
05:55:36,000 --> 05:55:43,040
version 4. so ipv4 can be read in a

8536
05:55:39,759 --> 05:55:46,319
human readable notation represented in

8537
05:55:43,040 --> 05:55:47,680
dotted decimal notation consisting of

8538
05:55:46,319 --> 05:55:52,400
four numbers

8539
05:55:47,680 --> 05:55:55,119
each ranging from 0 to 255 separated by

8540
05:55:52,400 --> 05:55:58,319
dots each part between the dots

8541
05:55:55,119 --> 05:56:01,200
represents a group of 8 bits also known

8542
05:55:58,319 --> 05:56:06,119
as an octet a valid range for an ip

8543
05:56:01,200 --> 05:56:06,119
address starts from 0.0.0.0

8544
05:56:06,159 --> 05:56:09,957
and ends in 255.255.255.255.

8545
05:56:11,599 --> 05:56:18,239
and this would give you a total number

8546
05:56:13,840 --> 05:56:20,718
of over 4.2 billion ip addresses now

8547
05:56:18,240 --> 05:56:23,280
this range was viewed as extremely large

8548
05:56:20,718 --> 05:56:26,080
back then until the number of ip

8549
05:56:23,279 --> 05:56:28,878
addresses available were quickly

8550
05:56:26,080 --> 05:56:31,600
dwindling due to the many ipconnected

8551
05:56:28,878 --> 05:56:33,520
devices that we have today

8552
05:56:31,599 --> 05:56:35,919
and this is when a new addressing

8553
05:56:33,520 --> 05:56:38,878
architecture was introduced called

8554
05:56:35,919 --> 05:56:41,599
classful addressing where the address

8555
05:56:38,878 --> 05:56:43,440
was split into smaller ranges and this

8556
05:56:41,599 --> 05:56:46,079
was originally assigned to you when you

8557
05:56:43,439 --> 05:56:48,957
needed an ip address by one of the

8558
05:56:46,080 --> 05:56:52,000
registries noted before so for any given

8559
05:56:48,957 --> 05:56:54,159
ip address they're typically made of two

8560
05:56:52,000 --> 05:56:56,637
separate components the first part of

8561
05:56:54,159 --> 05:56:59,360
the address is used to identify the

8562
05:56:56,637 --> 05:57:01,840
network that the address is a part of

8563
05:56:59,360 --> 05:57:04,637
the part that comes afterwards is used

8564
05:57:01,840 --> 05:57:06,878
to specify a specific host within that

8565
05:57:04,637 --> 05:57:08,878
network now the first part was assigned

8566
05:57:06,878 --> 05:57:10,159
to you and your business by the

8567
05:57:08,878 --> 05:57:12,718
registries

8568
05:57:10,159 --> 05:57:15,279
and the second part was for you to do it

8569
05:57:12,718 --> 05:57:17,520
as you'd like and so these ip addresses

8570
05:57:15,279 --> 05:57:20,239
were assigned from the smaller ranges

8571
05:57:17,520 --> 05:57:23,200
explained earlier called classes the

8572
05:57:20,240 --> 05:57:27,120
first range of classes is class a

8573
05:57:23,200 --> 05:57:31,080
and it started at 0.0.0.0

8574
05:57:27,119 --> 05:57:31,079
and ended at 127.255

8575
05:57:32,797 --> 05:57:40,079
and this would give a total number of

8576
05:57:35,119 --> 05:57:43,119
over 2.1 billion addresses with 128

8577
05:57:40,080 --> 05:57:45,920
different networks class a ip addresses

8578
05:57:43,119 --> 05:57:47,840
can support over 16 million hosts per

8579
05:57:45,919 --> 05:57:49,759
network and those who were assigned

8580
05:57:47,840 --> 05:57:52,797
addresses in this class

8581
05:57:49,759 --> 05:57:55,599
had a fixed value of the first octet the

8582
05:57:52,797 --> 05:57:57,439
second third and fourth octet was free

8583
05:57:55,599 --> 05:58:00,717
for the business to assign as they

8584
05:57:57,439 --> 05:58:03,119
choose class a ip addresses were to be

8585
05:58:00,718 --> 05:58:05,840
used by huge networks like those

8586
05:58:03,119 --> 05:58:08,557
deployed by internet service providers

8587
05:58:05,840 --> 05:58:10,878
and so when ips started to dwindle many

8588
05:58:08,558 --> 05:58:14,159
companies return these class a network

8589
05:58:10,878 --> 05:58:16,797
blocks back to the registries to assist

8590
05:58:14,159 --> 05:58:19,680
with extending addressing capacity and

8591
05:58:16,797 --> 05:58:22,399
so the next range is class b and this is

8592
05:58:19,680 --> 05:58:24,957
half the size of the class a network the

8593
05:58:22,400 --> 05:58:27,958
class b network range started at one at

8594
05:58:24,957 --> 05:58:27,957
128.0.0.0

8595
05:58:28,319 --> 05:58:32,200
and end it at 191.255.255.255

8596
05:58:34,558 --> 05:58:41,040
and carries a total number of over 1

8597
05:58:37,360 --> 05:58:44,000
billion ip addresses with over 16 000

8598
05:58:41,040 --> 05:58:46,798
networks the fixed value in this class

8599
05:58:44,000 --> 05:58:49,119
is of the first and second octet the

8600
05:58:46,797 --> 05:58:52,239
third and fourth octet can be done with

8601
05:58:49,119 --> 05:58:54,399
as you like ip addresses in this class

8602
05:58:52,240 --> 05:58:57,200
were to be used for medium and large

8603
05:58:54,400 --> 05:59:00,638
size networks in enterprises and

8604
05:58:57,200 --> 05:59:03,440
organizations the next range is class c

8605
05:59:00,637 --> 05:59:06,479
and this is half the size of the class b

8606
05:59:03,439 --> 05:59:09,717
network the class c network range starts

8607
05:59:06,479 --> 05:59:09,718
at 192

8608
05:59:10,558 --> 05:59:14,360
and ends at 223.255.255.255

8609
05:59:16,718 --> 05:59:21,760
and carries a total of over half a

8610
05:59:18,878 --> 05:59:24,680
billion addresses with over two million

8611
05:59:21,759 --> 05:59:28,957
networks and can support up to

8612
05:59:24,680 --> 05:59:32,159
256 hosts the fixed value of this class

8613
05:59:28,957 --> 05:59:34,479
is the first second and third octet and

8614
05:59:32,159 --> 05:59:36,558
the fourth can be done with as you like

8615
05:59:34,479 --> 05:59:39,279
ip addresses in this class

8616
05:59:36,558 --> 05:59:41,520
were the most common class and were to

8617
05:59:39,279 --> 05:59:43,599
be used in small business and home

8618
05:59:41,520 --> 05:59:46,558
networks now there's a couple more

8619
05:59:43,599 --> 05:59:49,279
classes that were not commonly used

8620
05:59:46,558 --> 05:59:51,040
called class d and class e

8621
05:59:49,279 --> 05:59:53,439
and this is beyond the scope of this

8622
05:59:51,040 --> 05:59:55,600
course so we won't be discussing this

8623
05:59:53,439 --> 05:59:59,199
and so this was the way that was used to

8624
05:59:55,599 --> 06:00:01,599
assign public ip addresses to devices on

8625
05:59:59,200 --> 06:00:04,080
the internet and allowed communication

8626
06:00:01,599 --> 06:00:06,319
between devices now the problem with

8627
06:00:04,080 --> 06:00:08,638
classful addressing was that with

8628
06:00:06,319 --> 06:00:12,159
businesses that needed larger address

8629
06:00:08,637 --> 06:00:14,479
blocks than a class c network provided

8630
06:00:12,159 --> 06:00:17,599
they received a class b block which in

8631
06:00:14,479 --> 06:00:19,520
most cases was much larger than required

8632
06:00:17,599 --> 06:00:22,479
and the same thing happened with

8633
06:00:19,520 --> 06:00:25,040
requiring more ips than class b

8634
06:00:22,479 --> 06:00:28,319
and getting a class a network block this

8635
06:00:25,040 --> 06:00:30,718
problem introduced a lot of wasted ips

8636
06:00:28,319 --> 06:00:33,200
as there was no real middle ground and

8637
06:00:30,718 --> 06:00:36,080
so this was a way to address any

8638
06:00:33,200 --> 06:00:38,479
publicly routable ips now there were

8639
06:00:36,080 --> 06:00:41,440
certain ranges that were allocated for

8640
06:00:38,479 --> 06:00:44,878
private use and were designed to be used

8641
06:00:41,439 --> 06:00:47,199
in private networks whether on-premises

8642
06:00:44,878 --> 06:00:50,400
or in cloud and again they are not

8643
06:00:47,200 --> 06:00:52,558
designed for public use and also didn't

8644
06:00:50,400 --> 06:00:55,280
have the need to communicate over the

8645
06:00:52,558 --> 06:00:58,080
public internet and so these private ip

8646
06:00:55,279 --> 06:01:01,360
address spaces were standardized using

8647
06:00:58,080 --> 06:01:03,920
the rfc standard 1918

8648
06:01:01,360 --> 06:01:06,718
and again these ip addresses are

8649
06:01:03,919 --> 06:01:08,717
designed for private use and can be used

8650
06:01:06,718 --> 06:01:11,760
anywhere you like as long as they are

8651
06:01:08,718 --> 06:01:13,840
still kept private chances are a network

8652
06:01:11,759 --> 06:01:16,557
that you've come across whether it be a

8653
06:01:13,840 --> 06:01:18,957
cloud provider your home network or

8654
06:01:16,558 --> 06:01:21,360
public wi-fi will use one of these

8655
06:01:18,957 --> 06:01:24,159
classes to define their network and

8656
06:01:21,360 --> 06:01:26,718
these are split into three ranges

8657
06:01:24,159 --> 06:01:29,119
first one being single class a with

8658
06:01:26,718 --> 06:01:32,680
10.0.0

8659
06:01:29,119 --> 06:01:32,680
ending in 10.255.255.255.

8660
06:01:33,439 --> 06:01:38,919
the class b range

8661
06:01:35,200 --> 06:01:38,920
ranging from 172.16.0.0

8662
06:01:39,200 --> 06:01:43,840
to

8663
06:01:40,360 --> 06:01:43,840
172.31 dot

8664
06:01:44,080 --> 06:01:50,200
and lastly class c which was ranging

8665
06:01:46,878 --> 06:01:50,200
from 192.168.0.0

8666
06:01:50,718 --> 06:01:53,958
to 192.168.255.255.

8667
06:01:55,200 --> 06:02:00,400
now for those networks that use these

8668
06:01:57,599 --> 06:02:02,797
private ips over the public internet the

8669
06:02:00,400 --> 06:02:05,440
process they would use is a process

8670
06:02:02,797 --> 06:02:07,439
called network address translation

8671
06:02:05,439 --> 06:02:08,957
or nat for short

8672
06:02:07,439 --> 06:02:11,599
and i will be covering this in a

8673
06:02:08,957 --> 06:02:13,919
different lesson later on in the section

8674
06:02:11,599 --> 06:02:16,319
this method of classful addressing has

8675
06:02:13,919 --> 06:02:18,797
been replaced with something a bit more

8676
06:02:16,319 --> 06:02:21,919
efficient where network blocks can be

8677
06:02:18,797 --> 06:02:24,319
defined more granularly and was done due

8678
06:02:21,919 --> 06:02:27,039
to the internet running out of ipv4

8679
06:02:24,319 --> 06:02:30,239
addresses as we needed to allocate these

8680
06:02:27,040 --> 06:02:33,760
ips more efficiently now this method is

8681
06:02:30,240 --> 06:02:36,480
called classless inter domain routing or

8682
06:02:33,759 --> 06:02:38,877
cider for short now with cider based

8683
06:02:36,479 --> 06:02:41,919
networks you aren't limited to only

8684
06:02:38,878 --> 06:02:44,878
these three classes of networks class a

8685
06:02:41,919 --> 06:02:47,199
b and c have been removed for something

8686
06:02:44,878 --> 06:02:49,760
more efficient which will allow you to

8687
06:02:47,200 --> 06:02:53,200
create networks in any one of those

8688
06:02:49,759 --> 06:02:56,319
ranges cider ranges are represented by

8689
06:02:53,200 --> 06:02:57,520
its starting ip address called a network

8690
06:02:56,319 --> 06:03:00,319
address

8691
06:02:57,520 --> 06:03:03,119
followed by what is called a prefix

8692
06:03:00,319 --> 06:03:05,759
which is a slash and then a number this

8693
06:03:03,119 --> 06:03:07,840
slash number represents the size of the

8694
06:03:05,759 --> 06:03:10,159
network the bigger the number the

8695
06:03:07,840 --> 06:03:12,558
smaller the network and the smaller the

8696
06:03:10,159 --> 06:03:15,360
number the bigger the network given the

8697
06:03:12,558 --> 06:03:15,360
example here

8698
06:03:16,119 --> 06:03:22,319
192.168.0.0 is the network address

8699
06:03:18,957 --> 06:03:24,479
and the prefix is a slash 16. now at

8700
06:03:22,319 --> 06:03:26,878
this high level it is not necessary to

8701
06:03:24,479 --> 06:03:29,680
understand the math behind this but i

8702
06:03:26,878 --> 06:03:31,680
will include a link in the lesson text

8703
06:03:29,680 --> 06:03:33,680
for those of you who are interested in

8704
06:03:31,680 --> 06:03:36,637
learning more about it all you need to

8705
06:03:33,680 --> 06:03:38,878
keep in mind is as i said before

8706
06:03:36,637 --> 06:03:41,279
the bigger the prefix number the smaller

8707
06:03:38,878 --> 06:03:43,920
the network and the smaller the prefix

8708
06:03:41,279 --> 06:03:46,637
number the bigger the network so just as

8709
06:03:43,919 --> 06:03:49,039
an example the size of this slash 16

8710
06:03:46,637 --> 06:03:54,200
network is represented here by this

8711
06:03:49,040 --> 06:03:54,200
circle its ip range is 192.168.0.0

8712
06:03:54,637 --> 06:03:58,279
ending in 192.168.255.255.

8713
06:03:59,840 --> 06:04:04,637
and once you understand the math you

8714
06:04:01,759 --> 06:04:07,359
will be able to tell that a slash 16

8715
06:04:04,637 --> 06:04:09,680
range means that the network is the

8716
06:04:07,360 --> 06:04:12,479
fixed value in the first and second

8717
06:04:09,680 --> 06:04:15,360
octet the hosts on the network or the

8718
06:04:12,479 --> 06:04:18,319
range are the values of anything in the

8719
06:04:15,360 --> 06:04:22,159
third or fourth octets so this network

8720
06:04:18,319 --> 06:04:23,680
in total will provide us with 65

8721
06:04:22,159 --> 06:04:26,240
536

8722
06:04:23,680 --> 06:04:28,797
ip addresses now let's say you decided

8723
06:04:26,240 --> 06:04:31,280
to create a large network such as this

8724
06:04:28,797 --> 06:04:33,439
and you wanted to allocate part of it to

8725
06:04:31,279 --> 06:04:36,557
another part of your business you can

8726
06:04:33,439 --> 06:04:40,557
simply do so by splitting it in two

8727
06:04:36,558 --> 06:04:43,360
and be left with two slash 17 networks

8728
06:04:40,558 --> 06:04:47,120
so instead of one slash 16 network you

8729
06:04:43,360 --> 06:04:50,680
will now have 2 17 networks and each

8730
06:04:47,119 --> 06:04:54,159
network will be assigned 32

8731
06:04:50,680 --> 06:04:56,400
768 ip addresses so just to break it

8732
06:04:54,159 --> 06:04:59,400
down the previous network which was

8733
06:04:56,400 --> 06:04:59,400
192.16

8734
06:04:59,840 --> 06:05:04,957
forward slash 16 with the first two

8735
06:05:02,637 --> 06:05:06,878
octets being the network which is

8736
06:05:04,957 --> 06:05:09,199
192.168

8737
06:05:06,878 --> 06:05:11,760
it leaves the third and fourth octet to

8738
06:05:09,200 --> 06:05:13,440
distribute as you like and these third

8739
06:05:11,759 --> 06:05:15,439
and fourth octets

8740
06:05:13,439 --> 06:05:18,319
are what you're having to create these

8741
06:05:15,439 --> 06:05:21,359
two networks so looking at the blue half

8742
06:05:18,319 --> 06:05:24,319
the address range will start at 0.0 and

8743
06:05:21,360 --> 06:05:26,319
will end at 127.255.

8744
06:05:24,319 --> 06:05:29,200
the green half will start halfway

8745
06:05:26,319 --> 06:05:30,040
through the slash 16 network which will

8746
06:05:29,200 --> 06:05:34,479
be

8747
06:05:30,040 --> 06:05:36,798
128.0 and end at 255.255.

8748
06:05:34,479 --> 06:05:39,279
so now what if i was looking to break

8749
06:05:36,797 --> 06:05:42,159
this network down even further and break

8750
06:05:39,279 --> 06:05:45,199
it into four networks well using cider

8751
06:05:42,159 --> 06:05:48,159
ranges this makes things fairly easy as

8752
06:05:45,200 --> 06:05:52,000
i can have it again and as shown here i

8753
06:05:48,159 --> 06:05:55,599
would split the two slash 17 networks to

8754
06:05:52,000 --> 06:05:57,919
create four slash 18 networks so if i

8755
06:05:55,599 --> 06:06:00,079
took the blue half circle and split it

8756
06:05:57,919 --> 06:06:01,679
into two and then splitting the green

8757
06:06:00,080 --> 06:06:04,400
half circle into

8758
06:06:01,680 --> 06:06:07,119
this would leave me with four slash 18

8759
06:06:04,400 --> 06:06:10,920
networks as seen here the blue quarter

8760
06:06:07,119 --> 06:06:10,919
would start from 192.168.0.0

8761
06:06:11,439 --> 06:06:16,797
ending with the last two octets of

8762
06:06:14,240 --> 06:06:18,718
63.255

8763
06:06:16,797 --> 06:06:20,557
and the red quarter which starts from

8764
06:06:18,718 --> 06:06:24,637
where the blue left off

8765
06:06:20,558 --> 06:06:28,000
starting at the last two octets of 64.0

8766
06:06:24,637 --> 06:06:29,919
and ending in 127.255.

8767
06:06:28,000 --> 06:06:32,718
the green quarter again starting off

8768
06:06:29,919 --> 06:06:34,957
with the previously defined 128.0

8769
06:06:32,718 --> 06:06:37,360
network which is where the red quarter

8770
06:06:34,957 --> 06:06:39,319
left off and ending with the last two

8771
06:06:37,360 --> 06:06:42,797
octets being

8772
06:06:39,319 --> 06:06:44,319
191.255 and lastly the yellow quarter

8773
06:06:42,797 --> 06:06:48,159
starting off from where the green

8774
06:06:44,319 --> 06:06:50,200
quarter left off at 192.0 with the last

8775
06:06:48,159 --> 06:06:53,439
two octets ending with

8776
06:06:50,200 --> 06:06:56,798
255.255 and so this would leave us with

8777
06:06:53,439 --> 06:06:59,359
four smaller slash 18 networks broken

8778
06:06:56,797 --> 06:07:02,479
down from the previous two

8779
06:06:59,360 --> 06:07:05,000
17 networks with each of these networks

8780
06:07:02,479 --> 06:07:08,319
consisting of 16

8781
06:07:05,000 --> 06:07:10,319
384 ip addresses and we can continue

8782
06:07:08,319 --> 06:07:12,718
this process continuously having

8783
06:07:10,319 --> 06:07:14,878
networks and breaking them down into

8784
06:07:12,718 --> 06:07:17,440
smaller networks this process of

8785
06:07:14,878 --> 06:07:20,240
dividing each network into two smaller

8786
06:07:17,439 --> 06:07:22,717
networks is known as subnetting and each

8787
06:07:20,240 --> 06:07:24,878
time you subnet a network and create two

8788
06:07:22,718 --> 06:07:27,760
smaller networks the number in the

8789
06:07:24,878 --> 06:07:30,080
prefix will increase and so i know this

8790
06:07:27,759 --> 06:07:32,239
is already a lot to take in so this

8791
06:07:30,080 --> 06:07:34,798
would be a perfect time for you to grab

8792
06:07:32,240 --> 06:07:37,360
a coffee or a tea and i will be ending

8793
06:07:34,797 --> 06:07:40,557
part one here and part two will be

8794
06:07:37,360 --> 06:07:43,119
continuing immediately after part one so

8795
06:07:40,558 --> 06:07:44,798
you can now mark this lesson as complete

8796
06:07:43,119 --> 06:07:46,000
and i'll see you in the next one for

8797
06:07:44,797 --> 06:07:50,159
part two

8798
06:07:46,000 --> 06:07:52,558
[Music]

8799
06:07:50,159 --> 06:07:54,718
welcome back and in this lesson i'm

8800
06:07:52,558 --> 06:07:57,120
going to be covering the second part of

8801
06:07:54,718 --> 06:08:00,000
the networking refresher now part two of

8802
06:07:57,119 --> 06:08:02,319
this lesson is starting immediately from

8803
06:08:00,000 --> 06:08:04,558
the end of part one so with that being

8804
06:08:02,319 --> 06:08:06,957
said let's dive in

8805
06:08:04,558 --> 06:08:09,520
now i know this network refresher has

8806
06:08:06,957 --> 06:08:12,399
been filled with a ton of numbers

8807
06:08:09,520 --> 06:08:15,279
with an underlying current of math but i

8808
06:08:12,400 --> 06:08:18,080
wanted you to focus on the why so that

8809
06:08:15,279 --> 06:08:20,878
things will make sense later i wanted to

8810
06:08:18,080 --> 06:08:23,360
introduce the hard stuff first so that

8811
06:08:20,878 --> 06:08:26,240
over the length of this course you will

8812
06:08:23,360 --> 06:08:29,520
be able to digest this information

8813
06:08:26,240 --> 06:08:31,520
and understand where this fits into

8814
06:08:29,520 --> 06:08:34,159
when discussing the different network

8815
06:08:31,520 --> 06:08:37,520
parts of google cloud this will also

8816
06:08:34,159 --> 06:08:40,079
help you immensely in the real world as

8817
06:08:37,520 --> 06:08:42,718
well as the exam when configuring

8818
06:08:40,080 --> 06:08:44,160
networks and knowing how to do the job

8819
06:08:42,718 --> 06:08:46,080
of an engineer

8820
06:08:44,159 --> 06:08:48,718
so getting right into it i wanted to

8821
06:08:46,080 --> 06:08:51,680
just do a quick review on classless

8822
06:08:48,718 --> 06:08:54,637
inter-domain routing or cider so as

8823
06:08:51,680 --> 06:08:57,200
discussed in the first refresher an ipv4

8824
06:08:54,637 --> 06:09:00,957
address is referenced in dotted decimal

8825
06:08:57,200 --> 06:09:04,080
notation alongside the slash 16 is the

8826
06:09:00,957 --> 06:09:07,199
prefix and defines how large the network

8827
06:09:04,080 --> 06:09:09,200
is and so before i move on i wanted to

8828
06:09:07,200 --> 06:09:11,520
give you some references that i found

8829
06:09:09,200 --> 06:09:13,680
helpful in order to determine the size

8830
06:09:11,520 --> 06:09:16,080
of a network and so here i have

8831
06:09:13,680 --> 06:09:17,360
referenced three of the most common

8832
06:09:16,080 --> 06:09:20,080
prefixes

8833
06:09:17,360 --> 06:09:22,000
that i continuously run into that i

8834
06:09:20,080 --> 06:09:24,080
think would be an extremely helpful

8835
06:09:22,000 --> 06:09:26,000
reference for you so if you look at the

8836
06:09:24,080 --> 06:09:29,000
first i p address

8837
06:09:26,000 --> 06:09:29,000
192.168.0.0

8838
06:09:29,360 --> 06:09:36,159
with slash 8 as the prefix slash 8 would

8839
06:09:32,637 --> 06:09:37,840
fall under a class a network 192 being

8840
06:09:36,159 --> 06:09:39,759
the first octet

8841
06:09:37,840 --> 06:09:42,718
as well as being the network part of the

8842
06:09:39,759 --> 06:09:45,439
address would be fixed and so the host

8843
06:09:42,718 --> 06:09:48,637
part of it would be anything after that

8844
06:09:45,439 --> 06:09:50,797
so the address could be 192 dot anything

8845
06:09:48,637 --> 06:09:53,680
and this cider range would give you over

8846
06:09:50,797 --> 06:09:56,717
16 million ip addresses the second most

8847
06:09:53,680 --> 06:09:59,760
common network that i see is a slash 16

8848
06:09:56,718 --> 06:10:02,479
network and this would make this ip fall

8849
06:09:59,759 --> 06:10:05,119
under a class b network making the first

8850
06:10:02,479 --> 06:10:09,520
two octets fixed and being the network

8851
06:10:05,119 --> 06:10:11,759
part meaning that anything after 192.168

8852
06:10:09,520 --> 06:10:14,637
would be the host part meaning that the

8853
06:10:11,759 --> 06:10:14,637
address could be

8854
06:10:14,759 --> 06:10:22,479
192.168.anything and this would give you

8855
06:10:18,840 --> 06:10:25,200
65536 ip addresses and so for the third

8856
06:10:22,479 --> 06:10:26,878
ip address which is probably the most

8857
06:10:25,200 --> 06:10:30,240
common one that i see

8858
06:10:26,878 --> 06:10:33,040
is a slash 24 network which falls under

8859
06:10:30,240 --> 06:10:35,600
a class c network meaning that the first

8860
06:10:33,040 --> 06:10:38,558
three octets are fixed and the fourth

8861
06:10:35,599 --> 06:10:40,919
octet could be anything from zero to two

8862
06:10:38,558 --> 06:10:44,638
five five and this would give you

8863
06:10:40,919 --> 06:10:46,877
256 ip addresses and another common one

8864
06:10:44,637 --> 06:10:50,159
which is the smallest that you will see

8865
06:10:46,878 --> 06:10:53,200
is a slash 32 prefix and this is one

8866
06:10:50,159 --> 06:10:57,200
that i use constantly for white listing

8867
06:10:53,200 --> 06:10:59,920
my ip address and because a slash 32 is

8868
06:10:57,200 --> 06:11:02,878
one ip address this is a good one to

8869
06:10:59,919 --> 06:11:05,599
know when you are configuring vpn for

8870
06:11:02,878 --> 06:11:08,637
yourself or you're whitelisting your ip

8871
06:11:05,599 --> 06:11:11,119
address from home or work and for the

8872
06:11:08,637 --> 06:11:14,840
last reference as well as being the

8873
06:11:11,119 --> 06:11:16,797
biggest network is the ip address of

8874
06:11:14,840 --> 06:11:20,240
0.0.0.1

8875
06:11:16,797 --> 06:11:22,797
forward slash 0 which covers all ip

8876
06:11:20,240 --> 06:11:25,760
addresses and you will see this commonly

8877
06:11:22,797 --> 06:11:27,919
used for the internet gateway in any

8878
06:11:25,759 --> 06:11:29,919
cloud environment and so these are some

8879
06:11:27,919 --> 06:11:32,079
common prefixes that come up very

8880
06:11:29,919 --> 06:11:35,119
frequently and so i hope this reference

8881
06:11:32,080 --> 06:11:38,480
will help you now moving back to the osi

8882
06:11:35,119 --> 06:11:41,159
model i've covered ipv4 in the network

8883
06:11:38,479 --> 06:11:44,399
layer and so now it's time to discuss

8884
06:11:41,159 --> 06:11:48,637
ipv6 now as i noted earlier

8885
06:11:44,400 --> 06:11:51,360
ipv4 notation is called dotted decimal

8886
06:11:48,637 --> 06:11:55,759
and each number between the dots is an

8887
06:11:51,360 --> 06:11:58,479
octet with a value of 0 to 255. now

8888
06:11:55,759 --> 06:12:01,439
underneath it all each octet is made up

8889
06:11:58,479 --> 06:12:04,319
of an 8-bit value and having four

8890
06:12:01,439 --> 06:12:09,199
numbers in an ip address that would make

8891
06:12:04,319 --> 06:12:12,957
it a 32-bit value ipv6 is a much longer

8892
06:12:09,200 --> 06:12:16,319
value and is represented in hexadecimal

8893
06:12:12,957 --> 06:12:19,599
and each grouping is two octets which is

8894
06:12:16,319 --> 06:12:22,319
16 bits and is often referred to as a

8895
06:12:19,599 --> 06:12:24,637
hextet now as these addresses are very

8896
06:12:22,319 --> 06:12:27,279
long as you can see you're able to

8897
06:12:24,637 --> 06:12:30,479
abbreviate them by removing redundant

8898
06:12:27,279 --> 06:12:33,199
zeros so this example shown here is the

8899
06:12:30,479 --> 06:12:35,759
same address as the one above it so if

8900
06:12:33,200 --> 06:12:38,798
there is a sequence of zeros you can

8901
06:12:35,759 --> 06:12:42,000
simply replace them with one zero so in

8902
06:12:38,797 --> 06:12:44,797
this address each grouping of four zeros

8903
06:12:42,000 --> 06:12:47,439
can be represented by one zero and if

8904
06:12:44,797 --> 06:12:48,479
you have multiple groups of zeros in one

8905
06:12:47,439 --> 06:12:50,957
address

8906
06:12:48,479 --> 06:12:54,558
you can remove them all and replace them

8907
06:12:50,957 --> 06:12:57,439
with double colons so each of these ipv6

8908
06:12:54,558 --> 06:13:02,080
addresses that you see here are exactly

8909
06:12:57,439 --> 06:13:05,039
the same now each ipv6 address is 128

8910
06:13:02,080 --> 06:13:06,840
bits long and is represented in a

8911
06:13:05,040 --> 06:13:10,159
similar way to

8912
06:13:06,840 --> 06:13:13,279
ipv4 starting with the network address

8913
06:13:10,159 --> 06:13:16,558
and ending with the prefix each hextet

8914
06:13:13,279 --> 06:13:18,557
is 16 bits and the prefix number is the

8915
06:13:16,558 --> 06:13:20,718
number of bits that represent the

8916
06:13:18,558 --> 06:13:24,400
network with this example

8917
06:13:20,718 --> 06:13:27,920
slash 64 refers to the network address

8918
06:13:24,400 --> 06:13:32,638
underlined in green which is 2001

8919
06:13:27,919 --> 06:13:36,159
colon de3 each hextet is 16 bits and the

8920
06:13:32,637 --> 06:13:39,840
prefix is 64. so that's four groups of

8921
06:13:36,159 --> 06:13:42,159
16 and so this is how we know which part

8922
06:13:39,840 --> 06:13:44,637
is the network part of the address and

8923
06:13:42,159 --> 06:13:47,520
which is the host part of the address

8924
06:13:44,637 --> 06:13:50,319
again notice the double colon here and

8925
06:13:47,520 --> 06:13:53,119
as i explained previously any unneeded

8926
06:13:50,319 --> 06:13:56,000
zeros can be replaced by a double colon

8927
06:13:53,119 --> 06:13:58,957
and so this address would represent a

8928
06:13:56,000 --> 06:14:02,878
slew of zeros and so adding in all the

8929
06:13:58,957 --> 06:14:05,199
zeros the ipv6 starting network address

8930
06:14:02,878 --> 06:14:09,279
would look like this now because the

8931
06:14:05,200 --> 06:14:12,159
network address starts at 2001 colon de3

8932
06:14:09,279 --> 06:14:14,717
with another two hextets of zeros as the

8933
06:14:12,159 --> 06:14:17,759
network address that was determined by

8934
06:14:14,718 --> 06:14:21,520
the slash 64 prefix which is four

8935
06:14:17,759 --> 06:14:24,877
hextets it means a network finishes at

8936
06:14:21,520 --> 06:14:27,200
that network address followed by all fs

8937
06:14:24,878 --> 06:14:30,080
and so that's the process of how we can

8938
06:14:27,200 --> 06:14:32,637
determine the start and end of every

8939
06:14:30,080 --> 06:14:36,878
ipv6 network now as i've shown you

8940
06:14:32,637 --> 06:14:41,637
before with all ipv4 addresses they are

8941
06:14:36,878 --> 06:14:41,637
represented with a 0.0.0.0.0

8942
06:14:42,637 --> 06:14:47,840
and because ipv6 addresses are

8943
06:14:45,360 --> 06:14:50,958
represented by the same network address

8944
06:14:47,840 --> 06:14:55,119
and prefix we can represent ipv6

8945
06:14:50,957 --> 06:14:57,479
addresses as double colon slash zero and

8946
06:14:55,119 --> 06:15:00,718
you will see this frequently when using

8947
06:14:57,479 --> 06:15:02,957
ipv6 and so i know this is really

8948
06:15:00,718 --> 06:15:06,798
complicated but i just wanted to give

8949
06:15:02,957 --> 06:15:09,119
you the exposure of ipv6 i don't expect

8950
06:15:06,797 --> 06:15:11,039
you to understand this right away

8951
06:15:09,119 --> 06:15:13,759
in the end it should become a lot

8952
06:15:11,040 --> 06:15:16,000
clearer as we go through the course and

8953
06:15:13,759 --> 06:15:18,637
i promise you it will become a lot

8954
06:15:16,000 --> 06:15:21,040
easier i had a hard time myself trying

8955
06:15:18,637 --> 06:15:23,599
to understand this network concept

8956
06:15:21,040 --> 06:15:26,958
but after a few days i was able to

8957
06:15:23,599 --> 06:15:29,680
digest it and as i went back and did

8958
06:15:26,957 --> 06:15:32,079
some practice it started to make a lot

8959
06:15:29,680 --> 06:15:33,760
more sense to me and so i know as we

8960
06:15:32,080 --> 06:15:36,160
move along with the course

8961
06:15:33,759 --> 06:15:38,239
that it will start making sense to you

8962
06:15:36,159 --> 06:15:41,599
as well so now that we've discussed

8963
06:15:38,240 --> 06:15:44,400
layer 3 in the osi model i wanted to get

8964
06:15:41,599 --> 06:15:48,319
into layer 4 which is the transport

8965
06:15:44,400 --> 06:15:52,000
layer with ip packets discussing tcp and

8966
06:15:48,319 --> 06:15:54,558
udp and so in its simplest form a packet

8967
06:15:52,000 --> 06:15:57,520
is the basic unit of information in

8968
06:15:54,558 --> 06:16:01,760
network transmission so most networks

8969
06:15:57,520 --> 06:16:04,400
use tcpip as the network protocol or set

8970
06:16:01,759 --> 06:16:08,319
of rules for communication between

8971
06:16:04,400 --> 06:16:11,280
devices and the rules of tcpip require

8972
06:16:08,319 --> 06:16:13,840
information to be split into packets

8973
06:16:11,279 --> 06:16:16,000
that contain a segment of data to be

8974
06:16:13,840 --> 06:16:18,878
transferred along with the protocol and

8975
06:16:16,000 --> 06:16:21,119
its port number the originating address

8976
06:16:18,878 --> 06:16:24,718
and the address of where the data is to

8977
06:16:21,119 --> 06:16:27,919
be sent now udp is another protocol that

8978
06:16:24,718 --> 06:16:30,637
is sent with ip and is used in specific

8979
06:16:27,919 --> 06:16:33,919
applications but mostly in this course i

8980
06:16:30,637 --> 06:16:36,797
will be referring to tcpip and so as you

8981
06:16:33,919 --> 06:16:39,359
can see in this diagram of the ip packet

8982
06:16:36,797 --> 06:16:41,840
this is a basic datagram of what a

8983
06:16:39,360 --> 06:16:44,400
packet would look like again with this

8984
06:16:41,840 --> 06:16:47,040
source and destination ip address

8985
06:16:44,400 --> 06:16:49,440
the protocol port number and the data

8986
06:16:47,040 --> 06:16:53,520
itself now this is mainly just to give

8987
06:16:49,439 --> 06:16:56,957
you a high level understanding of tcpip

8988
06:16:53,520 --> 06:16:59,760
and udpip and is not a deep dive into

8989
06:16:56,957 --> 06:17:01,439
networking now moving on to layer 7 of

8990
06:16:59,759 --> 06:17:03,919
the osi model

8991
06:17:01,439 --> 06:17:06,877
this layer is used by networked

8992
06:17:03,919 --> 06:17:08,797
applications or applications that use

8993
06:17:06,878 --> 06:17:12,000
the internet and so there are many

8994
06:17:08,797 --> 06:17:14,637
protocols that fall under this layer now

8995
06:17:12,000 --> 06:17:16,797
these applications do not reside in this

8996
06:17:14,637 --> 06:17:19,039
layer but use the protocols in this

8997
06:17:16,797 --> 06:17:22,159
layer to function so the application

8998
06:17:19,040 --> 06:17:25,360
layer provides services for networked

8999
06:17:22,159 --> 06:17:28,319
applications with the help of protocols

9000
06:17:25,360 --> 06:17:30,319
to perform user activities and you will

9001
06:17:28,319 --> 06:17:33,200
see many of these protocols being

9002
06:17:30,319 --> 06:17:36,239
addressed as we go through this course

9003
06:17:33,200 --> 06:17:41,200
through resources in google cloud like

9004
06:17:36,240 --> 06:17:45,920
http or https for load balancing dns

9005
06:17:41,200 --> 06:17:49,280
that uses udp on port 53 and ssh on port

9006
06:17:45,919 --> 06:17:52,000
22 for logging into hosts and so these

9007
06:17:49,279 --> 06:17:54,319
are just a few of the many scenarios

9008
06:17:52,000 --> 06:17:56,797
where layer 7 and the protocols that

9009
06:17:54,319 --> 06:17:59,680
reside in that layer come up in this

9010
06:17:56,797 --> 06:18:02,399
course and we will be diving into many

9011
06:17:59,680 --> 06:18:04,637
more in the lessons to come and so that

9012
06:18:02,400 --> 06:18:05,520
about wraps up this networking refresher

9013
06:18:04,637 --> 06:18:08,000
lesson

9014
06:18:05,520 --> 06:18:10,240
and don't worry like i said before i'm

9015
06:18:08,000 --> 06:18:11,680
not expecting you to pick things up in

9016
06:18:10,240 --> 06:18:14,320
this first go

9017
06:18:11,680 --> 06:18:16,637
things will start to make more sense as

9018
06:18:14,319 --> 06:18:19,040
we go through the course and we start

9019
06:18:16,637 --> 06:18:22,079
putting these networking concepts into

9020
06:18:19,040 --> 06:18:24,878
practice also feel free to go back and

9021
06:18:22,080 --> 06:18:26,878
review the last couple of lessons again

9022
06:18:24,878 --> 06:18:29,520
if things didn't make sense to you the

9023
06:18:26,878 --> 06:18:32,240
first time or if you come across some

9024
06:18:29,520 --> 06:18:33,680
networking challenges in future lessons

9025
06:18:32,240 --> 06:18:36,240
and so that's everything i wanted to

9026
06:18:33,680 --> 06:18:38,400
cover so you can now mark this lesson as

9027
06:18:36,240 --> 06:18:39,030
complete and let's move on to the next

9028
06:18:38,400 --> 06:18:42,958
one

9029
06:18:39,029 --> 06:18:45,759
[Music]

9030
06:18:42,957 --> 06:18:48,239
welcome back in this lesson we will be

9031
06:18:45,759 --> 06:18:52,797
discussing the core networking service

9032
06:18:48,240 --> 06:18:55,280
of gcp virtual private cloud or vpc for

9033
06:18:52,797 --> 06:18:58,637
short it is the service that allows you

9034
06:18:55,279 --> 06:19:00,717
to create networks inside google cloud

9035
06:18:58,637 --> 06:19:03,279
with both private and public

9036
06:19:00,718 --> 06:19:06,637
connectivity options both for in-cloud

9037
06:19:03,279 --> 06:19:09,119
deployments and on-premise hybrid cloud

9038
06:19:06,637 --> 06:19:11,439
deployments this is a service that you

9039
06:19:09,119 --> 06:19:14,000
must know well as there are many

9040
06:19:11,439 --> 06:19:17,359
questions that come up on the exam with

9041
06:19:14,000 --> 06:19:21,200
regards to vpcs so with that being said

9042
06:19:17,360 --> 06:19:23,920
let's dive in now vpcs are what manages

9043
06:19:21,200 --> 06:19:26,718
the networking functionality for your

9044
06:19:23,919 --> 06:19:29,279
google cloud resources this is a

9045
06:19:26,718 --> 06:19:32,159
software defined network and is not

9046
06:19:29,279 --> 06:19:34,717
confined to the physical limitations of

9047
06:19:32,159 --> 06:19:38,159
networking in a data center this has

9048
06:19:34,718 --> 06:19:40,558
been abstracted for you vpc networks

9049
06:19:38,159 --> 06:19:43,919
including their associated routes and

9050
06:19:40,558 --> 06:19:46,718
firewall rules are global resources they

9051
06:19:43,919 --> 06:19:49,599
are not associated with any particular

9052
06:19:46,718 --> 06:19:53,040
region or zone they are global resources

9053
06:19:49,599 --> 06:19:56,637
and span all available regions across

9054
06:19:53,040 --> 06:19:59,760
the globe as explained earlier vpcs are

9055
06:19:56,637 --> 06:20:02,399
also encapsulated within projects

9056
06:19:59,759 --> 06:20:04,239
projects are the logical container where

9057
06:20:02,400 --> 06:20:08,400
your vpcs live

9058
06:20:04,240 --> 06:20:11,200
now these vpcs do not have ip ranges but

9059
06:20:08,400 --> 06:20:14,638
are simply a construct of all of the

9060
06:20:11,200 --> 06:20:17,920
individual ip addresses and services

9061
06:20:14,637 --> 06:20:19,919
within that network the ip addresses and

9062
06:20:17,919 --> 06:20:22,637
ranges are defined within the

9063
06:20:19,919 --> 06:20:24,717
subnetworks that i will be diving into a

9064
06:20:22,637 --> 06:20:27,759
bit later as well

9065
06:20:24,718 --> 06:20:30,718
traffic to and from instances can be

9066
06:20:27,759 --> 06:20:33,039
controlled with network firewall rules

9067
06:20:30,718 --> 06:20:36,080
rules are implemented on the vms

9068
06:20:33,040 --> 06:20:38,958
themselves so traffic can be controlled

9069
06:20:36,080 --> 06:20:40,160
and logged as it leaves or arrives at a

9070
06:20:38,957 --> 06:20:43,439
vm

9071
06:20:40,159 --> 06:20:45,680
now resources within a vpc network

9072
06:20:43,439 --> 06:20:50,637
can communicate with one another by

9073
06:20:45,680 --> 06:20:52,797
using internal or private ipv4 addresses

9074
06:20:50,637 --> 06:20:55,840
and these are subject to applicable

9075
06:20:52,797 --> 06:20:58,079
network firewall rules these resources

9076
06:20:55,840 --> 06:20:59,520
must be in the same vpc for

9077
06:20:58,080 --> 06:21:02,080
communication

9078
06:20:59,520 --> 06:21:05,200
otherwise they must traverse the public

9079
06:21:02,080 --> 06:21:08,080
internet with an assigned public ip or

9080
06:21:05,200 --> 06:21:11,040
use a vpc peering connection or

9081
06:21:08,080 --> 06:21:13,760
establish a vpn connection another

9082
06:21:11,040 --> 06:21:17,440
important thing to note is that vpc

9083
06:21:13,759 --> 06:21:21,039
networks only support ipv4 unicast

9084
06:21:17,439 --> 06:21:23,840
traffic they do not support ipv6 traffic

9085
06:21:21,040 --> 06:21:26,558
within the network vms in the vpc

9086
06:21:23,840 --> 06:21:28,000
network can only send to ipv4

9087
06:21:26,558 --> 06:21:31,280
destinations

9088
06:21:28,000 --> 06:21:34,957
and only receive traffic from ipv4

9089
06:21:31,279 --> 06:21:38,159
sources however it is possible to create

9090
06:21:34,957 --> 06:21:40,717
an ipv6 address for a global load

9091
06:21:38,159 --> 06:21:43,599
balancer now unless you choose to

9092
06:21:40,718 --> 06:21:47,119
disable it each new project starts with

9093
06:21:43,599 --> 06:21:50,477
a default network in a vpc the default

9094
06:21:47,119 --> 06:21:53,919
network is an auto mode vpc network with

9095
06:21:50,477 --> 06:21:56,957
predefined subnets a subnet is allocated

9096
06:21:53,919 --> 06:22:00,239
for each region with non-overlapping

9097
06:21:56,957 --> 06:22:02,637
cider blocks also each default network

9098
06:22:00,240 --> 06:22:05,280
has a default firewall rule

9099
06:22:02,637 --> 06:22:06,797
these rules are configured to allow

9100
06:22:05,279 --> 06:22:08,797
ingress traffic

9101
06:22:06,797 --> 06:22:12,797
for icmp

9102
06:22:08,797 --> 06:22:15,520
rdp and ssh traffic from anywhere

9103
06:22:12,797 --> 06:22:18,477
as well as ingress traffic from within

9104
06:22:15,520 --> 06:22:20,957
the default network for all protocols

9105
06:22:18,477 --> 06:22:23,360
and ports and so there are two different

9106
06:22:20,957 --> 06:22:26,557
types of vpc networks

9107
06:22:23,360 --> 06:22:29,680
auto mode or custom mode an auto mode

9108
06:22:26,558 --> 06:22:32,638
network also has one subnet per region

9109
06:22:29,680 --> 06:22:35,439
the default network is actually an auto

9110
06:22:32,637 --> 06:22:38,000
mode network as explained earlier now

9111
06:22:35,439 --> 06:22:41,199
these automatically created subnets use

9112
06:22:38,000 --> 06:22:43,680
a set of predefined ip ranges with a

9113
06:22:41,200 --> 06:22:46,798
slash 20 cider block that can be

9114
06:22:43,680 --> 06:22:48,240
expanded to a slash 16 cider block all

9115
06:22:46,797 --> 06:22:51,520
of these subnets

9116
06:22:48,240 --> 06:22:51,520
fit within the default

9117
06:22:51,797 --> 06:22:58,399
10.128.0.0 ford slash 9 cider block and

9118
06:22:55,200 --> 06:23:01,119
as new gcp regions become available

9119
06:22:58,400 --> 06:23:03,680
new subnets in those regions are

9120
06:23:01,119 --> 06:23:07,279
automatically added to auto mode

9121
06:23:03,680 --> 06:23:09,360
networks using an ip range on that block

9122
06:23:07,279 --> 06:23:11,599
now a custom owned network does not

9123
06:23:09,360 --> 06:23:13,440
automatically create subnets

9124
06:23:11,599 --> 06:23:16,637
this type of network provides you with

9125
06:23:13,439 --> 06:23:19,680
complete control over its subnets and ip

9126
06:23:16,637 --> 06:23:22,399
ranges as well as another note an auto

9127
06:23:19,680 --> 06:23:25,200
mode network can be converted to a

9128
06:23:22,400 --> 06:23:27,600
custom mode network to gain more control

9129
06:23:25,200 --> 06:23:30,000
but please be aware this conversion is

9130
06:23:27,599 --> 06:23:32,637
one way meaning that custom networks

9131
06:23:30,000 --> 06:23:34,558
cannot be changed to auto mode networks

9132
06:23:32,637 --> 06:23:36,557
so when deciding on the different types

9133
06:23:34,558 --> 06:23:38,477
of networks you want to use

9134
06:23:36,558 --> 06:23:41,360
make sure that you review all of your

9135
06:23:38,477 --> 06:23:44,399
considerations now custom mode vpc

9136
06:23:41,360 --> 06:23:46,558
networks are more flexible and better

9137
06:23:44,400 --> 06:23:49,440
suited to production and google

9138
06:23:46,558 --> 06:23:52,319
recommends that you use custom mode vpc

9139
06:23:49,439 --> 06:23:55,199
networks in production so here is an

9140
06:23:52,319 --> 06:23:58,000
example of a project that contains three

9141
06:23:55,200 --> 06:24:00,718
networks all of these networks span

9142
06:23:58,000 --> 06:24:02,957
multiple regions across the globe as you

9143
06:24:00,718 --> 06:24:06,159
can see here on the right hand side and

9144
06:24:02,957 --> 06:24:08,399
each network contains separate vms and

9145
06:24:06,159 --> 06:24:12,240
so this diagram is to demonstrate that

9146
06:24:08,400 --> 06:24:14,638
vms that are in the same network or vpc

9147
06:24:12,240 --> 06:24:17,600
can communicate privately even when

9148
06:24:14,637 --> 06:24:20,000
placed in separate regions because vms

9149
06:24:17,599 --> 06:24:22,797
in network a are in the same network

9150
06:24:20,000 --> 06:24:24,558
they can communicate over internal ip

9151
06:24:22,797 --> 06:24:27,439
addresses even though they're in

9152
06:24:24,558 --> 06:24:30,240
different regions essentially your vms

9153
06:24:27,439 --> 06:24:32,717
can communicate even if they exist in

9154
06:24:30,240 --> 06:24:35,280
different locations across the globe as

9155
06:24:32,718 --> 06:24:38,400
long as they are within the same network

9156
06:24:35,279 --> 06:24:41,199
the vms in network b and network c

9157
06:24:38,400 --> 06:24:44,558
are not in the same network therefore by

9158
06:24:41,200 --> 06:24:47,200
default these vms must communicate over

9159
06:24:44,558 --> 06:24:49,840
external ips even though they're in the

9160
06:24:47,200 --> 06:24:52,159
same region as no internal ip

9161
06:24:49,840 --> 06:24:55,360
communication is allowed between

9162
06:24:52,159 --> 06:24:58,878
networks unless you set up vpc network

9163
06:24:55,360 --> 06:25:01,200
peering or use a vpn connection now i

9164
06:24:58,878 --> 06:25:04,159
wanted to bring back the focus to the

9165
06:25:01,200 --> 06:25:06,080
default vpc for just a minute unless you

9166
06:25:04,159 --> 06:25:08,718
create an organizational policy that

9167
06:25:06,080 --> 06:25:11,040
prohibits it new projects will always

9168
06:25:08,718 --> 06:25:13,920
start with a default network that has

9169
06:25:11,040 --> 06:25:16,638
one subnet in each region and again this

9170
06:25:13,919 --> 06:25:18,877
is an auto mode vpc network in this

9171
06:25:16,637 --> 06:25:21,919
particular example i am showing a

9172
06:25:18,878 --> 06:25:24,477
default vpc with seven of its default

9173
06:25:21,919 --> 06:25:27,519
regions displayed along with their ip

9174
06:25:24,477 --> 06:25:30,399
ranges and again i want to stress that

9175
06:25:27,520 --> 06:25:33,600
vpc networks along with their associated

9176
06:25:30,400 --> 06:25:36,400
routes and firewall rules are global

9177
06:25:33,599 --> 06:25:39,199
resources they are not associated with

9178
06:25:36,400 --> 06:25:41,760
any particular region or zone so the

9179
06:25:39,200 --> 06:25:45,440
subnets within them are regional and so

9180
06:25:41,759 --> 06:25:47,679
when an auto mode vpc network is created

9181
06:25:45,439 --> 06:25:50,000
one subnet from each region is

9182
06:25:47,680 --> 06:25:52,718
automatically created within it these

9183
06:25:50,000 --> 06:25:56,080
automatically created subnets use a set

9184
06:25:52,718 --> 06:25:58,477
of predefined ip ranges that fit within

9185
06:25:56,080 --> 06:26:01,718
the cider block that you see here

9186
06:25:58,477 --> 06:26:01,718
of 10.128.0.049

9187
06:26:03,599 --> 06:26:06,797
and as new google cloud regions become

9188
06:26:05,680 --> 06:26:09,119
available

9189
06:26:06,797 --> 06:26:11,680
new subnets in those regions are

9190
06:26:09,119 --> 06:26:12,718
automatically added to auto mode vpc

9191
06:26:11,680 --> 06:26:15,680
networks

9192
06:26:12,718 --> 06:26:17,600
by using an ip range from that block in

9193
06:26:15,680 --> 06:26:20,477
addition to the automatically created

9194
06:26:17,599 --> 06:26:23,840
subnets you can add more subnets

9195
06:26:20,477 --> 06:26:26,718
manually to auto mode vpc networks in

9196
06:26:23,840 --> 06:26:31,400
regions that you choose by using ip

9197
06:26:26,718 --> 06:26:31,400
ranges outside of 10.128.0.049

9198
06:26:32,400 --> 06:26:38,240
now if you're using a default vbc or

9199
06:26:35,200 --> 06:26:41,119
have already created an auto mode vpc

9200
06:26:38,240 --> 06:26:43,040
you can switch the vpc network from auto

9201
06:26:41,119 --> 06:26:45,919
mode to custom mode and this is a

9202
06:26:43,040 --> 06:26:48,878
one-way conversion only as custom mode

9203
06:26:45,919 --> 06:26:51,439
vpc networks cannot be changed to auto

9204
06:26:48,878 --> 06:26:54,159
mode vpc networks now bringing this

9205
06:26:51,439 --> 06:26:55,840
theory into practice with regards to the

9206
06:26:54,159 --> 06:26:58,400
default vpc

9207
06:26:55,840 --> 06:27:01,040
i wanted to take the time to do a short

9208
06:26:58,400 --> 06:27:02,159
demo so whenever you're ready join me in

9209
06:27:01,040 --> 06:27:04,558
the console

9210
06:27:02,159 --> 06:27:06,477
and so here we are back in the console

9211
06:27:04,558 --> 06:27:10,000
and if i go here in the top right hand

9212
06:27:06,477 --> 06:27:12,957
corner i am logged in as tony bowties at

9213
06:27:10,000 --> 06:27:16,159
gmail.com and in the top drop down

9214
06:27:12,957 --> 06:27:19,119
project menu i'm logged in under project

9215
06:27:16,159 --> 06:27:21,599
tony and because this demo is geared

9216
06:27:19,119 --> 06:27:24,557
around the default vpc i want to

9217
06:27:21,599 --> 06:27:26,637
navigate to vpc networks so i'm going to

9218
06:27:24,558 --> 06:27:28,558
go over here to the top left hand corner

9219
06:27:26,637 --> 06:27:30,878
to the navigation menu

9220
06:27:28,558 --> 06:27:31,840
and i'm going to click on it and scroll

9221
06:27:30,878 --> 06:27:35,360
down

9222
06:27:31,840 --> 06:27:37,279
to vpc network under networking

9223
06:27:35,360 --> 06:27:39,680
and so as you can see here in the left

9224
06:27:37,279 --> 06:27:41,919
hand menu there are a bunch of different

9225
06:27:39,680 --> 06:27:44,797
options that i can choose from but i

9226
06:27:41,919 --> 06:27:47,519
won't be touching on any of these topics

9227
06:27:44,797 --> 06:27:50,878
as i have other lessons that will deep

9228
06:27:47,520 --> 06:27:52,558
dive into those topics so in this demo

9229
06:27:50,878 --> 06:27:55,200
i'd like to strictly touch on the

9230
06:27:52,558 --> 06:27:58,000
default vpc and as you can see in

9231
06:27:55,200 --> 06:28:01,600
project tony it has created a default

9232
06:27:58,000 --> 06:28:04,957
vpc for me with a one subnet in every

9233
06:28:01,599 --> 06:28:07,359
region having its own ip address range

9234
06:28:04,957 --> 06:28:11,119
and so just as a reminder whenever you

9235
06:28:07,360 --> 06:28:13,680
create a new project a default vpc will

9236
06:28:11,119 --> 06:28:16,000
be automatically created for you and

9237
06:28:13,680 --> 06:28:18,477
when these subnets were created each of

9238
06:28:16,000 --> 06:28:21,119
them have a route out to the public

9239
06:28:18,477 --> 06:28:23,680
internet and so the internet gateway is

9240
06:28:21,119 --> 06:28:26,399
listed here its corresponding firewall

9241
06:28:23,680 --> 06:28:29,360
rules along with global dynamic routing

9242
06:28:26,400 --> 06:28:31,840
and flow logs are turned off and again i

9243
06:28:29,360 --> 06:28:34,240
will be getting deeper into routing and

9244
06:28:31,840 --> 06:28:36,957
flow logs in later lessons in the

9245
06:28:34,240 --> 06:28:39,840
section now earlier i had pointed out

9246
06:28:36,957 --> 06:28:42,557
that an auto mode vpc can be converted

9247
06:28:39,840 --> 06:28:44,400
to a custom vpc and it's as simple as

9248
06:28:42,558 --> 06:28:46,477
clicking this button but we don't want

9249
06:28:44,400 --> 06:28:49,840
to do that just yet and what i'd like to

9250
06:28:46,477 --> 06:28:51,840
do is drill down into the default vbc

9251
06:28:49,840 --> 06:28:54,637
and show you all the different options

9252
06:28:51,840 --> 06:28:57,040
as you can see here the dns api has not

9253
06:28:54,637 --> 06:28:59,439
been enabled and so for most of you a

9254
06:28:57,040 --> 06:29:01,280
good idea would be to enable it and so

9255
06:28:59,439 --> 06:29:03,119
i'm going to go ahead and do that now as

9256
06:29:01,279 --> 06:29:05,439
well you can see here that i can make

9257
06:29:03,119 --> 06:29:07,279
adjustments to each of the different

9258
06:29:05,439 --> 06:29:10,877
subnets or i can change the

9259
06:29:07,279 --> 06:29:12,557
configuration of the vpc itself so if i

9260
06:29:10,878 --> 06:29:15,119
click on this edit button here at the

9261
06:29:12,558 --> 06:29:17,680
top i'm able to change the subnet

9262
06:29:15,119 --> 06:29:19,840
creation mode along with the dynamic

9263
06:29:17,680 --> 06:29:21,920
routing mode which i will get into in a

9264
06:29:19,840 --> 06:29:24,718
later lesson and the same thing with the

9265
06:29:21,919 --> 06:29:26,877
dns server policy and so to make this

9266
06:29:24,718 --> 06:29:29,920
demo a little bit more exciting i want

9267
06:29:26,878 --> 06:29:31,920
to show you the process on how to expand

9268
06:29:29,919 --> 06:29:34,319
a subnet so i'm going to go into us

9269
06:29:31,919 --> 06:29:36,000
central one i'm going to drill down here

9270
06:29:34,319 --> 06:29:39,040
and here's all the configuration

9271
06:29:36,000 --> 06:29:41,759
settings for the default subnet in the

9272
06:29:39,040 --> 06:29:44,159
us central one region and so for me to

9273
06:29:41,759 --> 06:29:46,797
edit this subnet i can simply click on

9274
06:29:44,159 --> 06:29:49,680
the edit button up here at the top and

9275
06:29:46,797 --> 06:29:52,477
so right below the ip address range i am

9276
06:29:49,680 --> 06:29:54,279
prompted with a note saying that the ip

9277
06:29:52,477 --> 06:29:57,119
ranges must be unique and

9278
06:29:54,279 --> 06:29:59,759
non-overlapping as we stated before and

9279
06:29:57,119 --> 06:30:02,957
this is a very important point to know

9280
06:29:59,759 --> 06:30:05,199
when you're architecting any vpcs or its

9281
06:30:02,957 --> 06:30:07,599
corresponding sub networks and so i'm

9282
06:30:05,200 --> 06:30:09,680
going to go ahead and change the subnet

9283
06:30:07,599 --> 06:30:11,919
from a cider range of 20

9284
06:30:09,680 --> 06:30:14,797
and i'm going to change it to 16. i'm

9285
06:30:11,919 --> 06:30:16,637
not going to add any secondary ip ranges

9286
06:30:14,797 --> 06:30:18,637
i'm going to leave private google access

9287
06:30:16,637 --> 06:30:20,159
off and so i'm going to leave everything

9288
06:30:18,637 --> 06:30:22,637
else as is

9289
06:30:20,159 --> 06:30:25,360
and simply click on save and so once

9290
06:30:22,637 --> 06:30:27,759
this has completed i'll be able to see

9291
06:30:25,360 --> 06:30:31,440
that my subnet range will go from a

9292
06:30:27,759 --> 06:30:34,239
slash 20 to a slash 16. and so here you

9293
06:30:31,439 --> 06:30:37,119
can see the ip address range has now

9294
06:30:34,240 --> 06:30:39,760
changed to a slash 16. if i go back to

9295
06:30:37,119 --> 06:30:42,079
the main page of the vpc network i can

9296
06:30:39,759 --> 06:30:44,159
see that the ip address range is

9297
06:30:42,080 --> 06:30:46,478
different from all the other ones now

9298
06:30:44,159 --> 06:30:49,040
you're probably asking why can't i just

9299
06:30:46,477 --> 06:30:51,439
change the ip address range on all the

9300
06:30:49,040 --> 06:30:52,878
subnets at once and so even though i'd

9301
06:30:51,439 --> 06:30:55,199
love to do that

9302
06:30:52,878 --> 06:30:57,600
unfortunately google does not give you

9303
06:30:55,200 --> 06:31:00,637
the option each subnet must be

9304
06:30:57,599 --> 06:31:02,877
configured one by one to change the ipa

9305
06:31:00,637 --> 06:31:05,599
address range now i wanted to quickly

9306
06:31:02,878 --> 06:31:08,159
jump into the default firewall rules and

9307
06:31:05,599 --> 06:31:09,919
as discussed earlier the rules for

9308
06:31:08,159 --> 06:31:11,119
incoming ssh

9309
06:31:09,919 --> 06:31:14,637
rdp

9310
06:31:11,119 --> 06:31:17,200
and icmp have been pre-populated

9311
06:31:14,637 --> 06:31:20,079
along with a default rule that allows

9312
06:31:17,200 --> 06:31:21,119
incoming connections for all protocols

9313
06:31:20,080 --> 06:31:24,400
and ports

9314
06:31:21,119 --> 06:31:26,319
among instances within the same network

9315
06:31:24,400 --> 06:31:28,878
so when it comes to routes with regards

9316
06:31:26,319 --> 06:31:31,279
to the vpc network the only one i really

9317
06:31:28,878 --> 06:31:33,119
wanted to touch on is the default route

9318
06:31:31,279 --> 06:31:36,239
to the internet and so without this

9319
06:31:33,119 --> 06:31:39,039
route any of the subnets in this vpc

9320
06:31:36,240 --> 06:31:41,440
wouldn't have access to route traffic to

9321
06:31:39,040 --> 06:31:44,319
the internet and so when the default vpc

9322
06:31:41,439 --> 06:31:46,877
is created the default internet gateway

9323
06:31:44,319 --> 06:31:49,200
is also created and so now going back to

9324
06:31:46,878 --> 06:31:51,200
the main page of the vpc network i

9325
06:31:49,200 --> 06:31:53,840
wanted to go through the process

9326
06:31:51,200 --> 06:31:55,840
of making the ip address range bigger

9327
06:31:53,840 --> 06:31:57,279
but doing it through the command line

9328
06:31:55,840 --> 06:31:59,680
and so i'm going to go up to the right

9329
06:31:57,279 --> 06:32:01,439
hand corner and open up cloud shell i'm

9330
06:31:59,680 --> 06:32:03,599
going to make this a little bit bigger

9331
06:32:01,439 --> 06:32:05,680
and so for this demo i'm going to

9332
06:32:03,599 --> 06:32:09,119
increase the address range for the

9333
06:32:05,680 --> 06:32:11,760
subnet in us west one from a slash 20 to

9334
06:32:09,119 --> 06:32:12,797
a slash 16 and so i'm going to paste in

9335
06:32:11,759 --> 06:32:15,439
the command

9336
06:32:12,797 --> 06:32:17,759
which is gcloud compute networks

9337
06:32:15,439 --> 06:32:20,477
subnets expand

9338
06:32:17,759 --> 06:32:23,039
ip dash range and then the name of the

9339
06:32:20,477 --> 06:32:26,079
network which is default as well as the

9340
06:32:23,040 --> 06:32:28,159
region and i'm going to do uswest1 along

9341
06:32:26,080 --> 06:32:31,680
with the prefix length which is going to

9342
06:32:28,159 --> 06:32:33,520
be 16. so i'm going to hit enter

9343
06:32:31,680 --> 06:32:35,920
i've been prompted to make sure that

9344
06:32:33,520 --> 06:32:37,840
this is what i want to do and so yes i

9345
06:32:35,919 --> 06:32:40,399
do want to continue so i'm going to type

9346
06:32:37,840 --> 06:32:41,920
in y for yes and hit enter and so within

9347
06:32:40,400 --> 06:32:44,878
a few seconds i should get some

9348
06:32:41,919 --> 06:32:47,119
confirmation and as expected my subnet

9349
06:32:44,878 --> 06:32:49,680
has been updated and so because i like

9350
06:32:47,119 --> 06:32:51,759
to verify everything i'm going to now

9351
06:32:49,680 --> 06:32:55,040
clear the screen and i'm going to paste

9352
06:32:51,759 --> 06:32:57,519
in the command gcloud compute networks

9353
06:32:55,040 --> 06:32:59,840
subnets describe and then the subnet

9354
06:32:57,520 --> 06:33:02,558
name which is default along with the

9355
06:32:59,840 --> 06:33:04,637
region which would be uswest1 i'm going

9356
06:33:02,558 --> 06:33:07,920
to click on enter and as you can see

9357
06:33:04,637 --> 06:33:10,239
here the ipsider range is consistent

9358
06:33:07,919 --> 06:33:12,477
with what we have changed and if i do a

9359
06:33:10,240 --> 06:33:15,280
quick refresh on the browser

9360
06:33:12,477 --> 06:33:18,079
i'll be able to see that the console has

9361
06:33:15,279 --> 06:33:20,717
reflected the same thing and as expected

9362
06:33:18,080 --> 06:33:24,000
the ip address range here for us west

9363
06:33:20,718 --> 06:33:26,718
one in the console reflects that which

9364
06:33:24,000 --> 06:33:29,279
we see here in cloud shell and so now to

9365
06:33:26,718 --> 06:33:32,637
end this demo i wanted to quickly show

9366
06:33:29,279 --> 06:33:35,119
you how i can delete the default vpc and

9367
06:33:32,637 --> 06:33:37,039
recreate it so all i need to do is to

9368
06:33:35,119 --> 06:33:39,599
drill into the settings

9369
06:33:37,040 --> 06:33:41,520
and then click on delete vpc network

9370
06:33:39,599 --> 06:33:43,680
right here at the top i'm going to get a

9371
06:33:41,520 --> 06:33:46,000
prompt to ask me if i'm sure and i'm

9372
06:33:43,680 --> 06:33:49,279
going to simply click on delete now just

9373
06:33:46,000 --> 06:33:52,240
as a note if you have any resources that

9374
06:33:49,279 --> 06:33:54,957
are in any vpc networks you will not be

9375
06:33:52,240 --> 06:33:57,200
able to delete the vpc you would have to

9376
06:33:54,957 --> 06:34:00,159
delete the resources first and then

9377
06:33:57,200 --> 06:34:02,558
delete the vpc afterwards okay and it

9378
06:34:00,159 --> 06:34:05,439
has been successfully deleted and as you

9379
06:34:02,558 --> 06:34:07,760
can see there are no local vpc networks

9380
06:34:05,439 --> 06:34:11,599
in this current project and so i want to

9381
06:34:07,759 --> 06:34:13,919
go ahead and recreate the default vpc so

9382
06:34:11,599 --> 06:34:16,079
i'm going to simply click on create vpc

9383
06:34:13,919 --> 06:34:18,239
network and so here i'm prompted to

9384
06:34:16,080 --> 06:34:21,200
enter in a bunch of information

9385
06:34:18,240 --> 06:34:24,159
for creating this new vpc network and so

9386
06:34:21,200 --> 06:34:28,000
keeping with the spirit of default vpcs

9387
06:34:24,159 --> 06:34:30,159
i'm going to name this vpc default

9388
06:34:28,000 --> 06:34:32,797
i'm going to put default in the

9389
06:34:30,159 --> 06:34:35,520
description and under subnet creation

9390
06:34:32,797 --> 06:34:37,759
mode i'm going to click on automatic and

9391
06:34:35,520 --> 06:34:40,637
as you can see a prompt came up telling

9392
06:34:37,759 --> 06:34:43,119
me these ip address ranges will be

9393
06:34:40,637 --> 06:34:45,599
assigned to each region in your vpc

9394
06:34:43,119 --> 06:34:48,477
network and i'm able to review the ip

9395
06:34:45,599 --> 06:34:51,599
address ranges for each region and as

9396
06:34:48,477 --> 06:34:54,558
stated before the ip address ranges for

9397
06:34:51,599 --> 06:34:56,319
each region will always be the same

9398
06:34:54,558 --> 06:35:00,240
every time i create

9399
06:34:56,319 --> 06:35:02,878
this default vpc or create a vpc in the

9400
06:35:00,240 --> 06:35:06,159
automatic subnet creation mode

9401
06:35:02,878 --> 06:35:09,360
now as a note here under firewall rules

9402
06:35:06,159 --> 06:35:11,680
if i don't select these firewall rules

9403
06:35:09,360 --> 06:35:14,558
none will actually be created so if

9404
06:35:11,680 --> 06:35:16,718
you're creating a new default vpc be

9405
06:35:14,558 --> 06:35:18,798
sure to check these off and so i'm going

9406
06:35:16,718 --> 06:35:20,637
to leave everything else as is and i'm

9407
06:35:18,797 --> 06:35:22,878
going to simply go to the bottom and

9408
06:35:20,637 --> 06:35:24,797
click on the create button and within

9409
06:35:22,878 --> 06:35:28,159
about a minute i should have the new

9410
06:35:24,797 --> 06:35:31,039
default vpc created okay and we are back

9411
06:35:28,159 --> 06:35:34,000
in business the default vpc has been

9412
06:35:31,040 --> 06:35:36,718
recreated with all of these subnets in

9413
06:35:34,000 --> 06:35:39,759
its corresponding regions all the ip

9414
06:35:36,718 --> 06:35:41,760
address ranges the firewall rules

9415
06:35:39,759 --> 06:35:44,399
everything that we saw earlier in the

9416
06:35:41,759 --> 06:35:46,797
default vpc and so that's pretty much

9417
06:35:44,400 --> 06:35:49,600
all i wanted to cover in this demo on

9418
06:35:46,797 --> 06:35:52,637
the default vpc network along with the

9419
06:35:49,599 --> 06:35:54,877
lesson on vpcs so you can now mark this

9420
06:35:52,637 --> 06:35:57,200
lesson as complete and let's move on to

9421
06:35:54,878 --> 06:35:57,200
the next

9422
06:35:58,840 --> 06:36:05,040
one welcome back and in this lesson i'm

9423
06:36:02,319 --> 06:36:08,079
going to be discussing vpc network

9424
06:36:05,040 --> 06:36:10,400
subnets now the terms subnet and sub

9425
06:36:08,080 --> 06:36:12,718
network are synonymous and are used

9426
06:36:10,400 --> 06:36:14,638
interchangeably in google cloud as

9427
06:36:12,718 --> 06:36:16,958
you'll hear me using either one in this

9428
06:36:14,637 --> 06:36:19,360
lesson yet i am referring to the same

9429
06:36:16,957 --> 06:36:22,557
thing now when you create a resource in

9430
06:36:19,360 --> 06:36:25,200
google cloud you choose a network and a

9431
06:36:22,558 --> 06:36:27,600
subnet and so because a subnet is needed

9432
06:36:25,200 --> 06:36:30,400
before creating resources some good

9433
06:36:27,599 --> 06:36:33,039
knowledge behind it is necessary for

9434
06:36:30,400 --> 06:36:36,159
both building and google cloud as well

9435
06:36:33,040 --> 06:36:39,280
as in the exam so in this lesson i'll be

9436
06:36:36,159 --> 06:36:41,840
covering subnets at a deeper level with

9437
06:36:39,279 --> 06:36:45,119
all of its features and functionality so

9438
06:36:41,840 --> 06:36:48,477
with that being said let's dive in

9439
06:36:45,119 --> 06:36:51,759
now each vpc network consists of one or

9440
06:36:48,477 --> 06:36:54,399
more useful ip range partitions

9441
06:36:51,759 --> 06:36:58,000
called subnets also known in google

9442
06:36:54,400 --> 06:37:00,558
cloud as sub networks each subnet is

9443
06:36:58,000 --> 06:37:03,599
associated with the region and vpc

9444
06:37:00,558 --> 06:37:07,040
networks do not have any ip address

9445
06:37:03,599 --> 06:37:10,000
ranges associated with them ip ranges

9446
06:37:07,040 --> 06:37:12,558
are defined for the subnets a network

9447
06:37:10,000 --> 06:37:15,119
must have at least one subnet before you

9448
06:37:12,558 --> 06:37:17,680
can use it and as mentioned earlier when

9449
06:37:15,119 --> 06:37:21,119
you create a project it will create a

9450
06:37:17,680 --> 06:37:24,558
default vpc network with subnets in each

9451
06:37:21,119 --> 06:37:27,520
region automatically auto mode will run

9452
06:37:24,558 --> 06:37:30,000
under this same functionality now custom

9453
06:37:27,520 --> 06:37:32,878
vpc networks on the other hand start

9454
06:37:30,000 --> 06:37:35,439
with no subnets giving you full control

9455
06:37:32,878 --> 06:37:37,760
over subnet creation and you can create

9456
06:37:35,439 --> 06:37:39,919
more than one subnet per region you

9457
06:37:37,759 --> 06:37:42,797
cannot change the name or region of a

9458
06:37:39,919 --> 06:37:45,679
subnet after you've created it you would

9459
06:37:42,797 --> 06:37:48,079
have to delete the subnet and replace it

9460
06:37:45,680 --> 06:37:51,040
as long as no resources are using it

9461
06:37:48,080 --> 06:37:54,718
primary and secondary ranges for subnets

9462
06:37:51,040 --> 06:37:57,520
cannot overlap with any allocated range

9463
06:37:54,718 --> 06:37:59,760
any primary or secondary range of

9464
06:37:57,520 --> 06:38:03,040
another subnet in the same network

9465
06:37:59,759 --> 06:38:05,840
or any ip ranges of subnets in peered

9466
06:38:03,040 --> 06:38:08,638
networks in other words they must be a

9467
06:38:05,840 --> 06:38:11,840
unique valid cider block now when it

9468
06:38:08,637 --> 06:38:15,119
comes to ip addresses of a subnet google

9469
06:38:11,840 --> 06:38:18,400
cloud vpc has an amazing feature that

9470
06:38:15,119 --> 06:38:21,680
lets you increase the ip space of any

9471
06:38:18,400 --> 06:38:24,558
subnets without any workload shutdown or

9472
06:38:21,680 --> 06:38:26,797
downtime as demonstrated earlier in the

9473
06:38:24,558 --> 06:38:29,920
previous lesson and this gives you the

9474
06:38:26,797 --> 06:38:32,797
flexibility and growth options to meet

9475
06:38:29,919 --> 06:38:35,839
your needs but unfortunately there are

9476
06:38:32,797 --> 06:38:38,878
some caveats the new subnet must not

9477
06:38:35,840 --> 06:38:42,718
overlap with other subnets in the same

9478
06:38:38,878 --> 06:38:46,477
vpc network in any region also the new

9479
06:38:42,718 --> 06:38:49,520
subnets must stay inside the rfc 1918

9480
06:38:46,477 --> 06:38:52,239
address space the new network range must

9481
06:38:49,520 --> 06:38:54,718
be larger than the original which means

9482
06:38:52,240 --> 06:38:56,638
the prefix length must be smaller in

9483
06:38:54,718 --> 06:39:00,000
number and once a subnet has been

9484
06:38:56,637 --> 06:39:02,878
expanded you cannot undo an expansion

9485
06:39:00,000 --> 06:39:06,637
now auto mode network starts with a

9486
06:39:02,878 --> 06:39:11,040
slash 20 range that can be expanded to a

9487
06:39:06,637 --> 06:39:13,439
16 ip range but not larger you can also

9488
06:39:11,040 --> 06:39:16,080
convert the auto mode network to a

9489
06:39:13,439 --> 06:39:19,039
custom mode network to increase the ip

9490
06:39:16,080 --> 06:39:20,798
range even further and again this is a

9491
06:39:19,040 --> 06:39:23,520
one-way conversion

9492
06:39:20,797 --> 06:39:26,797
custom mode vpc networks cannot be

9493
06:39:23,520 --> 06:39:29,119
changed to auto mode vpc networks

9494
06:39:26,797 --> 06:39:30,399
now in any network that is created in

9495
06:39:29,119 --> 06:39:33,439
google cloud

9496
06:39:30,400 --> 06:39:35,840
there will always be some ip addresses

9497
06:39:33,439 --> 06:39:38,399
that you will not be able to use and

9498
06:39:35,840 --> 06:39:40,957
these are reserved for google and so

9499
06:39:38,400 --> 06:39:44,478
every subnet has four reserved ip

9500
06:39:40,957 --> 06:39:47,359
addresses in its primary ip range and

9501
06:39:44,477 --> 06:39:50,399
just as a note there are no reserved ip

9502
06:39:47,360 --> 06:39:53,600
addresses in the secondary ip ranges and

9503
06:39:50,400 --> 06:39:55,920
these reserved ips can be looked at as

9504
06:39:53,599 --> 06:39:58,557
the first two and the last two ip

9505
06:39:55,919 --> 06:40:01,199
addresses in the cider range now the

9506
06:39:58,558 --> 06:40:03,600
first address in the primary ip range

9507
06:40:01,200 --> 06:40:05,840
for the subnet is reserved for the

9508
06:40:03,599 --> 06:40:08,557
network the second address in the

9509
06:40:05,840 --> 06:40:10,878
primary ip range for the subnet is

9510
06:40:08,558 --> 06:40:13,120
reserved for the default gateway and

9511
06:40:10,878 --> 06:40:16,000
allows you access to the internet the

9512
06:40:13,119 --> 06:40:18,399
second to last address in the primary ip

9513
06:40:16,000 --> 06:40:21,680
range for the subnet is reserved for

9514
06:40:18,400 --> 06:40:23,680
google cloud for potential future use

9515
06:40:21,680 --> 06:40:26,477
and the last address and the ip range

9516
06:40:23,680 --> 06:40:29,279
for the subnet is for broadcast

9517
06:40:26,477 --> 06:40:32,878
and so that about covers this short yet

9518
06:40:29,279 --> 06:40:35,039
important lesson on vpc network subnets

9519
06:40:32,878 --> 06:40:37,920
these features and functionalities of

9520
06:40:35,040 --> 06:40:40,000
subnets that have been presented to you

9521
06:40:37,919 --> 06:40:42,477
will help you make better design

9522
06:40:40,000 --> 06:40:45,040
decisions that will give you a bit more

9523
06:40:42,477 --> 06:40:48,558
knowledge and flexibility when it comes

9524
06:40:45,040 --> 06:40:50,798
to assigning ipspace within your vpc

9525
06:40:48,558 --> 06:40:52,878
networks and so that's all i have to

9526
06:40:50,797 --> 06:40:55,199
cover for this lesson so you can now

9527
06:40:52,878 --> 06:40:57,420
mark this lesson as complete and let's

9528
06:40:55,200 --> 06:41:01,360
move on to the next one

9529
06:40:57,419 --> 06:41:03,679
[Music]

9530
06:41:01,360 --> 06:41:05,440
welcome back and in this lesson i'm

9531
06:41:03,680 --> 06:41:08,400
going to be going through

9532
06:41:05,439 --> 06:41:10,399
routing and private google access

9533
06:41:08,400 --> 06:41:12,878
now although routing doesn't really show

9534
06:41:10,400 --> 06:41:16,000
up in the exam i wanted to give you an

9535
06:41:12,878 --> 06:41:18,080
inside look on how traffic is routed so

9536
06:41:16,000 --> 06:41:20,000
when you're building in google cloud

9537
06:41:18,080 --> 06:41:22,638
you'll know exactly what you will need

9538
06:41:20,000 --> 06:41:25,200
to do if you need to edit these routes

9539
06:41:22,637 --> 06:41:28,399
in any way or if you need to build new

9540
06:41:25,200 --> 06:41:30,958
ones to satisfy your particular need now

9541
06:41:28,400 --> 06:41:33,840
private google access does pop its head

9542
06:41:30,957 --> 06:41:36,239
in the exam but only at a high level but

9543
06:41:33,840 --> 06:41:38,957
i wanted to get just a bit deeper with

9544
06:41:36,240 --> 06:41:41,440
the service and get into the data flow

9545
06:41:38,957 --> 06:41:44,319
of when the service is enabled so with

9546
06:41:41,439 --> 06:41:47,039
that being said let's dive in now google

9547
06:41:44,319 --> 06:41:50,477
cloud routes define the paths that

9548
06:41:47,040 --> 06:41:53,520
network traffic takes from a vm instance

9549
06:41:50,477 --> 06:41:56,159
to other destinations these destinations

9550
06:41:53,520 --> 06:41:59,200
can be inside your google cloud vpc

9551
06:41:56,159 --> 06:42:01,919
network for example in another vm or

9552
06:41:59,200 --> 06:42:04,477
outside it in a vpc network a route

9553
06:42:01,919 --> 06:42:07,199
consists of a single destination

9554
06:42:04,477 --> 06:42:09,919
and a single next hop when an instance

9555
06:42:07,200 --> 06:42:12,637
in a vpc network sends a packet google

9556
06:42:09,919 --> 06:42:15,119
cloud delivers the packet to the route's

9557
06:42:12,637 --> 06:42:17,039
next hop if the packet's destination

9558
06:42:15,119 --> 06:42:18,557
address is within the route's

9559
06:42:17,040 --> 06:42:21,200
destination range

9560
06:42:18,558 --> 06:42:24,400
and so all these routes are stored in

9561
06:42:21,200 --> 06:42:26,400
the routing table for the vpc now for

9562
06:42:24,400 --> 06:42:28,958
those of you who are not familiar with a

9563
06:42:26,400 --> 06:42:31,920
routing table in computer networking a

9564
06:42:28,957 --> 06:42:34,717
routing table is a data table stored in

9565
06:42:31,919 --> 06:42:37,119
a router or a network host that lists

9566
06:42:34,718 --> 06:42:40,558
the routes to particular network

9567
06:42:37,119 --> 06:42:43,119
destinations and so in this case the vpc

9568
06:42:40,558 --> 06:42:46,400
is responsible for storing the routing

9569
06:42:43,119 --> 06:42:49,520
table as well each vm instance has a

9570
06:42:46,400 --> 06:42:51,120
controller that is kept informed of all

9571
06:42:49,520 --> 06:42:53,680
applicable routes

9572
06:42:51,119 --> 06:42:55,680
from the network's routing table each

9573
06:42:53,680 --> 06:42:58,319
packet leaving a vm

9574
06:42:55,680 --> 06:43:00,797
is delivered to the appropriate next hop

9575
06:42:58,319 --> 06:43:02,797
of an applicable route based on a

9576
06:43:00,797 --> 06:43:04,878
routing order now i wanted to take a

9577
06:43:02,797 --> 06:43:06,878
couple minutes to go through the

9578
06:43:04,878 --> 06:43:09,760
different routing types that are

9579
06:43:06,878 --> 06:43:12,080
available on google cloud now in google

9580
06:43:09,759 --> 06:43:14,477
cloud there are two types of routing

9581
06:43:12,080 --> 06:43:17,920
there is the system generated which

9582
06:43:14,477 --> 06:43:20,399
offers the default and subnet route and

9583
06:43:17,919 --> 06:43:23,759
then there are the custom routes which

9584
06:43:20,400 --> 06:43:26,400
support static routes and dynamic routes

9585
06:43:23,759 --> 06:43:28,557
and so i first wanted to cover system

9586
06:43:26,400 --> 06:43:31,040
generated routes in a little bit of

9587
06:43:28,558 --> 06:43:35,040
depth and so every new network whether

9588
06:43:31,040 --> 06:43:38,159
it be an automatic vpc or a custom vpc

9589
06:43:35,040 --> 06:43:40,240
has two types of system generated routes

9590
06:43:38,159 --> 06:43:42,957
a default route which you can remove or

9591
06:43:40,240 --> 06:43:45,760
replace and one subnet route for each of

9592
06:43:42,957 --> 06:43:48,717
its subnets now when you create a vpc

9593
06:43:45,759 --> 06:43:51,359
network google cloud creates a system

9594
06:43:48,718 --> 06:43:54,477
generated default route and this route

9595
06:43:51,360 --> 06:43:57,360
serves two purposes it defines the path

9596
06:43:54,477 --> 06:43:59,599
out of the vpc network including the

9597
06:43:57,360 --> 06:44:02,477
path to the internet in addition to

9598
06:43:59,599 --> 06:44:04,717
having this route instances must meet

9599
06:44:02,477 --> 06:44:07,759
additional requirements if they need

9600
06:44:04,718 --> 06:44:10,558
internet access the default route also

9601
06:44:07,759 --> 06:44:12,557
provides a standard path for private

9602
06:44:10,558 --> 06:44:14,958
google access and if you want to

9603
06:44:12,558 --> 06:44:17,040
completely isolate your network from the

9604
06:44:14,957 --> 06:44:19,279
internet or if you need to replace the

9605
06:44:17,040 --> 06:44:22,080
default route with the custom route you

9606
06:44:19,279 --> 06:44:23,919
can delete the default route now if you

9607
06:44:22,080 --> 06:44:27,200
remove the default route and do not

9608
06:44:23,919 --> 06:44:29,759
replace it packets destined to ip ranges

9609
06:44:27,200 --> 06:44:32,718
that are not covered by other routes are

9610
06:44:29,759 --> 06:44:36,319
dropped lastly the system generated

9611
06:44:32,718 --> 06:44:39,040
default route has a priority of 1000

9612
06:44:36,319 --> 06:44:42,239
because its destination is the broadest

9613
06:44:39,040 --> 06:44:44,558
possible which covers all ip addresses

9614
06:44:42,240 --> 06:44:44,558
in the

9615
06:44:45,240 --> 06:44:50,718
0.0.0.0.0 range google cloud only uses

9616
06:44:48,477 --> 06:44:53,759
it if a route with a more specific

9617
06:44:50,718 --> 06:44:56,159
destination does not apply to a packet

9618
06:44:53,759 --> 06:44:58,159
and i'll be getting into priorities in

9619
06:44:56,159 --> 06:45:00,319
just a little bit and so now that we've

9620
06:44:58,159 --> 06:45:02,797
covered the default route i wanted to

9621
06:45:00,319 --> 06:45:05,520
get into the subnet route now subnet

9622
06:45:02,797 --> 06:45:08,797
routes are system generated routes that

9623
06:45:05,520 --> 06:45:11,920
define paths to each subnet in the vpc

9624
06:45:08,797 --> 06:45:14,957
network each subnet has at least one

9625
06:45:11,919 --> 06:45:18,159
subnet route whose destination matches

9626
06:45:14,957 --> 06:45:20,797
the primary ip range of the subnet if

9627
06:45:18,159 --> 06:45:23,200
the subnet has secondary ip ranges

9628
06:45:20,797 --> 06:45:25,919
google cloud creates a subnet route with

9629
06:45:23,200 --> 06:45:28,798
a corresponding destination for each

9630
06:45:25,919 --> 06:45:30,877
secondary range no other route can have

9631
06:45:28,797 --> 06:45:33,840
a destination that matches

9632
06:45:30,878 --> 06:45:36,400
or is more specific than the destination

9633
06:45:33,840 --> 06:45:38,240
of a subnet route you can create a

9634
06:45:36,400 --> 06:45:40,638
custom route that has a broader

9635
06:45:38,240 --> 06:45:43,360
destination range that contains the

9636
06:45:40,637 --> 06:45:46,159
subnet route's destination range now

9637
06:45:43,360 --> 06:45:48,797
when a subnet is created a corresponding

9638
06:45:46,159 --> 06:45:52,240
subnet route for the subnet's primary

9639
06:45:48,797 --> 06:45:55,039
and secondary ip range is also created

9640
06:45:52,240 --> 06:45:58,400
auto mode vpc networks create a subnet

9641
06:45:55,040 --> 06:46:01,040
route for the primary ip ranges of each

9642
06:45:58,400 --> 06:46:03,520
of their automatically created subnets

9643
06:46:01,040 --> 06:46:06,319
you can delete these subnets but only if

9644
06:46:03,520 --> 06:46:08,957
you convert the auto mode vpc network to

9645
06:46:06,319 --> 06:46:12,000
custom mode and you cannot delete a

9646
06:46:08,957 --> 06:46:14,637
subnet route unless you modify or delete

9647
06:46:12,000 --> 06:46:17,119
the subnet so when you delete a subnet

9648
06:46:14,637 --> 06:46:19,360
all subnet routes for both primary and

9649
06:46:17,119 --> 06:46:21,439
secondary ranges are deleted

9650
06:46:19,360 --> 06:46:24,159
automatically you cannot delete the

9651
06:46:21,439 --> 06:46:26,957
subnet route for the subnet's primary

9652
06:46:24,159 --> 06:46:29,040
range in any other way and just as a

9653
06:46:26,957 --> 06:46:31,840
note when networks are connected by

9654
06:46:29,040 --> 06:46:34,400
using vpc network peering which i will

9655
06:46:31,840 --> 06:46:37,119
get into a little bit later some subnet

9656
06:46:34,400 --> 06:46:39,840
routes from one network are imported

9657
06:46:37,119 --> 06:46:42,239
into the other network and vice versa

9658
06:46:39,840 --> 06:46:44,718
and cannot be removed unless you break

9659
06:46:42,240 --> 06:46:46,958
the peering relationship and so when you

9660
06:46:44,718 --> 06:46:49,440
break the peering relationship all

9661
06:46:46,957 --> 06:46:52,239
imported subnet routes from the other

9662
06:46:49,439 --> 06:46:54,239
network are automatically removed so now

9663
06:46:52,240 --> 06:46:56,958
that we've covered the system generated

9664
06:46:54,240 --> 06:46:59,760
routes i wanted to get into custom

9665
06:46:56,957 --> 06:47:01,439
routes now custom routes are either

9666
06:46:59,759 --> 06:47:04,557
static routes that you can create

9667
06:47:01,439 --> 06:47:07,439
manually or dynamic routes maintained

9668
06:47:04,558 --> 06:47:10,477
automatically by one or more of your

9669
06:47:07,439 --> 06:47:12,717
cloud routers and these are created on

9670
06:47:10,477 --> 06:47:15,360
top of the already created system

9671
06:47:12,718 --> 06:47:18,958
generated routes destinations for custom

9672
06:47:15,360 --> 06:47:21,360
routes cannot match or be specific than

9673
06:47:18,957 --> 06:47:23,919
any subnet route in the network now

9674
06:47:21,360 --> 06:47:27,040
static routes can use any of the static

9675
06:47:23,919 --> 06:47:29,199
route next hops and these can be created

9676
06:47:27,040 --> 06:47:31,920
manually if you use the google cloud

9677
06:47:29,200 --> 06:47:34,637
console to create a cloud vpn tunnel

9678
06:47:31,919 --> 06:47:37,679
that uses policy-based routing or one

9679
06:47:34,637 --> 06:47:40,239
that is a route based vpn static routes

9680
06:47:37,680 --> 06:47:42,558
for the remote traffic selectors are

9681
06:47:40,240 --> 06:47:44,320
created for you and so just to give you

9682
06:47:42,558 --> 06:47:46,400
a little bit more clarity and a little

9683
06:47:44,319 --> 06:47:48,797
bit of context i've included a

9684
06:47:46,400 --> 06:47:51,360
screenshot here for all the different

9685
06:47:48,797 --> 06:47:54,239
routes that are available for the next

9686
06:47:51,360 --> 06:47:56,477
hop we have the default internet gateway

9687
06:47:54,240 --> 06:47:59,280
to define a path to external ip

9688
06:47:56,477 --> 06:48:01,279
addresses specify an instance and this

9689
06:47:59,279 --> 06:48:04,637
is where traffic is directed to the

9690
06:48:01,279 --> 06:48:07,119
primary internal ip address of the vm's

9691
06:48:04,637 --> 06:48:09,919
network interface in the vpc network

9692
06:48:07,119 --> 06:48:12,718
where you define the route specify ip

9693
06:48:09,919 --> 06:48:16,079
address is where you provide an internal

9694
06:48:12,718 --> 06:48:19,360
ip address assigned to a google cloud vm

9695
06:48:16,080 --> 06:48:22,240
as a next hop for cloud vpn tunnels that

9696
06:48:19,360 --> 06:48:25,840
use policy based routing and route-based

9697
06:48:22,240 --> 06:48:28,240
vpns you can direct traffic to the vpn

9698
06:48:25,840 --> 06:48:31,360
tunnel by creating routes whose next

9699
06:48:28,240 --> 06:48:34,159
hops refer to the tunnel by its name and

9700
06:48:31,360 --> 06:48:37,040
region and just as a note google cloud

9701
06:48:34,159 --> 06:48:40,878
ignores routes whose next hops are cloud

9702
06:48:37,040 --> 06:48:44,319
vpn tunnels that are down and lastly for

9703
06:48:40,878 --> 06:48:47,119
internal tcp and udp low balancing you

9704
06:48:44,319 --> 06:48:50,079
can use a load balancer's ip address as

9705
06:48:47,119 --> 06:48:52,797
a next hop that distributes traffic

9706
06:48:50,080 --> 06:48:55,200
among healthy back-end instances custom

9707
06:48:52,797 --> 06:48:58,557
static routes that use this next hop

9708
06:48:55,200 --> 06:49:01,360
cannot be scoped to specific instances

9709
06:48:58,558 --> 06:49:04,477
by network tags and so when creating

9710
06:49:01,360 --> 06:49:07,279
static routes you will always be asked

9711
06:49:04,477 --> 06:49:09,439
for different parameters that are needed

9712
06:49:07,279 --> 06:49:11,279
in order to create this route and so

9713
06:49:09,439 --> 06:49:14,239
here i've taken a screenshot from the

9714
06:49:11,279 --> 06:49:16,319
console to give you a bit more context

9715
06:49:14,240 --> 06:49:18,878
with regards to the information that's

9716
06:49:16,319 --> 06:49:20,079
needed so first up is the name and

9717
06:49:18,878 --> 06:49:22,797
description

9718
06:49:20,080 --> 06:49:25,360
so these fields identify the route a

9719
06:49:22,797 --> 06:49:28,159
name is required but a description is

9720
06:49:25,360 --> 06:49:31,040
optional and every route in your project

9721
06:49:28,159 --> 06:49:33,279
must have a unique name next up is the

9722
06:49:31,040 --> 06:49:36,718
network and each route must be

9723
06:49:33,279 --> 06:49:38,477
associated with exactly one vpc network

9724
06:49:36,718 --> 06:49:40,637
in this case it happens to be the

9725
06:49:38,477 --> 06:49:42,957
default network but if you have other

9726
06:49:40,637 --> 06:49:45,119
networks available you're able to click

9727
06:49:42,957 --> 06:49:47,599
on the drop down arrow and choose a

9728
06:49:45,119 --> 06:49:50,637
different network the destination range

9729
06:49:47,599 --> 06:49:53,680
is a single ipv4 cider block that

9730
06:49:50,637 --> 06:49:56,797
contains the ip addresses of systems

9731
06:49:53,680 --> 06:50:00,558
that receive incoming packets and the ip

9732
06:49:56,797 --> 06:50:02,878
range must be entered as a valid ipv4

9733
06:50:00,558 --> 06:50:05,520
cider block as shown in the example

9734
06:50:02,878 --> 06:50:09,119
below the field now if multiple routes

9735
06:50:05,520 --> 06:50:11,439
have identical destinations priority is

9736
06:50:09,119 --> 06:50:14,957
used to determine which route should be

9737
06:50:11,439 --> 06:50:17,680
used so a lower number would indicate a

9738
06:50:14,957 --> 06:50:21,199
higher priority for example a route with

9739
06:50:17,680 --> 06:50:23,920
a priority value of 100 has a higher

9740
06:50:21,200 --> 06:50:27,040
priority than one with a priority value

9741
06:50:23,919 --> 06:50:29,599
of 200 so the highest route priority

9742
06:50:27,040 --> 06:50:32,558
means the smallest possible non-negative

9743
06:50:29,599 --> 06:50:35,119
number as well another great example is

9744
06:50:32,558 --> 06:50:37,760
if you look back on your default routes

9745
06:50:35,119 --> 06:50:40,637
all your subnet routes are of a priority

9746
06:50:37,759 --> 06:50:44,000
of zero and the default internet gateway

9747
06:50:40,637 --> 06:50:46,477
is of a priority of 1000 and therefore

9748
06:50:44,000 --> 06:50:48,558
the subnet routes will take priority

9749
06:50:46,477 --> 06:50:50,797
over the default internet gateway and

9750
06:50:48,558 --> 06:50:53,360
this is due to the smaller number so

9751
06:50:50,797 --> 06:50:55,360
remember a good rule of thumb is that

9752
06:50:53,360 --> 06:50:58,080
the lower the number the higher the

9753
06:50:55,360 --> 06:51:00,240
priority the higher the number the lower

9754
06:50:58,080 --> 06:51:03,360
the priority now to get a little bit

9755
06:51:00,240 --> 06:51:05,840
more granular you can specify a list of

9756
06:51:03,360 --> 06:51:08,878
network tags so that the route only

9757
06:51:05,840 --> 06:51:11,520
applies to instances that have at least

9758
06:51:08,878 --> 06:51:14,319
one of the listed tags and if you don't

9759
06:51:11,520 --> 06:51:17,279
specify any tags then google cloud

9760
06:51:14,319 --> 06:51:20,319
applies the route to all instances in

9761
06:51:17,279 --> 06:51:22,637
the network and finally next hop which

9762
06:51:20,319 --> 06:51:25,520
was shown previously this is dedicated

9763
06:51:22,637 --> 06:51:28,079
to static routes that have next hops

9764
06:51:25,520 --> 06:51:30,000
that point to the options shown earlier

9765
06:51:28,080 --> 06:51:32,478
so now that i've covered static routes

9766
06:51:30,000 --> 06:51:35,200
in a bit of detail i want to get into

9767
06:51:32,477 --> 06:51:38,079
dynamic routes now dynamic routes are

9768
06:51:35,200 --> 06:51:40,558
managed by one or more cloud routers and

9769
06:51:38,080 --> 06:51:43,600
this allows you to dynamically exchange

9770
06:51:40,558 --> 06:51:46,718
routes between a vpc network and an

9771
06:51:43,599 --> 06:51:49,519
on-premises network with dynamic routes

9772
06:51:46,718 --> 06:51:52,558
their destinations always represent ip

9773
06:51:49,520 --> 06:51:56,159
ranges outside of your vpc network

9774
06:51:52,558 --> 06:51:59,040
and their next hops are always bgp peer

9775
06:51:56,159 --> 06:52:02,240
addresses a cloud router can manage

9776
06:51:59,040 --> 06:52:04,798
dynamic routes for cloud vpn tunnels

9777
06:52:02,240 --> 06:52:07,520
that use dynamic routing as well as

9778
06:52:04,797 --> 06:52:09,680
cloud interconnect and don't worry i'll

9779
06:52:07,520 --> 06:52:12,319
be getting into cloud routers in a bit

9780
06:52:09,680 --> 06:52:14,797
of detail in a later lesson now i wanted

9781
06:52:12,319 --> 06:52:17,360
to take a minute to go through routing

9782
06:52:14,797 --> 06:52:19,759
order and the routing order deals with

9783
06:52:17,360 --> 06:52:22,477
priorities that i touched on a little

9784
06:52:19,759 --> 06:52:24,877
bit earlier now subnet routes are always

9785
06:52:22,477 --> 06:52:27,759
considered first because google cloud

9786
06:52:24,878 --> 06:52:30,400
requires that subnet routes have the

9787
06:52:27,759 --> 06:52:32,957
most specific destinations matching the

9788
06:52:30,400 --> 06:52:36,000
ip address ranges of their respective

9789
06:52:32,957 --> 06:52:39,039
subnets if no applicable destination is

9790
06:52:36,000 --> 06:52:42,400
found google cloud drops the packet and

9791
06:52:39,040 --> 06:52:45,360
replies with a network unreachable error

9792
06:52:42,400 --> 06:52:48,240
system generated routes apply to all

9793
06:52:45,360 --> 06:52:50,240
instances in the vpc network the scope

9794
06:52:48,240 --> 06:52:53,520
of instances to which subnet routes

9795
06:52:50,240 --> 06:52:56,080
apply cannot be altered although you can

9796
06:52:53,520 --> 06:52:59,279
replace the default route and so just as

9797
06:52:56,080 --> 06:53:02,320
a note custom static routes apply to all

9798
06:52:59,279 --> 06:53:04,717
instances or specific instances so if

9799
06:53:02,319 --> 06:53:07,119
the route doesn't have a network tag the

9800
06:53:04,718 --> 06:53:10,159
route applies to all instances in the

9801
06:53:07,119 --> 06:53:12,159
network now vpc networks have special

9802
06:53:10,159 --> 06:53:14,400
routes that are used for certain

9803
06:53:12,159 --> 06:53:17,040
services and these are referred to as

9804
06:53:14,400 --> 06:53:19,520
special return paths in google cloud

9805
06:53:17,040 --> 06:53:22,240
these routes are defined outside of your

9806
06:53:19,520 --> 06:53:24,637
vpc network in google's production

9807
06:53:22,240 --> 06:53:26,638
network they don't appear in your vpc

9808
06:53:24,637 --> 06:53:29,279
network's routing table you cannot

9809
06:53:26,637 --> 06:53:31,360
remove them or override them or if you

9810
06:53:29,279 --> 06:53:33,919
delete or replace a default route in

9811
06:53:31,360 --> 06:53:36,240
your vpc network although you can

9812
06:53:33,919 --> 06:53:39,519
control traffic to and from these

9813
06:53:36,240 --> 06:53:41,520
services by using firewall rules and the

9814
06:53:39,520 --> 06:53:45,600
services that are covered are load

9815
06:53:41,520 --> 06:53:48,637
balancers internet aware proxy or iap as

9816
06:53:45,599 --> 06:53:51,279
well as cloud dns and so before i end

9817
06:53:48,637 --> 06:53:54,878
this lesson i wanted to touch on private

9818
06:53:51,279 --> 06:53:58,000
google access now vm instances that only

9819
06:53:54,878 --> 06:54:00,477
have internal ip addresses can use

9820
06:53:58,000 --> 06:54:03,840
private google access and this allows

9821
06:54:00,477 --> 06:54:07,040
them to reach the external ip addresses

9822
06:54:03,840 --> 06:54:09,439
of google's apis and services the source

9823
06:54:07,040 --> 06:54:12,319
ip address of the packet can be the

9824
06:54:09,439 --> 06:54:15,119
primary internal ip address of the

9825
06:54:12,319 --> 06:54:18,400
network interface or an address in an

9826
06:54:15,119 --> 06:54:20,957
alias ip range that is assigned to the

9827
06:54:18,400 --> 06:54:24,400
interface if you disable private google

9828
06:54:20,957 --> 06:54:27,439
access the vm instances can no longer

9829
06:54:24,400 --> 06:54:29,840
reach google apis and services and will

9830
06:54:27,439 --> 06:54:33,279
only be able to send traffic within the

9831
06:54:29,840 --> 06:54:36,319
vpc network private google access has no

9832
06:54:33,279 --> 06:54:39,039
effect on instances that have

9833
06:54:36,319 --> 06:54:41,599
external ip addresses and can still

9834
06:54:39,040 --> 06:54:44,477
access the internet they don't need any

9835
06:54:41,599 --> 06:54:47,680
special configuration to send requests

9836
06:54:44,477 --> 06:54:50,319
to the external ip addresses of google

9837
06:54:47,680 --> 06:54:52,797
apis and services you enable private

9838
06:54:50,319 --> 06:54:55,439
google access on a subnet by subnet

9839
06:54:52,797 --> 06:54:57,759
basis and it's a setting for subnets in

9840
06:54:55,439 --> 06:55:00,239
a vpc network and i will be showing you

9841
06:54:57,759 --> 06:55:03,119
this in an upcoming demo where we'll be

9842
06:55:00,240 --> 06:55:04,638
building our own custom vpc network now

9843
06:55:03,119 --> 06:55:07,200
even though the next hop for the

9844
06:55:04,637 --> 06:55:08,557
required routes is called the default

9845
06:55:07,200 --> 06:55:11,280
internet gateway

9846
06:55:08,558 --> 06:55:14,080
and the ip addresses for google apis and

9847
06:55:11,279 --> 06:55:17,680
services are external requests to google

9848
06:55:14,080 --> 06:55:20,958
apis and services from vms that only

9849
06:55:17,680 --> 06:55:23,279
hold internal ip addresses in subnet 1

9850
06:55:20,957 --> 06:55:25,439
where private google access is enabled

9851
06:55:23,279 --> 06:55:28,319
are not sent through the public internet

9852
06:55:25,439 --> 06:55:31,359
those requests stay within google's

9853
06:55:28,319 --> 06:55:34,319
network as well vms that only have

9854
06:55:31,360 --> 06:55:36,558
internal ip addresses do not meet the

9855
06:55:34,319 --> 06:55:39,200
internet access requirements

9856
06:55:36,558 --> 06:55:40,240
for access to other external ip

9857
06:55:39,200 --> 06:55:42,878
addresses

9858
06:55:40,240 --> 06:55:45,440
beyond those for google apis and

9859
06:55:42,878 --> 06:55:46,240
services now touching on this diagram

9860
06:55:45,439 --> 06:55:48,877
here

9861
06:55:46,240 --> 06:55:52,159
firewall rules in the vpc network have

9862
06:55:48,878 --> 06:55:56,000
been configured to allow internet access

9863
06:55:52,159 --> 06:55:58,240
vm1 can access google apis and services

9864
06:55:56,000 --> 06:56:01,520
including cloud storage because its

9865
06:55:58,240 --> 06:56:04,080
network interface is located in subnet 1

9866
06:56:01,520 --> 06:56:06,637
which has private google access enabled

9867
06:56:04,080 --> 06:56:08,478
and because this instance only has an

9868
06:56:06,637 --> 06:56:10,878
internal ip address

9869
06:56:08,477 --> 06:56:14,319
private google access applies to this

9870
06:56:10,878 --> 06:56:16,958
instance now with vm2 it can also access

9871
06:56:14,319 --> 06:56:19,840
google apis and services including cloud

9872
06:56:16,957 --> 06:56:22,557
storage because it has an external ip

9873
06:56:19,840 --> 06:56:25,279
address private google access has no

9874
06:56:22,558 --> 06:56:27,920
effect on this instance as it has an

9875
06:56:25,279 --> 06:56:30,319
external ip address and private google

9876
06:56:27,919 --> 06:56:32,239
access has not been enabled on that

9877
06:56:30,319 --> 06:56:34,319
subnet and because both of these

9878
06:56:32,240 --> 06:56:36,400
instances are in the same network they

9879
06:56:34,319 --> 06:56:39,040
are still able to communicate with each

9880
06:56:36,400 --> 06:56:41,440
other over an internal subnet route and

9881
06:56:39,040 --> 06:56:43,600
so this is just one way where private

9882
06:56:41,439 --> 06:56:46,000
google access can be applied there are

9883
06:56:43,599 --> 06:56:48,717
some other options for private access as

9884
06:56:46,000 --> 06:56:51,599
well you can use private google access

9885
06:56:48,718 --> 06:56:54,159
to connect to google apis and services

9886
06:56:51,599 --> 06:56:57,439
from your on-premises network through a

9887
06:56:54,159 --> 06:57:00,558
cloud vpn tunnel or cloud interconnect

9888
06:56:57,439 --> 06:57:02,797
without having any external ip addresses

9889
06:57:00,558 --> 06:57:05,680
you also have the option of using

9890
06:57:02,797 --> 06:57:07,680
private google access through a vpc

9891
06:57:05,680 --> 06:57:10,240
network peering connection which is

9892
06:57:07,680 --> 06:57:12,637
known as private services access and

9893
06:57:10,240 --> 06:57:14,798
finally the last option available for

9894
06:57:12,637 --> 06:57:17,919
private google access is connecting

9895
06:57:14,797 --> 06:57:20,717
directly from serverless google services

9896
06:57:17,919 --> 06:57:22,557
through an internal vpc connection now i

9897
06:57:20,718 --> 06:57:25,360
know this has been a lot of theory to

9898
06:57:22,558 --> 06:57:27,760
take in but i promise it'll become a lot

9899
06:57:25,360 --> 06:57:30,159
easier and concepts will become less

9900
06:57:27,759 --> 06:57:33,359
complicated when we start putting this

9901
06:57:30,159 --> 06:57:36,159
into practice coming up soon in the demo

9902
06:57:33,360 --> 06:57:38,240
of building our own custom vpc and so

9903
06:57:36,159 --> 06:57:40,558
that's pretty much all i wanted to cover

9904
06:57:38,240 --> 06:57:42,798
when it comes to routing and private

9905
06:57:40,558 --> 06:57:45,200
google access so you can now mark this

9906
06:57:42,797 --> 06:57:46,169
lesson as complete and let's move on to

9907
06:57:45,200 --> 06:57:50,080
the next one

9908
06:57:46,169 --> 06:57:52,477
[Music]

9909
06:57:50,080 --> 06:57:55,280
welcome back and in this lesson i'm

9910
06:57:52,477 --> 06:57:57,439
going to be discussing ip addressing now

9911
06:57:55,279 --> 06:58:00,637
in the network refresher lesson i went

9912
06:57:57,439 --> 06:58:02,477
into a bit of depth on how i p addresses

9913
06:58:00,637 --> 06:58:05,520
are broken down and used for

9914
06:58:02,477 --> 06:58:07,840
communication in computer networks in

9915
06:58:05,520 --> 06:58:10,718
this lesson i'll be getting into the

9916
06:58:07,840 --> 06:58:13,520
available types of ip addressing in

9917
06:58:10,718 --> 06:58:15,920
google cloud and how they are used in

9918
06:58:13,520 --> 06:58:18,718
each different scenario please note for

9919
06:58:15,919 --> 06:58:21,119
the exam a high level overview will be

9920
06:58:18,718 --> 06:58:23,520
needed to know when it comes to ip

9921
06:58:21,119 --> 06:58:25,840
addressing but the details behind it

9922
06:58:23,520 --> 06:58:28,878
will give you a better understanding on

9923
06:58:25,840 --> 06:58:31,840
when to use each type of ip address so

9924
06:58:28,878 --> 06:58:34,958
with that being said let's dive in

9925
06:58:31,840 --> 06:58:36,957
now ip addressing in google cloud holds

9926
06:58:34,957 --> 06:58:39,279
quite a few categories

9927
06:58:36,957 --> 06:58:41,119
and really start by determining whether

9928
06:58:39,279 --> 06:58:44,239
you are planning for communication

9929
06:58:41,119 --> 06:58:46,957
internally within your vpc or for

9930
06:58:44,240 --> 06:58:49,440
external use to communicate with the

9931
06:58:46,957 --> 06:58:52,399
outside world through the internet once

9932
06:58:49,439 --> 06:58:54,477
you determine the type of communication

9933
06:58:52,400 --> 06:58:57,200
that you're looking to apply between

9934
06:58:54,477 --> 06:58:59,919
resources some more decisions need to be

9935
06:58:57,200 --> 06:59:01,280
made with regards to the other options

9936
06:58:59,919 --> 06:59:03,599
and i will be going through these

9937
06:59:01,279 --> 06:59:05,360
options in just a sec now in order to

9938
06:59:03,599 --> 06:59:07,439
make these options a little bit more

9939
06:59:05,360 --> 06:59:10,159
digestible i wanted to start off with

9940
06:59:07,439 --> 06:59:11,759
the options available for internal ip

9941
06:59:10,159 --> 06:59:14,319
addresses

9942
06:59:11,759 --> 06:59:17,199
now internal ip addresses are not

9943
06:59:14,319 --> 06:59:20,400
publicly advertised they are used only

9944
06:59:17,200 --> 06:59:23,680
within a network now every vpc network

9945
06:59:20,400 --> 06:59:26,798
or on-premises network has at least one

9946
06:59:23,680 --> 06:59:29,840
internal ip address range resources with

9947
06:59:26,797 --> 06:59:32,557
internal ip addresses communicate with

9948
06:59:29,840 --> 06:59:35,200
other resources as if they're all on the

9949
06:59:32,558 --> 06:59:38,159
same private network now every vm

9950
06:59:35,200 --> 06:59:41,280
instance can have one primary internal

9951
06:59:38,159 --> 06:59:43,759
ip address that is unique to the vpc

9952
06:59:41,279 --> 06:59:47,039
network and you can assign a specific

9953
06:59:43,759 --> 06:59:50,000
internal ip address when you create a vm

9954
06:59:47,040 --> 06:59:53,280
instance or you can reserve a static

9955
06:59:50,000 --> 06:59:56,400
internal ip address for your project and

9956
06:59:53,279 --> 06:59:58,957
assign that address to your resources if

9957
06:59:56,400 --> 07:00:01,520
you don't specify an address one will be

9958
06:59:58,957 --> 07:00:04,159
automatically assigned to the vm in

9959
07:00:01,520 --> 07:00:06,797
either case the address must belong to

9960
07:00:04,159 --> 07:00:10,000
the ip range of the subnet and so if

9961
07:00:06,797 --> 07:00:12,399
your network is an auto mode vpc network

9962
07:00:10,000 --> 07:00:15,040
the address comes from the region subnet

9963
07:00:12,400 --> 07:00:17,600
if your network is a custom mode vpc

9964
07:00:15,040 --> 07:00:20,080
network you must specify which subnet

9965
07:00:17,599 --> 07:00:23,119
the ip address comes from now all

9966
07:00:20,080 --> 07:00:26,160
subnets have a primary sider range which

9967
07:00:23,119 --> 07:00:29,279
is the range of internal ip addresses

9968
07:00:26,159 --> 07:00:32,400
that define the subnet each vm instance

9969
07:00:29,279 --> 07:00:35,439
gets its primary internal ip address

9970
07:00:32,400 --> 07:00:39,040
from this range you can also allocate

9971
07:00:35,439 --> 07:00:41,919
alias ip ranges from that primary range

9972
07:00:39,040 --> 07:00:45,920
or you can add a secondary range to the

9973
07:00:41,919 --> 07:00:48,877
subnet and allocate alias ip ranges from

9974
07:00:45,919 --> 07:00:51,759
the secondary range use of alias ip

9975
07:00:48,878 --> 07:00:54,637
ranges does not require secondary subnet

9976
07:00:51,759 --> 07:00:57,439
ranges these secondary subnet ranges

9977
07:00:54,637 --> 07:01:00,319
merely provide an organizational tool

9978
07:00:57,439 --> 07:01:03,520
now when using ip aliasing you can

9979
07:01:00,319 --> 07:01:06,319
configure multiple internal ip addresses

9980
07:01:03,520 --> 07:01:09,520
representing containers or applications

9981
07:01:06,319 --> 07:01:11,759
hosted in a vm without having to define

9982
07:01:09,520 --> 07:01:14,797
a separate network interface and you can

9983
07:01:11,759 --> 07:01:17,840
assign vm alias ip ranges from either

9984
07:01:14,797 --> 07:01:20,477
the subnet's primary or secondary ranges

9985
07:01:17,840 --> 07:01:23,680
when alias ip ranges are configured

9986
07:01:20,477 --> 07:01:27,360
google cloud automatically installs vpc

9987
07:01:23,680 --> 07:01:30,080
network routes for primary and alias ip

9988
07:01:27,360 --> 07:01:32,159
ranges for the subnet of your primary

9989
07:01:30,080 --> 07:01:35,120
network interface your container

9990
07:01:32,159 --> 07:01:38,477
orchestrator or gke does not need to

9991
07:01:35,119 --> 07:01:41,200
specify vpc network connectivity for

9992
07:01:38,477 --> 07:01:44,000
these routes and this simplifies routing

9993
07:01:41,200 --> 07:01:47,040
traffic and managing your containers now

9994
07:01:44,000 --> 07:01:50,159
when choosing either an auto mode vpc or

9995
07:01:47,040 --> 07:01:53,280
a custom vpc you will have the option to

9996
07:01:50,159 --> 07:01:56,637
choose either an ephemeral ip or a

9997
07:01:53,279 --> 07:01:59,039
static ip now an ephemeral ip address is

9998
07:01:56,637 --> 07:02:01,119
an ip address that doesn't persist

9999
07:01:59,040 --> 07:02:03,440
beyond the life of the resource for

10000
07:02:01,119 --> 07:02:06,319
example when you create an instance or

10001
07:02:03,439 --> 07:02:08,797
forwarding rule without specifying an ip

10002
07:02:06,319 --> 07:02:11,599
address google cloud will automatically

10003
07:02:08,797 --> 07:02:14,957
assign the resource an ephemeral ip

10004
07:02:11,599 --> 07:02:17,599
address and this ephemeral ip address is

10005
07:02:14,957 --> 07:02:20,000
released when you delete the resource

10006
07:02:17,599 --> 07:02:22,000
when the ip address is released it is

10007
07:02:20,000 --> 07:02:24,558
free to eventually be assigned to

10008
07:02:22,000 --> 07:02:26,957
another resource so is never a great

10009
07:02:24,558 --> 07:02:29,520
option if you depend on this ip to

10010
07:02:26,957 --> 07:02:32,079
remain the same this ephemeral ip

10011
07:02:29,520 --> 07:02:34,558
address can be automatically assigned

10012
07:02:32,080 --> 07:02:37,200
and will be assigned from the selected

10013
07:02:34,558 --> 07:02:39,440
region subnet as well if you have

10014
07:02:37,200 --> 07:02:41,119
ephemeral ip addresses that are

10015
07:02:39,439 --> 07:02:43,520
currently in use

10016
07:02:41,119 --> 07:02:46,239
you can promote these addresses to

10017
07:02:43,520 --> 07:02:48,878
static internal ip addresses so that

10018
07:02:46,240 --> 07:02:51,520
they remain with your project until you

10019
07:02:48,878 --> 07:02:53,760
actively remove them and just as a note

10020
07:02:51,520 --> 07:02:56,240
before you reserve an existing ip

10021
07:02:53,759 --> 07:02:58,717
address you will need the value of the

10022
07:02:56,240 --> 07:03:01,280
ip address that you want to promote now

10023
07:02:58,718 --> 07:03:03,840
reserving a static ip address

10024
07:03:01,279 --> 07:03:06,477
assigns the address to your project

10025
07:03:03,840 --> 07:03:08,718
until you explicitly release it this is

10026
07:03:06,477 --> 07:03:11,599
useful if you are dependent on a

10027
07:03:08,718 --> 07:03:14,000
specific ip address for a specific

10028
07:03:11,599 --> 07:03:16,557
service and need to prevent another

10029
07:03:14,000 --> 07:03:19,919
resource from being able to use the same

10030
07:03:16,558 --> 07:03:22,477
address static addresses are also useful

10031
07:03:19,919 --> 07:03:25,519
if you need to move an ip address from

10032
07:03:22,477 --> 07:03:27,919
one google cloud resource to another and

10033
07:03:25,520 --> 07:03:30,637
you also have the same options when

10034
07:03:27,919 --> 07:03:33,439
creating an internal load balancer as

10035
07:03:30,637 --> 07:03:35,360
you do with vm instances and so now that

10036
07:03:33,439 --> 07:03:38,000
we've covered all the options for

10037
07:03:35,360 --> 07:03:40,240
internal ip addresses i would like to

10038
07:03:38,000 --> 07:03:43,599
move on to cover all the available

10039
07:03:40,240 --> 07:03:46,878
options for external ip addresses now

10040
07:03:43,599 --> 07:03:49,919
you can assign an external ip address to

10041
07:03:46,878 --> 07:03:51,760
an instance or a forwarding rule if you

10042
07:03:49,919 --> 07:03:54,159
need to communicate with the internet

10043
07:03:51,759 --> 07:03:56,637
with resources in another network or

10044
07:03:54,159 --> 07:03:59,599
need to communicate with a public google

10045
07:03:56,637 --> 07:04:02,399
cloud service sources from outside a

10046
07:03:59,599 --> 07:04:05,439
google cloud vpc network can address a

10047
07:04:02,400 --> 07:04:08,478
specific resource by the external ip

10048
07:04:05,439 --> 07:04:11,039
address as long as firewall rules enable

10049
07:04:08,477 --> 07:04:14,000
the connection and only resources with

10050
07:04:11,040 --> 07:04:16,878
an external ip address can send and

10051
07:04:14,000 --> 07:04:19,680
receive traffic directly to and from

10052
07:04:16,878 --> 07:04:22,797
outside the network and like internal ip

10053
07:04:19,680 --> 07:04:25,599
addresses external ip addresses have the

10054
07:04:22,797 --> 07:04:28,319
option of choosing from an ephemeral or

10055
07:04:25,599 --> 07:04:32,000
static ip address now an ephemeral

10056
07:04:28,319 --> 07:04:34,319
external ip address is an ip address

10057
07:04:32,000 --> 07:04:36,878
that doesn't persist beyond the life of

10058
07:04:34,319 --> 07:04:40,239
the resource and so follows the same

10059
07:04:36,878 --> 07:04:42,000
rules as ephemeral internal ip addresses

10060
07:04:40,240 --> 07:04:44,718
so when you create an instance or

10061
07:04:42,000 --> 07:04:47,200
forwarding rule without specifying an ip

10062
07:04:44,718 --> 07:04:49,920
address the resource is automatically

10063
07:04:47,200 --> 07:04:51,760
assigned an ephemeral external ip

10064
07:04:49,919 --> 07:04:54,477
address and this is something that you

10065
07:04:51,759 --> 07:04:56,877
will see quite often ephemeral external

10066
07:04:54,477 --> 07:04:59,599
ip addresses are released from a

10067
07:04:56,878 --> 07:05:03,040
resource if you delete the resource for

10068
07:04:59,599 --> 07:05:05,759
vm instances the ephemeral external ip

10069
07:05:03,040 --> 07:05:08,000
address is also released if you stop the

10070
07:05:05,759 --> 07:05:10,797
instance so after you restart the

10071
07:05:08,000 --> 07:05:13,520
instance it is assigned a new ephemeral

10072
07:05:10,797 --> 07:05:15,439
external ip address and if you have an

10073
07:05:13,520 --> 07:05:18,080
existing vm that doesn't have an

10074
07:05:15,439 --> 07:05:20,797
external ip address you can assign one

10075
07:05:18,080 --> 07:05:23,840
to it forwarding rules always have an ip

10076
07:05:20,797 --> 07:05:26,239
address whether external or internal so

10077
07:05:23,840 --> 07:05:29,279
you don't need to assign an ip address

10078
07:05:26,240 --> 07:05:31,360
to a forwarding rule after it is created

10079
07:05:29,279 --> 07:05:33,919
and if your instance has an ephemeral

10080
07:05:31,360 --> 07:05:36,080
external ip address and you want to

10081
07:05:33,919 --> 07:05:38,957
permanently assign the ip to your

10082
07:05:36,080 --> 07:05:41,440
project like ephemeral internal ip

10083
07:05:38,957 --> 07:05:44,717
addresses you have the option to promote

10084
07:05:41,439 --> 07:05:47,359
the ip address from ephemeral to static

10085
07:05:44,718 --> 07:05:50,718
and in this case promoting an ephemeral

10086
07:05:47,360 --> 07:05:53,600
external ip address to a static external

10087
07:05:50,718 --> 07:05:56,159
ip address now when assigning a static

10088
07:05:53,599 --> 07:05:58,557
ip address these are assigned to a

10089
07:05:56,159 --> 07:06:01,360
project long term until they are

10090
07:05:58,558 --> 07:06:04,240
explicitly released from that assignment

10091
07:06:01,360 --> 07:06:07,040
and remain attached to a resource until

10092
07:06:04,240 --> 07:06:10,320
they are explicitly detached for vm

10093
07:06:07,040 --> 07:06:13,120
instances static external ip addresses

10094
07:06:10,319 --> 07:06:15,119
remain attached to stopped instances

10095
07:06:13,119 --> 07:06:17,439
until they are removed and this is

10096
07:06:15,119 --> 07:06:20,477
useful if you are dependent on a

10097
07:06:17,439 --> 07:06:23,279
specific ip address for a specific

10098
07:06:20,477 --> 07:06:25,680
service like a web server or a global

10099
07:06:23,279 --> 07:06:28,797
load balancer that needs access to the

10100
07:06:25,680 --> 07:06:31,279
internet static external ip addresses

10101
07:06:28,797 --> 07:06:32,319
can be either a regional or global

10102
07:06:31,279 --> 07:06:35,279
resource

10103
07:06:32,319 --> 07:06:37,439
in a regional static ip address allows

10104
07:06:35,279 --> 07:06:40,319
resources of that region

10105
07:06:37,439 --> 07:06:43,599
or resources of zones within that region

10106
07:06:40,319 --> 07:06:46,079
to use the ip address and just as a note

10107
07:06:43,599 --> 07:06:49,359
you can use your own publicly routable

10108
07:06:46,080 --> 07:06:52,558
ip address prefixes as google cloud

10109
07:06:49,360 --> 07:06:55,119
external ip addresses and advertise them

10110
07:06:52,558 --> 07:06:58,798
on the internet the only caveat is that

10111
07:06:55,119 --> 07:07:01,279
you must own and bring at the minimum a

10112
07:06:58,797 --> 07:07:04,159
24 cider block and so now that we've

10113
07:07:01,279 --> 07:07:06,878
discussed internal and external ip

10114
07:07:04,159 --> 07:07:09,840
addressing options i wanted to move into

10115
07:07:06,878 --> 07:07:12,637
internal ip address reservations now

10116
07:07:09,840 --> 07:07:15,680
static internal ips provide the ability

10117
07:07:12,637 --> 07:07:18,079
to reserve internal ip addresses

10118
07:07:15,680 --> 07:07:20,558
from the ip range configured in the

10119
07:07:18,080 --> 07:07:23,120
subnet then assign those reserved

10120
07:07:20,558 --> 07:07:26,159
internal addresses to resources as

10121
07:07:23,119 --> 07:07:28,399
needed reserving an internal ip address

10122
07:07:26,159 --> 07:07:30,718
takes that address out of the dynamic

10123
07:07:28,400 --> 07:07:33,680
allocation pool and prevents it from

10124
07:07:30,718 --> 07:07:35,920
being used for automatic allocations

10125
07:07:33,680 --> 07:07:39,040
with the ability to reserve static

10126
07:07:35,919 --> 07:07:41,759
internal ip addresses you can always use

10127
07:07:39,040 --> 07:07:44,798
the same ip address for the same

10128
07:07:41,759 --> 07:07:47,359
resource even if you have to delete and

10129
07:07:44,797 --> 07:07:50,399
recreate the resource so when it comes

10130
07:07:47,360 --> 07:07:53,440
to internal ip address reservation you

10131
07:07:50,400 --> 07:07:55,920
can either reserve a static internal ip

10132
07:07:53,439 --> 07:07:58,717
address before creating the associated

10133
07:07:55,919 --> 07:08:01,679
resource or you can create the resource

10134
07:07:58,718 --> 07:08:04,080
with an ephemeral internal ip address

10135
07:08:01,680 --> 07:08:07,360
and then promote that ephemeral ip

10136
07:08:04,080 --> 07:08:09,040
address to a static internal ip address

10137
07:08:07,360 --> 07:08:11,920
and so just to give you a bit more

10138
07:08:09,040 --> 07:08:14,400
context i have a diagram here to run you

10139
07:08:11,919 --> 07:08:16,957
through it so in the first example you

10140
07:08:14,400 --> 07:08:18,958
would create a subnet from your vpc

10141
07:08:16,957 --> 07:08:22,079
network you would then reserve an

10142
07:08:18,957 --> 07:08:25,279
internal ip address from that subnet's

10143
07:08:22,080 --> 07:08:28,400
primary ip range and in this diagram is

10144
07:08:25,279 --> 07:08:31,279
marked as 10.12.4.3

10145
07:08:28,400 --> 07:08:33,600
and will be held as reserved for later

10146
07:08:31,279 --> 07:08:36,797
use with a resource and then when you

10147
07:08:33,599 --> 07:08:39,359
decide to create a vm instance or an

10148
07:08:36,797 --> 07:08:42,239
internal load balancer you can use the

10149
07:08:39,360 --> 07:08:45,279
reserved ip address that was created in

10150
07:08:42,240 --> 07:08:48,400
the previous step that i p address then

10151
07:08:45,279 --> 07:08:50,717
becomes marked as reserved and in use

10152
07:08:48,400 --> 07:08:52,798
now touching on the second example you

10153
07:08:50,718 --> 07:08:54,400
would first create a subnet from your

10154
07:08:52,797 --> 07:08:57,279
vpc network

10155
07:08:54,400 --> 07:09:00,080
you would then create a vm instance or

10156
07:08:57,279 --> 07:09:02,717
an internal load balancer with either an

10157
07:09:00,080 --> 07:09:05,920
automatically allocated ephemeral ip

10158
07:09:02,718 --> 07:09:08,477
address or a specific ip address that

10159
07:09:05,919 --> 07:09:10,877
you've chosen from within that specific

10160
07:09:08,477 --> 07:09:13,439
subnet and so once the ephemeral ip

10161
07:09:10,878 --> 07:09:16,637
address is in use you can then promote

10162
07:09:13,439 --> 07:09:18,957
the ephemeral ip address to a static

10163
07:09:16,637 --> 07:09:21,919
internal ip address and would then

10164
07:09:18,957 --> 07:09:24,000
become reserved and in use now when it

10165
07:09:21,919 --> 07:09:25,279
comes to the external ip address

10166
07:09:24,000 --> 07:09:28,080
reservation

10167
07:09:25,279 --> 07:09:30,637
you are able to obtain a static external

10168
07:09:28,080 --> 07:09:33,280
ip address by using one of the following

10169
07:09:30,637 --> 07:09:35,599
two options you can either reserve a new

10170
07:09:33,279 --> 07:09:38,477
static external ip address and then

10171
07:09:35,599 --> 07:09:41,039
assign the address to a new vm instance

10172
07:09:38,477 --> 07:09:44,159
or you can promote an existing ephemeral

10173
07:09:41,040 --> 07:09:46,798
external ip address to become a static

10174
07:09:44,159 --> 07:09:49,919
external ip address now in the case of

10175
07:09:46,797 --> 07:09:51,599
external ip addresses you can reserve

10176
07:09:49,919 --> 07:09:54,637
two different types

10177
07:09:51,599 --> 07:09:57,919
a regional ip address which can be used

10178
07:09:54,637 --> 07:10:01,200
by vm instances with one or more network

10179
07:09:57,919 --> 07:10:03,759
interfaces or by network load balancers

10180
07:10:01,200 --> 07:10:06,000
these ip addresses can be created either

10181
07:10:03,759 --> 07:10:08,319
in the console or through the command

10182
07:10:06,000 --> 07:10:11,840
line with the limitation that you will

10183
07:10:08,319 --> 07:10:15,040
only be allowed to create ipv4 ip

10184
07:10:11,840 --> 07:10:17,680
addresses the other type is a global ip

10185
07:10:15,040 --> 07:10:20,638
address which can be used for global

10186
07:10:17,680 --> 07:10:22,718
load balancers and can be created either

10187
07:10:20,637 --> 07:10:26,239
in the console or through the command

10188
07:10:22,718 --> 07:10:28,159
line as shown here the limitation here

10189
07:10:26,240 --> 07:10:30,638
is that you must choose the premium

10190
07:10:28,159 --> 07:10:32,477
network service tier in order to create

10191
07:10:30,637 --> 07:10:35,039
a global ip address

10192
07:10:32,477 --> 07:10:37,840
and after reserving the address you can

10193
07:10:35,040 --> 07:10:40,558
finally assign it to an instance during

10194
07:10:37,840 --> 07:10:43,200
instance creation or to an existing

10195
07:10:40,558 --> 07:10:45,440
instance and so as you can see there is

10196
07:10:43,200 --> 07:10:48,319
a lot to take in when it comes to

10197
07:10:45,439 --> 07:10:50,239
understanding ip addressing and i hope

10198
07:10:48,319 --> 07:10:52,957
this lesson has given you some better

10199
07:10:50,240 --> 07:10:55,840
insight as to which type of ips should

10200
07:10:52,957 --> 07:10:58,797
be used in a specific scenario now don't

10201
07:10:55,840 --> 07:11:00,957
worry the options may seem overwhelming

10202
07:10:58,797 --> 07:11:03,439
but once you start working with ip

10203
07:11:00,957 --> 07:11:06,717
addresses more often the options will

10204
07:11:03,439 --> 07:11:08,957
become so much clearer on what to use

10205
07:11:06,718 --> 07:11:11,280
and when and as i said in the beginning

10206
07:11:08,957 --> 07:11:13,520
only high level concepts are needed to

10207
07:11:11,279 --> 07:11:15,759
know for the exam but knowing the

10208
07:11:13,520 --> 07:11:16,878
options will allow you to make better

10209
07:11:15,759 --> 07:11:19,439
decisions

10210
07:11:16,878 --> 07:11:21,119
in your daily role as a cloud engineer

10211
07:11:19,439 --> 07:11:24,159
and so that's pretty much all i wanted

10212
07:11:21,119 --> 07:11:26,477
to cover when it comes to ip addressing

10213
07:11:24,159 --> 07:11:29,040
in google cloud and so now that we've

10214
07:11:26,477 --> 07:11:31,520
covered the theory behind ip addressing

10215
07:11:29,040 --> 07:11:33,840
in google cloud i wanted to bring this

10216
07:11:31,520 --> 07:11:36,080
into the console for a demo where we

10217
07:11:33,840 --> 07:11:39,119
will get hands-on with creating both

10218
07:11:36,080 --> 07:11:41,760
internal and external static ip

10219
07:11:39,119 --> 07:11:44,399
addresses so as i explained before there

10220
07:11:41,759 --> 07:11:46,877
was a lot to take in with this lesson so

10221
07:11:44,400 --> 07:11:49,680
now would be a perfect opportunity to

10222
07:11:46,878 --> 07:11:51,760
get up and have a stretch grab yourself

10223
07:11:49,680 --> 07:11:54,159
a tea or a coffee and whenever you're

10224
07:11:51,759 --> 07:11:56,399
ready join me back in the console so you

10225
07:11:54,159 --> 07:11:58,159
can now mark this lesson as complete and

10226
07:11:56,400 --> 07:12:02,159
i'll see you in the next

10227
07:11:58,159 --> 07:12:05,040
[Music]

10228
07:12:02,159 --> 07:12:07,599
welcome back in this demonstration i'm

10229
07:12:05,040 --> 07:12:11,520
going to be going over how to create and

10230
07:12:07,599 --> 07:12:14,159
apply both internal and external static

10231
07:12:11,520 --> 07:12:16,558
ip addresses i'm going to show how to

10232
07:12:14,159 --> 07:12:19,360
create them in both the console and the

10233
07:12:16,558 --> 07:12:22,798
command line as well as how to promote

10234
07:12:19,360 --> 07:12:25,600
ip addresses from ephemeral ips to

10235
07:12:22,797 --> 07:12:28,079
static ips and once we're done creating

10236
07:12:25,599 --> 07:12:30,877
all the ip addresses i'm going to show

10237
07:12:28,080 --> 07:12:33,120
you the steps on how to delete them now

10238
07:12:30,878 --> 07:12:35,680
there's a lot to get done here so let's

10239
07:12:33,119 --> 07:12:38,319
dive in now for this demonstration i'm

10240
07:12:35,680 --> 07:12:41,840
going to be using a project that has the

10241
07:12:38,319 --> 07:12:45,279
default vpc created and so in my case i

10242
07:12:41,840 --> 07:12:47,599
will be using project bowtieinc dev and

10243
07:12:45,279 --> 07:12:50,797
so before you start make sure that your

10244
07:12:47,599 --> 07:12:53,119
default vpc is created in the project

10245
07:12:50,797 --> 07:12:54,557
that you had selected so in order to do

10246
07:12:53,119 --> 07:12:57,119
that i'm going to head over to the

10247
07:12:54,558 --> 07:12:59,680
navigation menu i'm going to scroll down

10248
07:12:57,119 --> 07:13:02,477
to vpc network and we're going to see

10249
07:12:59,680 --> 07:13:05,119
here that the default vpc has been

10250
07:13:02,477 --> 07:13:07,200
created and so i can go ahead and start

10251
07:13:05,119 --> 07:13:10,159
the demonstration and so the first thing

10252
07:13:07,200 --> 07:13:13,280
i wanted to demonstrate is how to create

10253
07:13:10,159 --> 07:13:15,279
a static internal ip address and so in

10254
07:13:13,279 --> 07:13:17,919
order for me to demonstrate this i'm

10255
07:13:15,279 --> 07:13:19,439
going to be using a vm instance and so

10256
07:13:17,919 --> 07:13:21,759
i'm going to head over to the navigation

10257
07:13:19,439 --> 07:13:23,439
menu again and i'm going to scroll down

10258
07:13:21,759 --> 07:13:25,519
to compute engine

10259
07:13:23,439 --> 07:13:28,159
and so here i'm going to create my new

10260
07:13:25,520 --> 07:13:30,477
instance by simply clicking on create

10261
07:13:28,159 --> 07:13:33,279
instance and so under name i'm going to

10262
07:13:30,477 --> 07:13:36,159
keep it as instance 1. under region you

10263
07:13:33,279 --> 07:13:38,717
want to select us east one and i'm going

10264
07:13:36,159 --> 07:13:40,718
to keep the zone as the default selected

10265
07:13:38,718 --> 07:13:43,840
under machine type i'm going to select

10266
07:13:40,718 --> 07:13:45,520
the drop down and select e2 micro and

10267
07:13:43,840 --> 07:13:47,599
i'm going to leave everything else as

10268
07:13:45,520 --> 07:13:50,400
the default i'm going to scroll down

10269
07:13:47,599 --> 07:13:52,557
here to management security disks

10270
07:13:50,400 --> 07:13:54,798
networking and soul tenancy and i'm

10271
07:13:52,558 --> 07:13:55,680
going to select the networking tab from

10272
07:13:54,797 --> 07:13:57,840
there

10273
07:13:55,680 --> 07:14:00,477
and so under here i'm going to select

10274
07:13:57,840 --> 07:14:03,119
under network interfaces the default

10275
07:14:00,477 --> 07:14:06,558
network interface and here is where i

10276
07:14:03,119 --> 07:14:08,878
can create my static internal ip and so

10277
07:14:06,558 --> 07:14:11,680
clicking on the drop down under primary

10278
07:14:08,878 --> 07:14:14,797
internal ip you will see ephemeral

10279
07:14:11,680 --> 07:14:17,599
automatic ephemeral custom and reserve

10280
07:14:14,797 --> 07:14:19,919
static internal ip address and so you're

10281
07:14:17,599 --> 07:14:22,557
going to select reserve static internal

10282
07:14:19,919 --> 07:14:24,399
ip address and you'll get a pop-up

10283
07:14:22,558 --> 07:14:27,360
prompting you with some fields to fill

10284
07:14:24,400 --> 07:14:29,520
out to reserve a static internal ip

10285
07:14:27,360 --> 07:14:30,637
address and so under name i'm going to

10286
07:14:29,520 --> 07:14:33,360
call this

10287
07:14:30,637 --> 07:14:35,840
static dash internal and for the

10288
07:14:33,360 --> 07:14:38,637
purposes of this demo i'm going to leave

10289
07:14:35,840 --> 07:14:40,878
the subnet and the static ip address as

10290
07:14:38,637 --> 07:14:43,919
the currently selected if i wanted to

10291
07:14:40,878 --> 07:14:46,319
select a specific ip address i can click

10292
07:14:43,919 --> 07:14:48,877
on this drop down and select let me

10293
07:14:46,319 --> 07:14:52,159
choose and this will give me the option

10294
07:14:48,878 --> 07:14:54,958
to enter in a custom ip address with the

10295
07:14:52,159 --> 07:14:57,360
subnet range that is selected for this

10296
07:14:54,957 --> 07:14:59,759
specific sub network and so because i'm

10297
07:14:57,360 --> 07:15:02,159
not going to do that i'm going to select

10298
07:14:59,759 --> 07:15:04,399
assign automatically i'm going to leave

10299
07:15:02,159 --> 07:15:06,797
the purpose as non-shared and i'm going

10300
07:15:04,400 --> 07:15:09,200
to simply click on reserve and this is

10301
07:15:06,797 --> 07:15:11,919
going to reserve this specific ip

10302
07:15:09,200 --> 07:15:14,958
address and now as you can see here i

10303
07:15:11,919 --> 07:15:17,359
have the primary internal ip marked as

10304
07:15:14,957 --> 07:15:20,477
static internal and so this is going to

10305
07:15:17,360 --> 07:15:22,558
be my first static internal ip address

10306
07:15:20,477 --> 07:15:24,957
and so once you've done these steps you

10307
07:15:22,558 --> 07:15:27,040
can simply click on done and you can

10308
07:15:24,957 --> 07:15:30,000
head on down to the bottom and simply

10309
07:15:27,040 --> 07:15:32,240
click on create to create the instance

10310
07:15:30,000 --> 07:15:34,718
and when the instance finishes creating

10311
07:15:32,240 --> 07:15:37,360
you will see the internal static ip

10312
07:15:34,718 --> 07:15:40,000
address and as you can see here your

10313
07:15:37,360 --> 07:15:41,920
static internal ip address has been

10314
07:15:40,000 --> 07:15:45,200
assigned to the default network

10315
07:15:41,919 --> 07:15:47,919
interface on instance 1. and so in order

10316
07:15:45,200 --> 07:15:50,718
for me to view this static internal ip

10317
07:15:47,919 --> 07:15:54,079
address in the console i can view this

10318
07:15:50,718 --> 07:15:57,760
in vpc networks and drill down into the

10319
07:15:54,080 --> 07:16:00,558
specific vpc and find it under static

10320
07:15:57,759 --> 07:16:03,519
internal ip addresses but i wanted to

10321
07:16:00,558 --> 07:16:05,440
show you how to view it by querying it

10322
07:16:03,520 --> 07:16:07,119
through the command line and so in order

10323
07:16:05,439 --> 07:16:09,520
to do this i'm going to simply go up to

10324
07:16:07,119 --> 07:16:12,079
the menu bar on the right hand side and

10325
07:16:09,520 --> 07:16:14,718
open up cloud shell and once cloud shell

10326
07:16:12,080 --> 07:16:16,000
has come up you're going to simply paste

10327
07:16:14,718 --> 07:16:19,119
in the command

10328
07:16:16,000 --> 07:16:21,680
gcloud compute addresses list and this

10329
07:16:19,119 --> 07:16:24,159
will give me a list of the internal ip

10330
07:16:21,680 --> 07:16:26,477
addresses that are available and so now

10331
07:16:24,159 --> 07:16:29,360
i'm going to be prompted to authorize

10332
07:16:26,477 --> 07:16:31,439
this api call using my credentials and i

10333
07:16:29,360 --> 07:16:34,958
definitely do so i'm going to click on

10334
07:16:31,439 --> 07:16:37,279
authorize and as expected the static

10335
07:16:34,957 --> 07:16:39,840
internal ip address that we created

10336
07:16:37,279 --> 07:16:43,119
earlier has shown up it's marked as

10337
07:16:39,840 --> 07:16:45,759
internal in the region of us east one in

10338
07:16:43,119 --> 07:16:48,557
the default subnet and the status is in

10339
07:16:45,759 --> 07:16:52,477
use and so as we discussed in the last

10340
07:16:48,558 --> 07:16:55,120
lesson static ip addresses persist even

10341
07:16:52,477 --> 07:16:57,439
after the resource has been deleted and

10342
07:16:55,119 --> 07:16:59,439
so to demonstrate this i'm going to now

10343
07:16:57,439 --> 07:17:01,680
delete the instance i'm going to simply

10344
07:16:59,439 --> 07:17:04,000
check off the instance and go up to the

10345
07:17:01,680 --> 07:17:05,680
top and click on delete you're going to

10346
07:17:04,000 --> 07:17:07,919
be prompted to make sure if you want to

10347
07:17:05,680 --> 07:17:10,000
delete this yes i do so i'm going to

10348
07:17:07,919 --> 07:17:12,397
click on delete and so now that the

10349
07:17:10,000 --> 07:17:15,200
instance has been deleted i'm going to

10350
07:17:12,398 --> 07:17:17,680
query the ip addresses again by using

10351
07:17:15,200 --> 07:17:20,878
the same command gcloud compute

10352
07:17:17,680 --> 07:17:23,680
addresses list i'm going to hit enter

10353
07:17:20,878 --> 07:17:26,958
and as you can see here the ip address

10354
07:17:23,680 --> 07:17:29,760
static dash internal still persists but

10355
07:17:26,957 --> 07:17:31,919
the status is now marked as reserved and

10356
07:17:29,759 --> 07:17:34,397
so if i wanted to use this ip address

10357
07:17:31,919 --> 07:17:36,877
for another instance i can do so by

10358
07:17:34,398 --> 07:17:38,958
simply clicking on create instance up

10359
07:17:36,878 --> 07:17:42,080
here at the top menu and then i can

10360
07:17:38,957 --> 07:17:43,919
select static dash internal as my ip

10361
07:17:42,080 --> 07:17:45,280
address so i'm going to quickly close

10362
07:17:43,919 --> 07:17:46,797
down cloud shell

10363
07:17:45,279 --> 07:17:49,199
and i'm going to leave the name as

10364
07:17:46,797 --> 07:17:51,840
instance one the region

10365
07:17:49,200 --> 07:17:54,080
can select us east one and we're going

10366
07:17:51,840 --> 07:17:55,439
to keep the zone as the default selected

10367
07:17:54,080 --> 07:17:58,000
under machine type you're going to

10368
07:17:55,439 --> 07:18:00,319
select the e2 micro machine type going

10369
07:17:58,000 --> 07:18:03,200
to scroll down to management security

10370
07:18:00,319 --> 07:18:05,200
disks networking into soul tenancy and

10371
07:18:03,200 --> 07:18:06,798
i'm going to select the networking tab

10372
07:18:05,200 --> 07:18:09,040
from under here

10373
07:18:06,797 --> 07:18:11,520
and under network interfaces i'm going

10374
07:18:09,040 --> 07:18:14,398
to select the default network interface

10375
07:18:11,520 --> 07:18:16,718
and under primary internal ip

10376
07:18:14,398 --> 07:18:19,280
if i click on the drop down i have the

10377
07:18:16,718 --> 07:18:22,240
option of selecting the static dash

10378
07:18:19,279 --> 07:18:24,797
internal static ip address and so i

10379
07:18:22,240 --> 07:18:28,478
wanted to move on to demonstrate how to

10380
07:18:24,797 --> 07:18:31,520
promote an internal ephemeral ip address

10381
07:18:28,477 --> 07:18:33,680
to an internal static ip address and so

10382
07:18:31,520 --> 07:18:36,080
in order to do this i'm going to select

10383
07:18:33,680 --> 07:18:38,319
on ephemeral automatic and i'm going to

10384
07:18:36,080 --> 07:18:40,000
scroll down and click on done and i'm

10385
07:18:38,319 --> 07:18:42,477
going to go ahead and create the

10386
07:18:40,000 --> 07:18:44,558
instance and once the instance is ready

10387
07:18:42,477 --> 07:18:46,957
i'll be able to go in and edit the

10388
07:18:44,558 --> 07:18:49,040
network interface and so the instance is

10389
07:18:46,957 --> 07:18:50,957
up and ready and so i'm going to drill

10390
07:18:49,040 --> 07:18:52,319
down into the instance

10391
07:18:50,957 --> 07:18:54,319
and i'm going to go up to the top and

10392
07:18:52,319 --> 07:18:56,718
click on edit i'm going to scroll down

10393
07:18:54,319 --> 07:18:59,119
to network interfaces and i'm going to

10394
07:18:56,718 --> 07:19:00,240
edit the default network interface so

10395
07:18:59,119 --> 07:19:03,759
i'm going to scroll down a little bit

10396
07:19:00,240 --> 07:19:05,760
more and here under internal iptype i'm

10397
07:19:03,759 --> 07:19:08,079
going to click on the drop down and i'm

10398
07:19:05,759 --> 07:19:10,079
going to select static

10399
07:19:08,080 --> 07:19:14,558
and so here you are taking the current

10400
07:19:10,080 --> 07:19:17,120
ip address which is 10.142.0.4

10401
07:19:14,558 --> 07:19:18,718
and promoting it to a static internal ip

10402
07:19:17,119 --> 07:19:21,279
address and so you're going to be

10403
07:19:18,718 --> 07:19:24,477
prompted with a pop-up confirming the

10404
07:19:21,279 --> 07:19:26,797
reservation for that static internal ip

10405
07:19:24,477 --> 07:19:28,957
address and so notice that i don't have

10406
07:19:26,797 --> 07:19:31,520
any other options and so all i'm going

10407
07:19:28,957 --> 07:19:33,840
to do is type in a name and i'm going to

10408
07:19:31,520 --> 07:19:36,718
call this promoted

10409
07:19:33,840 --> 07:19:39,439
static and i'm going to click on reserve

10410
07:19:36,718 --> 07:19:42,558
and this will promote the internal ip

10411
07:19:39,439 --> 07:19:45,119
address from an ephemeral ip address to

10412
07:19:42,558 --> 07:19:47,040
a static ip address and so now i'm just

10413
07:19:45,119 --> 07:19:48,718
going to click on done

10414
07:19:47,040 --> 07:19:51,200
and i'm going to scroll down and click

10415
07:19:48,718 --> 07:19:53,840
on save and so now because i want to

10416
07:19:51,200 --> 07:19:56,878
verify the ip address i'm going to go

10417
07:19:53,840 --> 07:19:58,797
ahead and open up the cloud shell again

10418
07:19:56,878 --> 07:20:01,119
and i'm going to use the same command

10419
07:19:58,797 --> 07:20:03,360
that i used earlier which is gcloud

10420
07:20:01,119 --> 07:20:05,599
compute addresses list and i'm going to

10421
07:20:03,360 --> 07:20:08,398
hit enter

10422
07:20:05,599 --> 07:20:11,119
as expected the promoted static ip

10423
07:20:08,398 --> 07:20:14,638
address is showing as an internal ip

10424
07:20:11,119 --> 07:20:17,840
address in the region of us east 1 in

10425
07:20:14,637 --> 07:20:21,039
the default subnet and its status is in

10426
07:20:17,840 --> 07:20:24,080
use and so just as a recap we've created

10427
07:20:21,040 --> 07:20:26,240
a static internal ip address for the

10428
07:20:24,080 --> 07:20:28,798
first instance and for the second

10429
07:20:26,240 --> 07:20:31,840
instance we promoted an ephemeral

10430
07:20:28,797 --> 07:20:34,477
internal ip address into a static

10431
07:20:31,840 --> 07:20:37,279
internal ip address and we were able to

10432
07:20:34,477 --> 07:20:39,520
verify this through cloud shell using

10433
07:20:37,279 --> 07:20:42,079
the gcloud compute addresses list

10434
07:20:39,520 --> 07:20:44,319
command and so this is the end of part

10435
07:20:42,080 --> 07:20:46,878
one of this demo it was getting a bit

10436
07:20:44,319 --> 07:20:49,040
long so i decided to break it up and

10437
07:20:46,878 --> 07:20:51,119
this would be a great opportunity for

10438
07:20:49,040 --> 07:20:53,440
you to get up and have a stretch get

10439
07:20:51,119 --> 07:20:56,159
yourself a coffee or tea and whenever

10440
07:20:53,439 --> 07:20:58,557
you're ready join me in part two where

10441
07:20:56,159 --> 07:21:01,119
we will be starting immediately from the

10442
07:20:58,558 --> 07:21:03,120
end of part one so you can now mark this

10443
07:21:01,119 --> 07:21:03,759
as complete and i'll see you in the next

10444
07:21:03,119 --> 07:21:07,680
one

10445
07:21:03,759 --> 07:21:10,717
[Music]

10446
07:21:07,680 --> 07:21:13,520
welcome back this is part two of the

10447
07:21:10,718 --> 07:21:16,000
creating internal and external ip

10448
07:21:13,520 --> 07:21:19,119
addresses demo and we will be starting

10449
07:21:16,000 --> 07:21:21,840
immediately from the end of part one so

10450
07:21:19,119 --> 07:21:23,919
with that being said let's dive in and

10451
07:21:21,840 --> 07:21:27,040
so now that we've gone through how to

10452
07:21:23,919 --> 07:21:30,159
both create static ip addresses and

10453
07:21:27,040 --> 07:21:33,280
promote ephemeral ip addresses to static

10454
07:21:30,159 --> 07:21:35,119
ip addresses for internal ips

10455
07:21:33,279 --> 07:21:38,079
i want to go ahead and go through the

10456
07:21:35,119 --> 07:21:40,079
same with external ips and so i'm going

10457
07:21:38,080 --> 07:21:41,920
to first start off by deleting this

10458
07:21:40,080 --> 07:21:43,440
instance i'm going to go ahead and click

10459
07:21:41,919 --> 07:21:45,519
on delete

10460
07:21:43,439 --> 07:21:48,319
and so instead of doing it through the

10461
07:21:45,520 --> 07:21:51,360
compute engine interface i want to go

10462
07:21:48,319 --> 07:21:53,759
into the external ip address interface

10463
07:21:51,360 --> 07:21:54,637
which can be found in the vpc network

10464
07:21:53,759 --> 07:21:56,477
menu

10465
07:21:54,637 --> 07:21:59,039
so i'm going to go ahead up to the left

10466
07:21:56,477 --> 07:22:01,439
hand corner click on the navigation menu

10467
07:21:59,040 --> 07:22:02,638
and i'm going to scroll down to vpc

10468
07:22:01,439 --> 07:22:04,397
network

10469
07:22:02,637 --> 07:22:07,439
and from the menu here on the left hand

10470
07:22:04,398 --> 07:22:08,558
side you can simply click on external ip

10471
07:22:07,439 --> 07:22:10,637
addresses

10472
07:22:08,558 --> 07:22:13,200
and here you will see the console where

10473
07:22:10,637 --> 07:22:15,599
you can create a static external ip

10474
07:22:13,200 --> 07:22:17,600
address and so to start the process you

10475
07:22:15,599 --> 07:22:20,159
can simply click on reserve static

10476
07:22:17,599 --> 07:22:22,477
address and so here you'll be prompted

10477
07:22:20,159 --> 07:22:25,119
with a bunch of fields to fill out to

10478
07:22:22,477 --> 07:22:26,957
create this new external static ip

10479
07:22:25,119 --> 07:22:29,439
address and so for the name of this

10480
07:22:26,957 --> 07:22:32,877
static ip address you can simply call

10481
07:22:29,439 --> 07:22:35,279
this external dash static i'm going to

10482
07:22:32,878 --> 07:22:37,760
use the same in the description now here

10483
07:22:35,279 --> 07:22:40,239
under network service tier i can choose

10484
07:22:37,759 --> 07:22:42,717
from either the premium or the standard

10485
07:22:40,240 --> 07:22:45,200
and as you can see i'm currently using

10486
07:22:42,718 --> 07:22:47,520
the premium network service tier and if

10487
07:22:45,200 --> 07:22:49,760
i hover over the question mark over here

10488
07:22:47,520 --> 07:22:52,240
it tells me a little bit more about this

10489
07:22:49,759 --> 07:22:54,477
network service tier and as you can see

10490
07:22:52,240 --> 07:22:57,280
the premium tier allows me higher

10491
07:22:54,477 --> 07:22:59,840
performance as well as lower latency

10492
07:22:57,279 --> 07:23:01,039
routing but this premium routing comes

10493
07:22:59,840 --> 07:23:02,878
at a cost

10494
07:23:01,040 --> 07:23:06,240
whereas the standard network service

10495
07:23:02,878 --> 07:23:08,797
tier offers a lower performance compared

10496
07:23:06,240 --> 07:23:11,600
to the premium network service tier and

10497
07:23:08,797 --> 07:23:13,840
is a little bit more cost effective but

10498
07:23:11,599 --> 07:23:16,477
still delivering performance that's

10499
07:23:13,840 --> 07:23:18,000
comparable with other cloud providers

10500
07:23:16,477 --> 07:23:20,637
and so i'm just going to leave it as the

10501
07:23:18,000 --> 07:23:24,477
default selected and as we discussed in

10502
07:23:20,637 --> 07:23:28,000
the previous lesson ipv6 external static

10503
07:23:24,477 --> 07:23:30,397
ip addresses can only be used for global

10504
07:23:28,000 --> 07:23:34,000
load balancers and so since we're only

10505
07:23:30,398 --> 07:23:36,958
using it for an instance an ipv4 address

10506
07:23:34,000 --> 07:23:39,360
will suffice and so just as a note for

10507
07:23:36,957 --> 07:23:43,119
network service tier if i click on

10508
07:23:39,360 --> 07:23:45,920
standard ipv6 is grayed out as well as

10509
07:23:43,119 --> 07:23:48,557
the global selection and this is because

10510
07:23:45,919 --> 07:23:50,797
in order to use global load balancing

10511
07:23:48,558 --> 07:23:53,040
you need to be using the premium network

10512
07:23:50,797 --> 07:23:55,840
service tier so whenever you're creating

10513
07:23:53,040 --> 07:23:58,798
a global load balancer please keep this

10514
07:23:55,840 --> 07:24:00,718
in mind as your cost may increase so i'm

10515
07:23:58,797 --> 07:24:02,797
going to switch this back to premium and

10516
07:24:00,718 --> 07:24:04,958
so under type i'm going to keep it as

10517
07:24:02,797 --> 07:24:06,957
regional and under region i'm going to

10518
07:24:04,957 --> 07:24:10,000
select the same region that my instance

10519
07:24:06,957 --> 07:24:12,079
is going to be in which is us east 1 and

10520
07:24:10,000 --> 07:24:14,477
because i haven't created the instance

10521
07:24:12,080 --> 07:24:16,320
yet there is nothing to attach it to and

10522
07:24:14,477 --> 07:24:18,718
so i'm going to click on the drop down

10523
07:24:16,319 --> 07:24:21,279
and click on none and so just as another

10524
07:24:18,718 --> 07:24:23,840
note i wanted to quickly highlight this

10525
07:24:21,279 --> 07:24:24,878
caution point that the static ip

10526
07:24:23,840 --> 07:24:27,439
addresses

10527
07:24:24,878 --> 07:24:30,558
not attached to an instance or low

10528
07:24:27,439 --> 07:24:33,599
balancer are still billed at an hourly

10529
07:24:30,558 --> 07:24:35,120
rate so if you're not using any static

10530
07:24:33,599 --> 07:24:37,759
ip addresses

10531
07:24:35,119 --> 07:24:40,079
please remember to delete them otherwise

10532
07:24:37,759 --> 07:24:42,397
you will be charged and so everything

10533
07:24:40,080 --> 07:24:45,040
looks good here to create my external

10534
07:24:42,398 --> 07:24:46,398
static ip address so i'm going to simply

10535
07:24:45,040 --> 07:24:49,120
click on reserve

10536
07:24:46,398 --> 07:24:50,478
and this will create my external static

10537
07:24:49,119 --> 07:24:53,119
ip address

10538
07:24:50,477 --> 07:24:55,759
and put the status of it as reserved so

10539
07:24:53,119 --> 07:24:58,878
as you can see here the external static

10540
07:24:55,759 --> 07:25:01,759
ip address has been created and you will

10541
07:24:58,878 --> 07:25:04,159
find all of your external static ip

10542
07:25:01,759 --> 07:25:06,319
addresses that you create in future

10543
07:25:04,159 --> 07:25:08,797
right here in this menu and you will

10544
07:25:06,319 --> 07:25:11,360
still be able to query all these

10545
07:25:08,797 --> 07:25:14,319
external ip addresses from the command

10546
07:25:11,360 --> 07:25:17,360
line and so now in order to assign this

10547
07:25:14,319 --> 07:25:19,360
ip address to a network interface i'm

10548
07:25:17,360 --> 07:25:22,398
going to go back over to the navigation

10549
07:25:19,360 --> 07:25:24,558
menu and scroll down to compute engine

10550
07:25:22,398 --> 07:25:26,638
and create a new instance so you can go

10551
07:25:24,558 --> 07:25:28,240
ahead and click on create instance i'm

10552
07:25:26,637 --> 07:25:30,878
going to go ahead and keep the name of

10553
07:25:28,240 --> 07:25:33,920
this instance as instance one and in the

10554
07:25:30,878 --> 07:25:35,279
region i'm going to select us east one

10555
07:25:33,919 --> 07:25:37,839
i'm going to keep the zone as the

10556
07:25:35,279 --> 07:25:40,477
selected default and under machine type

10557
07:25:37,840 --> 07:25:42,319
i'm going to select the e2 micro machine

10558
07:25:40,477 --> 07:25:44,718
type i'm going to scroll down to

10559
07:25:42,319 --> 07:25:47,040
management security disks networking and

10560
07:25:44,718 --> 07:25:49,520
soul tenancy and i'm going to select the

10561
07:25:47,040 --> 07:25:51,280
networking tab and here under network

10562
07:25:49,520 --> 07:25:53,600
interfaces i'm going to select the

10563
07:25:51,279 --> 07:25:55,680
default network interface i'm going to

10564
07:25:53,599 --> 07:25:57,199
scroll down a little bit here and under

10565
07:25:55,680 --> 07:25:59,599
external ip

10566
07:25:57,200 --> 07:26:01,760
ephemeral has been selected but if i

10567
07:25:59,599 --> 07:26:04,877
click on the drop down i will have the

10568
07:26:01,759 --> 07:26:07,840
option to select the ip that we had just

10569
07:26:04,878 --> 07:26:10,159
created which is the external dash

10570
07:26:07,840 --> 07:26:12,240
static ip and so i'm going to select

10571
07:26:10,159 --> 07:26:14,637
that i'm going to click on done and you

10572
07:26:12,240 --> 07:26:17,360
can go down and click on create and so

10573
07:26:14,637 --> 07:26:19,919
now when the instance is created i will

10574
07:26:17,360 --> 07:26:23,119
see the external ip address

10575
07:26:19,919 --> 07:26:26,877
of external static as the assigned

10576
07:26:23,119 --> 07:26:28,797
external ip and as expected here it is

10577
07:26:26,878 --> 07:26:31,119
and because i always like to verify my

10578
07:26:28,797 --> 07:26:33,360
work i'm going to go ahead and open up

10579
07:26:31,119 --> 07:26:34,797
the cloud shell and verify it through

10580
07:26:33,360 --> 07:26:36,718
the command line

10581
07:26:34,797 --> 07:26:39,599
and so now i'm going to query all my

10582
07:26:36,718 --> 07:26:42,798
available static ip addresses using the

10583
07:26:39,599 --> 07:26:44,957
command gcloud compute addresses list

10584
07:26:42,797 --> 07:26:47,520
i'm going to hit enter

10585
07:26:44,957 --> 07:26:52,359
and as you can see here the external

10586
07:26:47,520 --> 07:26:52,360
static ip address of 34.75.76

10587
07:26:53,520 --> 07:26:58,957
in the us east one region is now in use

10588
07:26:56,878 --> 07:27:01,760
and this is because it is assigned to

10589
07:26:58,957 --> 07:27:03,759
the network interface on instance one

10590
07:27:01,759 --> 07:27:06,239
and so before we go ahead and complete

10591
07:27:03,759 --> 07:27:08,239
this demo there's one more step that i

10592
07:27:06,240 --> 07:27:11,680
wanted to go through and this is to

10593
07:27:08,240 --> 07:27:14,718
promote an ephemeral external ip address

10594
07:27:11,680 --> 07:27:16,718
to a static external ip address and so

10595
07:27:14,718 --> 07:27:18,798
i'm going to go up here to the top menu

10596
07:27:16,718 --> 07:27:20,878
and create a new instance i'm going to

10597
07:27:18,797 --> 07:27:23,199
leave the name here as instance two

10598
07:27:20,878 --> 07:27:25,119
under the region i'm going to select us

10599
07:27:23,200 --> 07:27:27,680
east one i'm going to keep the zone as

10600
07:27:25,119 --> 07:27:30,000
the selected default under machine type

10601
07:27:27,680 --> 07:27:31,840
i'm going to select the e2 micro machine

10602
07:27:30,000 --> 07:27:33,919
type i'm going to leave everything else

10603
07:27:31,840 --> 07:27:36,080
as the default and i'm going to scroll

10604
07:27:33,919 --> 07:27:38,397
down to management security disks

10605
07:27:36,080 --> 07:27:40,320
networking and soul tenancy and select

10606
07:27:38,398 --> 07:27:42,478
the networking tab and i'm going to

10607
07:27:40,319 --> 07:27:45,439
verify that i'm going to be using an

10608
07:27:42,477 --> 07:27:48,079
ephemeral external ip upon the creation

10609
07:27:45,439 --> 07:27:50,239
of this instance if i scroll down here a

10610
07:27:48,080 --> 07:27:53,120
little bit i can see that an external

10611
07:27:50,240 --> 07:27:56,080
ephemeral ip address will be used upon

10612
07:27:53,119 --> 07:27:58,878
creation and this will be the ip address

10613
07:27:56,080 --> 07:28:00,558
that i will be promoting to a static ip

10614
07:27:58,878 --> 07:28:03,200
through the command line so i'm going to

10615
07:28:00,558 --> 07:28:04,558
go ahead and scroll down click on done

10616
07:28:03,200 --> 07:28:06,718
and then i'm going to scroll down and

10617
07:28:04,558 --> 07:28:09,040
click on create and once this instance

10618
07:28:06,718 --> 07:28:11,760
is created then i can go ahead and

10619
07:28:09,040 --> 07:28:13,920
promote the ephemeral external ip

10620
07:28:11,759 --> 07:28:16,397
address okay and the instance has been

10621
07:28:13,919 --> 07:28:19,599
created along with its external

10622
07:28:16,398 --> 07:28:21,920
ephemeral ip address and so now i can go

10623
07:28:19,599 --> 07:28:24,239
ahead and promote this ephemeral ip

10624
07:28:21,919 --> 07:28:26,637
address so in order for me to do this

10625
07:28:24,240 --> 07:28:28,718
i'm going to move back to my cloud shell

10626
07:28:26,637 --> 07:28:31,360
and i'm going to quickly clear my screen

10627
07:28:28,718 --> 07:28:33,760
and i'm going to use the command gcloud

10628
07:28:31,360 --> 07:28:36,000
compute addresses create and then the

10629
07:28:33,759 --> 07:28:38,717
name that we want to use for this static

10630
07:28:36,000 --> 07:28:41,599
external ip address so i'm going to call

10631
07:28:38,718 --> 07:28:44,958
this promoted external i'm going to use

10632
07:28:41,599 --> 07:28:48,000
the flag dash dash addresses and so here

10633
07:28:44,957 --> 07:28:49,359
i will need the external ip address that

10634
07:28:48,000 --> 07:28:53,718
i am promoting

10635
07:28:49,360 --> 07:28:53,718
which is going to be 104.196.219.42

10636
07:28:55,840 --> 07:28:59,599
and so i'm going to copy this to my

10637
07:28:57,360 --> 07:29:01,600
clipboard and i'm going to paste it here

10638
07:28:59,599 --> 07:29:03,439
in the command line and now i'm going to

10639
07:29:01,599 --> 07:29:06,239
add the region flag

10640
07:29:03,439 --> 07:29:08,717
along with the region of us east one and

10641
07:29:06,240 --> 07:29:12,159
i'm going to go ahead and hit enter

10642
07:29:08,718 --> 07:29:14,958
and success my ephemeral external ip

10643
07:29:12,159 --> 07:29:17,840
address has been promoted to a static

10644
07:29:14,957 --> 07:29:20,319
external ip address and of course to

10645
07:29:17,840 --> 07:29:22,797
verify it i'm going to simply type in

10646
07:29:20,319 --> 07:29:25,599
the gcloud compute addresses list

10647
07:29:22,797 --> 07:29:28,239
command i'm going to hit enter and as

10648
07:29:25,599 --> 07:29:32,919
expected here it is the promoted

10649
07:29:28,240 --> 07:29:32,920
external ip of 104.196.219.42

10650
07:29:34,957 --> 07:29:40,637
marked as external in the u.s east one

10651
07:29:37,840 --> 07:29:43,360
region and the status is marked as in

10652
07:29:40,637 --> 07:29:45,680
use and so i wanted to take a moment to

10653
07:29:43,360 --> 07:29:48,878
congratulate you on making it through

10654
07:29:45,680 --> 07:29:52,000
this demonstration of creating internal

10655
07:29:48,878 --> 07:29:54,878
and external ip addresses as well as

10656
07:29:52,000 --> 07:29:58,319
promoting them so just as a recap you've

10657
07:29:54,878 --> 07:30:01,200
created a static internal ip address in

10658
07:29:58,319 --> 07:30:03,360
conjunction with creating a new instance

10659
07:30:01,200 --> 07:30:06,159
and assigning it to that instance you

10660
07:30:03,360 --> 07:30:09,520
then created another instance and used

10661
07:30:06,159 --> 07:30:12,079
an ephemeral ip and then promoted it to

10662
07:30:09,520 --> 07:30:14,558
a static internal ip address

10663
07:30:12,080 --> 07:30:17,520
you then created an external static ip

10664
07:30:14,558 --> 07:30:20,080
address using the console and assigned

10665
07:30:17,520 --> 07:30:22,558
it to a brand new instance you then

10666
07:30:20,080 --> 07:30:25,520
created another instance using an

10667
07:30:22,558 --> 07:30:28,398
external ephemeral ip address and

10668
07:30:25,520 --> 07:30:31,119
promoted it to a static external ip

10669
07:30:28,398 --> 07:30:33,760
address and you did this all using both

10670
07:30:31,119 --> 07:30:36,239
the console and the command line so i

10671
07:30:33,759 --> 07:30:39,279
wanted to congratulate you on a great

10672
07:30:36,240 --> 07:30:41,280
job now before we end this demonstration

10673
07:30:39,279 --> 07:30:44,239
i wanted to go through the steps of

10674
07:30:41,279 --> 07:30:46,239
cleaning up any leftover resources so

10675
07:30:44,240 --> 07:30:48,398
the first thing you want to do is delete

10676
07:30:46,240 --> 07:30:50,320
these instances so you can select them

10677
07:30:48,398 --> 07:30:52,000
all and go up to the top and click on

10678
07:30:50,319 --> 07:30:54,558
delete it's going to ask you if you want

10679
07:30:52,000 --> 07:30:56,718
to delete the two instances yes we do

10680
07:30:54,558 --> 07:30:59,360
click on delete and this will delete

10681
07:30:56,718 --> 07:31:01,920
your instances and free up the external

10682
07:30:59,360 --> 07:31:03,680
ip addresses so that you're able to

10683
07:31:01,919 --> 07:31:05,759
delete them and so now that the

10684
07:31:03,680 --> 07:31:09,040
instances have been deleted i'm going to

10685
07:31:05,759 --> 07:31:12,000
go over to the vpc network menu and i'm

10686
07:31:09,040 --> 07:31:13,520
going to head on over to the external ip

10687
07:31:12,000 --> 07:31:16,637
address console

10688
07:31:13,520 --> 07:31:18,878
and here i'm able to delete the external

10689
07:31:16,637 --> 07:31:20,477
ip addresses and so i'm going to select

10690
07:31:18,878 --> 07:31:23,279
all of them and i'm going to go up to

10691
07:31:20,477 --> 07:31:25,119
the top menu and click on release static

10692
07:31:23,279 --> 07:31:26,637
address and you should get a prompt

10693
07:31:25,119 --> 07:31:29,119
asking you if you want to delete both

10694
07:31:26,637 --> 07:31:31,919
these addresses the answer is yes click

10695
07:31:29,119 --> 07:31:34,797
on delete and within a few seconds these

10696
07:31:31,919 --> 07:31:37,199
external ip addresses should be deleted

10697
07:31:34,797 --> 07:31:40,397
and so now all that's left to delete are

10698
07:31:37,200 --> 07:31:42,798
the two static internal ip addresses

10699
07:31:40,398 --> 07:31:45,680
and as i said before because there is no

10700
07:31:42,797 --> 07:31:48,797
console to be able to view any of these

10701
07:31:45,680 --> 07:31:50,477
static internal ip addresses i have to

10702
07:31:48,797 --> 07:31:52,239
do it through the command line so i'm

10703
07:31:50,477 --> 07:31:54,159
going to go back to my cloud shell i'm

10704
07:31:52,240 --> 07:31:56,798
going to clear the screen and i'm going

10705
07:31:54,159 --> 07:31:59,520
to list the ip addresses currently in my

10706
07:31:56,797 --> 07:32:02,477
network and so here they are promoted

10707
07:31:59,520 --> 07:32:04,797
static and static internal and so the

10708
07:32:02,477 --> 07:32:07,919
command to delete any static ip

10709
07:32:04,797 --> 07:32:10,159
addresses is as follows gcloud compute

10710
07:32:07,919 --> 07:32:12,159
addresses delete the name of the ip

10711
07:32:10,159 --> 07:32:14,558
address that i want to delete which is

10712
07:32:12,159 --> 07:32:17,200
promoted static and then i will need the

10713
07:32:14,558 --> 07:32:19,520
region flag and it'll be the region of

10714
07:32:17,200 --> 07:32:21,440
us east one and i'm going to go ahead

10715
07:32:19,520 --> 07:32:22,957
and hit enter it's going to prompt me if

10716
07:32:21,439 --> 07:32:26,877
i want to continue with this and i'm

10717
07:32:22,957 --> 07:32:29,359
going to type y for yes hit enter

10718
07:32:26,878 --> 07:32:30,797
and success it has been deleted and so

10719
07:32:29,360 --> 07:32:32,558
just a double check i'm going to do a

10720
07:32:30,797 --> 07:32:34,797
quick verification

10721
07:32:32,558 --> 07:32:37,440
and yes it has been deleted and so all

10722
07:32:34,797 --> 07:32:39,840
that's left to delete is the static

10723
07:32:37,439 --> 07:32:41,359
internal ip address and so i'm going to

10724
07:32:39,840 --> 07:32:44,319
paste in the command

10725
07:32:41,360 --> 07:32:46,080
gcloud compute addresses delete the name

10726
07:32:44,319 --> 07:32:48,558
of the ip address that i want to delete

10727
07:32:46,080 --> 07:32:51,520
which is static dash internal along with

10728
07:32:48,558 --> 07:32:53,280
the region flag of us east one i'm going

10729
07:32:51,520 --> 07:32:56,159
to go ahead and hit enter

10730
07:32:53,279 --> 07:32:59,119
y for yes to continue

10731
07:32:56,159 --> 07:33:01,040
and success and one last verification to

10732
07:32:59,119 --> 07:33:03,840
make sure that it's all cleared up and

10733
07:33:01,040 --> 07:33:06,080
as you can see i have no more static i p

10734
07:33:03,840 --> 07:33:09,680
addresses and so this concludes this

10735
07:33:06,080 --> 07:33:13,440
demonstration on creating assigning and

10736
07:33:09,680 --> 07:33:16,637
deleting both static internal and static

10737
07:33:13,439 --> 07:33:18,957
external ip addresses and so again i

10738
07:33:16,637 --> 07:33:20,797
wanted to congratulate you on a great

10739
07:33:18,957 --> 07:33:22,079
job and so that's pretty much all i

10740
07:33:20,797 --> 07:33:25,279
wanted to cover

10741
07:33:22,080 --> 07:33:28,080
in this demo on creating internal and

10742
07:33:25,279 --> 07:33:30,477
external static ip addresses so you can

10743
07:33:28,080 --> 07:33:31,750
now mark this as complete and i'll see

10744
07:33:30,477 --> 07:33:35,680
you in the next one

10745
07:33:31,750 --> 07:33:37,040
[Music]

10746
07:33:35,680 --> 07:33:39,439
welcome back

10747
07:33:37,040 --> 07:33:43,200
in this lesson i will be diving into

10748
07:33:39,439 --> 07:33:46,557
some network security by introducing vpc

10749
07:33:43,200 --> 07:33:49,600
firewall rules a service used to filter

10750
07:33:46,558 --> 07:33:52,477
incoming and outgoing network traffic

10751
07:33:49,599 --> 07:33:54,557
based on a set of user-defined rules

10752
07:33:52,477 --> 07:33:57,279
a concept that you should be fairly

10753
07:33:54,558 --> 07:34:00,159
familiar with for the exam

10754
07:33:57,279 --> 07:34:03,039
and comes up extremely often when

10755
07:34:00,159 --> 07:34:05,840
working as an engineer in google cloud

10756
07:34:03,040 --> 07:34:09,120
it is definitely an essential security

10757
07:34:05,840 --> 07:34:11,599
layer that prevents unwanted access to

10758
07:34:09,119 --> 07:34:15,360
your cloud infrastructure

10759
07:34:11,599 --> 07:34:17,519
now vpc firewall rules apply to a given

10760
07:34:15,360 --> 07:34:19,920
project and network

10761
07:34:17,520 --> 07:34:22,718
and if you'd like you can also apply

10762
07:34:19,919 --> 07:34:25,279
firewall rules across an organization

10763
07:34:22,718 --> 07:34:28,240
but i will be sticking to strictly vpc

10764
07:34:25,279 --> 07:34:31,199
firewall rules in this lesson now vpc

10765
07:34:28,240 --> 07:34:32,478
firewall rules let you allow or deny

10766
07:34:31,200 --> 07:34:35,600
connections

10767
07:34:32,477 --> 07:34:37,759
to or from your vm instances

10768
07:34:35,599 --> 07:34:39,039
based on a configuration that you

10769
07:34:37,759 --> 07:34:42,000
specify

10770
07:34:39,040 --> 07:34:44,958
and these rules apply to either incoming

10771
07:34:42,000 --> 07:34:48,080
connections or outgoing connections

10772
07:34:44,957 --> 07:34:51,680
but never both at the same time enabled

10773
07:34:48,080 --> 07:34:54,478
vpc firewall rules are always enforced

10774
07:34:51,680 --> 07:34:57,279
regardless of their configuration and

10775
07:34:54,477 --> 07:35:00,637
operating system even if they have not

10776
07:34:57,279 --> 07:35:03,520
started up now every vpc network

10777
07:35:00,637 --> 07:35:06,079
functions as a distributed firewall

10778
07:35:03,520 --> 07:35:09,200
when firewall rules are defined at the

10779
07:35:06,080 --> 07:35:12,240
network level connections are allowed or

10780
07:35:09,200 --> 07:35:14,477
denied on a per instance basis

10781
07:35:12,240 --> 07:35:17,920
so you can think of the vpc firewall

10782
07:35:14,477 --> 07:35:20,319
rules as existing not only between your

10783
07:35:17,919 --> 07:35:23,679
instances and other networks

10784
07:35:20,319 --> 07:35:26,159
but also between individual instances

10785
07:35:23,680 --> 07:35:29,840
within the same network now when you

10786
07:35:26,159 --> 07:35:33,279
create a vpc firewall rule you specify a

10787
07:35:29,840 --> 07:35:35,759
vpc network and a set of components that

10788
07:35:33,279 --> 07:35:38,079
define what the rule does

10789
07:35:35,759 --> 07:35:40,000
the components enable you to target

10790
07:35:38,080 --> 07:35:43,600
certain types of traffic

10791
07:35:40,000 --> 07:35:46,558
based on the traffic's protocol ports

10792
07:35:43,599 --> 07:35:49,359
sources and destinations when you create

10793
07:35:46,558 --> 07:35:51,600
or modify a firewall rule you can

10794
07:35:49,360 --> 07:35:54,319
specify the instances

10795
07:35:51,599 --> 07:35:56,717
to which it is intended to apply

10796
07:35:54,319 --> 07:35:59,439
by using the target component of the

10797
07:35:56,718 --> 07:36:02,319
rule now in addition to firewall rules

10798
07:35:59,439 --> 07:36:05,359
that you create google cloud has other

10799
07:36:02,319 --> 07:36:07,919
rules that can affect incoming or

10800
07:36:05,360 --> 07:36:10,398
outgoing connections so for instance

10801
07:36:07,919 --> 07:36:11,679
google cloud doesn't allow certain ip

10802
07:36:10,398 --> 07:36:16,080
protocols

10803
07:36:11,680 --> 07:36:19,520
such as egress traffic on tcp port 25

10804
07:36:16,080 --> 07:36:22,398
within a vpc network and protocols other

10805
07:36:19,520 --> 07:36:24,718
than tcp udp

10806
07:36:22,398 --> 07:36:27,520
icmp and gre

10807
07:36:24,718 --> 07:36:30,718
to external ip addresses of google cloud

10808
07:36:27,520 --> 07:36:34,080
resources are blocked google cloud

10809
07:36:30,718 --> 07:36:36,958
always allows communication between a vm

10810
07:36:34,080 --> 07:36:41,080
instance and its corresponding metadata

10811
07:36:36,957 --> 07:36:41,079
server at 169.254

10812
07:36:42,637 --> 07:36:47,840
and this server is essential to the

10813
07:36:45,520 --> 07:36:50,878
operation of the instance

10814
07:36:47,840 --> 07:36:53,599
so the instance can access it regardless

10815
07:36:50,878 --> 07:36:56,398
of any firewall rules that you configure

10816
07:36:53,599 --> 07:37:00,477
the metadata server provides some basic

10817
07:36:56,398 --> 07:37:03,840
services to the instance like dhcp dns

10818
07:37:00,477 --> 07:37:07,599
resolution instance metadata and network

10819
07:37:03,840 --> 07:37:10,637
time protocol or ntp now just as a note

10820
07:37:07,599 --> 07:37:14,079
every network has two implied firewall

10821
07:37:10,637 --> 07:37:17,039
rules that permit outgoing connections

10822
07:37:14,080 --> 07:37:20,638
and block incoming connections firewall

10823
07:37:17,040 --> 07:37:23,680
rules that you create can override these

10824
07:37:20,637 --> 07:37:26,319
implied rules now the first implied rule

10825
07:37:23,680 --> 07:37:30,159
is the allow egress rule and this is an

10826
07:37:26,319 --> 07:37:33,119
egress rule whose action is allow and

10827
07:37:30,159 --> 07:37:36,240
the destination is all ips and the

10828
07:37:33,119 --> 07:37:38,797
priority is the lowest possible and lets

10829
07:37:36,240 --> 07:37:41,840
any instance send traffic to any

10830
07:37:38,797 --> 07:37:44,239
destination except for traffic blocked

10831
07:37:41,840 --> 07:37:47,599
by google cloud the second implied

10832
07:37:44,240 --> 07:37:50,240
firewall rule is the deny ingress rule

10833
07:37:47,599 --> 07:37:53,840
and this is an ingress rule whose action

10834
07:37:50,240 --> 07:37:56,878
is deny and the source is all ips and

10835
07:37:53,840 --> 07:37:59,840
the priority is the lowest possible and

10836
07:37:56,878 --> 07:38:02,159
protects all instances by blocking

10837
07:37:59,840 --> 07:38:04,878
incoming connections to them now i know

10838
07:38:02,159 --> 07:38:07,279
we touched on this earlier on in a

10839
07:38:04,878 --> 07:38:10,000
previous lesson but i felt the need to

10840
07:38:07,279 --> 07:38:12,239
bring it up as these are pre-populated

10841
07:38:10,000 --> 07:38:15,279
rules and the rules that i'm referring

10842
07:38:12,240 --> 07:38:17,840
to are with regards to the default vpc

10843
07:38:15,279 --> 07:38:20,239
network and as explained earlier these

10844
07:38:17,840 --> 07:38:22,558
rules can be deleted or modified as

10845
07:38:20,240 --> 07:38:25,520
necessary the rules as you can see here

10846
07:38:22,558 --> 07:38:28,080
in the table allow ingress connections

10847
07:38:25,520 --> 07:38:32,080
from any source to any instance on the

10848
07:38:28,080 --> 07:38:35,520
network when it comes to icmp rdp on

10849
07:38:32,080 --> 07:38:39,760
port 3389 for windows remote desktop

10850
07:38:35,520 --> 07:38:42,319
protocol and for ssh on port 22. and as

10851
07:38:39,759 --> 07:38:45,599
well the last rule allows ingress

10852
07:38:42,319 --> 07:38:48,398
connections for all protocols and ports

10853
07:38:45,599 --> 07:38:51,039
among instances in the network and it

10854
07:38:48,398 --> 07:38:53,600
permits incoming connections to vm

10855
07:38:51,040 --> 07:38:56,319
instances from others in the same

10856
07:38:53,599 --> 07:39:00,477
network and all of these have a rule

10857
07:38:56,319 --> 07:39:02,957
priority of six five five four which is

10858
07:39:00,477 --> 07:39:05,759
the second to lowest priority so

10859
07:39:02,957 --> 07:39:08,477
breaking down firewall rules there are a

10860
07:39:05,759 --> 07:39:11,279
few characteristics that google put in

10861
07:39:08,477 --> 07:39:13,840
place that help define these rules and

10862
07:39:11,279 --> 07:39:17,439
the characteristics are as follows each

10863
07:39:13,840 --> 07:39:19,119
firewall rule applies to incoming or

10864
07:39:17,439 --> 07:39:23,279
outgoing connections

10865
07:39:19,119 --> 07:39:26,557
and not both firewall rules only support

10866
07:39:23,279 --> 07:39:28,878
ipv4 connections so when specifying a

10867
07:39:26,558 --> 07:39:31,600
source for an ingress rule or a

10868
07:39:28,878 --> 07:39:32,637
destination for an egress rule by

10869
07:39:31,599 --> 07:39:37,279
address

10870
07:39:32,637 --> 07:39:40,159
you can only use an ipv4 address or ipv4

10871
07:39:37,279 --> 07:39:43,599
block insider notation as well each

10872
07:39:40,159 --> 07:39:46,398
firewall rules action is either allow or

10873
07:39:43,599 --> 07:39:49,279
deny you cannot have both at the same

10874
07:39:46,398 --> 07:39:52,558
time and the rule applies to connections

10875
07:39:49,279 --> 07:39:54,397
as long as it is enforced so for example

10876
07:39:52,558 --> 07:39:56,798
you can disable a rule for

10877
07:39:54,398 --> 07:39:59,200
troubleshooting purposes and then enable

10878
07:39:56,797 --> 07:40:02,239
it back again now when you create a

10879
07:39:59,200 --> 07:40:04,477
firewall rule you must select a vpc

10880
07:40:02,240 --> 07:40:07,440
network while the rule is enforced at

10881
07:40:04,477 --> 07:40:11,040
the instance level its configuration is

10882
07:40:07,439 --> 07:40:13,919
associated with a vpc network this means

10883
07:40:11,040 --> 07:40:16,638
you cannot share firewall rules among

10884
07:40:13,919 --> 07:40:19,679
vpc networks including

10885
07:40:16,637 --> 07:40:23,119
networks connected by vpc network

10886
07:40:19,680 --> 07:40:25,119
peering or by using cloud vpn tunnels

10887
07:40:23,119 --> 07:40:28,239
another major thing to note about

10888
07:40:25,119 --> 07:40:30,319
firewall rules is that they are stateful

10889
07:40:28,240 --> 07:40:32,638
and so that means when a connection is

10890
07:40:30,319 --> 07:40:35,599
allowed through the firewall in either

10891
07:40:32,637 --> 07:40:38,239
direction return traffic matching this

10892
07:40:35,599 --> 07:40:40,717
connection is also allowed you cannot

10893
07:40:38,240 --> 07:40:43,520
configure a firewall rule to deny

10894
07:40:40,718 --> 07:40:46,958
associated response traffic return

10895
07:40:43,520 --> 07:40:49,520
traffic must match the five tuple of the

10896
07:40:46,957 --> 07:40:52,000
accepted request traffic but with the

10897
07:40:49,520 --> 07:40:54,797
source and destination addresses and

10898
07:40:52,000 --> 07:40:56,718
ports reversed so just as a note for

10899
07:40:54,797 --> 07:40:59,599
those who may be wondering what a five

10900
07:40:56,718 --> 07:41:02,319
tuple is i was referring to the set of

10901
07:40:59,599 --> 07:41:05,039
five different values that comprise a

10902
07:41:02,319 --> 07:41:08,957
tcpip connection and this would be

10903
07:41:05,040 --> 07:41:11,680
source ip destination ip source port

10904
07:41:08,957 --> 07:41:14,717
destination port and protocol google

10905
07:41:11,680 --> 07:41:17,760
cloud associates incoming packets with

10906
07:41:14,718 --> 07:41:20,558
corresponding outbound packets by using

10907
07:41:17,759 --> 07:41:22,557
a connection tracking table google cloud

10908
07:41:20,558 --> 07:41:24,558
implements connection tracking

10909
07:41:22,558 --> 07:41:27,040
regardless of whether the protocol

10910
07:41:24,558 --> 07:41:29,520
supports connections if a connection is

10911
07:41:27,040 --> 07:41:32,159
allowed between a source and a target or

10912
07:41:29,520 --> 07:41:35,439
between a target and a destination all

10913
07:41:32,159 --> 07:41:38,159
response traffic is allowed as long as

10914
07:41:35,439 --> 07:41:41,039
the firewalls connections tracking state

10915
07:41:38,159 --> 07:41:43,599
is active and as well as a note a

10916
07:41:41,040 --> 07:41:47,280
firewall rules tracking state is

10917
07:41:43,599 --> 07:41:50,079
considered active if at least one packet

10918
07:41:47,279 --> 07:41:52,319
is sent every 10 minutes now along with

10919
07:41:50,080 --> 07:41:54,878
the multiple characteristics that make

10920
07:41:52,319 --> 07:41:57,680
up a firewall rule there are also

10921
07:41:54,878 --> 07:41:59,840
firewall rule components that go along

10922
07:41:57,680 --> 07:42:02,000
with it here i have a screenshot from

10923
07:41:59,840 --> 07:42:04,878
the console with the configuration

10924
07:42:02,000 --> 07:42:07,040
components of a firewall rule and i

10925
07:42:04,878 --> 07:42:09,920
wanted to take a moment to highlight

10926
07:42:07,040 --> 07:42:12,638
these components for better clarity so

10927
07:42:09,919 --> 07:42:14,877
now the first component is the network

10928
07:42:12,637 --> 07:42:17,520
and this is the vpc network that you

10929
07:42:14,878 --> 07:42:20,240
want the firewall rule to apply to the

10930
07:42:17,520 --> 07:42:22,558
next one is priority which we discussed

10931
07:42:20,240 --> 07:42:24,958
earlier and this is the numerical

10932
07:42:22,558 --> 07:42:27,600
priority which determines whether the

10933
07:42:24,957 --> 07:42:30,319
rule is applied as only the highest

10934
07:42:27,599 --> 07:42:33,439
priority rule whose other components

10935
07:42:30,319 --> 07:42:35,520
match traffic is applied and remember

10936
07:42:33,439 --> 07:42:38,319
the lower the number the higher the

10937
07:42:35,520 --> 07:42:41,279
priority the higher the number the lower

10938
07:42:38,319 --> 07:42:43,599
the priority now the next component is

10939
07:42:41,279 --> 07:42:46,397
the direction of traffic and these are

10940
07:42:43,599 --> 07:42:49,759
the ingress rules that apply to incoming

10941
07:42:46,398 --> 07:42:52,159
connections from specified sources to

10942
07:42:49,759 --> 07:42:54,239
google cloud targets and this is where

10943
07:42:52,159 --> 07:42:57,200
ingress rules apply to incoming

10944
07:42:54,240 --> 07:42:59,120
connections from specified sources to

10945
07:42:57,200 --> 07:43:02,000
google cloud targets

10946
07:42:59,119 --> 07:43:04,637
and egress rules apply to connections

10947
07:43:02,000 --> 07:43:08,000
going to specify destinations from

10948
07:43:04,637 --> 07:43:11,039
targets and the next one up is action on

10949
07:43:08,000 --> 07:43:13,680
match and this component either allows

10950
07:43:11,040 --> 07:43:16,319
or denies which determines whether the

10951
07:43:13,680 --> 07:43:19,040
rule permits or blocks the connection

10952
07:43:16,319 --> 07:43:22,239
now a target is what defines which

10953
07:43:19,040 --> 07:43:24,958
instances to which the rule applies and

10954
07:43:22,240 --> 07:43:27,440
you can specify a target by using one of

10955
07:43:24,957 --> 07:43:28,319
the following three options the first

10956
07:43:27,439 --> 07:43:30,957
option

10957
07:43:28,319 --> 07:43:33,200
are all instances in the network and

10958
07:43:30,957 --> 07:43:36,239
this is the firewall rule that does

10959
07:43:33,200 --> 07:43:38,878
exactly what it says it applies to all

10960
07:43:36,240 --> 07:43:42,159
the instances in the network the second

10961
07:43:38,878 --> 07:43:44,637
option is instances by target tags and

10962
07:43:42,159 --> 07:43:47,119
this is where the firewall rule applies

10963
07:43:44,637 --> 07:43:49,520
only to instances with a matching

10964
07:43:47,119 --> 07:43:51,840
network tag and so i know i haven't

10965
07:43:49,520 --> 07:43:54,797
explained it earlier but a network tag

10966
07:43:51,840 --> 07:43:58,000
is simply a character string added to a

10967
07:43:54,797 --> 07:44:00,079
tags field in a resource so let's say i

10968
07:43:58,000 --> 07:44:02,319
had a bunch of instances that were

10969
07:44:00,080 --> 07:44:04,878
considered development i can simply

10970
07:44:02,319 --> 07:44:07,680
throw a network tag on them using a

10971
07:44:04,878 --> 07:44:10,240
network tag of dev and apply the

10972
07:44:07,680 --> 07:44:12,878
necessary firewall rule for all the

10973
07:44:10,240 --> 07:44:16,000
development servers holding the network

10974
07:44:12,878 --> 07:44:18,558
tag dev and so the third option is

10975
07:44:16,000 --> 07:44:21,119
instances by target service accounts

10976
07:44:18,558 --> 07:44:24,319
this is where the firewall rule applies

10977
07:44:21,119 --> 07:44:26,319
only to instances that use a specific

10978
07:44:24,319 --> 07:44:29,200
service account and so the next

10979
07:44:26,319 --> 07:44:31,919
component is the source filter and this

10980
07:44:29,200 --> 07:44:34,878
is a source for ingress rules or a

10981
07:44:31,919 --> 07:44:38,000
destination for egress rules the source

10982
07:44:34,878 --> 07:44:39,760
parameter is only applicable to ingress

10983
07:44:38,000 --> 07:44:42,477
rules and it must be one of the

10984
07:44:39,759 --> 07:44:44,717
following three selections source ip

10985
07:44:42,477 --> 07:44:47,840
ranges and this is where you specify

10986
07:44:44,718 --> 07:44:50,958
ranges of ip addresses as sources for

10987
07:44:47,840 --> 07:44:53,439
packets either inside or outside of

10988
07:44:50,957 --> 07:44:55,599
google cloud the second one is source

10989
07:44:53,439 --> 07:44:58,477
tags and this is where the source

10990
07:44:55,599 --> 07:45:01,359
instances are identified by a matching

10991
07:44:58,477 --> 07:45:03,279
network tag and source service accounts

10992
07:45:01,360 --> 07:45:05,520
where source instances

10993
07:45:03,279 --> 07:45:07,759
are identified by the service accounts

10994
07:45:05,520 --> 07:45:10,878
they use you can also use service

10995
07:45:07,759 --> 07:45:13,119
accounts to create firewall rules that

10996
07:45:10,878 --> 07:45:15,920
are a bit more granular and so one of

10997
07:45:13,119 --> 07:45:18,397
the last components of the firewall rule

10998
07:45:15,919 --> 07:45:21,599
is the protocols and ports you can

10999
07:45:18,398 --> 07:45:24,558
specify a protocol or a combination of

11000
07:45:21,599 --> 07:45:27,439
protocols and their ports if you omit

11001
07:45:24,558 --> 07:45:30,718
both protocols and ports the firewall

11002
07:45:27,439 --> 07:45:33,919
rule is applicable for all traffic on

11003
07:45:30,718 --> 07:45:36,240
any protocol and any port and so when it

11004
07:45:33,919 --> 07:45:39,519
comes to enforcement status of the

11005
07:45:36,240 --> 07:45:41,840
firewall rule there is a drop down right

11006
07:45:39,520 --> 07:45:44,558
underneath all the components where you

11007
07:45:41,840 --> 07:45:47,599
can enable or disable the enforcement

11008
07:45:44,558 --> 07:45:50,718
and as i said before this is a great way

11009
07:45:47,599 --> 07:45:53,199
to enable or disable a firewall rule

11010
07:45:50,718 --> 07:45:55,280
without having to delete it and is great

11011
07:45:53,200 --> 07:45:58,319
for troubleshooting or to grant

11012
07:45:55,279 --> 07:46:00,557
temporary access to any instances and

11013
07:45:58,319 --> 07:46:03,200
unless you specify otherwise

11014
07:46:00,558 --> 07:46:06,240
all firewall rules are enabled when they

11015
07:46:03,200 --> 07:46:09,040
are created but you can also choose to

11016
07:46:06,240 --> 07:46:12,320
create a rule in a disabled state and so

11017
07:46:09,040 --> 07:46:14,638
this covers the vpc firewall rules in

11018
07:46:12,319 --> 07:46:18,558
all its entirety and i will be showing

11019
07:46:14,637 --> 07:46:21,439
you how to implement vpc firewall rules

11020
07:46:18,558 --> 07:46:23,040
along with building a custom vpc

11021
07:46:21,439 --> 07:46:25,919
custom routes

11022
07:46:23,040 --> 07:46:28,558
and even private google access

11023
07:46:25,919 --> 07:46:31,759
all together in a demo following this

11024
07:46:28,558 --> 07:46:34,080
lesson to give you some hands-on skills

11025
07:46:31,759 --> 07:46:36,319
of putting it all into practice and so

11026
07:46:34,080 --> 07:46:39,520
that's pretty much all i wanted to cover

11027
07:46:36,319 --> 07:46:41,599
when it comes to vpc firewall rules so

11028
07:46:39,520 --> 07:46:43,840
you can now mark this lesson as complete

11029
07:46:41,599 --> 07:46:47,199
and let's move on to the next one where

11030
07:46:43,840 --> 07:46:49,680
we dive in and build our custom vpc so

11031
07:46:47,200 --> 07:46:52,240
now is a perfect time to grab a coffee

11032
07:46:49,680 --> 07:46:55,477
or tea and whenever you're ready join me

11033
07:46:52,240 --> 07:46:55,478
in the console

11034
07:46:57,200 --> 07:47:01,360
welcome back

11035
07:46:58,558 --> 07:47:03,840
in this demonstration i want to take all

11036
07:47:01,360 --> 07:47:06,398
the concepts that we've learned so far

11037
07:47:03,840 --> 07:47:09,200
in this networking section and put it

11038
07:47:06,398 --> 07:47:12,398
all into practice this diagram shown

11039
07:47:09,200 --> 07:47:15,040
here is the architecture of exactly what

11040
07:47:12,398 --> 07:47:17,920
we will be building in this demo we're

11041
07:47:15,040 --> 07:47:19,760
going to start by creating a custom vpc

11042
07:47:17,919 --> 07:47:20,957
and then we're going to create two

11043
07:47:19,759 --> 07:47:23,679
subnets

11044
07:47:20,957 --> 07:47:26,239
one public and one private

11045
07:47:23,680 --> 07:47:28,878
in two separate regions we're then going

11046
07:47:26,240 --> 07:47:31,120
to create a cloud storage bucket with

11047
07:47:28,878 --> 07:47:33,760
some objects in it and then we will

11048
07:47:31,119 --> 07:47:36,319
create some instances to demonstrate

11049
07:47:33,759 --> 07:47:38,957
access to cloud storage as well as

11050
07:47:36,319 --> 07:47:40,637
communication between instances and

11051
07:47:38,957 --> 07:47:43,680
finally we're going to create some

11052
07:47:40,637 --> 07:47:45,919
firewall rules for routing traffic to

11053
07:47:43,680 --> 07:47:48,797
all the right places we're also going to

11054
07:47:45,919 --> 07:47:51,519
implement private google access

11055
07:47:48,797 --> 07:47:54,477
and demonstrate accessibility to the

11056
07:47:51,520 --> 07:47:57,760
files in cloud storage from the private

11057
07:47:54,477 --> 07:47:59,759
instance without an external ip so this

11058
07:47:57,759 --> 07:48:01,119
may be a little bit out of your comfort

11059
07:47:59,759 --> 07:48:03,359
zone for some

11060
07:48:01,119 --> 07:48:05,599
but don't worry i'll be with you every

11061
07:48:03,360 --> 07:48:08,240
step of the way and other than creating

11062
07:48:05,599 --> 07:48:10,717
the instances all the steps here have

11063
07:48:08,240 --> 07:48:12,638
been covered in previous lessons now

11064
07:48:10,718 --> 07:48:14,398
there's a lot to get done here so

11065
07:48:12,637 --> 07:48:16,557
whenever you're ready join me in the

11066
07:48:14,398 --> 07:48:18,718
console and so here we are back in the

11067
07:48:16,558 --> 07:48:21,280
console and as you can see up here in

11068
07:48:18,718 --> 07:48:24,637
the right hand corner i am logged in as

11069
07:48:21,279 --> 07:48:27,360
tony bowtie ace gmail.com and currently

11070
07:48:24,637 --> 07:48:29,599
i am logged in under project tony and so

11071
07:48:27,360 --> 07:48:32,080
in order to start off on a clean slate

11072
07:48:29,599 --> 07:48:34,000
i'm going to create a new project and so

11073
07:48:32,080 --> 07:48:37,600
i'm going to simply click on the project

11074
07:48:34,000 --> 07:48:39,520
menu drop-down and click on new project

11075
07:48:37,599 --> 07:48:41,680
i'm going to call this project

11076
07:48:39,520 --> 07:48:43,680
bowtie inc and i don't have any

11077
07:48:41,680 --> 07:48:46,000
organizations so i'm going to simply

11078
07:48:43,680 --> 07:48:48,319
click on create and as well for those of

11079
07:48:46,000 --> 07:48:51,040
you doing this lesson i would also

11080
07:48:48,319 --> 07:48:53,599
recommend for you to create a brand new

11081
07:48:51,040 --> 07:48:55,120
project so that you can start off anew

11082
07:48:53,599 --> 07:48:57,279
again i'm going to go over to the

11083
07:48:55,119 --> 07:48:59,840
project drop down and i'm going to

11084
07:48:57,279 --> 07:49:01,919
select bow tie ink as the project and

11085
07:48:59,840 --> 07:49:04,558
now that i have a fresh new project i

11086
07:49:01,919 --> 07:49:06,557
can now create my vpc network so i'm

11087
07:49:04,558 --> 07:49:08,798
going to go over to the left hand corner

11088
07:49:06,558 --> 07:49:11,440
to the navigation menu and i'm going to

11089
07:49:08,797 --> 07:49:14,477
scroll down to vpc network and so

11090
07:49:11,439 --> 07:49:16,637
because vpc networks are tied in with

11091
07:49:14,477 --> 07:49:18,797
the compute engine api

11092
07:49:16,637 --> 07:49:21,680
we need to enable it before we can

11093
07:49:18,797 --> 07:49:24,797
create any vpc networks so you can go

11094
07:49:21,680 --> 07:49:28,240
ahead and enable this api so once this

11095
07:49:24,797 --> 07:49:31,919
api has finished and is enabled we'll be

11096
07:49:28,240 --> 07:49:34,878
able to create our vpc network

11097
07:49:31,919 --> 07:49:37,359
ok and the api has been enabled and as

11098
07:49:34,878 --> 07:49:40,000
you can see the default vpc network has

11099
07:49:37,360 --> 07:49:43,040
been created with a subnet in every

11100
07:49:40,000 --> 07:49:45,680
region along with its corresponding ip

11101
07:49:43,040 --> 07:49:47,680
address ranges and so for this demo

11102
07:49:45,680 --> 07:49:50,477
we're going to create a brand new vpc

11103
07:49:47,680 --> 07:49:52,398
network along with some custom subnets

11104
07:49:50,477 --> 07:49:54,477
and so in order to do that i'm going to

11105
07:49:52,398 --> 07:49:57,440
go up here to the top and i'm going to

11106
07:49:54,477 --> 07:49:59,200
click on create vpc network and so here

11107
07:49:57,439 --> 07:50:00,000
i'm prompted with some fields to fill

11108
07:49:59,200 --> 07:50:02,000
out

11109
07:50:00,000 --> 07:50:04,319
so under name i'm going to think of a

11110
07:50:02,000 --> 07:50:06,477
creative name that i can call my vpc

11111
07:50:04,319 --> 07:50:08,558
network so i'm going to simply call it

11112
07:50:06,477 --> 07:50:10,239
custom under description i'm going to

11113
07:50:08,558 --> 07:50:13,040
call this custom

11114
07:50:10,240 --> 07:50:15,520
vpc network and i'm going to move down

11115
07:50:13,040 --> 07:50:17,680
here to subnets and because i'm creating

11116
07:50:15,520 --> 07:50:20,558
custom subnets i'm going to keep it

11117
07:50:17,680 --> 07:50:23,360
under custom under subnet creation mode

11118
07:50:20,558 --> 07:50:25,600
and so i'm going to need a public subnet

11119
07:50:23,360 --> 07:50:28,398
and a private subnet and you'll be able

11120
07:50:25,599 --> 07:50:31,199
to get the values from the text file in

11121
07:50:28,398 --> 07:50:33,360
the github repository within the sub

11122
07:50:31,200 --> 07:50:35,360
networks folder under networking

11123
07:50:33,360 --> 07:50:37,680
services and so i'm going to create my

11124
07:50:35,360 --> 07:50:40,637
public subnet first and i'm going to

11125
07:50:37,680 --> 07:50:44,000
simply call the public subnet public for

11126
07:50:40,637 --> 07:50:48,957
region i'm going to use us east one and

11127
07:50:44,000 --> 07:50:51,599
the ip address range will be 10.0.0.0

11128
07:50:48,957 --> 07:50:53,919
forward slash 24 and i'm going to leave

11129
07:50:51,599 --> 07:50:56,239
private google access off and i'm going

11130
07:50:53,919 --> 07:50:58,717
to simply click on done and now i can

11131
07:50:56,240 --> 07:51:01,520
create the private subnet so underneath

11132
07:50:58,718 --> 07:51:03,520
the public subnet you'll see add subnet

11133
07:51:01,520 --> 07:51:05,760
you can simply click on that and the

11134
07:51:03,520 --> 07:51:08,477
name of the new subnet will be as you

11135
07:51:05,759 --> 07:51:11,679
guessed it private under region i'm

11136
07:51:08,477 --> 07:51:13,040
going to use us east 4 and for the ip

11137
07:51:11,680 --> 07:51:17,080
address range

11138
07:51:13,040 --> 07:51:17,080
be sure to use 10.0.5.0.24

11139
07:51:18,319 --> 07:51:22,159
and we're going to leave private google

11140
07:51:19,759 --> 07:51:24,477
access off for now and we'll be turning

11141
07:51:22,159 --> 07:51:26,637
that on a little bit later in the demo

11142
07:51:24,477 --> 07:51:28,797
and so you can now click on done and

11143
07:51:26,637 --> 07:51:31,840
before we click on create we want to

11144
07:51:28,797 --> 07:51:34,637
enable the dns api and clicking on

11145
07:51:31,840 --> 07:51:37,279
enable will bring you to the dns api

11146
07:51:34,637 --> 07:51:40,319
home page and you can click on enable to

11147
07:51:37,279 --> 07:51:43,119
enable the api okay so now that we have

11148
07:51:40,319 --> 07:51:46,000
our network configured along with our

11149
07:51:43,119 --> 07:51:48,477
public and private subnets as well as

11150
07:51:46,000 --> 07:51:51,119
dns being enabled we can now simply

11151
07:51:48,477 --> 07:51:53,119
click on create but before i do that i

11152
07:51:51,119 --> 07:51:55,599
wanted to give you some insight with

11153
07:51:53,119 --> 07:51:57,840
regards to the command line so as i've

11154
07:51:55,599 --> 07:51:59,840
shared before everything that can be

11155
07:51:57,840 --> 07:52:02,159
done in the console can be done through

11156
07:51:59,840 --> 07:52:04,558
the command line and so if ever you

11157
07:52:02,159 --> 07:52:06,240
wanted to do that or you wanted to get

11158
07:52:04,558 --> 07:52:07,120
to know the command line a little bit

11159
07:52:06,240 --> 07:52:09,280
better

11160
07:52:07,119 --> 07:52:11,520
after filling out all the fields with

11161
07:52:09,279 --> 07:52:14,159
regards to creating resources in the

11162
07:52:11,520 --> 07:52:16,398
console you will be given the option of

11163
07:52:14,159 --> 07:52:18,797
a command line link that you can simply

11164
07:52:16,398 --> 07:52:21,360
click on and here you will be given all

11165
07:52:18,797 --> 07:52:24,477
the commands to create all the same

11166
07:52:21,360 --> 07:52:26,477
resources with all the same preferences

11167
07:52:24,477 --> 07:52:28,319
through the command line and i will be

11168
07:52:26,477 --> 07:52:30,718
providing these commands in the lesson

11169
07:52:28,319 --> 07:52:33,200
text so that you can familiarize

11170
07:52:30,718 --> 07:52:35,440
yourself with the commands to use in

11171
07:52:33,200 --> 07:52:37,440
order to build any networks using the

11172
07:52:35,439 --> 07:52:40,239
command line but this is a great

11173
07:52:37,439 --> 07:52:42,319
reference for you to use at any time and

11174
07:52:40,240 --> 07:52:44,398
so i'm going to click on close

11175
07:52:42,319 --> 07:52:46,637
and now i'm going to click on create

11176
07:52:44,398 --> 07:52:49,600
and within a minute or two the custom

11177
07:52:46,637 --> 07:52:52,557
vpc network will be created and ready to

11178
07:52:49,599 --> 07:52:55,279
use okay and the custom vpc network has

11179
07:52:52,558 --> 07:52:57,520
been created along with its public and

11180
07:52:55,279 --> 07:52:59,520
private subnet and so just to get a

11181
07:52:57,520 --> 07:53:02,159
little bit more insight with this custom

11182
07:52:59,520 --> 07:53:03,040
vpc network i'm going to drill down into

11183
07:53:02,159 --> 07:53:05,759
it

11184
07:53:03,040 --> 07:53:08,558
and as you can see here the subnets are

11185
07:53:05,759 --> 07:53:11,679
respectively labeled private and public

11186
07:53:08,558 --> 07:53:14,558
along with its region ip address range

11187
07:53:11,680 --> 07:53:16,637
the gateway and private google access

11188
07:53:14,558 --> 07:53:18,798
the routes as you can see here are the

11189
07:53:16,637 --> 07:53:21,119
system generated routes that i had

11190
07:53:18,797 --> 07:53:23,840
discussed in an earlier lesson it has

11191
07:53:21,119 --> 07:53:26,878
both the subnet routes to its respective

11192
07:53:23,840 --> 07:53:29,520
ip range along with the default route

11193
07:53:26,878 --> 07:53:32,000
with a path to the internet as well as a

11194
07:53:29,520 --> 07:53:34,637
path for private google access now we

11195
07:53:32,000 --> 07:53:36,718
don't have any firewall rules here yet

11196
07:53:34,637 --> 07:53:38,878
but we'll be adding those in just a few

11197
07:53:36,718 --> 07:53:41,600
minutes and so now that you've created

11198
07:53:38,878 --> 07:53:43,760
the vpc network with its respective

11199
07:53:41,599 --> 07:53:46,239
subnets we're going to head on over to

11200
07:53:43,759 --> 07:53:48,637
cloud storage and create a bucket along

11201
07:53:46,240 --> 07:53:50,080
with uploading the necessary files so

11202
07:53:48,637 --> 07:53:51,680
i'm going to go again over to the

11203
07:53:50,080 --> 07:53:54,398
navigation menu

11204
07:53:51,680 --> 07:53:57,119
and i'm going to scroll down to storage

11205
07:53:54,398 --> 07:53:59,760
and so as expected there are no buckets

11206
07:53:57,119 --> 07:54:01,759
present here in cloud storage and so

11207
07:53:59,759 --> 07:54:04,477
we're just going to go ahead and create

11208
07:54:01,759 --> 07:54:07,599
our first bucket by going up here to the

11209
07:54:04,477 --> 07:54:09,840
top menu and clicking on create bucket

11210
07:54:07,599 --> 07:54:12,000
and so here i've been prompted to name

11211
07:54:09,840 --> 07:54:14,477
my bucket and for those of you who are

11212
07:54:12,000 --> 07:54:17,119
here for the first time when it comes to

11213
07:54:14,477 --> 07:54:19,919
naming a storage bucket the name needs

11214
07:54:17,119 --> 07:54:22,718
to be globally unique and this means

11215
07:54:19,919 --> 07:54:25,039
that the name has to be unique across

11216
07:54:22,718 --> 07:54:26,958
all of the google cloud platform now

11217
07:54:25,040 --> 07:54:29,200
don't worry i'm going to get into

11218
07:54:26,957 --> 07:54:31,039
further detail with this in the cloud

11219
07:54:29,200 --> 07:54:34,159
storage lesson with all of these

11220
07:54:31,040 --> 07:54:37,200
specific details when it comes to names

11221
07:54:34,159 --> 07:54:39,119
storage classes and permissions and so

11222
07:54:37,200 --> 07:54:41,040
in the meantime you can come up with a

11223
07:54:39,119 --> 07:54:43,439
name for your bucket something that

11224
07:54:41,040 --> 07:54:46,240
resonates with you and so for me i'm

11225
07:54:43,439 --> 07:54:48,797
going to name my bucket bowtie inc dash

11226
07:54:46,240 --> 07:54:50,958
file dash access and so now i'm going to

11227
07:54:48,797 --> 07:54:52,878
simply click continue and so just as a

11228
07:54:50,957 --> 07:54:55,520
note for those who are unable to

11229
07:54:52,878 --> 07:54:57,920
continue through it is because the name

11230
07:54:55,520 --> 07:55:00,240
for your bucket is not globally unique

11231
07:54:57,919 --> 07:55:02,319
so do try to find one that is now when

11232
07:55:00,240 --> 07:55:04,478
it comes to location type i'm just going

11233
07:55:02,319 --> 07:55:07,520
to click on region and you can keep the

11234
07:55:04,477 --> 07:55:09,599
default location as used one and i'm

11235
07:55:07,520 --> 07:55:11,760
going to leave all the other options as

11236
07:55:09,599 --> 07:55:14,477
default and i'm going to go down to the

11237
07:55:11,759 --> 07:55:16,477
bottom and click create and so for those

11238
07:55:14,477 --> 07:55:19,279
of you who have created your bucket you

11239
07:55:16,477 --> 07:55:22,079
can now upload the files and those files

11240
07:55:19,279 --> 07:55:24,797
can be found in the github repository

11241
07:55:22,080 --> 07:55:27,120
in the cloud storage bucket folder under

11242
07:55:24,797 --> 07:55:29,599
networking services and so now i'm going

11243
07:55:27,119 --> 07:55:31,599
to click on upload files

11244
07:55:29,599 --> 07:55:34,557
and under the networking services

11245
07:55:31,599 --> 07:55:37,359
section under cloud storage bucket you

11246
07:55:34,558 --> 07:55:40,878
will find these three jpeg files and you

11247
07:55:37,360 --> 07:55:43,119
can simply select them and click on open

11248
07:55:40,878 --> 07:55:45,600
and so they are now uploaded into the

11249
07:55:43,119 --> 07:55:48,159
bucket and so now i'm ready to move on

11250
07:55:45,599 --> 07:55:51,279
to the next step so you should now have

11251
07:55:48,159 --> 07:55:53,840
created the vpc network with a private

11252
07:55:51,279 --> 07:55:56,319
and public subnet along with creating

11253
07:55:53,840 --> 07:55:59,040
your own bucket in cloud storage and

11254
07:55:56,319 --> 07:56:01,520
have uploaded the three jpeg files so

11255
07:55:59,040 --> 07:56:02,958
now that this is done we can now create

11256
07:56:01,520 --> 07:56:05,920
the instances

11257
07:56:02,957 --> 07:56:07,599
that will have access to these files and

11258
07:56:05,919 --> 07:56:09,519
so again i will go over to the

11259
07:56:07,599 --> 07:56:12,557
navigation menu in the top left hand

11260
07:56:09,520 --> 07:56:14,957
corner and scroll down to compute engine

11261
07:56:12,558 --> 07:56:16,958
and here i will click on create

11262
07:56:14,957 --> 07:56:19,439
and so again i will be prompted with

11263
07:56:16,957 --> 07:56:21,520
some fields to fill out and so for this

11264
07:56:19,439 --> 07:56:24,079
instance i'm going to first create the

11265
07:56:21,520 --> 07:56:26,637
public instance again i'm going to get

11266
07:56:24,080 --> 07:56:30,240
really creative and call this

11267
07:56:26,637 --> 07:56:32,079
public dash instance under labels i'm

11268
07:56:30,240 --> 07:56:33,280
going to add a label

11269
07:56:32,080 --> 07:56:36,000
under key

11270
07:56:33,279 --> 07:56:38,477
i'm going to type environment and under

11271
07:56:36,000 --> 07:56:40,080
value i'm going to type in public i'm

11272
07:56:38,477 --> 07:56:42,477
going to go down to the bottom and click

11273
07:56:40,080 --> 07:56:45,440
on save and under region i'm going to

11274
07:56:42,477 --> 07:56:48,397
select us east1 and you can leave the

11275
07:56:45,439 --> 07:56:51,199
zone as us east 1b moving down under

11276
07:56:48,398 --> 07:56:53,680
machine type i'm going to select the e2

11277
07:56:51,200 --> 07:56:55,440
micro as the machine type just because

11278
07:56:53,680 --> 07:56:57,279
i'm being cost conscious and i want to

11279
07:56:55,439 --> 07:57:00,397
keep the cost down and so i'm going to

11280
07:56:57,279 --> 07:57:02,397
scroll down to identity and api access

11281
07:57:00,398 --> 07:57:04,718
and under service account you should

11282
07:57:02,398 --> 07:57:07,440
have the compute engine default service

11283
07:57:04,718 --> 07:57:09,920
account already pre-selected now under

11284
07:57:07,439 --> 07:57:12,637
access scopes i want to be able to have

11285
07:57:09,919 --> 07:57:15,119
the proper permissions to be able to

11286
07:57:12,637 --> 07:57:17,360
read and write to cloud storage along

11287
07:57:15,119 --> 07:57:19,360
with read and write access to compute

11288
07:57:17,360 --> 07:57:22,240
engine and so you can click on set

11289
07:57:19,360 --> 07:57:24,159
access for each api and you can scroll

11290
07:57:22,240 --> 07:57:26,798
down to compute engine

11291
07:57:24,159 --> 07:57:29,279
click on the drop down menu and select

11292
07:57:26,797 --> 07:57:31,360
read write and this will give the public

11293
07:57:29,279 --> 07:57:34,717
instance the specific access that it

11294
07:57:31,360 --> 07:57:36,398
needs to ssh into the private instance

11295
07:57:34,718 --> 07:57:38,398
and so now i'm going to set the access

11296
07:57:36,398 --> 07:57:40,240
for cloud storage so i'm going to scroll

11297
07:57:38,398 --> 07:57:43,280
down to storage i'm going to click on

11298
07:57:40,240 --> 07:57:45,200
the drop down menu and select read write

11299
07:57:43,279 --> 07:57:47,919
and this will give the instance read

11300
07:57:45,200 --> 07:57:49,600
write access to cloud storage scrolling

11301
07:57:47,919 --> 07:57:52,159
down a little bit further i'm going to

11302
07:57:49,599 --> 07:57:54,397
go to management security disks

11303
07:57:52,159 --> 07:57:56,159
networking and sold tenancy and i'm

11304
07:57:54,398 --> 07:57:58,319
going to click on that

11305
07:57:56,159 --> 07:58:00,637
scroll up here just a little bit

11306
07:57:58,319 --> 07:58:02,637
and you can click on the networking tab

11307
07:58:00,637 --> 07:58:05,279
which will prompt you for a bunch of

11308
07:58:02,637 --> 07:58:07,599
options that you can configure for the

11309
07:58:05,279 --> 07:58:10,957
networking of the instance so under

11310
07:58:07,599 --> 07:58:13,119
network tags i want to type in public

11311
07:58:10,957 --> 07:58:15,119
and you can click enter you can then

11312
07:58:13,119 --> 07:58:17,279
scroll down to where it says network

11313
07:58:15,119 --> 07:58:19,759
interfaces and click on the current

11314
07:58:17,279 --> 07:58:22,319
interface which is the default and here

11315
07:58:19,759 --> 07:58:24,079
it'll open up all your options and so

11316
07:58:22,319 --> 07:58:26,637
under network you want to click on the

11317
07:58:24,080 --> 07:58:28,798
drop down and set it from default to

11318
07:58:26,637 --> 07:58:30,957
custom the public subnet will

11319
07:58:28,797 --> 07:58:33,039
automatically be propagated so you can

11320
07:58:30,957 --> 07:58:35,759
leave it as is and you also want to make

11321
07:58:33,040 --> 07:58:38,319
sure that your primary internal ip

11322
07:58:35,759 --> 07:58:40,000
as well as your external ip are set to

11323
07:58:38,319 --> 07:58:42,000
ephemeral and you can leave all the

11324
07:58:40,000 --> 07:58:44,319
other options as default and simply

11325
07:58:42,000 --> 07:58:46,558
click on done and again before clicking

11326
07:58:44,319 --> 07:58:48,558
on create you can click on the command

11327
07:58:46,558 --> 07:58:50,958
line link and it will show you all the

11328
07:58:48,558 --> 07:58:53,200
commands needed in order to create this

11329
07:58:50,957 --> 07:58:55,039
instance through the command line so i'm

11330
07:58:53,200 --> 07:58:56,477
going to go ahead and close this

11331
07:58:55,040 --> 07:58:58,398
and so i'm going to leave all the other

11332
07:58:56,477 --> 07:59:00,637
options as default and i'm going to

11333
07:58:58,398 --> 07:59:03,120
click on create and so now that my

11334
07:59:00,637 --> 07:59:04,878
public instance is being created i'm

11335
07:59:03,119 --> 07:59:05,840
going to go ahead and create my private

11336
07:59:04,878 --> 07:59:08,080
instance

11337
07:59:05,840 --> 07:59:10,080
using the same steps that i did for the

11338
07:59:08,080 --> 07:59:12,000
last instance so i'm going to go ahead

11339
07:59:10,080 --> 07:59:14,080
and click on create instance here at the

11340
07:59:12,000 --> 07:59:16,398
top and so the first thing i'm going to

11341
07:59:14,080 --> 07:59:17,520
be prompted for is the name of the

11342
07:59:16,398 --> 07:59:19,760
instance

11343
07:59:17,520 --> 07:59:22,398
and so i'm going to call this instance

11344
07:59:19,759 --> 07:59:25,439
private dash instance and here i'm going

11345
07:59:22,398 --> 07:59:27,280
to add a label the key being environment

11346
07:59:25,439 --> 07:59:29,039
and the value being private i'm going to

11347
07:59:27,279 --> 07:59:30,319
go down here to the bottom and click on

11348
07:59:29,040 --> 07:59:33,280
save

11349
07:59:30,319 --> 07:59:34,477
and under region i'm going to select us

11350
07:59:33,279 --> 07:59:36,717
east 4

11351
07:59:34,477 --> 07:59:39,119
and you can keep the zone as the default

11352
07:59:36,718 --> 07:59:41,760
selected under machine type we're going

11353
07:59:39,119 --> 07:59:44,319
to select the e2 micro and again

11354
07:59:41,759 --> 07:59:46,877
scrolling down to the identity and api

11355
07:59:44,319 --> 07:59:48,718
access under the access scopes for the

11356
07:59:46,878 --> 07:59:51,840
default service account i'm going to

11357
07:59:48,718 --> 07:59:53,760
click on the set access for each api and

11358
07:59:51,840 --> 07:59:55,840
i'm going to scroll down to storage i'm

11359
07:59:53,759 --> 07:59:58,000
going to click on the drop down menu and

11360
07:59:55,840 --> 08:00:00,080
i'm going to select access for read

11361
07:59:58,000 --> 08:00:02,319
write and for the last step i'm going to

11362
08:00:00,080 --> 08:00:05,120
go into the networking tab under

11363
08:00:02,319 --> 08:00:07,919
management security disks networking and

11364
08:00:05,119 --> 08:00:09,840
soul tenancy and under network tags i'm

11365
08:00:07,919 --> 08:00:12,159
going to give this instance a network

11366
08:00:09,840 --> 08:00:14,878
tag of private and under network

11367
08:00:12,159 --> 08:00:16,957
interfaces we want to edit this and

11368
08:00:14,878 --> 08:00:19,279
change it from default over to the

11369
08:00:16,957 --> 08:00:22,877
custom network and as expected it

11370
08:00:19,279 --> 08:00:24,717
selected the private subnet by default

11371
08:00:22,878 --> 08:00:26,878
and because this is going to be a

11372
08:00:24,718 --> 08:00:29,440
private instance we are not going to

11373
08:00:26,878 --> 08:00:31,920
give this an external ip so i'm going to

11374
08:00:29,439 --> 08:00:33,759
click on the drop down and select none

11375
08:00:31,919 --> 08:00:36,000
and with all the other options set as

11376
08:00:33,759 --> 08:00:37,840
default i'm going to simply click on

11377
08:00:36,000 --> 08:00:40,319
create

11378
08:00:37,840 --> 08:00:43,040
and this will create my private instance

11379
08:00:40,319 --> 08:00:45,759
along with having my public instance so

11380
08:00:43,040 --> 08:00:47,920
just as a recap we've created a new

11381
08:00:45,759 --> 08:00:50,957
custom vpc network

11382
08:00:47,919 --> 08:00:53,519
along with a private and public subnet

11383
08:00:50,957 --> 08:00:56,000
we've created a storage bucket and added

11384
08:00:53,520 --> 08:00:58,718
some files in it to be accessed and

11385
08:00:56,000 --> 08:01:01,040
we've created a private and public

11386
08:00:58,718 --> 08:01:03,520
instance and assigning the service

11387
08:01:01,040 --> 08:01:06,718
account on the public instance read

11388
08:01:03,520 --> 08:01:09,360
write access to both compute engine and

11389
08:01:06,718 --> 08:01:11,440
cloud storage along with a public ip

11390
08:01:09,360 --> 08:01:13,760
address and assigning the service

11391
08:01:11,439 --> 08:01:16,877
account on the private instance read

11392
08:01:13,759 --> 08:01:19,840
write access only for cloud storage and

11393
08:01:16,878 --> 08:01:21,840
no public ip and so this is the end of

11394
08:01:19,840 --> 08:01:24,080
part one of this demo

11395
08:01:21,840 --> 08:01:26,558
and this would be a great opportunity

11396
08:01:24,080 --> 08:01:28,718
for you to get up and have a stretch

11397
08:01:26,558 --> 08:01:30,718
get yourself a coffee or tea

11398
08:01:28,718 --> 08:01:32,240
and whenever you're ready you can join

11399
08:01:30,718 --> 08:01:34,240
me in part two

11400
08:01:32,240 --> 08:01:36,798
where we will be starting immediately

11401
08:01:34,240 --> 08:01:39,120
from the end of part one so you can go

11402
08:01:36,797 --> 08:01:40,930
ahead and complete this video and i will

11403
08:01:39,119 --> 08:01:44,878
see you in part two

11404
08:01:40,930 --> 08:01:46,080
[Music]

11405
08:01:44,878 --> 08:01:49,440
welcome back

11406
08:01:46,080 --> 08:01:51,520
this is part two of the custom vpc demo

11407
08:01:49,439 --> 08:01:53,919
and we will be starting exactly where we

11408
08:01:51,520 --> 08:01:56,718
left off from part one so with that

11409
08:01:53,919 --> 08:01:58,957
being said let's dive in and so now the

11410
08:01:56,718 --> 08:02:01,680
last thing that needs to be done is to

11411
08:01:58,957 --> 08:02:04,079
simply create some firewall rules and so

11412
08:02:01,680 --> 08:02:07,680
with these firewall rules this will give

11413
08:02:04,080 --> 08:02:09,680
me ssh access into the public instance

11414
08:02:07,680 --> 08:02:12,558
as well as allowing private

11415
08:02:09,680 --> 08:02:15,040
communication from the public instance

11416
08:02:12,558 --> 08:02:17,040
to the private instance as well as

11417
08:02:15,040 --> 08:02:19,440
giving ssh access

11418
08:02:17,040 --> 08:02:21,600
from the public instance to the private

11419
08:02:19,439 --> 08:02:24,477
instance and this will allow us to

11420
08:02:21,599 --> 08:02:26,557
access the files in the bucket from the

11421
08:02:24,477 --> 08:02:29,200
private instance and so in order to

11422
08:02:26,558 --> 08:02:31,840
create these firewall rules i need to go

11423
08:02:29,200 --> 08:02:33,680
back to my vpc network so i'm going to

11424
08:02:31,840 --> 08:02:35,520
go up to the left hand corner again to

11425
08:02:33,680 --> 08:02:38,718
the navigation menu

11426
08:02:35,520 --> 08:02:40,398
and scroll down to vpc network over here

11427
08:02:38,718 --> 08:02:43,119
on the left hand menu you'll see

11428
08:02:40,398 --> 08:02:45,120
firewall i'm going to click on that

11429
08:02:43,119 --> 08:02:48,159
and here you will see all the default

11430
08:02:45,119 --> 08:02:50,159
firewall rules for the default network

11431
08:02:48,159 --> 08:02:52,477
so for us to create some new ones for

11432
08:02:50,159 --> 08:02:55,759
the custom vpc i'm going to go up here

11433
08:02:52,477 --> 08:02:58,239
to the top and click on create firewall

11434
08:02:55,759 --> 08:03:00,637
and so the first rule i want to create

11435
08:02:58,240 --> 08:03:03,680
is for my public instance and i want to

11436
08:03:00,637 --> 08:03:05,520
give it public access as well as ssh

11437
08:03:03,680 --> 08:03:08,718
access and so i'm going to name this

11438
08:03:05,520 --> 08:03:10,957
accordingly as public dash access i'm

11439
08:03:08,718 --> 08:03:13,360
going to give this the same description

11440
08:03:10,957 --> 08:03:15,199
always a good idea to turn on logs but

11441
08:03:13,360 --> 08:03:17,520
for this demonstration i'm going to keep

11442
08:03:15,200 --> 08:03:19,760
them off under network i'm going to

11443
08:03:17,520 --> 08:03:22,718
select the custom network i'm going to

11444
08:03:19,759 --> 08:03:25,199
keep the priority at 1000 the direction

11445
08:03:22,718 --> 08:03:27,760
of traffic will be ingress and the

11446
08:03:25,200 --> 08:03:29,680
action on match will be allow and so

11447
08:03:27,759 --> 08:03:32,159
here is where the target tags come into

11448
08:03:29,680 --> 08:03:34,319
play when it comes to giving access to

11449
08:03:32,159 --> 08:03:36,797
the network so targets we're going to

11450
08:03:34,319 --> 08:03:39,279
keep it as specified target tags

11451
08:03:36,797 --> 08:03:40,797
and under target tags you can simply

11452
08:03:39,279 --> 08:03:42,717
type in public

11453
08:03:40,797 --> 08:03:44,477
under source filter you can keep it

11454
08:03:42,718 --> 08:03:49,119
under ip ranges

11455
08:03:44,477 --> 08:03:51,680
and the source ip range will be 0.0.0.0

11456
08:03:49,119 --> 08:03:54,000
forward slash 0. and we're not going to

11457
08:03:51,680 --> 08:03:56,319
add a second source filter here so

11458
08:03:54,000 --> 08:03:59,360
moving down to protocols and ports under

11459
08:03:56,319 --> 08:04:01,840
tcp i'm going to click that off and add

11460
08:03:59,360 --> 08:04:04,080
in port 22. and because i want to be

11461
08:04:01,840 --> 08:04:06,319
able to ping the instance i'm going to

11462
08:04:04,080 --> 08:04:08,320
have to add another protocol which is

11463
08:04:06,319 --> 08:04:10,558
icmp

11464
08:04:08,319 --> 08:04:12,957
and again as explained earlier the

11465
08:04:10,558 --> 08:04:15,360
disable rule link will bring up the

11466
08:04:12,957 --> 08:04:17,759
enforcement and as you can see it is

11467
08:04:15,360 --> 08:04:20,319
enabled but if you wanted to create any

11468
08:04:17,759 --> 08:04:22,717
firewall rules in future and have them

11469
08:04:20,319 --> 08:04:24,797
disabled you can do that right here but

11470
08:04:22,718 --> 08:04:27,119
we're gonna keep this enabled and we're

11471
08:04:24,797 --> 08:04:29,840
gonna simply click on create and this

11472
08:04:27,119 --> 08:04:32,557
will create the public firewall rule for

11473
08:04:29,840 --> 08:04:34,477
our public instance in our custom vpc

11474
08:04:32,558 --> 08:04:37,360
network and so we're going to now go

11475
08:04:34,477 --> 08:04:39,279
ahead and create the private firewall

11476
08:04:37,360 --> 08:04:41,680
rule and so i'm going to name this

11477
08:04:39,279 --> 08:04:43,439
private dash access

11478
08:04:41,680 --> 08:04:46,000
respectively i'm going to put the

11479
08:04:43,439 --> 08:04:48,319
description as the same under network

11480
08:04:46,000 --> 08:04:51,200
i'm going to select our custom network

11481
08:04:48,319 --> 08:04:53,599
keep the priority at 1000 direction of

11482
08:04:51,200 --> 08:04:55,840
traffic should be at ingress and the

11483
08:04:53,599 --> 08:04:58,000
action on match should be allow for

11484
08:04:55,840 --> 08:05:00,240
target tags you can type in private and

11485
08:04:58,000 --> 08:05:02,637
then hit enter and because i want to be

11486
08:05:00,240 --> 08:05:05,680
able to reach the private instance from

11487
08:05:02,637 --> 08:05:06,840
the public instance the source ip range

11488
08:05:05,680 --> 08:05:08,637
will be

11489
08:05:06,840 --> 08:05:11,279
10.0.0.1

11490
08:05:08,637 --> 08:05:13,520
forward slash 24. we're not going to add

11491
08:05:11,279 --> 08:05:15,680
a second source filter and under

11492
08:05:13,520 --> 08:05:19,439
protocols and ports we're going to

11493
08:05:15,680 --> 08:05:22,398
simply add tcp port 22

11494
08:05:19,439 --> 08:05:24,717
and again i want to add icmp

11495
08:05:22,398 --> 08:05:28,000
so that i'm able to ping the instance

11496
08:05:24,718 --> 08:05:30,319
and i'm going to click on create

11497
08:05:28,000 --> 08:05:34,159
and so we now have our two firewall

11498
08:05:30,319 --> 08:05:36,637
rules private access and public access

11499
08:05:34,159 --> 08:05:39,279
and if i go over to the custom vpc

11500
08:05:36,637 --> 08:05:41,279
network and i drill into it

11501
08:05:39,279 --> 08:05:43,919
i'll be able to see these selective

11502
08:05:41,279 --> 08:05:46,717
firewall rules under the respective

11503
08:05:43,919 --> 08:05:49,439
firewall rules tab and so now that we've

11504
08:05:46,718 --> 08:05:52,240
created our vpc network along with the

11505
08:05:49,439 --> 08:05:54,557
public and private subnet we've created

11506
08:05:52,240 --> 08:05:56,878
the cloud storage bucket with the files

11507
08:05:54,558 --> 08:05:59,440
that we need to access the instances

11508
08:05:56,878 --> 08:06:02,000
that will access those files along with

11509
08:05:59,439 --> 08:06:04,957
the firewall rules that will allow the

11510
08:06:02,000 --> 08:06:07,119
proper communication we can now go ahead

11511
08:06:04,957 --> 08:06:09,199
to test everything that we built and

11512
08:06:07,119 --> 08:06:12,000
make sure that everything is working as

11513
08:06:09,200 --> 08:06:14,558
expected so let's kick things off by

11514
08:06:12,000 --> 08:06:15,919
first logging into the public instance

11515
08:06:14,558 --> 08:06:18,319
so you can head on over to the

11516
08:06:15,919 --> 08:06:20,637
navigation menu and scroll down to

11517
08:06:18,319 --> 08:06:24,000
compute engine

11518
08:06:20,637 --> 08:06:26,957
and you can ssh into the public instance

11519
08:06:24,000 --> 08:06:29,200
by clicking on ssh under connect

11520
08:06:26,957 --> 08:06:31,759
and this should open up a new tab or a

11521
08:06:29,200 --> 08:06:34,798
new window logging you in with your

11522
08:06:31,759 --> 08:06:37,119
currently authenticated credentials okay

11523
08:06:34,797 --> 08:06:39,360
and we are logged into our instance and

11524
08:06:37,119 --> 08:06:41,360
i'm going to zoom in for better viewing

11525
08:06:39,360 --> 08:06:43,840
and so just to make sure that everything

11526
08:06:41,360 --> 08:06:46,558
is working as expected we know that our

11527
08:06:43,840 --> 08:06:49,279
firewall rule is correct because we are

11528
08:06:46,558 --> 08:06:51,840
able to ssh into the instance and now i

11529
08:06:49,279 --> 08:06:54,079
want to see if i have access to my files

11530
08:06:51,840 --> 08:06:57,119
in the bucket and so in order to do that

11531
08:06:54,080 --> 08:07:00,080
i'm going to run the gsutil command ls

11532
08:06:57,119 --> 08:07:02,797
for list and then gs colon forward slash

11533
08:07:00,080 --> 08:07:05,920
forward slash along with my bucket name

11534
08:07:02,797 --> 08:07:05,919
which is bow tie inc

11535
08:07:06,159 --> 08:07:11,439
hyphen file iphone access and i'm going

11536
08:07:09,040 --> 08:07:13,760
to hit enter and as you can see i have

11537
08:07:11,439 --> 08:07:15,840
access to all the files in the bucket

11538
08:07:13,759 --> 08:07:18,239
and the last thing i wanted to check is

11539
08:07:15,840 --> 08:07:20,080
if i can ping the private instance so

11540
08:07:18,240 --> 08:07:21,440
i'm going to first clear my screen and

11541
08:07:20,080 --> 08:07:23,920
i'm going to head on over back to the

11542
08:07:21,439 --> 08:07:26,319
console i'm going to copy the ip address

11543
08:07:23,919 --> 08:07:28,000
of the private instance to my clipboard

11544
08:07:26,319 --> 08:07:30,079
and then i'm going to head back on over

11545
08:07:28,000 --> 08:07:32,718
to my terminal and i'm going to type in

11546
08:07:30,080 --> 08:07:34,240
ping i'm going to paste the ip address

11547
08:07:32,718 --> 08:07:36,878
and success

11548
08:07:34,240 --> 08:07:38,320
i am able to successfully ping the

11549
08:07:36,878 --> 08:07:40,159
private instance

11550
08:07:38,319 --> 08:07:42,957
from the public instance

11551
08:07:40,159 --> 08:07:45,599
using the icmp protocol and you can hit

11552
08:07:42,957 --> 08:07:47,840
control c to stop the ping so now that i

11553
08:07:45,599 --> 08:07:49,680
know that my public instance has the

11554
08:07:47,840 --> 08:07:50,718
proper permissions to reach cloud

11555
08:07:49,680 --> 08:07:53,119
storage

11556
08:07:50,718 --> 08:07:55,680
as well as being able to ping my private

11557
08:07:53,119 --> 08:07:57,119
instance i want to be able to check if i

11558
08:07:55,680 --> 08:07:59,439
can ssh

11559
08:07:57,119 --> 08:08:01,439
into the private instance from my public

11560
08:07:59,439 --> 08:08:04,079
instance and so i'm going to first clear

11561
08:08:01,439 --> 08:08:07,439
my screen and next i'm going to paste in

11562
08:08:04,080 --> 08:08:11,600
this command in order for me to ssh into

11563
08:08:07,439 --> 08:08:14,557
the private instance g cloud compute ssh

11564
08:08:11,599 --> 08:08:17,759
dash dash project and my project name

11565
08:08:14,558 --> 08:08:20,159
which is bow tie inc dash dash zone and

11566
08:08:17,759 --> 08:08:23,119
the zone that my instance is in which is

11567
08:08:20,159 --> 08:08:26,079
us east 4c along with the name of the

11568
08:08:23,119 --> 08:08:28,878
instance which is private dash instance

11569
08:08:26,080 --> 08:08:32,160
and along with the flag dash dash

11570
08:08:28,878 --> 08:08:35,520
internal dash ip stating that i am using

11571
08:08:32,159 --> 08:08:37,840
the internal ip in order to ssh into the

11572
08:08:35,520 --> 08:08:39,760
instance and i'm going to hit enter and

11573
08:08:37,840 --> 08:08:43,200
so now i've been prompted for a

11574
08:08:39,759 --> 08:08:45,919
passphrase in order to secure my rsa key

11575
08:08:43,200 --> 08:08:48,319
pair as one is being generated to log

11576
08:08:45,919 --> 08:08:50,319
into the private instance now it's

11577
08:08:48,319 --> 08:08:53,520
always good practice when it comes to

11578
08:08:50,319 --> 08:08:56,637
security to secure your key pair with a

11579
08:08:53,520 --> 08:08:58,159
passphrase but for this demo i'm just

11580
08:08:56,637 --> 08:09:01,119
going to leave it blank

11581
08:08:58,159 --> 08:09:02,957
and so i'm just going to hit enter

11582
08:09:01,119 --> 08:09:05,520
i'm going to hit enter again

11583
08:09:02,957 --> 08:09:07,759
now i don't want to get too deep into it

11584
08:09:05,520 --> 08:09:09,920
but i did want to give you some context

11585
08:09:07,759 --> 08:09:13,199
on what's happening here so when you log

11586
08:09:09,919 --> 08:09:15,679
into an instance on google cloud with os

11587
08:09:13,200 --> 08:09:17,600
login disabled google manages the

11588
08:09:15,680 --> 08:09:21,040
authorized keys file

11589
08:09:17,599 --> 08:09:23,439
for new user accounts based on ssh keys

11590
08:09:21,040 --> 08:09:25,760
in metadata and so the keys that are

11591
08:09:23,439 --> 08:09:28,000
being generated that are being used for

11592
08:09:25,759 --> 08:09:30,957
the first time are currently being

11593
08:09:28,000 --> 08:09:32,558
stored within the instance metadata so

11594
08:09:30,957 --> 08:09:34,397
now that i'm logged into my private

11595
08:09:32,558 --> 08:09:37,120
instance i'm going to quickly clear my

11596
08:09:34,398 --> 08:09:38,798
screen and just as a note you'll be able

11597
08:09:37,119 --> 08:09:41,039
to know whether or not you're logged

11598
08:09:38,797 --> 08:09:43,439
into your private instance by looking

11599
08:09:41,040 --> 08:09:45,440
here at your prompt and so now i want to

11600
08:09:43,439 --> 08:09:47,359
make sure that i can ping my public

11601
08:09:45,439 --> 08:09:49,439
instance so i'm going to quickly type

11602
08:09:47,360 --> 08:09:51,200
the ping command i'm going to head on

11603
08:09:49,439 --> 08:09:53,359
over to the console i'm going to grab

11604
08:09:51,200 --> 08:09:55,119
the ip address of the public instance

11605
08:09:53,360 --> 08:09:58,000
i'm going to go back to my terminal and

11606
08:09:55,119 --> 08:10:00,477
paste it in and as expected i'm able to

11607
08:09:58,000 --> 08:10:02,319
ping my public instance from my private

11608
08:10:00,477 --> 08:10:04,637
instance i'm just going to go ahead and

11609
08:10:02,319 --> 08:10:06,878
hit control c to stop and i'm going to

11610
08:10:04,637 --> 08:10:10,079
clear the screen so now we'd like to

11611
08:10:06,878 --> 08:10:12,398
verify whether or not we have access to

11612
08:10:10,080 --> 08:10:14,160
the files in the cloud storage bucket

11613
08:10:12,398 --> 08:10:15,600
that we created earlier

11614
08:10:14,159 --> 08:10:16,398
and so now i'm going to use the same

11615
08:10:15,599 --> 08:10:19,039
command

11616
08:10:16,398 --> 08:10:21,440
that i used in the public instance to

11617
08:10:19,040 --> 08:10:23,600
list all the files in the cloud storage

11618
08:10:21,439 --> 08:10:27,919
bucket so i'm going to use the gsutil

11619
08:10:23,599 --> 08:10:30,079
command ls for list along with gs colon

11620
08:10:27,919 --> 08:10:32,877
forward slash forward slash and the

11621
08:10:30,080 --> 08:10:35,520
bucket name which is bow tie ink hyphen

11622
08:10:32,878 --> 08:10:37,440
file if an access and i'm going to hit

11623
08:10:35,520 --> 08:10:39,680
enter

11624
08:10:37,439 --> 08:10:42,397
and as you can see here i'm not getting

11625
08:10:39,680 --> 08:10:44,319
a response and the command is hanging

11626
08:10:42,398 --> 08:10:47,360
and this is due to the fact that

11627
08:10:44,319 --> 08:10:49,840
external access is needed in order to

11628
08:10:47,360 --> 08:10:53,200
reach cloud storage and this instance

11629
08:10:49,840 --> 08:10:55,520
only has an internal or private ip so

11630
08:10:53,200 --> 08:10:58,080
accessing the files in the cloud storage

11631
08:10:55,520 --> 08:11:00,558
bucket is not possible now in order to

11632
08:10:58,080 --> 08:11:03,600
access cloud storage and the set of

11633
08:11:00,558 --> 08:11:06,398
external ip addresses used by google

11634
08:11:03,599 --> 08:11:08,797
apis and services we can do this by

11635
08:11:06,398 --> 08:11:12,000
enabling private google access on the

11636
08:11:08,797 --> 08:11:13,759
subnet used by the vms network interface

11637
08:11:12,000 --> 08:11:15,360
and so we're going to go ahead and do

11638
08:11:13,759 --> 08:11:17,519
that right now so i'm going to hit

11639
08:11:15,360 --> 08:11:19,440
control c to stop and i'm going to go

11640
08:11:17,520 --> 08:11:21,439
back into the console i'm going to go to

11641
08:11:19,439 --> 08:11:24,319
the navigation menu and i'm going to

11642
08:11:21,439 --> 08:11:25,840
scroll down to vpc network

11643
08:11:24,319 --> 08:11:28,239
and then i'm going to drill down into

11644
08:11:25,840 --> 08:11:30,878
the private subnet and i'm going to edit

11645
08:11:28,240 --> 08:11:32,718
it under private google access i'm going

11646
08:11:30,878 --> 08:11:34,878
to turn it on and i'm going to go down

11647
08:11:32,718 --> 08:11:37,440
to the bottom and click on save and by

11648
08:11:34,878 --> 08:11:39,920
giving this subnet private google access

11649
08:11:37,439 --> 08:11:42,957
i will allow the private instance and

11650
08:11:39,919 --> 08:11:45,679
any instances with private ip addresses

11651
08:11:42,957 --> 08:11:48,319
to access any public apis

11652
08:11:45,680 --> 08:11:50,558
such as cloud storage so now when i go

11653
08:11:48,319 --> 08:11:52,957
back to my instance i'm going to clear

11654
08:11:50,558 --> 08:11:56,000
the screen here and i'm going to run the

11655
08:11:52,957 --> 08:11:57,520
gsutil command again

11656
08:11:56,000 --> 08:12:00,240
and success

11657
08:11:57,520 --> 08:12:03,360
we are now able to access cloud storage

11658
08:12:00,240 --> 08:12:05,840
due to enabling private google access on

11659
08:12:03,360 --> 08:12:08,080
the respective private subnet

11660
08:12:05,840 --> 08:12:10,637
so i first wanted to congratulate you on

11661
08:12:08,080 --> 08:12:12,398
making it to the end of this demo

11662
08:12:10,637 --> 08:12:15,200
and hope that this demo has been

11663
08:12:12,398 --> 08:12:17,600
extremely useful as this is a real life

11664
08:12:15,200 --> 08:12:20,477
scenario that can come up and so just as

11665
08:12:17,599 --> 08:12:22,957
a recap you've created a custom network

11666
08:12:20,477 --> 08:12:25,279
with two custom subnets you've created a

11667
08:12:22,957 --> 08:12:27,599
cloud storage bucket and uploaded some

11668
08:12:25,279 --> 08:12:30,319
files to it you've created a public

11669
08:12:27,599 --> 08:12:32,957
instance and a private instance and then

11670
08:12:30,319 --> 08:12:35,599
created some firewall rules to route the

11671
08:12:32,957 --> 08:12:38,159
traffic you then tested it all by using

11672
08:12:35,599 --> 08:12:40,637
the command line for communication you

11673
08:12:38,159 --> 08:12:43,919
also enable private google access for

11674
08:12:40,637 --> 08:12:47,360
the instance with only the internal ip

11675
08:12:43,919 --> 08:12:50,000
to access google's public apis so that

11676
08:12:47,360 --> 08:12:52,797
it can access cloud storage and so again

11677
08:12:50,000 --> 08:12:54,637
fantastic job on your part as this was a

11678
08:12:52,797 --> 08:12:56,319
pretty complex demo

11679
08:12:54,637 --> 08:12:58,878
and you can expect things like what

11680
08:12:56,319 --> 08:13:00,718
you've experienced in this demo to pop

11681
08:12:58,878 --> 08:13:04,159
up in your role of being a cloud

11682
08:13:00,718 --> 08:13:06,398
engineer at any time so before you go be

11683
08:13:04,159 --> 08:13:07,439
sure to delete all the resources you've

11684
08:13:06,398 --> 08:13:10,159
created

11685
08:13:07,439 --> 08:13:12,397
and again congrats on the great job so

11686
08:13:10,159 --> 08:13:16,360
you can now mark this as complete and

11687
08:13:12,398 --> 08:13:16,360
i'll see you in the next one

11688
08:13:18,000 --> 08:13:23,840
welcome back in this lesson i will be

11689
08:13:20,878 --> 08:13:26,240
going over vpc network peering and how

11690
08:13:23,840 --> 08:13:29,119
you can privately communicate across

11691
08:13:26,240 --> 08:13:32,718
vpcs in the same or different

11692
08:13:29,119 --> 08:13:35,360
organization vpc network peering and vpc

11693
08:13:32,718 --> 08:13:37,680
peering are used interchangeably in this

11694
08:13:35,360 --> 08:13:40,398
lesson as they are used to communicate

11695
08:13:37,680 --> 08:13:43,439
the same thing now for instances in one

11696
08:13:40,398 --> 08:13:46,478
vpc to communicate with an instance in

11697
08:13:43,439 --> 08:13:48,877
another vpc they would route traffic via

11698
08:13:46,477 --> 08:13:52,319
the public internet however to

11699
08:13:48,878 --> 08:13:55,520
communicate privately between two vpcs

11700
08:13:52,319 --> 08:13:57,439
google cloud offers a service called vpc

11701
08:13:55,520 --> 08:14:00,797
peering and i will be going through the

11702
08:13:57,439 --> 08:14:02,717
theory and concepts of vpc peering

11703
08:14:00,797 --> 08:14:05,199
throughout this lesson so with that

11704
08:14:02,718 --> 08:14:08,398
being said let's dive in

11705
08:14:05,200 --> 08:14:09,440
now vpc peering enables you to peer vpc

11706
08:14:08,398 --> 08:14:11,920
networks

11707
08:14:09,439 --> 08:14:14,557
so that workloads in different vpc

11708
08:14:11,919 --> 08:14:17,519
networks can communicate in a private

11709
08:14:14,558 --> 08:14:20,878
space that follows the rfc

11710
08:14:17,520 --> 08:14:24,398
1918 standard thus allowing private

11711
08:14:20,878 --> 08:14:26,718
connectivity across two vpc networks

11712
08:14:24,398 --> 08:14:29,280
traffic stays within google's network

11713
08:14:26,718 --> 08:14:32,477
and never traverses the public internet

11714
08:14:29,279 --> 08:14:35,680
vpc peering gives you the flexibility of

11715
08:14:32,477 --> 08:14:38,239
peering networks that are of the same or

11716
08:14:35,680 --> 08:14:40,878
different projects along with being able

11717
08:14:38,240 --> 08:14:44,478
to peer with other networks in different

11718
08:14:40,878 --> 08:14:47,520
organizations vpc peering also gives you

11719
08:14:44,477 --> 08:14:50,878
several advantages over using external

11720
08:14:47,520 --> 08:14:54,080
ip addresses or vpns to connect the

11721
08:14:50,878 --> 08:14:56,319
first one is reducing network latency as

11722
08:14:54,080 --> 08:14:59,360
all peering traffic stays within

11723
08:14:56,319 --> 08:15:02,159
google's high-speed network vpc peering

11724
08:14:59,360 --> 08:15:04,558
also offers greater network security as

11725
08:15:02,159 --> 08:15:06,637
you don't need to have services exposed

11726
08:15:04,558 --> 08:15:09,040
to the public internet and deal with

11727
08:15:06,637 --> 08:15:11,200
greater risks of having your traffic

11728
08:15:09,040 --> 08:15:13,440
getting compromised or if you're trying

11729
08:15:11,200 --> 08:15:16,718
to achieve compliance standards for your

11730
08:15:13,439 --> 08:15:19,119
organization vpc peering will allow you

11731
08:15:16,718 --> 08:15:22,000
to achieve the standards that you need

11732
08:15:19,119 --> 08:15:24,477
and finally vpc network peering reduces

11733
08:15:22,000 --> 08:15:27,759
network costs as you save on egress

11734
08:15:24,477 --> 08:15:30,317
costs for traffic leaving gcp so in a

11735
08:15:27,759 --> 08:15:33,519
regular network google charges you for

11736
08:15:30,317 --> 08:15:35,919
traffic communicating using public ips

11737
08:15:33,520 --> 08:15:38,797
even if the traffic is within the same

11738
08:15:35,919 --> 08:15:41,359
zone now you can bypass this and save

11739
08:15:38,797 --> 08:15:43,680
money by using internal ips to

11740
08:15:41,360 --> 08:15:46,000
communicate and keeping the traffic

11741
08:15:43,680 --> 08:15:47,920
within the gcp network

11742
08:15:46,000 --> 08:15:51,279
now there are certain properties or

11743
08:15:47,919 --> 08:15:53,279
characteristics that peered vpcs follow

11744
08:15:51,279 --> 08:15:56,477
and i wanted to point these out for

11745
08:15:53,279 --> 08:15:58,797
better understanding first off peer vpc

11746
08:15:56,477 --> 08:16:01,439
networks remain administratively

11747
08:15:58,797 --> 08:16:05,360
separate so what exactly does this mean

11748
08:16:01,439 --> 08:16:07,840
well it means that routes firewalls vpns

11749
08:16:05,360 --> 08:16:10,718
and other traffic management tools are

11750
08:16:07,840 --> 08:16:13,920
administered and applied separately in

11751
08:16:10,718 --> 08:16:17,200
each of the vpc networks so this applies

11752
08:16:13,919 --> 08:16:19,279
to each vpc independently which also

11753
08:16:17,200 --> 08:16:20,477
means that each side of a peering

11754
08:16:19,279 --> 08:16:23,039
association

11755
08:16:20,477 --> 08:16:26,159
is set up independently as well so when

11756
08:16:23,040 --> 08:16:28,718
you connect one vpc to the other you

11757
08:16:26,159 --> 08:16:30,957
have to go into each vpc that you are

11758
08:16:28,718 --> 08:16:33,200
connecting to both initiate and

11759
08:16:30,957 --> 08:16:35,680
establish the connection peering becomes

11760
08:16:33,200 --> 08:16:38,878
active only when the configuration from

11761
08:16:35,680 --> 08:16:41,439
both sides match this also means that

11762
08:16:38,878 --> 08:16:44,718
each vpc can delete the peering

11763
08:16:41,439 --> 08:16:47,840
association at any given time now during

11764
08:16:44,718 --> 08:16:50,317
vpc peering the vpc peers always

11765
08:16:47,840 --> 08:16:53,200
exchange all subnet routes you also have

11766
08:16:50,317 --> 08:16:55,840
the option of exchanging custom routes

11767
08:16:53,200 --> 08:16:58,637
subnet and static routes are global and

11768
08:16:55,840 --> 08:17:01,360
dynamic routes can be regional or global

11769
08:16:58,637 --> 08:17:04,000
a given vpc network can peer with

11770
08:17:01,360 --> 08:17:06,000
multiple vpc networks but there is a

11771
08:17:04,000 --> 08:17:08,240
limit that you can reach in which you

11772
08:17:06,000 --> 08:17:10,637
would have to reach out to google and

11773
08:17:08,240 --> 08:17:12,958
ask the limit to be increased now when

11774
08:17:10,637 --> 08:17:15,119
peering with vpc networks there are

11775
08:17:12,957 --> 08:17:18,000
certain restrictions in place that you

11776
08:17:15,119 --> 08:17:21,119
should be aware of first off a subnet

11777
08:17:18,000 --> 08:17:23,919
cider range in one peered vpc network

11778
08:17:21,119 --> 08:17:26,957
cannot overlap with a static route in

11779
08:17:23,919 --> 08:17:30,079
another peered network this rule covers

11780
08:17:26,957 --> 08:17:33,439
both subnet routes and static routes so

11781
08:17:30,080 --> 08:17:36,080
when a vpc subnet is created or a subnet

11782
08:17:33,439 --> 08:17:38,317
ip range is expanded google cloud

11783
08:17:36,080 --> 08:17:41,200
performs a check to make sure that the

11784
08:17:38,317 --> 08:17:44,477
new subnet range does not overlap with

11785
08:17:41,200 --> 08:17:47,600
ip ranges of subnets in the same vpc

11786
08:17:44,477 --> 08:17:50,558
network or in directly peered vpc

11787
08:17:47,599 --> 08:17:53,199
networks if it does the creation or

11788
08:17:50,558 --> 08:17:56,000
expansion will fail google cloud also

11789
08:17:53,200 --> 08:17:57,040
ensures that no overlapping subnet ip

11790
08:17:56,000 --> 08:18:00,317
ranges

11791
08:17:57,040 --> 08:18:02,958
are allowed across vpc networks that

11792
08:18:00,317 --> 08:18:05,360
have appeared network in common and

11793
08:18:02,957 --> 08:18:07,840
again if it does the creation or

11794
08:18:05,360 --> 08:18:10,718
expansion will fail now speaking of

11795
08:18:07,840 --> 08:18:12,797
routing when you create a new subnet in

11796
08:18:10,718 --> 08:18:15,600
appeared vpc network

11797
08:18:12,797 --> 08:18:18,397
vpc network peering doesn't provide

11798
08:18:15,599 --> 08:18:20,957
granular route controls to filter out

11799
08:18:18,398 --> 08:18:23,680
which subnet cider ranges are reachable

11800
08:18:20,957 --> 08:18:26,397
across pure networks these are handled

11801
08:18:23,680 --> 08:18:29,200
by firewall rules so to allow ingress

11802
08:18:26,398 --> 08:18:31,920
traffic from vm instances in a peer

11803
08:18:29,200 --> 08:18:34,878
network you must create ingress allow

11804
08:18:31,919 --> 08:18:38,079
firewall rules by default ingress

11805
08:18:34,878 --> 08:18:40,637
traffic to vms is blocked by the implied

11806
08:18:38,080 --> 08:18:43,120
deny ingress rule another key point to

11807
08:18:40,637 --> 08:18:45,599
note is that transitive peering is not

11808
08:18:43,119 --> 08:18:48,397
supported and only directly peered

11809
08:18:45,599 --> 08:18:51,199
networks can communicate so they have to

11810
08:18:48,398 --> 08:18:54,240
be peered directly in this diagram

11811
08:18:51,200 --> 08:18:57,040
network a is peered with network b and

11812
08:18:54,240 --> 08:18:58,718
network b is peered with network c and

11813
08:18:57,040 --> 08:19:02,317
so if one instance is trying to

11814
08:18:58,718 --> 08:19:05,200
communicate from network a to network c

11815
08:19:02,317 --> 08:19:07,599
this cannot be done unless network a is

11816
08:19:05,200 --> 08:19:10,159
directly peered with network c an

11817
08:19:07,599 --> 08:19:12,877
extremely important point to note for

11818
08:19:10,159 --> 08:19:15,520
vpc peering another thing to note is

11819
08:19:12,878 --> 08:19:18,159
that you cannot use a tag or service

11820
08:19:15,520 --> 08:19:20,637
account from one peered network in the

11821
08:19:18,159 --> 08:19:22,878
other peered network they must each have

11822
08:19:20,637 --> 08:19:25,840
their own as again they are each

11823
08:19:22,878 --> 08:19:27,440
independently operated as stated earlier

11824
08:19:25,840 --> 08:19:30,317
and so the last thing that i wanted to

11825
08:19:27,439 --> 08:19:33,680
cover is that internal dns is not

11826
08:19:30,317 --> 08:19:36,317
accessible for compute engine in peered

11827
08:19:33,680 --> 08:19:38,878
networks as they must use an ip to

11828
08:19:36,317 --> 08:19:41,439
communicate and so that about covers

11829
08:19:38,878 --> 08:19:44,317
this short yet important lesson on the

11830
08:19:41,439 --> 08:19:46,317
theory and concepts of vpc peering and

11831
08:19:44,317 --> 08:19:48,317
so now that we've covered all the theory

11832
08:19:46,317 --> 08:19:50,957
i'm going to be taking these concepts

11833
08:19:48,317 --> 08:19:53,279
into a demo where we will be pairing two

11834
08:19:50,957 --> 08:19:55,439
networks together and verifying the

11835
08:19:53,279 --> 08:19:57,599
communication between them and so you

11836
08:19:55,439 --> 08:19:59,279
can now mark this lesson as complete and

11837
08:19:57,599 --> 08:20:02,279
whenever you're ready join me in the

11838
08:19:59,279 --> 08:20:02,279
console

11839
08:20:04,080 --> 08:20:07,360
welcome back in this hands-on

11840
08:20:06,000 --> 08:20:09,040
demonstration

11841
08:20:07,360 --> 08:20:11,520
we're going to go through the steps to

11842
08:20:09,040 --> 08:20:12,798
create a peering connection from two

11843
08:20:11,520 --> 08:20:15,760
vpcs

11844
08:20:12,797 --> 08:20:17,840
in two separate projects as shown here

11845
08:20:15,759 --> 08:20:19,840
in the diagram and then to verify that

11846
08:20:17,840 --> 08:20:23,200
the connection works we're going to

11847
08:20:19,840 --> 08:20:25,840
create two instances one in each network

11848
08:20:23,200 --> 08:20:28,958
and ping one instance from the other

11849
08:20:25,840 --> 08:20:31,759
instance this demo is very similar to

11850
08:20:28,957 --> 08:20:34,159
the custom vpc demo that you had done

11851
08:20:31,759 --> 08:20:37,119
earlier but we are adding in another

11852
08:20:34,159 --> 08:20:39,040
layer of complexity by adding in vpc

11853
08:20:37,119 --> 08:20:41,119
network peering and so there's quite a

11854
08:20:39,040 --> 08:20:42,398
bit to do here so let's go ahead and

11855
08:20:41,119 --> 08:20:44,957
just dive in

11856
08:20:42,398 --> 08:20:46,878
okay so here we are back in the console

11857
08:20:44,957 --> 08:20:49,840
as you can see up in the top right hand

11858
08:20:46,878 --> 08:20:53,360
corner i am logged in as tony bowties

11859
08:20:49,840 --> 08:20:56,637
gmail.com and for this specific demo i

11860
08:20:53,360 --> 08:20:59,760
will be using two projects both project

11861
08:20:56,637 --> 08:21:02,159
tony and project bowtie inc and if you

11862
08:20:59,759 --> 08:21:04,079
currently do not have two projects you

11863
08:21:02,159 --> 08:21:06,797
can go ahead and create yourself a new

11864
08:21:04,080 --> 08:21:09,040
project or the two projects if you have

11865
08:21:06,797 --> 08:21:11,199
none and so i'm going to continue here

11866
08:21:09,040 --> 08:21:13,920
with project tony and the first thing i

11867
08:21:11,200 --> 08:21:16,080
want to do is create the two networks in

11868
08:21:13,919 --> 08:21:17,759
the two separate projects so i'm going

11869
08:21:16,080 --> 08:21:19,840
to go up to the navigation menu in the

11870
08:21:17,759 --> 08:21:22,717
top left hand corner and i'm going to

11871
08:21:19,840 --> 08:21:24,957
scroll down to vpc network

11872
08:21:22,718 --> 08:21:27,440
here i'm going to create my first vpc

11873
08:21:24,957 --> 08:21:29,119
network and i'm going to name this

11874
08:21:27,439 --> 08:21:31,039
bowtie ink

11875
08:21:29,119 --> 08:21:32,159
dash a i'm going to give it the same

11876
08:21:31,040 --> 08:21:33,760
description

11877
08:21:32,159 --> 08:21:35,599
and then under subnets i'm going to

11878
08:21:33,759 --> 08:21:38,159
leave the subnet creation mode under

11879
08:21:35,599 --> 08:21:40,477
custom under the subnet name you can

11880
08:21:38,159 --> 08:21:43,840
call this subnet dash a

11881
08:21:40,477 --> 08:21:46,000
i'm going to use the us east one region

11882
08:21:43,840 --> 08:21:50,317
and for the ip address range i'm going

11883
08:21:46,000 --> 08:21:51,599
to use 10.0 that's 0.0 forward slash 20.

11884
08:21:50,317 --> 08:21:53,919
and i'm going to leave all the other

11885
08:21:51,599 --> 08:21:56,557
options as default and i'm going to go

11886
08:21:53,919 --> 08:21:58,797
down to the bottom and click on create

11887
08:21:56,558 --> 08:22:00,798
now as this network is being created i'm

11888
08:21:58,797 --> 08:22:03,199
going to go over to the project bowtie

11889
08:22:00,797 --> 08:22:05,520
inc and i'm going to create the vpc

11890
08:22:03,200 --> 08:22:07,920
network there so under name i'm going to

11891
08:22:05,520 --> 08:22:10,317
call this bowtie inc

11892
08:22:07,919 --> 08:22:12,717
b and under description i'm going to use

11893
08:22:10,317 --> 08:22:15,439
the same under subnets i'm going to keep

11894
08:22:12,718 --> 08:22:18,000
subnet creation mode as custom and under

11895
08:22:15,439 --> 08:22:22,717
new subnet i'm going to call this subnet

11896
08:22:18,000 --> 08:22:24,637
subnet b the region will be used 4

11897
08:22:22,718 --> 08:22:27,360
and the ip address range will be

11898
08:22:24,637 --> 08:22:29,439
10.4.0.0

11899
08:22:27,360 --> 08:22:31,920
forward slash 20. you can leave all the

11900
08:22:29,439 --> 08:22:34,637
other options as default and scroll down

11901
08:22:31,919 --> 08:22:36,637
to the bottom and click on create as

11902
08:22:34,637 --> 08:22:38,957
this network is being created i'm going

11903
08:22:36,637 --> 08:22:41,919
to go back to project tony and i'm going

11904
08:22:38,957 --> 08:22:44,397
to create the firewall rule for bow tie

11905
08:22:41,919 --> 08:22:46,637
ink dash a

11906
08:22:44,398 --> 08:22:48,398
in this firewall rule as explained in

11907
08:22:46,637 --> 08:22:51,039
the last lesson we'll allow

11908
08:22:48,398 --> 08:22:52,558
communication from one instance to the

11909
08:22:51,040 --> 08:22:54,398
other and so i'm going to click on

11910
08:22:52,558 --> 08:22:56,798
create firewall

11911
08:22:54,398 --> 08:22:57,920
and under name i'm going to call this

11912
08:22:56,797 --> 08:23:00,957
project

11913
08:22:57,919 --> 08:23:02,557
tony dash a under description i'm going

11914
08:23:00,957 --> 08:23:04,317
to use the same

11915
08:23:02,558 --> 08:23:06,638
under the network i'm going to choose

11916
08:23:04,317 --> 08:23:09,360
the source network which will be bowtie

11917
08:23:06,637 --> 08:23:12,317
inc dash a priority i'm going to keep at

11918
08:23:09,360 --> 08:23:14,477
1000 direction of traffic should be

11919
08:23:12,317 --> 08:23:17,520
ingress and action on match should be

11920
08:23:14,477 --> 08:23:20,079
allow under targets i'm going to select

11921
08:23:17,520 --> 08:23:22,317
all instances in the network and under

11922
08:23:20,080 --> 08:23:25,040
source filter i'm going to keep ip

11923
08:23:22,317 --> 08:23:27,360
ranges selected and the source ip range

11924
08:23:25,040 --> 08:23:30,317
specifically for this demo is going to

11925
08:23:27,360 --> 08:23:32,637
be 0.0.0.0

11926
08:23:30,317 --> 08:23:34,878
forward slash 0. and again this is

11927
08:23:32,637 --> 08:23:36,397
specifically used for this demo and

11928
08:23:34,878 --> 08:23:38,317
should never be used in a

11929
08:23:36,398 --> 08:23:40,398
production-like environment in

11930
08:23:38,317 --> 08:23:42,159
production you should only use the

11931
08:23:40,398 --> 08:23:44,558
source ip ranges that you are

11932
08:23:42,159 --> 08:23:46,878
communicating with and under protocols

11933
08:23:44,558 --> 08:23:49,200
and ports because i need to log into the

11934
08:23:46,878 --> 08:23:51,360
instance to be able to ping the other

11935
08:23:49,200 --> 08:23:55,200
instance i'm going to have to open up

11936
08:23:51,360 --> 08:23:58,159
tcp on port 22. under other protocols

11937
08:23:55,200 --> 08:24:00,159
you can add icmp and this will allow the

11938
08:23:58,159 --> 08:24:02,477
ping command to be used i'm going to

11939
08:24:00,159 --> 08:24:04,718
leave all the other options as default

11940
08:24:02,477 --> 08:24:07,040
and i'm going to click on create and now

11941
08:24:04,718 --> 08:24:09,600
that this firewall rule has been created

11942
08:24:07,040 --> 08:24:11,920
i need to go back over to project bowtie

11943
08:24:09,599 --> 08:24:13,599
inc and create the firewall rule there

11944
08:24:11,919 --> 08:24:15,599
as well

11945
08:24:13,599 --> 08:24:18,079
i'm going to call this firewall rule

11946
08:24:15,599 --> 08:24:20,717
bowtie inc dash b i'm going to give it

11947
08:24:18,080 --> 08:24:23,200
the same description under network i'm

11948
08:24:20,718 --> 08:24:25,760
going to select bow tie ink dash b i'm

11949
08:24:23,200 --> 08:24:27,520
going to keep the priority as 1000 and

11950
08:24:25,759 --> 08:24:29,840
the direction of traffic should be

11951
08:24:27,520 --> 08:24:32,637
ingress as well the action on match

11952
08:24:29,840 --> 08:24:34,637
should be allow scrolling down under

11953
08:24:32,637 --> 08:24:37,119
targets i'm going to select all

11954
08:24:34,637 --> 08:24:39,039
instances in the network and again under

11955
08:24:37,119 --> 08:24:41,599
source filter i'm going to keep ip

11956
08:24:39,040 --> 08:24:44,760
ranges selected and under source ip

11957
08:24:41,599 --> 08:24:47,759
ranges i'm going to enter in

11958
08:24:44,759 --> 08:24:49,919
0.0.0.0 forward slash 0. and under

11959
08:24:47,759 --> 08:24:53,359
protocols and ports i'm going to select

11960
08:24:49,919 --> 08:24:56,557
tcp with port 22 as well under other

11961
08:24:53,360 --> 08:24:57,680
protocols i'm going to type in icmp i'm

11962
08:24:56,558 --> 08:25:00,240
going to leave everything else as

11963
08:24:57,680 --> 08:25:02,558
default and i'm going to click on create

11964
08:25:00,240 --> 08:25:05,040
now once you've created both networks

11965
08:25:02,558 --> 08:25:07,600
and have created both firewall rules you

11966
08:25:05,040 --> 08:25:09,840
can now start creating the instances so

11967
08:25:07,599 --> 08:25:11,680
because i'm already in project bowtie

11968
08:25:09,840 --> 08:25:13,840
inc i'm going to go to the left-hand

11969
08:25:11,680 --> 08:25:16,159
navigation menu and i'm going to scroll

11970
08:25:13,840 --> 08:25:18,159
down to compute engine and create my

11971
08:25:16,159 --> 08:25:19,439
instance so i'm just going to click on

11972
08:25:18,159 --> 08:25:21,680
create

11973
08:25:19,439 --> 08:25:23,919
and to keep with the naming convention

11974
08:25:21,680 --> 08:25:25,920
i'm going to call this instance instance

11975
08:25:23,919 --> 08:25:28,957
b i'm not going to add any labels for

11976
08:25:25,919 --> 08:25:31,599
now under region i'm going to choose us

11977
08:25:28,957 --> 08:25:34,079
east 4 and you can leave the zone as the

11978
08:25:31,599 --> 08:25:36,557
default selection and under machine type

11979
08:25:34,080 --> 08:25:38,558
i'm going to select e2 micro and i'm

11980
08:25:36,558 --> 08:25:40,080
going to scroll down to the bottom and

11981
08:25:38,558 --> 08:25:42,398
i'm going to click on management

11982
08:25:40,080 --> 08:25:44,878
security disks networking and sold

11983
08:25:42,398 --> 08:25:47,520
tenancy so that i'm able to go into the

11984
08:25:44,878 --> 08:25:49,600
networking tab to change the network on

11985
08:25:47,520 --> 08:25:51,119
the default network interface so i'm

11986
08:25:49,599 --> 08:25:53,519
going to click on the default network

11987
08:25:51,119 --> 08:25:56,637
interface and under network i'm going to

11988
08:25:53,520 --> 08:25:58,637
select bowtie inc b and the subnet has

11989
08:25:56,637 --> 08:26:00,957
already been selected for me and then

11990
08:25:58,637 --> 08:26:02,317
i'm going to scroll down click on done

11991
08:26:00,957 --> 08:26:05,759
and i'm going to leave all the other

11992
08:26:02,317 --> 08:26:07,919
options as default and click on create

11993
08:26:05,759 --> 08:26:10,317
and so as this is creating i'm going to

11994
08:26:07,919 --> 08:26:12,079
go over to project tony

11995
08:26:10,317 --> 08:26:14,317
and i'm going to create my instance

11996
08:26:12,080 --> 08:26:16,558
there

11997
08:26:14,317 --> 08:26:18,957
and i'm going to name this instance

11998
08:26:16,558 --> 08:26:21,520
instance a under region i am going to

11999
08:26:18,957 --> 08:26:23,759
select us east1 you can leave the zone

12000
08:26:21,520 --> 08:26:26,718
as the default selected under machine

12001
08:26:23,759 --> 08:26:28,717
type i'm going to select e2 micro and

12002
08:26:26,718 --> 08:26:30,718
scrolling down here to the bottom i'm

12003
08:26:28,718 --> 08:26:33,040
going to go into the networking tab

12004
08:26:30,718 --> 08:26:35,840
under management security disks

12005
08:26:33,040 --> 08:26:37,600
networking and soul

12006
08:26:35,840 --> 08:26:40,000
and here i'm going to edit the network

12007
08:26:37,599 --> 08:26:42,877
interface and change it from the default

12008
08:26:40,000 --> 08:26:44,398
network to bow tie ink dash a and as you

12009
08:26:42,878 --> 08:26:46,878
can see the subnet has been

12010
08:26:44,398 --> 08:26:49,440
automatically selected for me

12011
08:26:46,878 --> 08:26:51,119
so now i can just simply click on done

12012
08:26:49,439 --> 08:26:53,039
i'm going to leave all the other options

12013
08:26:51,119 --> 08:26:54,957
as default and i'm going to click on

12014
08:26:53,040 --> 08:26:57,680
create

12015
08:26:54,957 --> 08:26:59,759
so just as a recap we've created two

12016
08:26:57,680 --> 08:27:02,398
separate networks in two separate

12017
08:26:59,759 --> 08:27:05,519
projects along with its corresponding

12018
08:27:02,398 --> 08:27:07,920
subnets and the firewall rules along

12019
08:27:05,520 --> 08:27:10,159
with creating an instance in each

12020
08:27:07,919 --> 08:27:12,717
network and so now that we have both

12021
08:27:10,159 --> 08:27:15,360
environments set up it's now time to

12022
08:27:12,718 --> 08:27:17,440
create the vbc peering connection and so

12023
08:27:15,360 --> 08:27:19,440
because i'm in project tony i'm going to

12024
08:27:17,439 --> 08:27:21,520
start off with this project and i'm

12025
08:27:19,439 --> 08:27:24,637
going to go up to the navigation menu

12026
08:27:21,520 --> 08:27:27,279
and scroll down to vpc network and under

12027
08:27:24,637 --> 08:27:29,680
vpc network on the left hand menu you're

12028
08:27:27,279 --> 08:27:31,759
going to click on vpc network peering

12029
08:27:29,680 --> 08:27:34,317
and through the interface shown here

12030
08:27:31,759 --> 08:27:36,000
we'll be able to create our vpc network

12031
08:27:34,317 --> 08:27:38,398
peering so now you're going to click on

12032
08:27:36,000 --> 08:27:40,797
create connection and i'm prompted with

12033
08:27:38,398 --> 08:27:43,840
some information that i will need and

12034
08:27:40,797 --> 08:27:46,000
because we are connecting to another vpc

12035
08:27:43,840 --> 08:27:48,558
in another project you're going to need

12036
08:27:46,000 --> 08:27:50,957
the project id as well as the name of

12037
08:27:48,558 --> 08:27:52,878
the vpc network you want to peer with

12038
08:27:50,957 --> 08:27:55,680
and just as explained in the earlier

12039
08:27:52,878 --> 08:27:58,637
lesson the subnet ip ranges in both

12040
08:27:55,680 --> 08:28:01,680
networks cannot overlap so please make

12041
08:27:58,637 --> 08:28:03,439
sure that if you are using ip ranges

12042
08:28:01,680 --> 08:28:05,920
outside of the ones that are given for

12043
08:28:03,439 --> 08:28:08,557
this demonstration the ip ranges that

12044
08:28:05,919 --> 08:28:11,039
you are using do not overlap so once you

12045
08:28:08,558 --> 08:28:12,317
have that information you can then click

12046
08:28:11,040 --> 08:28:14,080
continue

12047
08:28:12,317 --> 08:28:16,000
and so here you will be prompted with

12048
08:28:14,080 --> 08:28:17,680
some fields to fill out with the

12049
08:28:16,000 --> 08:28:20,000
information that you were asked to

12050
08:28:17,680 --> 08:28:22,080
collect in the previous screen and so

12051
08:28:20,000 --> 08:28:23,840
since we have that information already

12052
08:28:22,080 --> 08:28:25,760
we can go ahead and start filling in the

12053
08:28:23,840 --> 08:28:27,599
fields so i'm going to call this peering

12054
08:28:25,759 --> 08:28:30,317
connection peering

12055
08:28:27,599 --> 08:28:33,119
a b and under vpc network i'm going to

12056
08:28:30,317 --> 08:28:35,759
select bow tie ink dash a under peered

12057
08:28:33,119 --> 08:28:38,637
vpc network we're going to select the

12058
08:28:35,759 --> 08:28:41,919
other project which should be bowtie inc

12059
08:28:38,637 --> 08:28:44,718
and the vpc network name will be bow tie

12060
08:28:41,919 --> 08:28:46,957
inc dash b and i'm going to leave all

12061
08:28:44,718 --> 08:28:49,280
the other options as default and so

12062
08:28:46,957 --> 08:28:52,317
under vpc network name you will see

12063
08:28:49,279 --> 08:28:55,039
exchange custom routes and here i can

12064
08:28:52,317 --> 08:28:57,840
select to import and export custom

12065
08:28:55,040 --> 08:29:00,398
routes that i have previously created so

12066
08:28:57,840 --> 08:29:02,878
any special routes that i have created

12067
08:29:00,398 --> 08:29:05,280
before the actual peering connection i

12068
08:29:02,878 --> 08:29:07,840
can bring them over to the other network

12069
08:29:05,279 --> 08:29:09,520
to satisfy my requirements and so i'm

12070
08:29:07,840 --> 08:29:11,439
not going to do that right now i'm going

12071
08:29:09,520 --> 08:29:13,840
to close this up and i'm going to simply

12072
08:29:11,439 --> 08:29:16,317
click on create and so this is finished

12073
08:29:13,840 --> 08:29:18,240
creating and is marked as inactive and

12074
08:29:16,317 --> 08:29:21,200
this is because the corresponding

12075
08:29:18,240 --> 08:29:23,360
peering connection in project bowtie has

12076
08:29:21,200 --> 08:29:25,680
yet to be configured the status will

12077
08:29:23,360 --> 08:29:28,398
change to a green check mark in both

12078
08:29:25,680 --> 08:29:30,957
networks and marked as active once they

12079
08:29:28,398 --> 08:29:33,040
are connected if this status remains as

12080
08:29:30,957 --> 08:29:36,000
inactive then you should recheck your

12081
08:29:33,040 --> 08:29:38,159
configuration and edit it accordingly so

12082
08:29:36,000 --> 08:29:40,398
now i'm going to head on over to project

12083
08:29:38,159 --> 08:29:42,477
bowtie inc and i'm going to create the

12084
08:29:40,398 --> 08:29:44,478
corresponding peering connection i'm

12085
08:29:42,477 --> 08:29:46,637
going to click on create connection once

12086
08:29:44,477 --> 08:29:49,040
you have your project id and the vpc

12087
08:29:46,637 --> 08:29:51,119
network you can click on continue and

12088
08:29:49,040 --> 08:29:54,558
for the name of this peering connection

12089
08:29:51,119 --> 08:29:57,200
i'm going to call this peering dash ba

12090
08:29:54,558 --> 08:30:00,317
respectively under vpc network i'm going

12091
08:29:57,200 --> 08:30:02,558
to select bowtie inc b and under peered

12092
08:30:00,317 --> 08:30:04,797
vpc network i'm going to select in

12093
08:30:02,558 --> 08:30:07,040
another project here you want to type in

12094
08:30:04,797 --> 08:30:10,000
your project id for me i'm going to

12095
08:30:07,040 --> 08:30:12,638
paste in my project tony project id and

12096
08:30:10,000 --> 08:30:14,637
under vpc network name i'm going to type

12097
08:30:12,637 --> 08:30:16,477
in bowtie inc

12098
08:30:14,637 --> 08:30:18,557
a and i'm going to leave all the other

12099
08:30:16,477 --> 08:30:20,718
options as default and i'm going to

12100
08:30:18,558 --> 08:30:22,878
click on create and so now that we've

12101
08:30:20,718 --> 08:30:25,920
established connections on each of the

12102
08:30:22,878 --> 08:30:27,680
peering connections in each vpc if the

12103
08:30:25,919 --> 08:30:30,239
information that we've entered is

12104
08:30:27,680 --> 08:30:32,240
correct then we should receive a green

12105
08:30:30,240 --> 08:30:35,680
check mark stating that the peering

12106
08:30:32,240 --> 08:30:38,478
connection is connected and success here

12107
08:30:35,680 --> 08:30:41,200
we have status as active and if i head

12108
08:30:38,477 --> 08:30:43,680
on over to project tony i should have

12109
08:30:41,200 --> 08:30:45,600
the same green check mark under status

12110
08:30:43,680 --> 08:30:48,000
for the peering connection and as

12111
08:30:45,599 --> 08:30:50,877
expected the status has a green check

12112
08:30:48,000 --> 08:30:52,878
mark and is marked as active so now in

12113
08:30:50,878 --> 08:30:54,878
order to do the pairing connectivity

12114
08:30:52,878 --> 08:30:58,317
test i'm going to need to grab the

12115
08:30:54,878 --> 08:31:01,040
internal ip of the instance in the other

12116
08:30:58,317 --> 08:31:02,957
network that resides in project bowtie

12117
08:31:01,040 --> 08:31:06,000
and so because it doesn't matter which

12118
08:31:02,957 --> 08:31:09,279
instance i log into as both of them have

12119
08:31:06,000 --> 08:31:11,520
ssh and ping access i'm going to simply

12120
08:31:09,279 --> 08:31:13,680
go over to the navigation menu i'm going

12121
08:31:11,520 --> 08:31:16,317
to head on over to compute engine and

12122
08:31:13,680 --> 08:31:18,240
i'm going to record the internal ip of

12123
08:31:16,317 --> 08:31:21,200
instance a and now i'm going to head

12124
08:31:18,240 --> 08:31:24,398
over to project bowtie and log into

12125
08:31:21,200 --> 08:31:26,878
instance b and ping instance a and so in

12126
08:31:24,398 --> 08:31:28,958
order to ssh into this instance i'm

12127
08:31:26,878 --> 08:31:31,440
going to click on the ssh button under

12128
08:31:28,957 --> 08:31:34,159
connect and it should open a new browser

12129
08:31:31,439 --> 08:31:36,877
tab for me logging me into the instance

12130
08:31:34,159 --> 08:31:39,200
okay i'm logged in here and i'm going to

12131
08:31:36,878 --> 08:31:42,080
zoom in for better viewing and so now

12132
08:31:39,200 --> 08:31:45,520
i'm going to run a ping command against

12133
08:31:42,080 --> 08:31:47,840
instance a using the internal ip that i

12134
08:31:45,520 --> 08:31:51,439
had copied earlier and i'm going to hit

12135
08:31:47,840 --> 08:31:54,317
enter and as you can see ping is working

12136
08:31:51,439 --> 08:31:56,797
and so now we can confirm that the vpc

12137
08:31:54,317 --> 08:31:59,520
peering connection is established and

12138
08:31:56,797 --> 08:32:02,000
the two instances in the different vpc

12139
08:31:59,520 --> 08:32:04,878
networks are communicating over their

12140
08:32:02,000 --> 08:32:07,360
private ips and you can go ahead and hit

12141
08:32:04,878 --> 08:32:09,920
control c to stop the ping and so just

12142
08:32:07,360 --> 08:32:12,477
as a recap you've created two separate

12143
08:32:09,919 --> 08:32:15,359
vpc networks with their own separate

12144
08:32:12,477 --> 08:32:17,840
subnets in two separate projects you've

12145
08:32:15,360 --> 08:32:19,840
created the necessary firewall rules in

12146
08:32:17,840 --> 08:32:22,159
each of these networks along with

12147
08:32:19,840 --> 08:32:24,878
creating instances in each of those

12148
08:32:22,159 --> 08:32:26,878
networks you then established a vpc

12149
08:32:24,878 --> 08:32:30,398
peering connection establishing the

12150
08:32:26,878 --> 08:32:33,119
configuration in each vpc you then did a

12151
08:32:30,398 --> 08:32:35,440
connectivity test by logging into one of

12152
08:32:33,119 --> 08:32:37,840
the instances and pinging the other

12153
08:32:35,439 --> 08:32:40,317
instance and so i hope this helps cement

12154
08:32:37,840 --> 08:32:42,637
the theory of vpc peering that you

12155
08:32:40,317 --> 08:32:45,040
learned in the previous lesson and has

12156
08:32:42,637 --> 08:32:47,520
given you some context when it comes to

12157
08:32:45,040 --> 08:32:49,520
configuring each end of the peering

12158
08:32:47,520 --> 08:32:51,840
connection so i wanted to take a moment

12159
08:32:49,520 --> 08:32:54,558
to congratulate you on completing this

12160
08:32:51,840 --> 08:32:56,718
demo and so all that's left now is to

12161
08:32:54,558 --> 08:32:58,798
clean up all the resources that we

12162
08:32:56,718 --> 08:33:00,878
created throughout this demo and you can

12163
08:32:58,797 --> 08:33:03,520
start by selecting the instances and

12164
08:33:00,878 --> 08:33:06,080
deleting them in each network as well as

12165
08:33:03,520 --> 08:33:07,680
the firewall rules and the networks

12166
08:33:06,080 --> 08:33:09,680
themselves i'm going to go over to

12167
08:33:07,680 --> 08:33:11,439
project tony and i'm going to do the

12168
08:33:09,680 --> 08:33:12,957
same thing there and so you can do

12169
08:33:11,439 --> 08:33:15,359
exactly what you did with the last

12170
08:33:12,957 --> 08:33:17,919
instance here you can select it click on

12171
08:33:15,360 --> 08:33:19,520
delete and delete the instance and so

12172
08:33:17,919 --> 08:33:21,279
next we're going to delete the peering

12173
08:33:19,520 --> 08:33:23,040
connection so we're going to go up to

12174
08:33:21,279 --> 08:33:25,360
the navigation menu we're going to

12175
08:33:23,040 --> 08:33:26,878
scroll down to vpc network and on the

12176
08:33:25,360 --> 08:33:29,360
left hand menu we're going to scroll

12177
08:33:26,878 --> 08:33:31,200
down to vpc network peering and so we're

12178
08:33:29,360 --> 08:33:32,797
going to select appearing connection

12179
08:33:31,200 --> 08:33:34,558
we're going to go to the top and click

12180
08:33:32,797 --> 08:33:35,680
on delete and then delete the peering

12181
08:33:34,558 --> 08:33:37,200
connection

12182
08:33:35,680 --> 08:33:39,279
and so now we're going to delete the

12183
08:33:37,200 --> 08:33:41,760
firewall rule so we're going to go up to

12184
08:33:39,279 --> 08:33:41,759
firewall

12185
08:33:42,000 --> 08:33:45,599
we're going to select the firewall rule

12186
08:33:44,000 --> 08:33:47,759
at the top we're going to click delete

12187
08:33:45,599 --> 08:33:49,519
and then delete the firewall rule and

12188
08:33:47,759 --> 08:33:52,000
last but not least we want to delete the

12189
08:33:49,520 --> 08:33:54,080
vpc network that we created so we're

12190
08:33:52,000 --> 08:33:56,317
going to go up to vpc networks we're

12191
08:33:54,080 --> 08:33:57,840
going to drill down into the custom vpc

12192
08:33:56,317 --> 08:34:00,000
up at the top we're going to click on

12193
08:33:57,840 --> 08:34:01,920
delete vpc network and then we're going

12194
08:34:00,000 --> 08:34:03,919
to click on delete and so now that we've

12195
08:34:01,919 --> 08:34:06,000
deleted all the resources in project

12196
08:34:03,919 --> 08:34:08,877
tony we're going to go back over to our

12197
08:34:06,000 --> 08:34:10,637
second project project bowtie and do the

12198
08:34:08,878 --> 08:34:12,240
same thing and so we're first going to

12199
08:34:10,637 --> 08:34:13,919
start off with the vpc peering

12200
08:34:12,240 --> 08:34:15,680
connection so we're going to go over to

12201
08:34:13,919 --> 08:34:17,359
vpc network peering we're going to

12202
08:34:15,680 --> 08:34:19,279
select the appearing connection we're

12203
08:34:17,360 --> 08:34:21,119
gonna click on delete at the top and

12204
08:34:19,279 --> 08:34:22,797
delete the peering connection next we're

12205
08:34:21,119 --> 08:34:24,797
gonna go into firewall we're gonna

12206
08:34:22,797 --> 08:34:26,878
select the firewall rule go up to the

12207
08:34:24,797 --> 08:34:28,957
top and click on delete and then delete

12208
08:34:26,878 --> 08:34:31,200
the firewall rule and finally we're

12209
08:34:28,957 --> 08:34:32,717
gonna go over to vpc networks we're

12210
08:34:31,200 --> 08:34:34,398
going to drill down into the custom

12211
08:34:32,718 --> 08:34:36,637
network we're going to click on delete

12212
08:34:34,398 --> 08:34:39,280
vpc network at the top and delete the

12213
08:34:36,637 --> 08:34:41,039
vpc network

12214
08:34:39,279 --> 08:34:43,680
and so now that you've successfully

12215
08:34:41,040 --> 08:34:45,840
deleted all your resources you can now

12216
08:34:43,680 --> 08:34:47,840
mark this lesson as complete and i'll

12217
08:34:45,840 --> 08:34:49,840
see you in the next one and congrats

12218
08:34:47,840 --> 08:34:51,049
again on the great job of completing

12219
08:34:49,840 --> 08:34:54,957
this demo

12220
08:34:51,049 --> 08:34:57,439
[Music]

12221
08:34:54,957 --> 08:34:59,599
welcome back and in this lesson i'm

12222
08:34:57,439 --> 08:35:02,877
going to be discussing the concepts and

12223
08:34:59,599 --> 08:35:05,439
terminology of shared vpcs i'm also

12224
08:35:02,878 --> 08:35:08,398
going to go into some detailed use cases

12225
08:35:05,439 --> 08:35:10,637
and how shared vpcs would be used in

12226
08:35:08,398 --> 08:35:13,040
different scenarios so with that being

12227
08:35:10,637 --> 08:35:16,000
said let's dive in

12228
08:35:13,040 --> 08:35:18,958
now when a vpc is created it is usually

12229
08:35:16,000 --> 08:35:21,520
tied to a specific project now what

12230
08:35:18,957 --> 08:35:24,317
happens when you want to share resources

12231
08:35:21,520 --> 08:35:26,957
across different projects but still have

12232
08:35:24,317 --> 08:35:28,398
separate billing and access within the

12233
08:35:26,957 --> 08:35:31,279
projects themselves

12234
08:35:28,398 --> 08:35:34,317
this is where shared vpcs come into play

12235
08:35:31,279 --> 08:35:37,680
shared vpcs allow an organization to

12236
08:35:34,317 --> 08:35:40,797
connect resources from multiple projects

12237
08:35:37,680 --> 08:35:43,599
to a common vpc network so that way they

12238
08:35:40,797 --> 08:35:46,637
can communicate with each other securely

12239
08:35:43,599 --> 08:35:49,840
and efficiently using internal ips from

12240
08:35:46,637 --> 08:35:52,079
that network when you use shared vpcs

12241
08:35:49,840 --> 08:35:55,200
you designate a project as a host

12242
08:35:52,080 --> 08:35:58,080
project and attach one or more other

12243
08:35:55,200 --> 08:36:00,558
service projects to it the vpc networks

12244
08:35:58,080 --> 08:36:03,120
in the host project are considered the

12245
08:36:00,558 --> 08:36:05,840
shared vpc networks so just as a

12246
08:36:03,119 --> 08:36:09,680
reminder a project that participates in

12247
08:36:05,840 --> 08:36:12,398
a shared vpc is either a host project or

12248
08:36:09,680 --> 08:36:15,520
a service project a host project can

12249
08:36:12,398 --> 08:36:18,080
contain one or more shared vpc networks

12250
08:36:15,520 --> 08:36:21,279
a service project is any project that

12251
08:36:18,080 --> 08:36:24,638
has been attached to a host project by a

12252
08:36:21,279 --> 08:36:27,439
shared vpc admin this attachment allows

12253
08:36:24,637 --> 08:36:30,317
it to participate in the shared vpc and

12254
08:36:27,439 --> 08:36:32,637
just as a note a project cannot be both

12255
08:36:30,317 --> 08:36:35,680
a host and a service project

12256
08:36:32,637 --> 08:36:37,680
simultaneously it has to be one or the

12257
08:36:35,680 --> 08:36:40,878
other and you can create and use

12258
08:36:37,680 --> 08:36:43,599
multiple host projects however each

12259
08:36:40,878 --> 08:36:46,159
service project can only be attached to

12260
08:36:43,599 --> 08:36:49,119
a single host project it is also a

12261
08:36:46,159 --> 08:36:51,439
common practice to have multiple service

12262
08:36:49,119 --> 08:36:54,239
projects administered by different

12263
08:36:51,439 --> 08:36:56,000
departments or teams in the organization

12264
08:36:54,240 --> 08:36:58,398
and so just for clarity for those who

12265
08:36:56,000 --> 08:37:01,360
are wondering a project that does not

12266
08:36:58,398 --> 08:37:03,760
participate in a shared vpc

12267
08:37:01,360 --> 08:37:05,920
is called a standalone project

12268
08:37:03,759 --> 08:37:08,957
and this is to emphasize that it is

12269
08:37:05,919 --> 08:37:10,637
neither a host project or a service

12270
08:37:08,957 --> 08:37:13,840
project now when it comes to

12271
08:37:10,637 --> 08:37:15,919
administering these shared vpcs we

12272
08:37:13,840 --> 08:37:18,477
should be adhering to the principle of

12273
08:37:15,919 --> 08:37:21,279
least privilege and only assigning the

12274
08:37:18,477 --> 08:37:24,797
necessary access needed to specific

12275
08:37:21,279 --> 08:37:27,439
users so here i broken down the roles

12276
08:37:24,797 --> 08:37:31,119
that are needed to enable and administer

12277
08:37:27,439 --> 08:37:34,317
the shared vpcs a shared vpc admin has

12278
08:37:31,119 --> 08:37:37,599
the permissions to enable host projects

12279
08:37:34,317 --> 08:37:40,477
attach service projects to host projects

12280
08:37:37,599 --> 08:37:43,840
and delegate access to some or all of

12281
08:37:40,477 --> 08:37:46,159
the subnets in shared vpc networks to

12282
08:37:43,840 --> 08:37:48,957
service project admins when it comes to

12283
08:37:46,159 --> 08:37:52,240
a service project admin this is a shared

12284
08:37:48,957 --> 08:37:54,637
vpc admin for a given host project and

12285
08:37:52,240 --> 08:37:56,718
is typically its project owner as well

12286
08:37:54,637 --> 08:37:59,759
although when defining each service

12287
08:37:56,718 --> 08:38:02,558
project admin a shared vpc admin can

12288
08:37:59,759 --> 08:38:05,599
grant permission to use the whole host

12289
08:38:02,558 --> 08:38:08,080
project or just some subnets and so when

12290
08:38:05,599 --> 08:38:10,397
it comes to service project admins there

12291
08:38:08,080 --> 08:38:12,878
are two separate levels of permissions

12292
08:38:10,398 --> 08:38:15,360
that can be applied the first is project

12293
08:38:12,878 --> 08:38:18,000
level permissions and this is a service

12294
08:38:15,360 --> 08:38:20,558
project admin that can be defined to

12295
08:38:18,000 --> 08:38:22,957
have permission to use all subnets in

12296
08:38:20,558 --> 08:38:25,280
the host project when it comes to subnet

12297
08:38:22,957 --> 08:38:27,840
level permissions a service project

12298
08:38:25,279 --> 08:38:30,557
admin can be granted a more restrictive

12299
08:38:27,840 --> 08:38:33,040
set of permissions to use only some

12300
08:38:30,558 --> 08:38:35,520
subnets now i wanted to move into some

12301
08:38:33,040 --> 08:38:38,958
use cases which will give you a bit more

12302
08:38:35,520 --> 08:38:42,000
context on how shared vpcs are used in

12303
08:38:38,957 --> 08:38:45,279
specific environments illustrated here

12304
08:38:42,000 --> 08:38:47,759
is a simple shared vpc scenario here a

12305
08:38:45,279 --> 08:38:50,717
host project has been created and

12306
08:38:47,759 --> 08:38:53,519
attached to service projects to it the

12307
08:38:50,718 --> 08:38:54,240
service project admin in service project

12308
08:38:53,520 --> 08:38:56,878
a

12309
08:38:54,240 --> 08:39:00,318
can be configured to access all or some

12310
08:38:56,878 --> 08:39:02,477
of the subnets in the shared vpc network

12311
08:39:00,317 --> 08:39:07,439
service project admin with at least

12312
08:39:02,477 --> 08:39:11,599
subnet level permissions to the 10.0.2.0

12313
08:39:07,439 --> 08:39:14,637
24 subnet has created vm1 in a zone

12314
08:39:11,599 --> 08:39:17,279
located in the us west one region this

12315
08:39:14,637 --> 08:39:19,397
instance receives its internal ip

12316
08:39:17,279 --> 08:39:24,000
address

12317
08:39:19,398 --> 08:39:26,638
10.0.2.15 from the 10.0.2.0

12318
08:39:24,000 --> 08:39:29,279
24 cider block now service project

12319
08:39:26,637 --> 08:39:31,840
admins in service project b can be

12320
08:39:29,279 --> 08:39:34,557
configured to access all or some of the

12321
08:39:31,840 --> 08:39:36,878
subnets in the shared vpc network a

12322
08:39:34,558 --> 08:39:40,440
service project admin with at least

12323
08:39:36,878 --> 08:39:43,840
subnet level permissions to the

12324
08:39:40,439 --> 08:39:47,119
10.10.4.0 forward slash 24 subnet has

12325
08:39:43,840 --> 08:39:50,159
created vm2 in a zone located in the us

12326
08:39:47,119 --> 08:39:52,840
central 1 region this instance receives

12327
08:39:50,159 --> 08:39:54,637
its internal ip address

12328
08:39:52,840 --> 08:39:56,119
10.10.4.1

12329
08:39:54,637 --> 08:39:59,360
from the

12330
08:39:56,119 --> 08:40:01,759
10.10.4.0 forward slash 24 cider block

12331
08:39:59,360 --> 08:40:04,240
and of course the standalone project

12332
08:40:01,759 --> 08:40:06,957
does not participate in the shared vpc

12333
08:40:04,240 --> 08:40:08,878
at all as it is neither a host nor a

12334
08:40:06,957 --> 08:40:09,759
service project and the last thing to

12335
08:40:08,878 --> 08:40:12,317
note

12336
08:40:09,759 --> 08:40:15,519
instances in service projects attached

12337
08:40:12,317 --> 08:40:17,119
to a host project using the same shared

12338
08:40:15,520 --> 08:40:20,240
vpc network

12339
08:40:17,119 --> 08:40:23,360
can communicate with one another using

12340
08:40:20,240 --> 08:40:25,840
either ephemeral or reserve static

12341
08:40:23,360 --> 08:40:29,119
internal ip addresses and i will be

12342
08:40:25,840 --> 08:40:31,520
covering both ephemeral and static ip

12343
08:40:29,119 --> 08:40:34,159
addresses in a later section under

12344
08:40:31,520 --> 08:40:36,558
compute engine external ip addresses

12345
08:40:34,159 --> 08:40:39,599
defined in the host project are only

12346
08:40:36,558 --> 08:40:42,080
usable by resources in that project they

12347
08:40:39,599 --> 08:40:45,119
are not available for use in service

12348
08:40:42,080 --> 08:40:48,000
projects moving on to the next use case

12349
08:40:45,119 --> 08:40:50,637
is a multiple hosts project for this use

12350
08:40:48,000 --> 08:40:53,360
case an organization is using two

12351
08:40:50,637 --> 08:40:54,477
separate host projects development and

12352
08:40:53,360 --> 08:40:56,878
production

12353
08:40:54,477 --> 08:40:59,119
and each host project has two service

12354
08:40:56,878 --> 08:41:02,398
projects attached to them both host

12355
08:40:59,119 --> 08:41:04,878
projects have one shared vpc network

12356
08:41:02,398 --> 08:41:07,280
with subnets configured to use the same

12357
08:41:04,878 --> 08:41:09,760
cider ranges both the testing and

12358
08:41:07,279 --> 08:41:12,797
production networks have been purposely

12359
08:41:09,759 --> 08:41:14,957
configured in the same way so this way

12360
08:41:12,797 --> 08:41:17,279
when you work with resources tied to a

12361
08:41:14,957 --> 08:41:19,599
subnet range it will automatically

12362
08:41:17,279 --> 08:41:22,397
translate over from one environment to

12363
08:41:19,599 --> 08:41:24,637
the other moving on to the next use case

12364
08:41:22,398 --> 08:41:27,520
is the hybrid environment now in this

12365
08:41:24,637 --> 08:41:30,637
use case the organization has a single

12366
08:41:27,520 --> 08:41:33,360
host project with a single shared vpc

12367
08:41:30,637 --> 08:41:36,239
network the shared vpc network is

12368
08:41:33,360 --> 08:41:38,718
connected via cloud vpn to an

12369
08:41:36,240 --> 08:41:42,159
on-premises network some services and

12370
08:41:38,718 --> 08:41:45,040
applications are hosted in gcp while

12371
08:41:42,159 --> 08:41:47,360
others are kept on premises and this way

12372
08:41:45,040 --> 08:41:49,040
separate teams can manage each of their

12373
08:41:47,360 --> 08:41:51,520
own service projects

12374
08:41:49,040 --> 08:41:54,398
and each project has no permissions to

12375
08:41:51,520 --> 08:41:56,878
the other service projects as well each

12376
08:41:54,398 --> 08:41:59,680
service project can also be billed

12377
08:41:56,878 --> 08:42:01,840
separately subnet level or project level

12378
08:41:59,680 --> 08:42:04,558
permissions have been granted to the

12379
08:42:01,840 --> 08:42:06,957
necessary service project admins

12380
08:42:04,558 --> 08:42:09,440
so they can create instances that use

12381
08:42:06,957 --> 08:42:11,840
the shared vpc network and again

12382
08:42:09,439 --> 08:42:14,317
instances in these service projects can

12383
08:42:11,840 --> 08:42:16,000
be configured to communicate with

12384
08:42:14,317 --> 08:42:18,797
internal services

12385
08:42:16,000 --> 08:42:21,840
such as database or directory servers

12386
08:42:18,797 --> 08:42:25,199
located on premises and finally the last

12387
08:42:21,840 --> 08:42:27,599
use case is a two-tier web service here

12388
08:42:25,200 --> 08:42:30,080
an organization has a web service that

12389
08:42:27,599 --> 08:42:32,957
is separated into two tiers and

12390
08:42:30,080 --> 08:42:35,840
different teams manage each tier the

12391
08:42:32,957 --> 08:42:38,477
tier one service project represents the

12392
08:42:35,840 --> 08:42:42,718
externally facing component behind an

12393
08:42:38,477 --> 08:42:45,520
http or https load balancer the tier 2

12394
08:42:42,718 --> 08:42:48,878
service project represents an internal

12395
08:42:45,520 --> 08:42:52,240
service upon which tier 1 relies on and

12396
08:42:48,878 --> 08:42:55,920
it is balanced using an internal tcp or

12397
08:42:52,240 --> 08:42:58,798
udp load balancer the shared vpc allows

12398
08:42:55,919 --> 08:43:01,199
mapping of each tier of the web service

12399
08:42:58,797 --> 08:43:03,520
to different projects so that they can

12400
08:43:01,200 --> 08:43:06,240
be managed by different teams while

12401
08:43:03,520 --> 08:43:09,200
sharing a common vpc network to host

12402
08:43:06,240 --> 08:43:11,360
resources that are needed for both tiers

12403
08:43:09,200 --> 08:43:13,680
now we cover quite a bit in this lesson

12404
08:43:11,360 --> 08:43:16,558
when it comes to all the concepts of

12405
08:43:13,680 --> 08:43:18,797
shared vpcs we covered both host and

12406
08:43:16,558 --> 08:43:21,360
service projects and the roles that they

12407
08:43:18,797 --> 08:43:23,119
play and their limitations we also went

12408
08:43:21,360 --> 08:43:26,000
over the different roles that are needed

12409
08:43:23,119 --> 08:43:28,637
to administrate these shared vpcs and we

12410
08:43:26,000 --> 08:43:32,080
went over different use cases on how to

12411
08:43:28,637 --> 08:43:33,919
use shared vpcs for different scenarios

12412
08:43:32,080 --> 08:43:36,160
and so that about covers everything i

12413
08:43:33,919 --> 08:43:37,919
wanted to discuss in this lesson

12414
08:43:36,159 --> 08:43:40,159
so you can now mark this lesson as

12415
08:43:37,919 --> 08:43:40,799
complete and let's move on to the next

12416
08:43:40,159 --> 08:43:44,718
one

12417
08:43:40,799 --> 08:43:47,040
[Music]

12418
08:43:44,718 --> 08:43:50,080
welcome back and in this lesson i'm

12419
08:43:47,040 --> 08:43:52,317
going to be discussing vpc flow logs

12420
08:43:50,080 --> 08:43:55,360
flow logs is an essential tool for

12421
08:43:52,317 --> 08:43:59,279
monitoring and analyzing traffic

12422
08:43:55,360 --> 08:44:01,600
coming in and going out of vpcs from vm

12423
08:43:59,279 --> 08:44:04,000
instances flow logs are essential to

12424
08:44:01,599 --> 08:44:06,877
know for the exam as you should know the

12425
08:44:04,000 --> 08:44:09,840
capabilities and use cases and so with

12426
08:44:06,878 --> 08:44:12,718
that being said let's dive in

12427
08:44:09,840 --> 08:44:14,159
so vpc flow logs records a sample of

12428
08:44:12,718 --> 08:44:18,240
network flows

12429
08:44:14,159 --> 08:44:21,040
sent from and received by vm instances

12430
08:44:18,240 --> 08:44:24,080
including instances used as google

12431
08:44:21,040 --> 08:44:27,520
kubernetes engine nodes these logs can

12432
08:44:24,080 --> 08:44:30,638
be used for network monitoring forensics

12433
08:44:27,520 --> 08:44:33,520
real-time security analysis and expense

12434
08:44:30,637 --> 08:44:37,520
optimization when you enable vpc flow

12435
08:44:33,520 --> 08:44:40,080
logs you enable for all vms in a subnet

12436
08:44:37,520 --> 08:44:43,439
so basically you would be enabling vpc

12437
08:44:40,080 --> 08:44:46,318
flow logs on a subnet by subnet basis

12438
08:44:43,439 --> 08:44:49,759
flow logs are aggregated by connection

12439
08:44:46,317 --> 08:44:53,119
from compute engine vms and exported in

12440
08:44:49,759 --> 08:44:55,199
real time these logs can be exported to

12441
08:44:53,119 --> 08:44:58,718
cloud logging previously known as

12442
08:44:55,200 --> 08:45:01,280
stackdriver for 30 days if logs need to

12443
08:44:58,718 --> 08:45:03,760
be stored for longer than 30 days they

12444
08:45:01,279 --> 08:45:07,199
can be exported to a cloud storage

12445
08:45:03,759 --> 08:45:10,239
bucket for longer term storage and then

12446
08:45:07,200 --> 08:45:13,280
read and queried by cloud logging google

12447
08:45:10,240 --> 08:45:17,280
cloud samples packets that leave and

12448
08:45:13,279 --> 08:45:19,759
enter a vm to generate flow logs now not

12449
08:45:17,279 --> 08:45:22,878
every packet is captured into its own

12450
08:45:19,759 --> 08:45:25,679
log record about one out of every 10

12451
08:45:22,878 --> 08:45:27,760
packets is captured but this sampling

12452
08:45:25,680 --> 08:45:30,797
rate might be lower depending on the

12453
08:45:27,759 --> 08:45:33,439
vm's load and just as a note you cannot

12454
08:45:30,797 --> 08:45:35,840
adjust this rate this rate is locked by

12455
08:45:33,439 --> 08:45:39,359
google cloud and cannot be changed in

12456
08:45:35,840 --> 08:45:42,240
any way and because vpc flow logs do not

12457
08:45:39,360 --> 08:45:45,119
capture every packet it compensates for

12458
08:45:42,240 --> 08:45:47,280
missed packets by interpolating from the

12459
08:45:45,119 --> 08:45:50,317
captured packets now there are many

12460
08:45:47,279 --> 08:45:52,159
different use cases for vpc flow logs

12461
08:45:50,317 --> 08:45:54,239
and i wanted to take a quick minute to

12462
08:45:52,159 --> 08:45:57,520
go over them the first one i wanted to

12463
08:45:54,240 --> 08:45:59,600
mention is network monitoring vpc flow

12464
08:45:57,520 --> 08:46:02,240
logs provide you with real-time

12465
08:45:59,599 --> 08:46:04,957
visibility into network throughput and

12466
08:46:02,240 --> 08:46:08,080
performance so you can monitor the vpc

12467
08:46:04,957 --> 08:46:10,637
network perform network diagnostics

12468
08:46:08,080 --> 08:46:12,398
understand traffic changes and help

12469
08:46:10,637 --> 08:46:14,797
forecast capacity

12470
08:46:12,398 --> 08:46:18,478
for capacity planning you can also

12471
08:46:14,797 --> 08:46:20,878
analyze network usage with vpc flow logs

12472
08:46:18,477 --> 08:46:23,680
and you can analyze the network flows

12473
08:46:20,878 --> 08:46:25,600
for traffic between regions and zones

12474
08:46:23,680 --> 08:46:26,398
traffic to specific countries on the

12475
08:46:25,599 --> 08:46:28,637
internet

12476
08:46:26,398 --> 08:46:31,440
and based on the analysis you can

12477
08:46:28,637 --> 08:46:34,637
optimize your network traffic expenses

12478
08:46:31,439 --> 08:46:36,557
now a great use case for vpc flow logs

12479
08:46:34,637 --> 08:46:39,840
is network forensics

12480
08:46:36,558 --> 08:46:43,040
so for example if an incident occurs you

12481
08:46:39,840 --> 08:46:45,599
can examine which ips talked with whom

12482
08:46:43,040 --> 08:46:49,040
and when and you can also look at any

12483
08:46:45,599 --> 08:46:52,000
compromised ips by analyzing all the

12484
08:46:49,040 --> 08:46:53,040
incoming and outgoing network flows and

12485
08:46:52,000 --> 08:46:56,000
lastly

12486
08:46:53,040 --> 08:46:57,840
vpc flow logs can be used for real-time

12487
08:46:56,000 --> 08:47:00,080
security analysis

12488
08:46:57,840 --> 08:47:03,680
you can leverage the real-time streaming

12489
08:47:00,080 --> 08:47:06,958
apis using pub sub and integrate them

12490
08:47:03,680 --> 08:47:09,760
with a sim or security information in

12491
08:47:06,957 --> 08:47:12,877
event management system like splunk

12492
08:47:09,759 --> 08:47:15,599
rapid7 or logarithm and this is a very

12493
08:47:12,878 --> 08:47:18,317
common way to add an extra layer of

12494
08:47:15,599 --> 08:47:20,877
security to your currently existing

12495
08:47:18,317 --> 08:47:23,599
environment as well as a great way to

12496
08:47:20,878 --> 08:47:26,637
meet any compliance standards that are

12497
08:47:23,599 --> 08:47:29,119
needed for your organization now vpc

12498
08:47:26,637 --> 08:47:32,477
flow logs are recorded in a specific

12499
08:47:29,119 --> 08:47:34,957
format log records contain base fields

12500
08:47:32,477 --> 08:47:38,000
which are the core fields of every log

12501
08:47:34,957 --> 08:47:41,199
record and meta data fields that add

12502
08:47:38,000 --> 08:47:44,080
additional information metadata fields

12503
08:47:41,200 --> 08:47:46,958
may be omitted to save storage costs but

12504
08:47:44,080 --> 08:47:50,160
base fields are always included and

12505
08:47:46,957 --> 08:47:52,877
cannot be omitted some log fields are in

12506
08:47:50,159 --> 08:47:55,759
a multi-field format with more than one

12507
08:47:52,878 --> 08:47:57,040
piece of data in a given field

12508
08:47:55,759 --> 08:47:59,599
for example

12509
08:47:57,040 --> 08:48:03,200
the connection field that you see from

12510
08:47:59,599 --> 08:48:05,039
the base is of the ip details format

12511
08:48:03,200 --> 08:48:08,477
which contains the source and

12512
08:48:05,040 --> 08:48:11,360
destination ip address and port

12513
08:48:08,477 --> 08:48:14,000
plus the protocol in a single field

12514
08:48:11,360 --> 08:48:17,360
flows that have an endpoint in a gke

12515
08:48:14,000 --> 08:48:20,477
cluster can be annotated with gke

12516
08:48:17,360 --> 08:48:21,680
annotations which can include details of

12517
08:48:20,477 --> 08:48:25,119
the cluster

12518
08:48:21,680 --> 08:48:28,240
pod and service of the endpoint gke

12519
08:48:25,119 --> 08:48:31,439
annotations are only available with a

12520
08:48:28,240 --> 08:48:34,318
custom configuration of metadata fields

12521
08:48:31,439 --> 08:48:37,759
now when you enable vpc flow logs you

12522
08:48:34,317 --> 08:48:40,957
can set a filter based on both base and

12523
08:48:37,759 --> 08:48:43,759
metadata fields that only preserves logs

12524
08:48:40,957 --> 08:48:46,239
that match the filter all other logs are

12525
08:48:43,759 --> 08:48:48,637
discarded before being written to

12526
08:48:46,240 --> 08:48:50,878
logging which saves you money and

12527
08:48:48,637 --> 08:48:53,119
reduces the time needed to find the

12528
08:48:50,878 --> 08:48:55,920
information you're looking for shown

12529
08:48:53,119 --> 08:48:58,477
here is a sample from the console in

12530
08:48:55,919 --> 08:49:00,877
both the classic logs viewer as well as

12531
08:48:58,477 --> 08:49:03,200
the logs viewer in preview and so in the

12532
08:49:00,878 --> 08:49:05,279
classic logs viewer you can simply

12533
08:49:03,200 --> 08:49:07,680
select the sub network from the first

12534
08:49:05,279 --> 08:49:09,599
pull down menu and from the second pull

12535
08:49:07,680 --> 08:49:12,477
down menu you can select the

12536
08:49:09,599 --> 08:49:15,680
compute.googleapis.com

12537
08:49:12,477 --> 08:49:17,360
forward slash vpc underscore flows and

12538
08:49:15,680 --> 08:49:20,240
this will give you the information that

12539
08:49:17,360 --> 08:49:23,119
you need to pull up all your vpc flow

12540
08:49:20,240 --> 08:49:25,600
logs in the logs viewer preview it is

12541
08:49:23,119 --> 08:49:28,079
done in a similar way but the query is

12542
08:49:25,599 --> 08:49:30,477
shown here in the query builder and can

12543
08:49:28,080 --> 08:49:33,360
be adjusted accordingly pulling up any

12544
08:49:30,477 --> 08:49:35,840
vpc flow logs must be done within the

12545
08:49:33,360 --> 08:49:38,080
console when viewing them in google

12546
08:49:35,840 --> 08:49:41,040
cloud and so the last thing i wanted to

12547
08:49:38,080 --> 08:49:43,920
show you before ending this lesson is a

12548
08:49:41,040 --> 08:49:47,520
sample of the log itself the log shown

12549
08:49:43,919 --> 08:49:48,637
here is a sample of what a vpc flow log

12550
08:49:47,520 --> 08:49:50,797
looks like

12551
08:49:48,637 --> 08:49:53,520
and as you can see here beside each

12552
08:49:50,797 --> 08:49:56,239
field you will see a small arrow

12553
08:49:53,520 --> 08:49:59,439
clicking on these arrows will expand the

12554
08:49:56,240 --> 08:50:01,920
field and reveal many of the subfields

12555
08:49:59,439 --> 08:50:04,079
that you saw on the last slide and will

12556
08:50:01,919 --> 08:50:07,599
give you the necessary information you

12557
08:50:04,080 --> 08:50:10,160
need to analyze your vpc flow logs in

12558
08:50:07,599 --> 08:50:12,717
this example of the connection field it

12559
08:50:10,159 --> 08:50:15,680
shows the five tuple that describes this

12560
08:50:12,718 --> 08:50:18,000
connection which you can clearly see up

12561
08:50:15,680 --> 08:50:20,637
here at the top and if i were to go

12562
08:50:18,000 --> 08:50:23,599
further down and expand more of these

12563
08:50:20,637 --> 08:50:26,477
fields i would find more information

12564
08:50:23,599 --> 08:50:29,519
that could help me better analyze more

12565
08:50:26,477 --> 08:50:31,919
logging info for my given problem that i

12566
08:50:29,520 --> 08:50:34,637
am trying to solve now i didn't want to

12567
08:50:31,919 --> 08:50:37,279
go too deep into logging as i will be

12568
08:50:34,637 --> 08:50:40,397
diving into a complete section on its

12569
08:50:37,279 --> 08:50:42,717
own in a later section of the course but

12570
08:50:40,398 --> 08:50:45,760
i did want you to get a feel for what

12571
08:50:42,718 --> 08:50:48,240
type of data vpc flow logs can give you

12572
08:50:45,759 --> 08:50:51,279
and how it can help you in your specific

12573
08:50:48,240 --> 08:50:53,520
use case as well as on the exam and so

12574
08:50:51,279 --> 08:50:56,717
that's pretty much all i wanted to cover

12575
08:50:53,520 --> 08:50:58,718
with regards to vpc flow logs so you can

12576
08:50:56,718 --> 08:51:00,670
now mark this lesson as complete and

12577
08:50:58,718 --> 08:51:04,558
let's move on to the next one

12578
08:51:00,669 --> 08:51:07,039
[Music]

12579
08:51:04,558 --> 08:51:09,920
welcome back in this lesson i'm going to

12580
08:51:07,040 --> 08:51:12,317
cover a high-level overview of a basic

12581
08:51:09,919 --> 08:51:14,557
foundational service that supports the

12582
08:51:12,317 --> 08:51:18,317
backbone of the internet as we know it

12583
08:51:14,558 --> 08:51:21,280
today this foundation is called dns or

12584
08:51:18,317 --> 08:51:24,000
the domain name system dns is used

12585
08:51:21,279 --> 08:51:26,239
widely in google cloud from mostly an

12586
08:51:24,000 --> 08:51:28,080
infrastructure perspective and is used

12587
08:51:26,240 --> 08:51:30,638
in pretty much any other cloud

12588
08:51:28,080 --> 08:51:32,718
environment or computer network on the

12589
08:51:30,637 --> 08:51:35,200
planet now there is quite a bit to cover

12590
08:51:32,718 --> 08:51:37,840
in this lesson with regards to dns so

12591
08:51:35,200 --> 08:51:41,200
with that being said let's dive in

12592
08:51:37,840 --> 08:51:43,840
now dns or domain name system is a

12593
08:51:41,200 --> 08:51:46,477
global decentralized distributed

12594
08:51:43,840 --> 08:51:48,398
database that lets you store ip

12595
08:51:46,477 --> 08:51:51,200
addresses and other data

12596
08:51:48,398 --> 08:51:54,000
and look them up by name this system

12597
08:51:51,200 --> 08:51:57,440
uses human readable names like

12598
08:51:54,000 --> 08:51:59,840
google.com and translates it into a

12599
08:51:57,439 --> 08:52:03,279
language that computers understand which

12600
08:51:59,840 --> 08:52:06,398
are numeric ip addresses for example

12601
08:52:03,279 --> 08:52:09,599
humans access information online through

12602
08:52:06,398 --> 08:52:12,478
a domain name like google.com computers

12603
08:52:09,599 --> 08:52:16,439
use ip addresses to access information

12604
08:52:12,477 --> 08:52:16,439
online like 172.217.

12605
08:52:18,637 --> 08:52:24,317
now whether you type google.com or the

12606
08:52:21,439 --> 08:52:27,759
ip address into a web browser both will

12607
08:52:24,317 --> 08:52:30,878
connect to google.com dns translates the

12608
08:52:27,759 --> 08:52:33,599
domain name to an ip address so that the

12609
08:52:30,878 --> 08:52:36,317
web browser knows where to connect to

12610
08:52:33,599 --> 08:52:39,199
and we know what to enter into the web

12611
08:52:36,317 --> 08:52:42,000
browser through dns you can connect a

12612
08:52:39,200 --> 08:52:42,878
domain name to web hosting

12613
08:52:42,000 --> 08:52:44,558
mail

12614
08:52:42,878 --> 08:52:47,520
and other services

12615
08:52:44,558 --> 08:52:49,520
now getting a bit deeper into it as ip

12616
08:52:47,520 --> 08:52:51,840
addresses are at the core of

12617
08:52:49,520 --> 08:52:54,637
communicating between devices on the

12618
08:52:51,840 --> 08:52:57,439
internet they are hard to memorize and

12619
08:52:54,637 --> 08:53:00,159
can change often even for the same

12620
08:52:57,439 --> 08:53:03,439
service to get around these problems we

12621
08:53:00,159 --> 08:53:05,279
gave names to ip addresses for example

12622
08:53:03,439 --> 08:53:08,039
when it comes to our computer

12623
08:53:05,279 --> 08:53:11,039
communicating with

12624
08:53:08,040 --> 08:53:13,920
www.google.com it will use the dns

12625
08:53:11,040 --> 08:53:16,558
system to do this now in the dns

12626
08:53:13,919 --> 08:53:20,397
database contains the information needed

12627
08:53:16,558 --> 08:53:23,280
to convert the www.google.com

12628
08:53:20,398 --> 08:53:25,760
domain name to the ip address and this

12629
08:53:23,279 --> 08:53:28,557
piece of information is stored in a

12630
08:53:25,759 --> 08:53:30,637
logical container called a zone the way

12631
08:53:28,558 --> 08:53:33,600
that the zone is stored is through

12632
08:53:30,637 --> 08:53:37,039
what's commonly known as a zone file now

12633
08:53:33,599 --> 08:53:38,840
within this zone file is a dns record

12634
08:53:37,040 --> 08:53:42,558
which links the name

12635
08:53:38,840 --> 08:53:44,159
www and the ip address that your laptop

12636
08:53:42,558 --> 08:53:46,718
needs to communicate

12637
08:53:44,159 --> 08:53:49,919
with the specific website and this zone

12638
08:53:46,718 --> 08:53:53,040
file is hosted by what's known as a name

12639
08:53:49,919 --> 08:53:55,439
server or ns server for short and i will

12640
08:53:53,040 --> 08:53:58,159
be going into further detail on this in

12641
08:53:55,439 --> 08:54:00,397
just a minute so in short if you can

12642
08:53:58,159 --> 08:54:03,119
query the zone for the record

12643
08:54:00,398 --> 08:54:05,440
www.google.com

12644
08:54:03,119 --> 08:54:08,397
then your computer can communicate with

12645
08:54:05,439 --> 08:54:09,759
the web server and dns is what makes it

12646
08:54:08,398 --> 08:54:12,398
all happen

12647
08:54:09,759 --> 08:54:15,279
now i wanted to go into a bit of history

12648
08:54:12,398 --> 08:54:18,080
of how dns came about so in early

12649
08:54:15,279 --> 08:54:21,199
computer networks a simple text file

12650
08:54:18,080 --> 08:54:24,160
called a host file was created that

12651
08:54:21,200 --> 08:54:26,718
mapped hostnames to ip addresses and

12652
08:54:24,159 --> 08:54:29,119
this enabled people to refer to other

12653
08:54:26,718 --> 08:54:31,840
computers by the name and their

12654
08:54:29,119 --> 08:54:34,079
computers translated that name to an ip

12655
08:54:31,840 --> 08:54:36,718
address when it needed to communicate

12656
08:54:34,080 --> 08:54:40,000
with it the problem is as network sizes

12657
08:54:36,718 --> 08:54:42,798
increased the host file approach became

12658
08:54:40,000 --> 08:54:45,520
impractical due to the fact that it

12659
08:54:42,797 --> 08:54:47,439
needed to be stored on each computer as

12660
08:54:45,520 --> 08:54:49,920
each computer would have to resolve the

12661
08:54:47,439 --> 08:54:51,919
same host names as well updates were

12662
08:54:49,919 --> 08:54:54,159
difficult to manage as all of the

12663
08:54:51,919 --> 08:54:57,519
computers would need to be given an

12664
08:54:54,159 --> 08:54:59,279
updated file all in all this system was

12665
08:54:57,520 --> 08:55:01,279
not scalable

12666
08:54:59,279 --> 08:55:04,637
now to overcome these and other

12667
08:55:01,279 --> 08:55:07,360
limitations the dns system was developed

12668
08:55:04,637 --> 08:55:10,878
and the dns system essentially provided

12669
08:55:07,360 --> 08:55:13,920
for a way to organize the names using a

12670
08:55:10,878 --> 08:55:17,440
domain name structure it also provided a

12671
08:55:13,919 --> 08:55:18,477
dynamic system for protocols services

12672
08:55:17,439 --> 08:55:21,520
and methods

12673
08:55:18,477 --> 08:55:24,079
for storing updating and retrieving ip

12674
08:55:21,520 --> 08:55:26,878
addresses for host computers

12675
08:55:24,080 --> 08:55:29,600
now that i've covered what dns is

12676
08:55:26,878 --> 08:55:32,558
and why we use it i wanted to dive into

12677
08:55:29,599 --> 08:55:35,840
the structure of the dns system now the

12678
08:55:32,558 --> 08:55:38,317
structure all begins with a dot the root

12679
08:55:35,840 --> 08:55:40,477
if you will and this can be found after

12680
08:55:38,317 --> 08:55:42,878
every domain name that you type into

12681
08:55:40,477 --> 08:55:45,439
your browser you will almost never see

12682
08:55:42,878 --> 08:55:47,600
it and this is because your browser will

12683
08:55:45,439 --> 08:55:49,759
automatically put it in without your

12684
08:55:47,599 --> 08:55:52,079
knowing you can try it with any domain

12685
08:55:49,759 --> 08:55:54,957
in any browser and you will almost

12686
08:55:52,080 --> 08:55:58,240
always come up with the same result this

12687
08:55:54,957 --> 08:56:00,557
dot is put in for you and will provide

12688
08:55:58,240 --> 08:56:03,760
the route for you and this is where we

12689
08:56:00,558 --> 08:56:06,878
start to break down the dns system

12690
08:56:03,759 --> 08:56:09,279
now the domain name space consists of a

12691
08:56:06,878 --> 08:56:12,080
hierarchical data structure like the one

12692
08:56:09,279 --> 08:56:14,957
you have on your computer each node has

12693
08:56:12,080 --> 08:56:17,200
a label and zero or more resource

12694
08:56:14,957 --> 08:56:19,439
records which hold information

12695
08:56:17,200 --> 08:56:22,477
associated with the domain name the

12696
08:56:19,439 --> 08:56:25,279
domain name itself consists of the label

12697
08:56:22,477 --> 08:56:28,637
concatenated with the name of its parent

12698
08:56:25,279 --> 08:56:31,439
node on the right separated by a dot so

12699
08:56:28,637 --> 08:56:34,557
when it comes to dns the domain name is

12700
08:56:31,439 --> 08:56:37,599
always assembled from right to left this

12701
08:56:34,558 --> 08:56:40,878
hierarchy or tree is subdivided into

12702
08:56:37,599 --> 08:56:43,599
zones beginning at the root zone a dns

12703
08:56:40,878 --> 08:56:46,398
zone may consist of only one domain or

12704
08:56:43,599 --> 08:56:49,039
may consist of many domains and sub

12705
08:56:46,398 --> 08:56:51,760
domains depending on the administrative

12706
08:56:49,040 --> 08:56:54,558
choices of the zone manager now getting

12707
08:56:51,759 --> 08:56:57,279
right into it the root server is the

12708
08:56:54,558 --> 08:57:00,398
first step in translating human readable

12709
08:56:57,279 --> 08:57:04,637
hostnames into ip addresses the root

12710
08:57:00,398 --> 08:57:07,120
domain is comprised of 13 dns systems

12711
08:57:04,637 --> 08:57:10,397
dispersed around the world known

12712
08:57:07,119 --> 08:57:12,957
collectively as the dns root servers

12713
08:57:10,398 --> 08:57:14,080
they are indicated by the letters a

12714
08:57:12,957 --> 08:57:17,520
through m

12715
08:57:14,080 --> 08:57:21,040
operated by 12 organizations such as

12716
08:57:17,520 --> 08:57:23,680
verisign cogent and nasa while there are

12717
08:57:21,040 --> 08:57:26,718
13 ip addresses that represent these

12718
08:57:23,680 --> 08:57:29,520
systems there are actually more than 13

12719
08:57:26,718 --> 08:57:32,637
servers some of the ip addresses are

12720
08:57:29,520 --> 08:57:35,840
actually a cluster of dns servers and so

12721
08:57:32,637 --> 08:57:38,718
each of these dns servers also consists

12722
08:57:35,840 --> 08:57:41,759
of the root zone file which contains the

12723
08:57:38,718 --> 08:57:44,317
address of the authoritative name server

12724
08:57:41,759 --> 08:57:46,637
for each top level domain and because

12725
08:57:44,317 --> 08:57:49,680
this is such a big undertaking to keep

12726
08:57:46,637 --> 08:57:52,317
updated iana or the internet assigned

12727
08:57:49,680 --> 08:57:54,957
numbers authority was appointed as the

12728
08:57:52,317 --> 08:57:57,360
authority that manages and administrates

12729
08:57:54,957 --> 08:57:59,520
this file and i will include a link in

12730
08:57:57,360 --> 08:58:02,159
the lesson text for those of you who are

12731
08:57:59,520 --> 08:58:04,718
looking to dive deeper into the contents

12732
08:58:02,159 --> 08:58:07,040
of this root zone file as well as

12733
08:58:04,718 --> 08:58:10,159
getting to know a little bit more about

12734
08:58:07,040 --> 08:58:12,718
the iana organization now while the dns

12735
08:58:10,159 --> 08:58:15,360
root servers establish the hierarchy

12736
08:58:12,718 --> 08:58:18,159
most of the name resolution process is

12737
08:58:15,360 --> 08:58:21,440
delegated to other dns servers so just

12738
08:58:18,159 --> 08:58:23,840
below the dns route in the hierarchy are

12739
08:58:21,439 --> 08:58:26,557
the top level domain servers

12740
08:58:23,840 --> 08:58:29,759
also known as tld for short the top

12741
08:58:26,558 --> 08:58:34,718
level domain takes the tld provided in

12742
08:58:29,759 --> 08:58:38,477
the user's query for example www.google

12743
08:58:34,718 --> 08:58:40,159
and provides details for the dot-com tld

12744
08:58:38,477 --> 08:58:42,558
name server the companies that

12745
08:58:40,159 --> 08:58:44,957
administer these domains are named

12746
08:58:42,558 --> 08:58:48,000
registries and they operate the

12747
08:58:44,957 --> 08:58:51,039
authoritative name servers for these top

12748
08:58:48,000 --> 08:58:53,840
level domains for example verisign is

12749
08:58:51,040 --> 08:58:56,558
the registry for the dot com top level

12750
08:58:53,840 --> 08:58:58,878
domain over a hundred million domains

12751
08:58:56,558 --> 08:59:01,520
have been registered in the dot com top

12752
08:58:58,878 --> 08:59:02,398
level domain and these top level dns

12753
08:59:01,520 --> 08:59:06,159
servers

12754
08:59:02,398 --> 08:59:09,600
handle top level domains such as com dot

12755
08:59:06,159 --> 08:59:13,119
org dot net and dot io and this can also

12756
08:59:09,599 --> 08:59:17,039
be referred to as the gtld which is the

12757
08:59:13,119 --> 08:59:18,957
general top level domains and the cctld

12758
08:59:17,040 --> 08:59:22,477
which is the country code top level

12759
08:59:18,957 --> 08:59:25,439
domain like dot ca for canada dot uk for

12760
08:59:22,477 --> 08:59:28,317
the united kingdom and dot it for italy

12761
08:59:25,439 --> 08:59:31,359
the top level dns servers delegate to

12762
08:59:28,317 --> 08:59:34,079
thousands of second level dns servers

12763
08:59:31,360 --> 08:59:37,119
now second level domain names are sold

12764
08:59:34,080 --> 08:59:40,958
to companies and other organizations and

12765
08:59:37,119 --> 08:59:43,919
over 900 accredited registrars register

12766
08:59:40,957 --> 08:59:46,957
and manage the second level domains in

12767
08:59:43,919 --> 08:59:49,119
the dot com domain for end users the

12768
08:59:46,957 --> 08:59:52,079
second level of this structure is

12769
08:59:49,119 --> 08:59:54,797
comprised of millions of domain names

12770
08:59:52,080 --> 08:59:57,440
second level dns servers can further

12771
08:59:54,797 --> 09:00:00,317
delegate the zone but most commonly

12772
08:59:57,439 --> 09:00:02,797
store the individual host records for a

12773
09:00:00,317 --> 09:00:05,520
domain name this is the server at the

12774
09:00:02,797 --> 09:00:07,919
bottom of the dns lookup chain where you

12775
09:00:05,520 --> 09:00:10,317
would typically find resource records

12776
09:00:07,919 --> 09:00:13,119
and it is these resource records that

12777
09:00:10,317 --> 09:00:15,360
maps services and host names to ip

12778
09:00:13,119 --> 09:00:17,840
addresses and will respond with the

12779
09:00:15,360 --> 09:00:20,159
queried resource record ultimately

12780
09:00:17,840 --> 09:00:23,439
allowing the web browser making the

12781
09:00:20,159 --> 09:00:25,919
request to reach the ip address needed

12782
09:00:23,439 --> 09:00:28,397
to access a website or other web

12783
09:00:25,919 --> 09:00:30,000
resources now there is one more concept

12784
09:00:28,398 --> 09:00:32,478
that i wanted to cover

12785
09:00:30,000 --> 09:00:34,558
before we move on and this is the sub

12786
09:00:32,477 --> 09:00:37,040
domain now some of you have noticed and

12787
09:00:34,558 --> 09:00:39,440
wondered where does the sub domain come

12788
09:00:37,040 --> 09:00:42,240
into play with regards to the dns

12789
09:00:39,439 --> 09:00:44,717
structure well this is a resource record

12790
09:00:42,240 --> 09:00:47,920
that falls under the second level domain

12791
09:00:44,718 --> 09:00:50,477
and in dns hierarchy a sub domain is a

12792
09:00:47,919 --> 09:00:52,797
domain that is a part of another main

12793
09:00:50,477 --> 09:00:54,637
domain but i wanted to put it in here

12794
09:00:52,797 --> 09:00:57,360
just to give you an understanding of

12795
09:00:54,637 --> 09:01:00,239
where subdomains would fall so now that

12796
09:00:57,360 --> 09:01:02,080
we understand how dns is structured i

12797
09:01:00,240 --> 09:01:04,878
wanted to go through the breakdown of

12798
09:01:02,080 --> 09:01:07,040
the data flow of dns to give you some

12799
09:01:04,878 --> 09:01:10,477
better contacts now there are eight

12800
09:01:07,040 --> 09:01:13,680
steps in a dns lookup first we start off

12801
09:01:10,477 --> 09:01:16,397
with the dns client which is shown here

12802
09:01:13,680 --> 09:01:18,797
as tony bowtie's laptop and this is a

12803
09:01:16,398 --> 09:01:21,360
client device which could also be a

12804
09:01:18,797 --> 09:01:24,957
phone or a tablet and is configured with

12805
09:01:21,360 --> 09:01:27,600
software to send name resolution queries

12806
09:01:24,957 --> 09:01:30,079
to a dns server so when a client needs

12807
09:01:27,599 --> 09:01:33,439
to resolve a remote host name into its

12808
09:01:30,080 --> 09:01:36,718
ip address in most cases it sends a

12809
09:01:33,439 --> 09:01:39,279
request to the dns recursive resolver

12810
09:01:36,718 --> 09:01:42,240
which returns the ip address of the

12811
09:01:39,279 --> 09:01:43,360
remote host to the client a recursive

12812
09:01:42,240 --> 09:01:46,638
resolver

12813
09:01:43,360 --> 09:01:49,440
is a dns server that is configured to

12814
09:01:46,637 --> 09:01:51,520
query other dns servers until it finds

12815
09:01:49,439 --> 09:01:53,919
the answer to the question it will

12816
09:01:51,520 --> 09:01:55,920
either return the answer or an error

12817
09:01:53,919 --> 09:01:58,637
message to the client if it cannot

12818
09:01:55,919 --> 09:02:00,957
answer the query and the query will

12819
09:01:58,637 --> 09:02:03,919
eventually be passed off to the dns

12820
09:02:00,957 --> 09:02:06,877
client the recursive resolver in essence

12821
09:02:03,919 --> 09:02:09,679
acts as the middle man between a client

12822
09:02:06,878 --> 09:02:12,240
and a dns name server which is usually

12823
09:02:09,680 --> 09:02:14,718
the internet service provider a service

12824
09:02:12,240 --> 09:02:16,798
carrier or a corporate network now to

12825
09:02:14,718 --> 09:02:20,317
make sure that a resolver is able to

12826
09:02:16,797 --> 09:02:22,637
properly run dns a root hints file is

12827
09:02:20,317 --> 09:02:25,279
supplied with almost every operating

12828
09:02:22,637 --> 09:02:28,557
system and this file holds the ip

12829
09:02:25,279 --> 09:02:31,520
addresses for the root name servers this

12830
09:02:28,558 --> 09:02:34,000
also includes the dns resolver but in

12831
09:02:31,520 --> 09:02:36,080
case it is unable to answer the query

12832
09:02:34,000 --> 09:02:39,119
the client will be able to still make

12833
09:02:36,080 --> 09:02:41,520
the query to the dns name servers now

12834
09:02:39,119 --> 09:02:42,477
after receiving a dns query from a

12835
09:02:41,520 --> 09:02:44,797
client

12836
09:02:42,477 --> 09:02:47,520
this recursive resolver will either

12837
09:02:44,797 --> 09:02:50,079
respond with cache data or send a

12838
09:02:47,520 --> 09:02:53,040
request to a root name server and in

12839
09:02:50,080 --> 09:02:55,600
this case the resolver queries a dns

12840
09:02:53,040 --> 09:02:57,920
root name server the root server then

12841
09:02:55,599 --> 09:03:02,477
responds to the resolver with the

12842
09:02:57,919 --> 09:03:05,439
address of a top level domain or tld dns

12843
09:03:02,477 --> 09:03:08,079
server such as com or dot net which

12844
09:03:05,439 --> 09:03:10,637
stores the information for its domains

12845
09:03:08,080 --> 09:03:13,680
now when searching for google.com the

12846
09:03:10,637 --> 09:03:16,878
request is pointed towards the dot-com

12847
09:03:13,680 --> 09:03:20,718
tld so naturally the resolver then makes

12848
09:03:16,878 --> 09:03:23,279
a request to the com tld then the tld

12849
09:03:20,718 --> 09:03:26,080
name server then responds with the ip

12850
09:03:23,279 --> 09:03:29,279
address of the domain's name server

12851
09:03:26,080 --> 09:03:31,840
google.com and lastly the resolver then

12852
09:03:29,279 --> 09:03:35,119
sends a query to the domain's name

12853
09:03:31,840 --> 09:03:37,680
server the ip address for google.com is

12854
09:03:35,119 --> 09:03:40,878
then returned to the resolver from the

12855
09:03:37,680 --> 09:03:43,439
name server this ip address is cache for

12856
09:03:40,878 --> 09:03:46,477
a period of time determined by the

12857
09:03:43,439 --> 09:03:48,797
google.com name server and this process

12858
09:03:46,477 --> 09:03:51,360
is so that a future request for this

12859
09:03:48,797 --> 09:03:54,159
hostname could be resolved from its

12860
09:03:51,360 --> 09:03:56,958
cache rather than performing the entire

12861
09:03:54,159 --> 09:03:59,680
process from beginning to end and so for

12862
09:03:56,957 --> 09:04:02,397
those of you who are unaware cache is a

12863
09:03:59,680 --> 09:04:04,878
component that stores data so that

12864
09:04:02,398 --> 09:04:06,958
future requests for that data can be

12865
09:04:04,878 --> 09:04:10,477
served faster the purpose of this

12866
09:04:06,957 --> 09:04:13,199
caching is to temporarily store data in

12867
09:04:10,477 --> 09:04:16,079
a location that results in improvements

12868
09:04:13,200 --> 09:04:19,360
in performance and reliability for data

12869
09:04:16,080 --> 09:04:22,718
requests dns caching involves storing

12870
09:04:19,360 --> 09:04:25,119
the data closer to the requesting client

12871
09:04:22,718 --> 09:04:28,159
so that the dns query can be resolved

12872
09:04:25,119 --> 09:04:31,039
earlier and additional queries further

12873
09:04:28,159 --> 09:04:34,398
down the dns lookup chain can be avoided

12874
09:04:31,040 --> 09:04:37,040
and thus improving load times dns data

12875
09:04:34,398 --> 09:04:39,760
can be cached in a variety of locations

12876
09:04:37,040 --> 09:04:42,878
down the chain each of which will store

12877
09:04:39,759 --> 09:04:45,759
dns records for a set amount of time

12878
09:04:42,878 --> 09:04:48,958
determined by a time to live also known

12879
09:04:45,759 --> 09:04:51,599
as ttl for short and this value is the

12880
09:04:48,957 --> 09:04:54,637
time to live for that domain record a

12881
09:04:51,599 --> 09:04:58,317
high ttl for a domain record means that

12882
09:04:54,637 --> 09:05:01,360
local dns resolvers will cache responses

12883
09:04:58,317 --> 09:05:04,637
for longer and give quicker responses

12884
09:05:01,360 --> 09:05:07,840
however making changes to dns records

12885
09:05:04,637 --> 09:05:10,557
can take longer due to the need to wait

12886
09:05:07,840 --> 09:05:13,119
for all cash records to expire

12887
09:05:10,558 --> 09:05:16,718
alternatively domain records with low

12888
09:05:13,119 --> 09:05:19,360
ttls can change much more quickly but

12889
09:05:16,718 --> 09:05:21,840
dns resolvers will need to refresh their

12890
09:05:19,360 --> 09:05:24,878
records more often and so in this final

12891
09:05:21,840 --> 09:05:27,680
step the dns resolver then responds to

12892
09:05:24,878 --> 09:05:30,240
the web browser with the ip address of

12893
09:05:27,680 --> 09:05:32,797
the domain requested initially and once

12894
09:05:30,240 --> 09:05:35,120
these eight steps of the dns lookup have

12895
09:05:32,797 --> 09:05:37,919
returned the ip address for

12896
09:05:35,119 --> 09:05:40,239
www.google.com

12897
09:05:37,919 --> 09:05:42,717
the browser is able to make the request

12898
09:05:40,240 --> 09:05:44,478
for the webpage and so the browser will

12899
09:05:42,718 --> 09:05:47,200
reach out to the ip address of the

12900
09:05:44,477 --> 09:05:49,919
server and request the web page which

12901
09:05:47,200 --> 09:05:52,398
will be loaded up in the browser now i

12902
09:05:49,919 --> 09:05:54,557
know this probably has been a review for

12903
09:05:52,398 --> 09:05:57,120
those who are a bit more advanced when

12904
09:05:54,558 --> 09:05:58,878
it comes to understanding dns but for

12905
09:05:57,119 --> 09:06:01,360
others who are fairly new to the

12906
09:05:58,878 --> 09:06:04,240
underpinnings of dns i hope this has

12907
09:06:01,360 --> 09:06:07,600
given you a basic understanding of what

12908
09:06:04,240 --> 09:06:10,000
it is why we use it and how it works

12909
09:06:07,599 --> 09:06:12,557
moving forward in the course i will be

12910
09:06:10,000 --> 09:06:15,680
discussing dns with regards to different

12911
09:06:12,557 --> 09:06:18,237
services and the needed resource records

12912
09:06:15,680 --> 09:06:20,718
within zones that are used by these

12913
09:06:18,237 --> 09:06:23,040
given services and so that's pretty much

12914
09:06:20,718 --> 09:06:25,917
all i wanted to cover when it comes to

12915
09:06:23,040 --> 09:06:28,319
the fundamentals of dns so you can now

12916
09:06:25,917 --> 09:06:29,959
mark this lesson as complete and let's

12917
09:06:28,319 --> 09:06:33,839
move on to the next one

12918
09:06:29,959 --> 09:06:36,479
[Music]

12919
09:06:33,839 --> 09:06:40,000
welcome back in this lesson i'm going to

12920
09:06:36,480 --> 09:06:41,680
be diving into dns record types now dns

12921
09:06:40,000 --> 09:06:44,639
resource records are the basic

12922
09:06:41,680 --> 09:06:46,718
information elements of the domain name

12923
09:06:44,639 --> 09:06:49,597
system they are entries in the dns

12924
09:06:46,718 --> 09:06:52,319
database which provide information about

12925
09:06:49,597 --> 09:06:55,121
hosts these records are physically

12926
09:06:52,319 --> 09:06:57,680
stored in the zone files on the dns

12927
09:06:55,122 --> 09:07:00,718
server this lesson will go through some

12928
09:06:57,680 --> 09:07:02,877
of the most commonly used dns records

12929
09:07:00,718 --> 09:07:05,360
that we will be coming across throughout

12930
09:07:02,877 --> 09:07:07,680
this course so with that being said

12931
09:07:05,360 --> 09:07:10,319
let's dive in now the first record that

12932
09:07:07,680 --> 09:07:13,122
i wanted to touch on are the name server

12933
09:07:10,319 --> 09:07:16,319
records also known as ns records for

12934
09:07:13,122 --> 09:07:19,438
short this record identifies which dns

12935
09:07:16,319 --> 09:07:22,480
server contains the current records for

12936
09:07:19,438 --> 09:07:25,277
a domain these servers are usually found

12937
09:07:22,480 --> 09:07:28,160
at a registrar internet service provider

12938
09:07:25,277 --> 09:07:31,438
or hosting company ns records are

12939
09:07:28,160 --> 09:07:34,718
created to identify the name server used

12940
09:07:31,438 --> 09:07:37,918
for each domain name within a given zone

12941
09:07:34,718 --> 09:07:40,319
in this example we have the dot co zone

12942
09:07:37,917 --> 09:07:41,877
that will have multiple name server

12943
09:07:40,319 --> 09:07:44,398
records for

12944
09:07:41,877 --> 09:07:47,437
bowtieinc.co now these name server

12945
09:07:44,398 --> 09:07:50,718
records are how the dot co delegation

12946
09:07:47,438 --> 09:07:53,200
happens for bowtieinc.co and they point

12947
09:07:50,718 --> 09:07:56,557
at servers that host the

12948
09:07:53,199 --> 09:07:59,680
inc.co zone that is managed by bowtie

12949
09:07:56,557 --> 09:08:01,917
inc and the flow shown here of the query

12950
09:07:59,680 --> 09:08:04,877
starts from the root zone going to the

12951
09:08:01,917 --> 09:08:08,078
dot co zone where the record lies for

12952
09:08:04,877 --> 09:08:11,437
the name servers for bowtieinc.com

12953
09:08:08,078 --> 09:08:13,758
and flows down to the bowtieinc.cozone

12954
09:08:11,438 --> 09:08:15,680
that contain all the necessary records

12955
09:08:13,758 --> 09:08:17,360
for bowtieinc.co

12956
09:08:15,680 --> 09:08:21,519
the next record that i wanted to touch

12957
09:08:17,360 --> 09:08:25,520
on are the a and aaa records and this is

12958
09:08:21,519 --> 09:08:29,121
short for address records for ipv4 and

12959
09:08:25,519 --> 09:08:31,839
ipv6 ip addresses respectively and this

12960
09:08:29,122 --> 09:08:37,480
record points a domain name to an ip

12961
09:08:31,839 --> 09:08:37,479
address for example when you type wwe

12962
09:08:37,519 --> 09:08:42,479
in a web browser the dns system will

12963
09:08:40,319 --> 09:08:47,398
translate that domain name

12964
09:08:42,480 --> 09:08:47,398
to the ip address of 52.54.92.195

12965
09:08:49,122 --> 09:08:53,918
using the a record information stored in

12966
09:08:52,000 --> 09:08:57,122
the bowtieinc.co

12967
09:08:53,917 --> 09:09:00,959
dns zone file the a record links a

12968
09:08:57,122 --> 09:09:02,960
website's domain name to an ipv4 address

12969
09:09:00,959 --> 09:09:05,680
that points to the server where the

12970
09:09:02,959 --> 09:09:09,277
website's files live now when it comes

12971
09:09:05,680 --> 09:09:13,040
to an aaa record this links a website's

12972
09:09:09,277 --> 09:09:15,438
domain to an ipv6 address that points to

12973
09:09:13,040 --> 09:09:18,160
the same server where the website's

12974
09:09:15,438 --> 09:09:20,718
files live a records are the simplest

12975
09:09:18,160 --> 09:09:24,238
type of dns records and one of the

12976
09:09:20,718 --> 09:09:26,800
primary records used in dns servers you

12977
09:09:24,237 --> 09:09:29,277
can do a lot with a records including

12978
09:09:26,800 --> 09:09:32,319
using multiple a records for the same

12979
09:09:29,277 --> 09:09:34,000
domain in order to provide redundancy

12980
09:09:32,319 --> 09:09:37,680
the same can be said

12981
09:09:34,000 --> 09:09:40,319
for aaa records additionally multiple

12982
09:09:37,680 --> 09:09:43,680
domains could point to the same address

12983
09:09:40,319 --> 09:09:47,680
in which case each would have its own a

12984
09:09:43,680 --> 09:09:48,639
or aaa record pointing to that same ip

12985
09:09:47,680 --> 09:09:51,597
address

12986
09:09:48,639 --> 09:09:54,479
moving on to cname records a c name

12987
09:09:51,597 --> 09:09:57,121
record short for canonical name record

12988
09:09:54,480 --> 09:09:59,758
is a type of resource record that maps

12989
09:09:57,122 --> 09:10:02,238
one domain name to another this can be

12990
09:09:59,758 --> 09:10:05,438
really convenient when running multiple

12991
09:10:02,237 --> 09:10:07,437
services like an ftp server and an

12992
09:10:05,438 --> 09:10:10,480
e-commerce server each running on

12993
09:10:07,438 --> 09:10:12,238
different ports from a single ip address

12994
09:10:10,480 --> 09:10:15,598
you can for example

12995
09:10:12,237 --> 09:10:18,639
point ftp ftp.bowtieinc.co

12996
09:10:15,597 --> 09:10:22,319
and shop.bowtieinc.co

12997
09:10:18,639 --> 09:10:25,122
to the dns entry for bowtieinc.co

12998
09:10:22,319 --> 09:10:28,078
which in turn has an a record which

12999
09:10:25,122 --> 09:10:29,840
points to the ip address so if the ip

13000
09:10:28,078 --> 09:10:32,639
address ever changes

13001
09:10:29,839 --> 09:10:36,077
you only have to change the record in

13002
09:10:32,639 --> 09:10:39,360
one place in the dns a record for bow

13003
09:10:36,078 --> 09:10:41,520
tie inc dot co and just as a note cname

13004
09:10:39,360 --> 09:10:44,718
records must always point to another

13005
09:10:41,519 --> 09:10:48,959
domain name and never directly to an ip

13006
09:10:44,718 --> 09:10:52,480
address next up are txt records a text

13007
09:10:48,959 --> 09:10:54,639
record or txt for short is a type of

13008
09:10:52,480 --> 09:10:57,278
resource record that provides text

13009
09:10:54,639 --> 09:11:00,319
information to sources outside your

13010
09:10:57,277 --> 09:11:03,519
domain that can be used for a number of

13011
09:11:00,319 --> 09:11:06,718
arbitrary purposes the records value can

13012
09:11:03,519 --> 09:11:09,597
be either human or machine readable text

13013
09:11:06,718 --> 09:11:12,480
in many cases text records are used to

13014
09:11:09,597 --> 09:11:15,758
verify domain ownership or even to

13015
09:11:12,480 --> 09:11:18,960
provide human readable information about

13016
09:11:15,758 --> 09:11:21,840
a server a network or a data center it

13017
09:11:18,959 --> 09:11:24,557
is also often used in a more structured

13018
09:11:21,839 --> 09:11:27,199
fashion to record small amounts of

13019
09:11:24,557 --> 09:11:29,917
machine readable data into the dns

13020
09:11:27,199 --> 09:11:32,077
system a domain may have multiple tax

13021
09:11:29,917 --> 09:11:34,718
records associated with it

13022
09:11:32,078 --> 09:11:37,840
provided the dns server implementation

13023
09:11:34,718 --> 09:11:40,319
supports this each record can in turn

13024
09:11:37,839 --> 09:11:41,597
have one or more character strings in

13025
09:11:40,319 --> 09:11:44,877
this example

13026
09:11:41,597 --> 09:11:48,000
google wants to verify the bowtieinc.co

13027
09:11:44,877 --> 09:11:51,277
domain so that g suite can be set up and

13028
09:11:48,000 --> 09:11:53,680
needs verification through the domain to

13029
09:11:51,277 --> 09:11:56,078
google through creating a text record

13030
09:11:53,680 --> 09:11:58,959
and adding it to the zone google will

13031
09:11:56,078 --> 09:12:02,718
then supply a text verification record

13032
09:11:58,959 --> 09:12:05,758
to add to the domain host's dns records

13033
09:12:02,718 --> 09:12:07,840
and start to scan for the text record to

13034
09:12:05,758 --> 09:12:10,639
verify the domain

13035
09:12:07,839 --> 09:12:13,359
the supplied text record is then added

13036
09:12:10,639 --> 09:12:15,438
by the domain administrator and behind

13037
09:12:13,360 --> 09:12:18,319
the scenes google is doing a

13038
09:12:15,438 --> 09:12:20,480
verification check at timed intervals

13039
09:12:18,319 --> 09:12:23,839
when google finally sees the record

13040
09:12:20,480 --> 09:12:25,840
exists the domain ownership is confirmed

13041
09:12:23,839 --> 09:12:28,877
and g suite can be enabled for the

13042
09:12:25,839 --> 09:12:31,519
domain and this is a typical example of

13043
09:12:28,877 --> 09:12:34,397
how tax records are used now moving on

13044
09:12:31,519 --> 09:12:37,277
to mx records a dns

13045
09:12:34,398 --> 09:12:40,000
mx record also known as the mail

13046
09:12:37,277 --> 09:12:43,121
exchange record is the resource record

13047
09:12:40,000 --> 09:12:46,480
that directs email to a mail server the

13048
09:12:43,122 --> 09:12:49,360
mx record indicates how email messages

13049
09:12:46,480 --> 09:12:52,398
should be routed and to which server

13050
09:12:49,360 --> 09:12:55,277
mail should go to like cname records an

13051
09:12:52,398 --> 09:12:58,319
mx record must always point to another

13052
09:12:55,277 --> 09:13:00,718
domain now mx records consist of two

13053
09:12:58,319 --> 09:13:03,360
parts the priority

13054
09:13:00,718 --> 09:13:06,398
and the domain name the priority are the

13055
09:13:03,360 --> 09:13:09,277
numbers before the domains for these mx

13056
09:13:06,398 --> 09:13:11,360
records and indicate the preference of

13057
09:13:09,277 --> 09:13:13,519
the order in which the mail server

13058
09:13:11,360 --> 09:13:16,237
should be used the lower the preference

13059
09:13:13,519 --> 09:13:17,519
number the higher the priority so in

13060
09:13:16,237 --> 09:13:21,519
this example

13061
09:13:17,519 --> 09:13:23,039
laura is emailing tony bowtie at tony at

13062
09:13:21,519 --> 09:13:26,000
bowtieinc.co

13063
09:13:23,040 --> 09:13:29,040
the mx records are part of this process

13064
09:13:26,000 --> 09:13:31,438
as dns needs to know where to send the

13065
09:13:29,040 --> 09:13:34,200
mail to and we'll look at the domain

13066
09:13:31,438 --> 09:13:37,680
attached to the email address which is

13067
09:13:34,199 --> 09:13:40,877
bowtieinc.co so the dns client will run

13068
09:13:37,680 --> 09:13:42,840
a regular dns query by first going to

13069
09:13:40,877 --> 09:13:46,717
the root then to the

13070
09:13:42,839 --> 09:13:49,437
cotld and finally to bowtieinc.co

13071
09:13:46,718 --> 09:13:52,160
it will then receive the mx record which

13072
09:13:49,438 --> 09:13:54,319
in this example is two of them the first

13073
09:13:52,160 --> 09:13:56,558
one being mail representing

13074
09:13:54,319 --> 09:13:58,398
mail.bowtieinc.co

13075
09:13:56,557 --> 09:14:01,121
and then the second one is a different

13076
09:13:58,398 --> 09:14:04,078
mail server outside the current domain

13077
09:14:01,122 --> 09:14:07,398
and in this case is a google mail server

13078
09:14:04,078 --> 09:14:07,398
of aspmx.l.google.com

13079
09:14:08,000 --> 09:14:12,480
and this is a fully qualified domain

13080
09:14:10,078 --> 09:14:15,758
name as the dot on the right of this

13081
09:14:12,480 --> 09:14:18,878
record suggests so here the server will

13082
09:14:15,758 --> 09:14:22,558
always try mail.bowtieinc.co

13083
09:14:18,877 --> 09:14:25,757
first because 5 is lower than 10. and

13084
09:14:22,557 --> 09:14:28,319
this will give mail.bowtieinc.co

13085
09:14:25,758 --> 09:14:30,800
the higher priority in the result of a

13086
09:14:28,319 --> 09:14:34,758
message send failure the server will

13087
09:14:30,800 --> 09:14:34,758
default to aspmx.l.google.com

13088
09:14:35,277 --> 09:14:39,758
if both values are the same then it

13089
09:14:37,597 --> 09:14:42,479
would be low balanced across both

13090
09:14:39,758 --> 09:14:45,122
servers whichever is used the server

13091
09:14:42,480 --> 09:14:47,840
gets the result of the query back and it

13092
09:14:45,122 --> 09:14:52,398
uses this to connect to the mail server

13093
09:14:47,839 --> 09:14:55,121
for bowtieinc.co via the smtp protocol

13094
09:14:52,398 --> 09:14:58,000
and it uses this protocol to deliver all

13095
09:14:55,122 --> 09:15:00,558
email and this is how mx records are

13096
09:14:58,000 --> 09:15:03,277
used for email the next record i wanted

13097
09:15:00,557 --> 09:15:06,397
to cover are the pointer records

13098
09:15:03,277 --> 09:15:09,121
also known as ptr records for short and

13099
09:15:06,398 --> 09:15:11,917
this provides the domain name associated

13100
09:15:09,122 --> 09:15:14,878
with an ip address so a dns pointer

13101
09:15:11,917 --> 09:15:17,519
record is exactly the opposite of the a

13102
09:15:14,877 --> 09:15:20,077
record which provides the ip address

13103
09:15:17,519 --> 09:15:23,121
associated with the domain name dns

13104
09:15:20,078 --> 09:15:26,000
pointer records are used in reverse dns

13105
09:15:23,122 --> 09:15:28,398
lookups as we discussed earlier when a

13106
09:15:26,000 --> 09:15:31,360
user attempts to reach a domain name in

13107
09:15:28,398 --> 09:15:33,360
their browser a dns lookup occurs

13108
09:15:31,360 --> 09:15:36,319
matching the domain name to the ip

13109
09:15:33,360 --> 09:15:38,718
address a reverse dns lookup is the

13110
09:15:36,319 --> 09:15:41,597
opposite of this process and it is a

13111
09:15:38,718 --> 09:15:44,398
query that starts with the ip address

13112
09:15:41,597 --> 09:15:46,718
and looks up the domain name while dnsa

13113
09:15:44,398 --> 09:15:49,438
records are stored under the given

13114
09:15:46,718 --> 09:15:52,718
domain name dns pointer records are

13115
09:15:49,438 --> 09:15:55,438
stored under the ip address reverse and

13116
09:15:52,718 --> 09:15:59,277
ending in dot i n

13117
09:15:55,438 --> 09:16:01,758
a d d r dot arpa so in this example the

13118
09:15:59,277 --> 09:16:04,758
pointer record for the iap address

13119
09:16:01,758 --> 09:16:04,758
52.54.90

13120
09:16:05,839 --> 09:16:10,121
would be stored under 195.92.54.52

13121
09:16:12,160 --> 09:16:17,200
dot in

13122
09:16:13,360 --> 09:16:19,520
addr dot arpa ipv6 addresses are

13123
09:16:17,199 --> 09:16:23,360
constructed differently from ipv4

13124
09:16:19,519 --> 09:16:25,397
addresses and ipv6 pointer records exist

13125
09:16:23,360 --> 09:16:28,800
in a different namespace

13126
09:16:25,398 --> 09:16:32,878
within.arpa ipv6 pointer records are

13127
09:16:28,800 --> 09:16:35,918
stored under the ipv6 address reversed

13128
09:16:32,877 --> 09:16:39,680
and converted into 4-bit sections as

13129
09:16:35,917 --> 09:16:43,360
opposed to 8-bit sections as in ipv4 and

13130
09:16:39,680 --> 09:16:46,000
as well the domain.ip6.arpa

13131
09:16:43,360 --> 09:16:48,639
is added at the end pointer records are

13132
09:16:46,000 --> 09:16:51,519
used most commonly in reverse dns

13133
09:16:48,639 --> 09:16:54,237
lookups for anti-spam troubleshooting

13134
09:16:51,519 --> 09:16:56,639
email delivery issues and logging and so

13135
09:16:54,237 --> 09:16:59,757
the last record that i wanted to cover

13136
09:16:56,639 --> 09:17:02,000
are the soa records also known as the

13137
09:16:59,758 --> 09:17:04,718
start of authority records and this

13138
09:17:02,000 --> 09:17:07,199
resource record is created for you when

13139
09:17:04,718 --> 09:17:10,398
you create your managed zone and

13140
09:17:07,199 --> 09:17:13,437
specifies the authoritative information

13141
09:17:10,398 --> 09:17:16,558
including global parameters about a dns

13142
09:17:13,438 --> 09:17:19,438
zone the soa record stores important

13143
09:17:16,557 --> 09:17:20,877
information about a domain or zone such

13144
09:17:19,438 --> 09:17:23,122
as the email address of the

13145
09:17:20,877 --> 09:17:25,437
administrator when the domain was last

13146
09:17:23,122 --> 09:17:28,398
updated and how long the server should

13147
09:17:25,438 --> 09:17:31,758
wait between refreshes every dns zone

13148
09:17:28,398 --> 09:17:35,840
registered must have an soa record as

13149
09:17:31,758 --> 09:17:39,840
per the rfc 1035 and there is exactly

13150
09:17:35,839 --> 09:17:42,237
one soa record per zone the soa record

13151
09:17:39,839 --> 09:17:45,519
contains the core information about your

13152
09:17:42,237 --> 09:17:48,159
zone so it is not possible for your zone

13153
09:17:45,519 --> 09:17:50,717
to work without that information and i

13154
09:17:48,160 --> 09:17:52,878
will include a link in the lesson text

13155
09:17:50,718 --> 09:17:54,878
for those who are interested in diving

13156
09:17:52,877 --> 09:17:57,199
deeper and understanding all the

13157
09:17:54,877 --> 09:18:00,397
information that is covered under these

13158
09:17:57,199 --> 09:18:03,597
soa records a properly optimized and

13159
09:18:00,398 --> 09:18:06,160
updated soa record can reduce bandwidth

13160
09:18:03,597 --> 09:18:08,877
between name servers increase the speed

13161
09:18:06,160 --> 09:18:12,078
of website access and ensure the site is

13162
09:18:08,877 --> 09:18:14,319
alive even when the primary dns server

13163
09:18:12,078 --> 09:18:16,718
is down and so that about covers

13164
09:18:14,319 --> 09:18:20,000
everything that i wanted to discuss when

13165
09:18:16,718 --> 09:18:21,520
it comes to resource records within dns

13166
09:18:20,000 --> 09:18:22,557
so you can now mark this lesson as

13167
09:18:21,519 --> 09:18:24,579
complete

13168
09:18:22,557 --> 09:18:28,479
and let's move on to the next one

13169
09:18:24,580 --> 09:18:29,758
[Music]

13170
09:18:28,480 --> 09:18:32,558
welcome back

13171
09:18:29,758 --> 09:18:35,758
in this lesson i'm going to be covering

13172
09:18:32,557 --> 09:18:38,479
network address translation also known

13173
09:18:35,758 --> 09:18:39,520
as nat for short this is a common

13174
09:18:38,480 --> 09:18:42,558
process

13175
09:18:39,519 --> 09:18:45,199
used in home business and any cloud

13176
09:18:42,557 --> 09:18:47,437
networks that you will encounter knowing

13177
09:18:45,199 --> 09:18:50,319
and understanding that will help you

13178
09:18:47,438 --> 09:18:53,040
achieve why you would use it and what

13179
09:18:50,319 --> 09:18:55,277
makes it such a necessary process

13180
09:18:53,040 --> 09:18:58,557
now there's quite a bit to cover here so

13181
09:18:55,277 --> 09:19:01,917
with that being said let's dive in

13182
09:18:58,557 --> 09:19:05,839
now at a high level nat is a way to map

13183
09:19:01,917 --> 09:19:08,557
multiple local private ip addresses to a

13184
09:19:05,839 --> 09:19:11,679
public ip address before transferring

13185
09:19:08,557 --> 09:19:14,719
the information this is done by altering

13186
09:19:11,680 --> 09:19:17,040
the network address data in the ip

13187
09:19:14,720 --> 09:19:19,360
header of the data packet while

13188
09:19:17,040 --> 09:19:20,559
traveling through a network towards the

13189
09:19:19,360 --> 09:19:23,199
destination

13190
09:19:20,559 --> 09:19:25,915
as packets pass through a nat device

13191
09:19:23,199 --> 09:19:27,915
either the source or destination ip

13192
09:19:25,915 --> 09:19:30,239
address is changed

13193
09:19:27,915 --> 09:19:33,040
then packets returning in the other

13194
09:19:30,239 --> 09:19:34,879
direction are translated back to the

13195
09:19:33,040 --> 09:19:37,360
original addresses

13196
09:19:34,879 --> 09:19:40,239
and this is a process that is typically

13197
09:19:37,360 --> 09:19:42,559
used in most home routers that are

13198
09:19:40,239 --> 09:19:45,756
provided by your internet service

13199
09:19:42,559 --> 09:19:49,360
provider now originally nat was designed

13200
09:19:45,756 --> 09:19:51,756
to deal with the scarcity of free ipv4

13201
09:19:49,360 --> 09:19:54,879
addresses increasing the number of

13202
09:19:51,756 --> 09:19:57,916
computers that can operate off a single

13203
09:19:54,879 --> 09:20:01,435
publicly routable ip address and so

13204
09:19:57,915 --> 09:20:04,915
because devices in the private ip space

13205
09:20:01,436 --> 09:20:04,916
such as 192.168.0.0

13206
09:20:05,519 --> 09:20:11,199
cannot traverse the public internet

13207
09:20:08,480 --> 09:20:14,000
that is needed for those devices to

13208
09:20:11,199 --> 09:20:18,479
communicate with the public internet now

13209
09:20:14,000 --> 09:20:21,199
ipv6 was designed to overcome the ipv4

13210
09:20:18,480 --> 09:20:23,916
shortage and has tons of available

13211
09:20:21,199 --> 09:20:27,199
addresses and therefore there is no real

13212
09:20:23,915 --> 09:20:30,000
need for nat when it comes to ipv6 now

13213
09:20:27,199 --> 09:20:33,119
nat has an additional benefit of adding

13214
09:20:30,000 --> 09:20:36,080
a layer of security and privacy by

13215
09:20:33,120 --> 09:20:39,120
hiding the ip address of your devices

13216
09:20:36,080 --> 09:20:42,560
from the outside world and only allowing

13217
09:20:39,120 --> 09:20:45,360
packets to be sent and received from the

13218
09:20:42,559 --> 09:20:48,479
originating private device and so this

13219
09:20:45,360 --> 09:20:50,559
is a high level of what nat is now there

13220
09:20:48,480 --> 09:20:51,520
are multiple types of not that i will be

13221
09:20:50,559 --> 09:20:54,399
covering

13222
09:20:51,519 --> 09:20:57,359
which at a high level do the same thing

13223
09:20:54,400 --> 09:21:00,080
which is translate private i p addresses

13224
09:20:57,360 --> 09:21:02,480
to public ip addresses yet different

13225
09:21:00,080 --> 09:21:05,916
types of nat handles the process

13226
09:21:02,480 --> 09:21:09,040
differently so first we have static nat

13227
09:21:05,915 --> 09:21:11,275
which maps a single private ip address

13228
09:21:09,040 --> 09:21:13,756
to a public ip address

13229
09:21:11,275 --> 09:21:16,799
so a one-to-one mapping that gives the

13230
09:21:13,756 --> 09:21:19,436
device with the private ip address

13231
09:21:16,800 --> 09:21:20,639
access to the public internet in both

13232
09:21:19,436 --> 09:21:23,680
directions

13233
09:21:20,639 --> 09:21:26,720
this is commonly used where one specific

13234
09:21:23,680 --> 09:21:29,275
device with a private address needs

13235
09:21:26,720 --> 09:21:31,916
access to the public internet the next

13236
09:21:29,275 --> 09:21:34,479
type of nat is dynamic nan and this is

13237
09:21:31,915 --> 09:21:37,755
similar to static nat but doesn't hold

13238
09:21:34,480 --> 09:21:39,040
the same static allocation a private ip

13239
09:21:37,756 --> 09:21:41,840
address space

13240
09:21:39,040 --> 09:21:45,040
is mapped to a pool of public ip

13241
09:21:41,839 --> 09:21:47,595
addresses and are allocated randomly as

13242
09:21:45,040 --> 09:21:50,639
needed when the ip address is no longer

13243
09:21:47,595 --> 09:21:53,756
needed the ip address is returned back

13244
09:21:50,639 --> 09:21:54,959
to the pool ready to be used by another

13245
09:21:53,756 --> 09:21:57,595
device

13246
09:21:54,959 --> 09:22:00,799
this method is commonly used where

13247
09:21:57,595 --> 09:22:02,000
multiple internal hosts with private i p

13248
09:22:00,800 --> 09:22:04,960
addresses

13249
09:22:02,000 --> 09:22:06,879
are sharing an equal or fewer amount of

13250
09:22:04,959 --> 09:22:09,595
public i p addresses

13251
09:22:06,879 --> 09:22:12,959
and is designed to be an efficient use

13252
09:22:09,595 --> 09:22:15,680
of public ips and finally there is port

13253
09:22:12,959 --> 09:22:18,720
address translation or pat

13254
09:22:15,680 --> 09:22:21,436
where multiple private ip addresses are

13255
09:22:18,720 --> 09:22:24,319
translated using a single public ip

13256
09:22:21,436 --> 09:22:25,916
address and a specific port

13257
09:22:24,319 --> 09:22:28,480
and this is probably what your home

13258
09:22:25,915 --> 09:22:31,360
router is using and will cover all the

13259
09:22:28,480 --> 09:22:34,319
devices you use in your home network

13260
09:22:31,360 --> 09:22:37,040
this method uses ports to help

13261
09:22:34,319 --> 09:22:39,915
distinguish individual devices

13262
09:22:37,040 --> 09:22:43,120
and is also the method that is used for

13263
09:22:39,915 --> 09:22:45,839
cloudnat in google cloud which i will be

13264
09:22:43,120 --> 09:22:48,880
covering in a later lesson and so i

13265
09:22:45,839 --> 09:22:50,719
wanted to get into a bit more detail on

13266
09:22:48,879 --> 09:22:53,119
how these methods work

13267
09:22:50,720 --> 09:22:55,680
starting with static not

13268
09:22:53,120 --> 09:22:57,840
now to set the stage for static not i'm

13269
09:22:55,680 --> 09:22:59,915
going to start off with a private

13270
09:22:57,839 --> 09:23:02,000
network here on the left

13271
09:22:59,915 --> 09:23:02,879
and the public ip space here on the

13272
09:23:02,000 --> 09:23:05,199
right

13273
09:23:02,879 --> 09:23:08,319
and the router or not device in the

13274
09:23:05,199 --> 09:23:11,119
middle in this example there is a server

13275
09:23:08,319 --> 09:23:14,319
on the left that needs access to

13276
09:23:11,120 --> 09:23:17,040
external services and for this example

13277
09:23:14,319 --> 09:23:20,559
the external service we are using is the

13278
09:23:17,040 --> 09:23:23,360
bowtress service an image sharing site

13279
09:23:20,559 --> 09:23:26,399
for all sorts of awesome bow ties

13280
09:23:23,360 --> 09:23:31,800
so the server on the left is private

13281
09:23:26,400 --> 09:23:31,800
with a private ip address of 192.168.0.5

13282
09:23:32,879 --> 09:23:39,199
and this means it has an address in the

13283
09:23:35,595 --> 09:23:41,756
ip version 4 private address space

13284
09:23:39,199 --> 09:23:44,479
meaning that it cannot route packets

13285
09:23:41,756 --> 09:23:46,559
over the public internet because it only

13286
09:23:44,480 --> 09:23:48,800
has a private ip

13287
09:23:46,559 --> 09:23:51,275
the beautress service on the other hand

13288
09:23:48,800 --> 09:23:54,276
has a public ip address which is

13289
09:23:51,275 --> 09:23:54,275
54.5.4.9

13290
09:23:54,639 --> 09:24:00,080
so the issue we run into is that the

13291
09:23:57,120 --> 09:24:02,639
private address can't be routed over the

13292
09:24:00,080 --> 09:24:04,720
public internet because it's private and

13293
09:24:02,639 --> 09:24:05,756
the public address of the beau trust

13294
09:24:04,720 --> 09:24:08,239
service

13295
09:24:05,756 --> 09:24:10,800
can't directly communicate with any

13296
09:24:08,239 --> 09:24:13,436
private address because public and

13297
09:24:10,800 --> 09:24:16,240
private addresses can communicate over

13298
09:24:13,436 --> 09:24:18,480
the public internet what we need is to

13299
09:24:16,239 --> 09:24:20,319
translate the private address that the

13300
09:24:18,480 --> 09:24:23,360
server on the left has

13301
09:24:20,319 --> 09:24:26,239
to a public ip that can communicate with

13302
09:24:23,360 --> 09:24:28,160
the service on the right and vice versa

13303
09:24:26,239 --> 09:24:31,119
now then that device will map the

13304
09:24:28,160 --> 09:24:34,720
private ip to public ip

13305
09:24:31,120 --> 09:24:37,916
using and maintaining a nat table and in

13306
09:24:34,720 --> 09:24:40,559
this case of static nat the nat device

13307
09:24:37,915 --> 09:24:43,519
will have a one-to-one mapping of the

13308
09:24:40,559 --> 09:24:46,079
private ip address to a public ip

13309
09:24:43,519 --> 09:24:48,879
address and can be allocated to the

13310
09:24:46,080 --> 09:24:53,400
device specified which in this case is

13311
09:24:48,879 --> 09:24:53,399
the server marked as 192.168.0.15

13312
09:24:54,000 --> 09:24:56,400
and so in order for the server on the

13313
09:24:55,680 --> 09:24:58,239
left

13314
09:24:56,400 --> 09:25:00,720
to communicate with the beautress

13315
09:24:58,239 --> 09:25:03,756
service the server will generate a

13316
09:25:00,720 --> 09:25:06,639
packet as normal with the source ip of

13317
09:25:03,756 --> 09:25:09,200
the packet being the server's private ip

13318
09:25:06,639 --> 09:25:12,000
address and the destination ip of the

13319
09:25:09,199 --> 09:25:14,399
packet being the ip of the bowtrust

13320
09:25:12,000 --> 09:25:17,595
service now the router in the middle is

13321
09:25:14,400 --> 09:25:20,319
the default gateway for any destination

13322
09:25:17,595 --> 09:25:23,119
so any ip packets which are destined for

13323
09:25:20,319 --> 09:25:25,275
anything but the local network are sent

13324
09:25:23,120 --> 09:25:27,596
to the router so as you can see here

13325
09:25:25,275 --> 09:25:30,479
with the entry in the table it will

13326
09:25:27,595 --> 09:25:33,479
contain the private i p address of

13327
09:25:30,480 --> 09:25:33,480
192.168.0.15

13328
09:25:34,800 --> 09:25:41,880
and mapped to the public address which

13329
09:25:37,436 --> 09:25:41,880
in this case is 73.6.2.33

13330
09:25:42,879 --> 09:25:47,360
and these are statically mapped to one

13331
09:25:44,959 --> 09:25:49,680
another and so as the packet passes

13332
09:25:47,360 --> 09:25:52,559
through the nat device the source

13333
09:25:49,680 --> 09:25:55,275
address of the packet is translated

13334
09:25:52,559 --> 09:25:58,159
from the private address to the mapped

13335
09:25:55,275 --> 09:26:01,040
public address and this results in a new

13336
09:25:58,160 --> 09:26:03,756
packet so this new packet still has

13337
09:26:01,040 --> 09:26:07,040
beautrest as the destination

13338
09:26:03,756 --> 09:26:08,400
but now it has a valid public ip address

13339
09:26:07,040 --> 09:26:10,160
as the source

13340
09:26:08,400 --> 09:26:13,360
and so this is the translation that

13341
09:26:10,160 --> 09:26:15,520
happens through nat now this process

13342
09:26:13,360 --> 09:26:16,720
works in a similar way in the other

13343
09:26:15,519 --> 09:26:18,959
direction

13344
09:26:16,720 --> 09:26:22,080
so when the beautress service receives

13345
09:26:18,959 --> 09:26:23,595
the packet it sees the source as this

13346
09:26:22,080 --> 09:26:26,639
public ip

13347
09:26:23,595 --> 09:26:29,595
so when it responds with data its packet

13348
09:26:26,639 --> 09:26:32,000
has its ip address as the source

13349
09:26:29,595 --> 09:26:34,399
and the previous server's public ip

13350
09:26:32,000 --> 09:26:37,120
address as the destination

13351
09:26:34,400 --> 09:26:40,239
so it sends this packet back to this

13352
09:26:37,120 --> 09:26:43,436
public ip so when the packet arrives at

13353
09:26:40,239 --> 09:26:46,639
the nat device the table is checked

13354
09:26:43,436 --> 09:26:50,000
it recognizes then that the ip is for

13355
09:26:46,639 --> 09:26:50,959
the server and so this time for incoming

13356
09:26:50,000 --> 09:26:54,959
traffic

13357
09:26:50,959 --> 09:26:58,000
the destination ip address is updated to

13358
09:26:54,959 --> 09:27:00,479
the corresponding private ip address and

13359
09:26:58,000 --> 09:27:03,040
then the packet is forwarded through to

13360
09:27:00,480 --> 09:27:06,080
the private server and this is how

13361
09:27:03,040 --> 09:27:09,840
static nat works the source i p address

13362
09:27:06,080 --> 09:27:11,520
is translated from the mapped private ip

13363
09:27:09,839 --> 09:27:14,319
to public ip

13364
09:27:11,519 --> 09:27:17,359
and for incoming traffic the destination

13365
09:27:14,319 --> 09:27:20,639
i p address is translated from the

13366
09:27:17,360 --> 09:27:22,959
allocated public ip to the corresponding

13367
09:27:20,639 --> 09:27:25,275
private ip all without having to

13368
09:27:22,959 --> 09:27:27,360
configure a public ip

13369
09:27:25,275 --> 09:27:30,319
on any private device

13370
09:27:27,360 --> 09:27:31,756
as they always hold their private ip

13371
09:27:30,319 --> 09:27:34,319
addresses

13372
09:27:31,756 --> 09:27:37,360
now i wanted to supply an analogy for

13373
09:27:34,319 --> 09:27:40,159
nat and so a very common analogy that is

13374
09:27:37,360 --> 09:27:41,436
used is that of a phone service so in

13375
09:27:40,160 --> 09:27:44,560
this example

13376
09:27:41,436 --> 09:27:48,000
laura is the new manager of bow tie inc

13377
09:27:44,559 --> 09:27:49,915
new location in montreal and has put in

13378
09:27:48,000 --> 09:27:52,915
a new public phone number of

13379
09:27:49,915 --> 09:27:52,915
514-555-8437

13380
09:27:53,756 --> 09:27:58,400
although as you can see here laura also

13381
09:27:56,400 --> 09:28:01,120
has a private extension

13382
09:27:58,400 --> 09:28:03,916
of one three three seven now if george

13383
09:28:01,120 --> 09:28:06,240
called laura at that public phone number

13384
09:28:03,915 --> 09:28:08,639
he would reach laura without ever

13385
09:28:06,239 --> 09:28:11,275
knowing her private extension so the

13386
09:28:08,639 --> 09:28:12,479
private extension acts as that private

13387
09:28:11,275 --> 09:28:14,959
ip address

13388
09:28:12,480 --> 09:28:17,520
and the public phone number would act as

13389
09:28:14,959 --> 09:28:20,879
the public ip address and this would be

13390
09:28:17,519 --> 09:28:23,039
the telephone analogy for static nat and

13391
09:28:20,879 --> 09:28:25,680
so this is the end of part one of this

13392
09:28:23,040 --> 09:28:28,000
lesson it was getting a bit long so i

13393
09:28:25,680 --> 09:28:30,400
decided to break it up this would be a

13394
09:28:28,000 --> 09:28:32,879
great opportunity for you to get up and

13395
09:28:30,400 --> 09:28:35,436
have a stretch get yourself a coffee or

13396
09:28:32,879 --> 09:28:37,839
a tea and whenever you're ready you can

13397
09:28:35,436 --> 09:28:40,080
join me in part two where we will be

13398
09:28:37,839 --> 09:28:42,399
starting immediately from the end of

13399
09:28:40,080 --> 09:28:44,639
part one so you can go ahead and

13400
09:28:42,400 --> 09:28:45,959
complete this video and i will see you

13401
09:28:44,639 --> 09:28:50,000
in part two

13402
09:28:45,959 --> 09:28:52,959
[Music]

13403
09:28:50,000 --> 09:28:55,680
welcome back this is part two of the

13404
09:28:52,959 --> 09:28:57,839
network address translation lesson and

13405
09:28:55,680 --> 09:29:00,160
we will be starting exactly where we

13406
09:28:57,839 --> 09:29:03,359
left off from part 1.

13407
09:29:00,160 --> 09:29:05,916
so with that being said let's dive in

13408
09:29:03,360 --> 09:29:08,800
now moving on to dynamic nat

13409
09:29:05,915 --> 09:29:12,000
this method is similar to static nat

13410
09:29:08,800 --> 09:29:14,080
except that devices are not allocated a

13411
09:29:12,000 --> 09:29:17,595
permanent public ip

13412
09:29:14,080 --> 09:29:20,000
a public ip address is allocated from a

13413
09:29:17,595 --> 09:29:22,319
pool of ip addresses

13414
09:29:20,000 --> 09:29:25,595
as they are needed and the mapping of

13415
09:29:22,319 --> 09:29:28,159
public to private is allocation base in

13416
09:29:25,595 --> 09:29:31,199
this example there are two devices on

13417
09:29:28,160 --> 09:29:33,596
the left and according to the nat table

13418
09:29:31,199 --> 09:29:35,360
there are two public ip addresses

13419
09:29:33,595 --> 09:29:38,360
available for use

13420
09:29:35,360 --> 09:29:38,360
73.6.2.33

13421
09:29:38,720 --> 09:29:42,040
and 73.6.2.34

13422
09:29:42,239 --> 09:29:46,959
so when the laptop on the left is

13423
09:29:44,239 --> 09:29:49,199
looking to access the beautress service

13424
09:29:46,959 --> 09:29:50,479
it will generate a packet where the

13425
09:29:49,199 --> 09:29:55,479
source ip

13426
09:29:50,480 --> 09:29:55,480
is the private address of 192.168.0.13

13427
09:29:56,319 --> 09:30:01,720
and the destination ip is 54.5.4.9

13428
09:30:02,080 --> 09:30:06,959
so it sends this packet and again the

13429
09:30:04,879 --> 09:30:10,399
router in the middle is the default

13430
09:30:06,959 --> 09:30:13,120
gateway for anything that isn't local as

13431
09:30:10,400 --> 09:30:14,639
the packet passes through the router or

13432
09:30:13,120 --> 09:30:17,436
the nat device

13433
09:30:14,639 --> 09:30:20,400
it checks if the private ip has a

13434
09:30:17,436 --> 09:30:23,040
current allocation of public addressing

13435
09:30:20,400 --> 09:30:25,360
from the pool and if it doesn't and one

13436
09:30:23,040 --> 09:30:27,840
is available it allocates one

13437
09:30:25,360 --> 09:30:30,840
dynamically and in this case

13438
09:30:27,839 --> 09:30:30,839
73.6.2.34

13439
09:30:30,959 --> 09:30:35,120
is allocated

13440
09:30:32,400 --> 09:30:37,596
so the packet's source i p address

13441
09:30:35,120 --> 09:30:39,520
is translated to this address

13442
09:30:37,595 --> 09:30:42,319
and the packets are sent to the

13443
09:30:39,519 --> 09:30:45,039
beautress service and so this process is

13444
09:30:42,319 --> 09:30:48,000
the same as static not thus far

13445
09:30:45,040 --> 09:30:50,800
but because dynamic nat allocates these

13446
09:30:48,000 --> 09:30:53,680
ip addresses dynamically multiple

13447
09:30:50,800 --> 09:30:55,200
private devices can share a single

13448
09:30:53,680 --> 09:30:58,160
public ip

13449
09:30:55,199 --> 09:31:01,680
as long as the devices are not using the

13450
09:30:58,160 --> 09:31:03,120
same public ip at the same time and so

13451
09:31:01,680 --> 09:31:06,319
once the device is finished

13452
09:31:03,120 --> 09:31:09,436
communication the ip is returned back to

13453
09:31:06,319 --> 09:31:12,720
the pool and is ready for use by another

13454
09:31:09,436 --> 09:31:15,200
device now just as a note if there's no

13455
09:31:12,720 --> 09:31:18,400
public ip addresses available

13456
09:31:15,199 --> 09:31:21,275
the router rejects any new connections

13457
09:31:18,400 --> 09:31:23,756
until you clear the nat mappings

13458
09:31:21,275 --> 09:31:26,479
but if you have as many public ip

13459
09:31:23,756 --> 09:31:29,200
addresses as hosts in your network

13460
09:31:26,480 --> 09:31:31,916
you won't encounter this problem and so

13461
09:31:29,199 --> 09:31:33,915
in this case since the lower server is

13462
09:31:31,915 --> 09:31:34,959
looking to access the fashion tube

13463
09:31:33,915 --> 09:31:37,519
service

13464
09:31:34,959 --> 09:31:38,639
there is an available public ip address

13465
09:31:37,519 --> 09:31:41,879
in the pool

13466
09:31:38,639 --> 09:31:41,879
of 73.6.2.33

13467
09:31:42,400 --> 09:31:48,480
thus giving it access to the public

13468
09:31:45,120 --> 09:31:51,520
internet and access to fashion tube so

13469
09:31:48,480 --> 09:31:55,520
in summary the nat device maps a private

13470
09:31:51,519 --> 09:31:58,879
ip with the public ip in a nat table and

13471
09:31:55,519 --> 09:32:02,079
public ips are allocated randomly and

13472
09:31:58,879 --> 09:32:04,959
dynamically from a pool now this type of

13473
09:32:02,080 --> 09:32:07,680
knot is used where multiple internal

13474
09:32:04,959 --> 09:32:10,799
hosts with private ip addresses

13475
09:32:07,680 --> 09:32:13,680
are sharing an equal or fewer amount of

13476
09:32:10,800 --> 09:32:16,560
public ip addresses when all of those

13477
09:32:13,680 --> 09:32:18,319
private devices at some time will need

13478
09:32:16,559 --> 09:32:21,119
public access

13479
09:32:18,319 --> 09:32:22,800
now an example of dynamic nat using the

13480
09:32:21,120 --> 09:32:25,756
telephone analogy

13481
09:32:22,800 --> 09:32:27,520
would be if laura and two other bow tie

13482
09:32:25,756 --> 09:32:28,959
inc employees

13483
09:32:27,519 --> 09:32:30,959
lisa and jane

13484
09:32:28,959 --> 09:32:33,040
had private phone numbers

13485
09:32:30,959 --> 09:32:34,239
and this would represent your private

13486
09:32:33,040 --> 09:32:36,959
ips

13487
09:32:34,239 --> 09:32:38,559
in this example bowtie inc has three

13488
09:32:36,959 --> 09:32:41,360
public phone numbers

13489
09:32:38,559 --> 09:32:44,239
now when any employee makes an outbound

13490
09:32:41,360 --> 09:32:47,436
call they are routed to whichever public

13491
09:32:44,239 --> 09:32:49,756
line is open at the time so the caller

13492
09:32:47,436 --> 09:32:52,639
id on the receiver's end

13493
09:32:49,756 --> 09:32:55,436
would show any one of the three public

13494
09:32:52,639 --> 09:32:58,000
phone numbers depending on which one was

13495
09:32:55,436 --> 09:33:01,436
given to the caller and this would

13496
09:32:58,000 --> 09:33:03,120
represent the public ips in the public

13497
09:33:01,436 --> 09:33:05,360
ip pool

13498
09:33:03,120 --> 09:33:07,756
now the last type of nat which i wanted

13499
09:33:05,360 --> 09:33:10,720
to talk about is the one which you're

13500
09:33:07,756 --> 09:33:13,680
probably most familiar with and this is

13501
09:33:10,720 --> 09:33:16,559
port address translation which is also

13502
09:33:13,680 --> 09:33:19,436
known as not overload and this is the

13503
09:33:16,559 --> 09:33:22,479
type of not you likely use on your home

13504
09:33:19,436 --> 09:33:25,756
network port address translation is what

13505
09:33:22,480 --> 09:33:28,800
allows a large number of private devices

13506
09:33:25,756 --> 09:33:31,200
to share one public ip address

13507
09:33:28,800 --> 09:33:33,756
giving it a many to one mapping

13508
09:33:31,199 --> 09:33:36,319
architecture now in this example we'll

13509
09:33:33,756 --> 09:33:37,120
be using three private devices on the

13510
09:33:36,319 --> 09:33:39,915
left

13511
09:33:37,120 --> 09:33:40,800
all wanting to access fashiontube on the

13512
09:33:39,915 --> 09:33:43,680
right

13513
09:33:40,800 --> 09:33:45,596
a popular video sharing website of the

13514
09:33:43,680 --> 09:33:48,400
latest men's fashions

13515
09:33:45,595 --> 09:33:51,275
shared by millions across the globe

13516
09:33:48,400 --> 09:33:54,275
and this site has a public ip of

13517
09:33:51,275 --> 09:33:54,275
62.88.44.88

13518
09:33:55,040 --> 09:34:02,000
and accessed using tcp port 443 now the

13519
09:33:59,275 --> 09:34:02,879
way that port address translation or pat

13520
09:34:02,000 --> 09:34:05,839
works

13521
09:34:02,879 --> 09:34:06,879
is to use both the ip addresses and

13522
09:34:05,839 --> 09:34:09,915
ports

13523
09:34:06,879 --> 09:34:13,595
to allow for multiple devices to share

13524
09:34:09,915 --> 09:34:16,159
the same public ip every tcp connection

13525
09:34:13,595 --> 09:34:17,519
in addition to a source and destination

13526
09:34:16,160 --> 09:34:20,640
ip address

13527
09:34:17,519 --> 09:34:23,275
has a source and destination port the

13528
09:34:20,639 --> 09:34:26,479
source port is randomly assigned by the

13529
09:34:23,275 --> 09:34:29,595
client so as long as the source port is

13530
09:34:26,480 --> 09:34:32,880
always unique then many private clients

13531
09:34:29,595 --> 09:34:35,595
can use the same public ip address and

13532
09:34:32,879 --> 09:34:38,319
all this information is recorded in the

13533
09:34:35,595 --> 09:34:40,720
nat table on the nat device

13534
09:34:38,319 --> 09:34:43,915
in this example let's assume that the

13535
09:34:40,720 --> 09:34:46,916
public ip address of this nat device is

13536
09:34:43,915 --> 09:34:46,915
73.6.2.33

13537
09:34:47,680 --> 09:34:52,080
so when the laptop in the top left

13538
09:34:49,756 --> 09:34:55,360
generates a packet and the packet is

13539
09:34:52,080 --> 09:34:59,400
going to fashion tube its destination ip

13540
09:34:55,360 --> 09:34:59,400
address is 62.80

13541
09:35:00,639 --> 09:35:07,199
and its destination port is 443. now the

13542
09:35:04,160 --> 09:35:12,276
source ip of this packet is the laptop's

13543
09:35:07,199 --> 09:35:12,275
private ip address of 192.168.6

13544
09:35:13,519 --> 09:35:20,079
and the source port is 35535

13545
09:35:17,360 --> 09:35:22,480
which is a randomly assigned ephemeral

13546
09:35:20,080 --> 09:35:23,756
port so the packet is routed through the

13547
09:35:22,480 --> 09:35:26,480
nat device

13548
09:35:23,756 --> 09:35:29,680
and in transit the nat device records

13549
09:35:26,480 --> 09:35:31,040
the source ip and the original source

13550
09:35:29,680 --> 09:35:34,000
private port

13551
09:35:31,040 --> 09:35:36,639
and it allocates a new public ip address

13552
09:35:34,000 --> 09:35:39,680
and a new public source port which in

13553
09:35:36,639 --> 09:35:42,000
this case is 8844

13554
09:35:39,680 --> 09:35:44,800
it records this information inside the

13555
09:35:42,000 --> 09:35:47,915
not table as shown here and it adjusts

13556
09:35:44,800 --> 09:35:50,240
the pocket so that its source ip address

13557
09:35:47,915 --> 09:35:53,199
is the public ip address that the nat

13558
09:35:50,239 --> 09:35:56,000
device is using and the source port is

13559
09:35:53,199 --> 09:35:58,879
this newly allocated source port and

13560
09:35:56,000 --> 09:36:01,436
this newly adjusted packet is forwarded

13561
09:35:58,879 --> 09:36:04,079
on to fashiontube now the process is

13562
09:36:01,436 --> 09:36:06,000
very similar with the return traffic

13563
09:36:04,080 --> 09:36:08,560
where the packet will verify the

13564
09:36:06,000 --> 09:36:11,275
recorded ips and ports

13565
09:36:08,559 --> 09:36:14,239
in the nat table before forwarding the

13566
09:36:11,275 --> 09:36:16,879
packet back to the originating source

13567
09:36:14,239 --> 09:36:19,879
now if the middle laptop with the ip of

13568
09:36:16,879 --> 09:36:19,879
192.168.0.14

13569
09:36:20,639 --> 09:36:25,360
did the same thing then the same process

13570
09:36:23,436 --> 09:36:28,080
would be followed all of this

13571
09:36:25,360 --> 09:36:30,639
information would be recorded in the nat

13572
09:36:28,080 --> 09:36:33,596
table a new public source port would be

13573
09:36:30,639 --> 09:36:36,400
allocated and would translate the packet

13574
09:36:33,595 --> 09:36:39,519
adjusting the packet's source ip address

13575
09:36:36,400 --> 09:36:41,680
and source port as well the same process

13576
09:36:39,519 --> 09:36:44,079
would happen for the laptop on the

13577
09:36:41,680 --> 09:36:46,639
bottom generating a packet with the

13578
09:36:44,080 --> 09:36:49,120
source and destination ip with the

13579
09:36:46,639 --> 09:36:51,360
addition of the source and destination

13580
09:36:49,120 --> 09:36:54,240
ports and when routed through the nat

13581
09:36:51,360 --> 09:36:56,319
device goes through its translation

13582
09:36:54,239 --> 09:36:59,915
recording the information in the nat

13583
09:36:56,319 --> 09:37:02,800
table and reaching its destination again

13584
09:36:59,915 --> 09:37:06,559
return traffic will be verified by the

13585
09:37:02,800 --> 09:37:09,200
recorded ips and ports in the nat table

13586
09:37:06,559 --> 09:37:11,595
before forwarding the packet back to its

13587
09:37:09,199 --> 09:37:14,159
originating source and so just as a

13588
09:37:11,595 --> 09:37:16,959
summary when it comes to port address

13589
09:37:14,160 --> 09:37:20,240
translation the nat device records the

13590
09:37:16,959 --> 09:37:23,120
source ip and source port in a nat table

13591
09:37:20,239 --> 09:37:26,239
the source ip is then replaced with a

13592
09:37:23,120 --> 09:37:28,720
public ip and public source port

13593
09:37:26,239 --> 09:37:31,040
and are allocated from a pool that

13594
09:37:28,720 --> 09:37:33,360
allows overloading and this is a

13595
09:37:31,040 --> 09:37:36,239
many-to-one architecture

13596
09:37:33,360 --> 09:37:39,275
and so for the telephone analogy for pat

13597
09:37:36,239 --> 09:37:41,839
let's use a phone operator example so in

13598
09:37:39,275 --> 09:37:45,199
this instance george is trying to call

13599
09:37:41,839 --> 09:37:48,079
laura now george only knows lark laura's

13600
09:37:45,199 --> 09:37:50,319
executive admin and only has lark's

13601
09:37:48,080 --> 09:37:52,800
phone number george does not have

13602
09:37:50,319 --> 09:37:55,360
laura's private line lark's public phone

13603
09:37:52,800 --> 09:37:58,560
number is the equivalent to having a

13604
09:37:55,360 --> 09:38:01,436
public ip address george calls lark who

13605
09:37:58,559 --> 09:38:03,915
then connects george to laura the caveat

13606
09:38:01,436 --> 09:38:06,560
here is that lark never gives out

13607
09:38:03,915 --> 09:38:08,799
laura's phone number in fact laura

13608
09:38:06,559 --> 09:38:11,839
doesn't have a public phone number and

13609
09:38:08,800 --> 09:38:14,319
can only be called by lark and here's

13610
09:38:11,839 --> 09:38:17,359
where nat can add an extra layer of

13611
09:38:14,319 --> 09:38:20,639
security by only allowing needed ports

13612
09:38:17,360 --> 09:38:23,680
to be accessed without allowing anyone

13613
09:38:20,639 --> 09:38:26,400
to connect to any port now i hope this

13614
09:38:23,680 --> 09:38:28,480
has helped you understand the process of

13615
09:38:26,400 --> 09:38:30,560
network address translation

13616
09:38:28,480 --> 09:38:33,520
how the translation happens

13617
09:38:30,559 --> 09:38:35,915
and the process of using a nat table to

13618
09:38:33,519 --> 09:38:38,799
achieve packet translation

13619
09:38:35,915 --> 09:38:41,199
along with its destination this is so

13620
09:38:38,800 --> 09:38:44,080
common in most environments that you

13621
09:38:41,199 --> 09:38:46,799
will encounter and it's very important

13622
09:38:44,080 --> 09:38:47,840
to fully understand the different types

13623
09:38:46,800 --> 09:38:50,480
of not

13624
09:38:47,839 --> 09:38:52,799
and how it can be used in these types of

13625
09:38:50,480 --> 09:38:54,400
environments and so that's pretty much

13626
09:38:52,800 --> 09:38:56,880
all i wanted to cover

13627
09:38:54,400 --> 09:38:59,040
on this lesson of network address

13628
09:38:56,879 --> 09:39:00,559
translation so you can now mark this

13629
09:38:59,040 --> 09:39:02,700
lesson as complete

13630
09:39:00,559 --> 09:39:06,559
and let's move on to the next one

13631
09:39:02,699 --> 09:39:08,719
[Music]

13632
09:39:06,559 --> 09:39:11,435
welcome back so now that we've covered

13633
09:39:08,720 --> 09:39:14,080
the fundamentals of dns along with the

13634
09:39:11,436 --> 09:39:17,436
different record types i wanted to focus

13635
09:39:14,080 --> 09:39:20,639
in on google cloud's dns service called

13636
09:39:17,436 --> 09:39:24,080
cloud dns now cloud dns is a fully

13637
09:39:20,639 --> 09:39:26,720
managed service that manages dns servers

13638
09:39:24,080 --> 09:39:29,436
for your specific zones and since cloud

13639
09:39:26,720 --> 09:39:32,400
dns shows up on the exam only on a high

13640
09:39:29,436 --> 09:39:34,480
level i will be giving an overview of

13641
09:39:32,400 --> 09:39:38,080
what this service can do so with that

13642
09:39:34,480 --> 09:39:41,680
being said let's dive in now cloud dns

13643
09:39:38,080 --> 09:39:44,000
acts as an authoritative dns server for

13644
09:39:41,680 --> 09:39:46,879
public zones that are visible to the

13645
09:39:44,000 --> 09:39:49,519
internet or for private zones that are

13646
09:39:46,879 --> 09:39:52,639
visible only within your network and is

13647
09:39:49,519 --> 09:39:55,755
commonly referred to as google's dns as

13648
09:39:52,639 --> 09:39:58,400
a service cloud dns has servers that

13649
09:39:55,756 --> 09:40:00,880
span the globe making it a globally

13650
09:39:58,400 --> 09:40:03,756
resilient service now while it is a

13651
09:40:00,879 --> 09:40:07,040
global service there is no way to select

13652
09:40:03,756 --> 09:40:09,840
specific regions to deploy your zones

13653
09:40:07,040 --> 09:40:12,959
and dns server policies you simply add

13654
09:40:09,839 --> 09:40:15,519
your zones records and policies and it

13655
09:40:12,959 --> 09:40:18,639
is distributed amongst google's dns

13656
09:40:15,519 --> 09:40:20,799
servers across the globe cloud dns is

13657
09:40:18,639 --> 09:40:23,839
also one of the few google cloud

13658
09:40:20,800 --> 09:40:26,800
services that offers 100

13659
09:40:23,839 --> 09:40:27,755
availability along with low latency

13660
09:40:26,800 --> 09:40:30,400
access

13661
09:40:27,756 --> 09:40:32,720
by leveraging google's massive global

13662
09:40:30,400 --> 09:40:35,916
network backbone now in order to use

13663
09:40:32,720 --> 09:40:38,639
cloud dns with a specific publicly

13664
09:40:35,915 --> 09:40:40,479
available domain a domain name must be

13665
09:40:38,639 --> 09:40:42,800
purchased through a domain name

13666
09:40:40,480 --> 09:40:45,596
registrar and you can register a domain

13667
09:40:42,800 --> 09:40:48,160
name through google domains or another

13668
09:40:45,595 --> 09:40:50,879
domain registrar of your choice cloud

13669
09:40:48,160 --> 09:40:53,276
dns does not provide this service and

13670
09:40:50,879 --> 09:40:56,079
just as a note that to create private

13671
09:40:53,275 --> 09:40:58,879
zones the purchasing of a domain name is

13672
09:40:56,080 --> 09:41:01,756
not necessary now as stated earlier

13673
09:40:58,879 --> 09:41:04,879
cloud dns offers the flexibility of

13674
09:41:01,756 --> 09:41:08,400
hosting both public zones and privately

13675
09:41:04,879 --> 09:41:10,639
managed dns zones now public zones are

13676
09:41:08,400 --> 09:41:12,959
zones that are visible to the public

13677
09:41:10,639 --> 09:41:15,360
internet and so when cloud dns is

13678
09:41:12,959 --> 09:41:18,239
managing your public domain it has

13679
09:41:15,360 --> 09:41:21,595
public authoritative name servers that

13680
09:41:18,239 --> 09:41:23,839
respond to public zone dns queries for

13681
09:41:21,595 --> 09:41:26,479
your specific domain now when it comes

13682
09:41:23,839 --> 09:41:28,719
to private zones these enable you to

13683
09:41:26,480 --> 09:41:31,360
manage custom domain names

13684
09:41:28,720 --> 09:41:34,160
for your google cloud resources without

13685
09:41:31,360 --> 09:41:36,559
exposing any dns data to the public

13686
09:41:34,160 --> 09:41:39,680
internet a private zone can only be

13687
09:41:36,559 --> 09:41:42,159
queried by resources in the same project

13688
09:41:39,680 --> 09:41:45,120
where it is defined and as we discussed

13689
09:41:42,160 --> 09:41:48,320
earlier a zone is a container of dns

13690
09:41:45,120 --> 09:41:50,639
records that are queried by dns so from

13691
09:41:48,319 --> 09:41:53,436
a private zone perspective these can

13692
09:41:50,639 --> 09:41:56,159
only be queried by one or more vpc

13693
09:41:53,436 --> 09:41:58,880
networks that you authorize to do so and

13694
09:41:56,160 --> 09:42:01,360
just as a note the vpc networks that you

13695
09:41:58,879 --> 09:42:04,000
authorize must be located in the same

13696
09:42:01,360 --> 09:42:06,559
project as the private zone to query

13697
09:42:04,000 --> 09:42:09,680
records hosted in manage private zones

13698
09:42:06,559 --> 09:42:11,915
in other projects the use of dns peering

13699
09:42:09,680 --> 09:42:14,000
is needed now i don't want to get too

13700
09:42:11,915 --> 09:42:16,879
deep into dns peering

13701
09:42:14,000 --> 09:42:19,680
but just know that vpc network peering

13702
09:42:16,879 --> 09:42:22,719
is not required for the cloud dns

13703
09:42:19,680 --> 09:42:26,000
peering zone to operate peering zones do

13704
09:42:22,720 --> 09:42:28,800
not depend on vpc network peering now

13705
09:42:26,000 --> 09:42:31,756
each managed zone that you create is

13706
09:42:28,800 --> 09:42:34,319
associated with a google cloud project

13707
09:42:31,756 --> 09:42:36,959
and once this zone is created it is

13708
09:42:34,319 --> 09:42:39,595
hosted by google's managed name servers

13709
09:42:36,959 --> 09:42:42,000
now these zones are always hosted on

13710
09:42:39,595 --> 09:42:44,559
google's manage name servers within

13711
09:42:42,000 --> 09:42:46,959
google cloud so you would create records

13712
09:42:44,559 --> 09:42:49,519
and record sets and these servers would

13713
09:42:46,959 --> 09:42:52,080
then become allocated to that specific

13714
09:42:49,519 --> 09:42:54,399
zone hosting your records and record

13715
09:42:52,080 --> 09:42:57,200
sets and just as a quick reminder a

13716
09:42:54,400 --> 09:42:59,680
record set is the collection of dns

13717
09:42:57,199 --> 09:43:02,399
records in a zone that have the same

13718
09:42:59,680 --> 09:43:04,879
name and are of the same type most

13719
09:43:02,400 --> 09:43:07,680
records contain a single record but it's

13720
09:43:04,879 --> 09:43:10,719
not uncommon to see record sets a great

13721
09:43:07,680 --> 09:43:12,879
example of this are a records or ns

13722
09:43:10,720 --> 09:43:15,040
records which we discussed earlier and

13723
09:43:12,879 --> 09:43:16,000
these records can usually be found in

13724
09:43:15,040 --> 09:43:18,000
pairs

13725
09:43:16,000 --> 09:43:20,879
and so now to give you a practical

13726
09:43:18,000 --> 09:43:23,519
example of cloud dns i wanted to bring

13727
09:43:20,879 --> 09:43:26,239
the theory into practice through a short

13728
09:43:23,519 --> 09:43:28,639
demo where i'll be creating a managed

13729
09:43:26,239 --> 09:43:30,720
private zone so whenever you're ready

13730
09:43:28,639 --> 09:43:32,879
join me in the console and so here we

13731
09:43:30,720 --> 09:43:36,480
are back in the console and i'm logged

13732
09:43:32,879 --> 09:43:38,959
in as tonybowties gmail.com and i'm

13733
09:43:36,480 --> 09:43:40,960
currently in project bowtie inc so now

13734
09:43:38,959 --> 09:43:42,959
to get to cloud dns i'm going to go over

13735
09:43:40,959 --> 09:43:46,159
to the navigation menu i'm going to

13736
09:43:42,959 --> 09:43:49,120
scroll down to network services and go

13737
09:43:46,160 --> 09:43:50,960
over to cloud dns

13738
09:43:49,120 --> 09:43:52,000
and because i currently don't have any

13739
09:43:50,959 --> 09:43:54,479
zones

13740
09:43:52,000 --> 09:43:56,559
i'm prompted with only one option which

13741
09:43:54,480 --> 09:43:58,640
is to create a zone and so i'm going to

13742
09:43:56,559 --> 09:44:00,559
go ahead and create a zone and so here

13743
09:43:58,639 --> 09:44:02,959
i've been prompted with a bunch of

13744
09:44:00,559 --> 09:44:05,680
different options in order to create my

13745
09:44:02,959 --> 09:44:08,159
dns zone and so the first option that i

13746
09:44:05,680 --> 09:44:10,239
have is zone type and because i'm

13747
09:44:08,160 --> 09:44:12,320
creating a private zone i'm going to

13748
09:44:10,239 --> 09:44:14,400
simply click on private and i need to

13749
09:44:12,319 --> 09:44:17,275
provide a zone name which i'm going to

13750
09:44:14,400 --> 09:44:20,400
call tony bowtie next i'm going to have

13751
09:44:17,275 --> 09:44:23,519
to provide a dns name which i will call

13752
09:44:20,400 --> 09:44:25,916
tony bowtie dot private and under the

13753
09:44:23,519 --> 09:44:29,595
description i'm just going to type in

13754
09:44:25,915 --> 09:44:31,275
private zone for tony bowtie and so the

13755
09:44:29,595 --> 09:44:33,435
next field i've been given is the

13756
09:44:31,275 --> 09:44:36,159
options field where it is currently

13757
09:44:33,436 --> 09:44:38,160
marked as default private and so if i go

13758
09:44:36,160 --> 09:44:40,480
over here to the right hand side and

13759
09:44:38,160 --> 09:44:42,800
open up the drop down menu i'm given the

13760
09:44:40,480 --> 09:44:46,080
options to forward queries to another

13761
09:44:42,800 --> 09:44:48,800
server dns peering manage reverse lookup

13762
09:44:46,080 --> 09:44:51,120
zones and use a service directory

13763
09:44:48,800 --> 09:44:53,916
namespace and so depending on your type

13764
09:44:51,120 --> 09:44:56,080
of scenario one of these five options in

13765
09:44:53,915 --> 09:44:58,399
most cases will suffice so i'm going to

13766
09:44:56,080 --> 09:45:00,400
keep it under default private and under

13767
09:44:58,400 --> 09:45:02,959
networks it says your private zone will

13768
09:45:00,400 --> 09:45:04,319
be visible to the selected networks

13769
09:45:02,959 --> 09:45:06,799
and so i'm going to click on the drop

13770
09:45:04,319 --> 09:45:08,639
down and i'm giving only the option of

13771
09:45:06,800 --> 09:45:10,800
the default network because it's the

13772
09:45:08,639 --> 09:45:12,159
only network that i have and so i'm

13773
09:45:10,800 --> 09:45:13,200
going to select it

13774
09:45:12,160 --> 09:45:16,000
and i'm going to click on the white

13775
09:45:13,199 --> 09:45:18,000
space and if i feel so inclined i can

13776
09:45:16,000 --> 09:45:20,239
simply click on the shortcut for the

13777
09:45:18,000 --> 09:45:22,639
command line and here i'm given this

13778
09:45:20,239 --> 09:45:25,199
specific commands if i was to use the

13779
09:45:22,639 --> 09:45:27,680
command line in order to create this dns

13780
09:45:25,199 --> 09:45:29,915
zone so i'm going to click on close here

13781
09:45:27,680 --> 09:45:32,000
and i'm going to click on create and as

13782
09:45:29,915 --> 09:45:34,399
you can see here my zone has been

13783
09:45:32,000 --> 09:45:36,639
created along with a couple of dns

13784
09:45:34,400 --> 09:45:39,200
records the first one being my name

13785
09:45:36,639 --> 09:45:41,595
server records as well as my start of

13786
09:45:39,199 --> 09:45:44,559
authority records and so as a note to

13787
09:45:41,595 --> 09:45:47,360
know for the exam when creating a zone

13788
09:45:44,559 --> 09:45:50,639
these two records will always be created

13789
09:45:47,360 --> 09:45:53,275
both the soa record and the ns record

13790
09:45:50,639 --> 09:45:55,436
and moving on to some other options here

13791
09:45:53,275 --> 09:45:58,879
i can add another record set if i choose

13792
09:45:55,436 --> 09:46:01,275
to again the dns name the record type

13793
09:45:58,879 --> 09:46:04,479
which i have a whole slew of record

13794
09:46:01,275 --> 09:46:06,319
types to choose from it's ttl and the ip

13795
09:46:04,480 --> 09:46:08,480
address but i'm not going to add any

13796
09:46:06,319 --> 09:46:11,199
records so i'm just going to cancel and

13797
09:46:08,480 --> 09:46:13,916
by clicking in use by i can view which

13798
09:46:11,199 --> 09:46:16,079
vpc network is using this zone and as

13799
09:46:13,915 --> 09:46:17,595
expected the default network shows up

13800
09:46:16,080 --> 09:46:19,756
and i also have the choice of adding

13801
09:46:17,595 --> 09:46:22,079
another network but since i don't have

13802
09:46:19,756 --> 09:46:23,916
any other networks i can't add anything

13803
09:46:22,080 --> 09:46:26,000
so i'm going to simply cancel i also

13804
09:46:23,915 --> 09:46:28,000
have the option of removing any networks

13805
09:46:26,000 --> 09:46:30,400
so if i click on this i can remove the

13806
09:46:28,000 --> 09:46:32,559
network or i can also remove the network

13807
09:46:30,400 --> 09:46:35,520
by clicking on the hamburger menu and so

13808
09:46:32,559 --> 09:46:38,239
as you can see i have a slew of options

13809
09:46:35,519 --> 09:46:40,479
to choose from when creating zones and

13810
09:46:38,239 --> 09:46:42,239
record sets and so that about covers

13811
09:46:40,480 --> 09:46:44,080
everything that i wanted to show you

13812
09:46:42,239 --> 09:46:45,839
here in cloud dns

13813
09:46:44,080 --> 09:46:47,756
but before i go i'm going to go ahead

13814
09:46:45,839 --> 09:46:49,275
and clean up and i'm just going to click

13815
09:46:47,756 --> 09:46:51,275
on the garbage can here on the right

13816
09:46:49,275 --> 09:46:53,680
hand side of the zone and i'm going to

13817
09:46:51,275 --> 09:46:56,000
be prompted if i want to delete the zone

13818
09:46:53,680 --> 09:46:57,436
yes i do so i'm going to click on delete

13819
09:46:56,000 --> 09:46:59,040
and so that pretty much covers

13820
09:46:57,436 --> 09:47:01,756
everything that i wanted to show you

13821
09:46:59,040 --> 09:47:04,000
with regards to cloud dns so you can now

13822
09:47:01,756 --> 09:47:07,840
mark this lesson as complete and let's

13823
09:47:04,000 --> 09:47:07,839
move on to the next one

13824
09:47:09,595 --> 09:47:14,959
welcome back now before we step into the

13825
09:47:12,319 --> 09:47:17,839
compute engine section of the course

13826
09:47:14,959 --> 09:47:20,479
i wanted to cover a basic foundation of

13827
09:47:17,839 --> 09:47:22,959
what makes these vms possible

13828
09:47:20,480 --> 09:47:25,596
and this is where a basic understanding

13829
09:47:22,959 --> 09:47:28,319
of virtualization comes into play now

13830
09:47:25,595 --> 09:47:30,799
this is merely an introductory lesson to

13831
09:47:28,319 --> 09:47:33,360
virtualization and i won't be getting

13832
09:47:30,800 --> 09:47:36,480
too deep into the underpinnings it

13833
09:47:33,360 --> 09:47:38,720
serves as just a basic foundation as to

13834
09:47:36,480 --> 09:47:41,360
how compute engine gets its features

13835
09:47:38,720 --> 09:47:43,520
under the hood and how they are possible

13836
09:47:41,360 --> 09:47:45,120
through the use of virtualization for

13837
09:47:43,519 --> 09:47:47,755
more in-depth understanding on

13838
09:47:45,120 --> 09:47:50,319
virtualization i will be including some

13839
09:47:47,756 --> 09:47:53,040
links in the lesson text for those who

13840
09:47:50,319 --> 09:47:55,680
are looking to learn more but for now

13841
09:47:53,040 --> 09:47:58,319
this will provide just enough theory to

13842
09:47:55,680 --> 09:47:59,360
help you understand how compute engine

13843
09:47:58,319 --> 09:48:02,559
works

13844
09:47:59,360 --> 09:48:05,520
so with that being said let's dive in so

13845
09:48:02,559 --> 09:48:07,915
what exactly is virtualization well

13846
09:48:05,519 --> 09:48:11,079
virtualization is the process of running

13847
09:48:07,915 --> 09:48:14,000
multiple operating systems on a server

13848
09:48:11,080 --> 09:48:17,436
simultaneously now before virtualization

13849
09:48:14,000 --> 09:48:19,519
became popular a standard model was used

13850
09:48:17,436 --> 09:48:21,436
where an operating system would be

13851
09:48:19,519 --> 09:48:24,159
installed on a server

13852
09:48:21,436 --> 09:48:26,480
so the server would consist of typical

13853
09:48:24,160 --> 09:48:29,756
hardware like cpu

13854
09:48:26,480 --> 09:48:33,276
memory network cards and other devices

13855
09:48:29,756 --> 09:48:35,520
such as video cards usb devices and

13856
09:48:33,275 --> 09:48:37,839
storage and then the operating system

13857
09:48:35,519 --> 09:48:39,839
would run on top of the hardware now

13858
09:48:37,839 --> 09:48:42,959
there is a middle layer of the operating

13859
09:48:39,839 --> 09:48:45,275
system a supervisor if you will that is

13860
09:48:42,959 --> 09:48:48,080
responsible for interacting with

13861
09:48:45,275 --> 09:48:50,239
underlying hardware and this is known as

13862
09:48:48,080 --> 09:48:52,720
the kernel the kernel manages the

13863
09:48:50,239 --> 09:48:55,915
distribution of the hardware resources

13864
09:48:52,720 --> 09:48:58,720
of the computer efficiently and fairly

13865
09:48:55,915 --> 09:49:01,360
among all the various processes running

13866
09:48:58,720 --> 09:49:04,160
on the computer now the kernel operates

13867
09:49:01,360 --> 09:49:06,959
under what is called kernel mode or

13868
09:49:04,160 --> 09:49:09,360
privilege mode as it runs privileged

13869
09:49:06,959 --> 09:49:11,595
instructions that interacts with the

13870
09:49:09,360 --> 09:49:14,480
hardware directly now the operating

13871
09:49:11,595 --> 09:49:16,639
system allows other software to run on

13872
09:49:14,480 --> 09:49:19,120
top of it like an application

13873
09:49:16,639 --> 09:49:21,436
but cannot interact directly with the

13874
09:49:19,120 --> 09:49:24,240
hardware it must interact with the

13875
09:49:21,436 --> 09:49:27,200
operating system in user mode or

13876
09:49:24,239 --> 09:49:29,839
non-privileged mode so when lark decides

13877
09:49:27,199 --> 09:49:32,559
to do something on an application that

13878
09:49:29,839 --> 09:49:34,639
needs to use the system hardware that

13879
09:49:32,559 --> 09:49:37,519
application needs to go through the

13880
09:49:34,639 --> 09:49:39,915
operating system it needs to make what's

13881
09:49:37,519 --> 09:49:43,199
known as a system call and this is the

13882
09:49:39,915 --> 09:49:46,159
model of running one operating system on

13883
09:49:43,199 --> 09:49:48,719
a single server now when passed servers

13884
09:49:46,160 --> 09:49:52,000
would traditionally run one application

13885
09:49:48,720 --> 09:49:54,480
on one server with one operating system

13886
09:49:52,000 --> 09:49:56,400
in the old system the number of servers

13887
09:49:54,480 --> 09:49:58,880
would continue to mount

13888
09:49:56,400 --> 09:50:01,916
since every new application required its

13889
09:49:58,879 --> 09:50:04,959
own server and its own operating system

13890
09:50:01,915 --> 09:50:07,839
as a result expensive hardware resources

13891
09:50:04,959 --> 09:50:11,839
were purchased but not used and each

13892
09:50:07,839 --> 09:50:14,719
server would use approximately under 20

13893
09:50:11,839 --> 09:50:17,039
of its resources on average server

13894
09:50:14,720 --> 09:50:19,840
resources were then known as

13895
09:50:17,040 --> 09:50:21,680
underutilized now there came a time when

13896
09:50:19,839 --> 09:50:23,839
multiple operating systems were

13897
09:50:21,680 --> 09:50:26,319
installed on one computer

13898
09:50:23,839 --> 09:50:28,479
isolated from each other with each

13899
09:50:26,319 --> 09:50:31,360
operating system running their own

13900
09:50:28,480 --> 09:50:33,756
applications this was a perfect model to

13901
09:50:31,360 --> 09:50:36,239
consolidate hardware and keep

13902
09:50:33,756 --> 09:50:39,595
utilization high but there is a major

13903
09:50:36,239 --> 09:50:42,400
issue that arose each cpu at this given

13904
09:50:39,595 --> 09:50:44,879
moment in time could only have one thing

13905
09:50:42,400 --> 09:50:47,436
running as privileged so having multiple

13906
09:50:44,879 --> 09:50:49,595
operating systems running on their own

13907
09:50:47,436 --> 09:50:51,916
in an unmodified state

13908
09:50:49,595 --> 09:50:54,239
and expecting to be running on their own

13909
09:50:51,915 --> 09:50:55,595
in a privileged state running privileged

13910
09:50:54,239 --> 09:50:58,639
instructions

13911
09:50:55,595 --> 09:51:02,079
was causing instability in systems

13912
09:50:58,639 --> 09:51:06,080
causing not just application crashes but

13913
09:51:02,080 --> 09:51:08,800
system crashes now a hypervisor is what

13914
09:51:06,080 --> 09:51:11,520
solved this problem it is a small

13915
09:51:08,800 --> 09:51:14,560
software layer that enables multiple

13916
09:51:11,519 --> 09:51:15,359
operating systems to run alongside each

13917
09:51:14,559 --> 09:51:17,435
other

13918
09:51:15,360 --> 09:51:20,559
sharing the same physical computing

13919
09:51:17,436 --> 09:51:24,400
resources these operating systems come

13920
09:51:20,559 --> 09:51:27,040
as virtual machines or vms and these are

13921
09:51:24,400 --> 09:51:29,680
files that mimic an entire computing

13922
09:51:27,040 --> 09:51:32,559
hardware environment in software the

13923
09:51:29,680 --> 09:51:35,436
hypervisor also known as a virtual

13924
09:51:32,559 --> 09:51:38,479
machine monitor or vmm

13925
09:51:35,436 --> 09:51:41,360
manages these vms as they run alongside

13926
09:51:38,480 --> 09:51:44,720
each other it separates virtual machines

13927
09:51:41,360 --> 09:51:46,959
from each other logically assigning each

13928
09:51:44,720 --> 09:51:50,720
its own slice of the underlying

13929
09:51:46,959 --> 09:51:53,756
computing cpu memory and other devices

13930
09:51:50,720 --> 09:51:56,160
like graphics network and storage this

13931
09:51:53,756 --> 09:51:59,275
prevents the vms from interfering with

13932
09:51:56,160 --> 09:52:01,916
each other so if for example one

13933
09:51:59,275 --> 09:52:04,479
operating system suffers a crash or a

13934
09:52:01,915 --> 09:52:06,719
security compromise the others will

13935
09:52:04,480 --> 09:52:09,436
survive and continue running now the

13936
09:52:06,720 --> 09:52:11,840
hypervisor was never as efficient as how

13937
09:52:09,436 --> 09:52:14,800
you see it here it went through some

13938
09:52:11,839 --> 09:52:17,039
major iterations that gave its structure

13939
09:52:14,800 --> 09:52:18,880
as we know it today initially

13940
09:52:17,040 --> 09:52:21,756
virtualization had to be done in

13941
09:52:18,879 --> 09:52:23,040
software or what we now refer to as the

13942
09:52:21,756 --> 09:52:24,800
host machine

13943
09:52:23,040 --> 09:52:27,840
and the operating system with its

13944
09:52:24,800 --> 09:52:30,960
applications put in logical containers

13945
09:52:27,839 --> 09:52:32,799
known as virtual machines or guests the

13946
09:52:30,959 --> 09:52:35,360
operating system would be installed on

13947
09:52:32,800 --> 09:52:38,400
the host which included additional

13948
09:52:35,360 --> 09:52:40,239
capabilities called a hypervisor and

13949
09:52:38,400 --> 09:52:43,040
allowed it to make the necessary

13950
09:52:40,239 --> 09:52:45,756
privileged calls to the hardware

13951
09:52:43,040 --> 09:52:48,319
having full access to the host the

13952
09:52:45,756 --> 09:52:51,120
hypervisor exposed the interface of the

13953
09:52:48,319 --> 09:52:52,080
hardware device that is available on the

13954
09:52:51,120 --> 09:52:54,080
host

13955
09:52:52,080 --> 09:52:56,480
and allowed it to be mapped to the

13956
09:52:54,080 --> 09:52:59,276
virtual machine and emulated the

13957
09:52:56,480 --> 09:53:01,520
behavior of this device and this allowed

13958
09:52:59,275 --> 09:53:04,159
the virtual machine using the operating

13959
09:53:01,519 --> 09:53:07,039
system drivers that were designed to

13960
09:53:04,160 --> 09:53:09,756
interact with the emulated device

13961
09:53:07,040 --> 09:53:11,200
without installing any special drivers

13962
09:53:09,756 --> 09:53:13,840
or tools

13963
09:53:11,199 --> 09:53:16,719
as well as keeping the operating system

13964
09:53:13,839 --> 09:53:19,595
unmodified the problem here is that it

13965
09:53:16,720 --> 09:53:22,239
was all emulated and so every time the

13966
09:53:19,595 --> 09:53:25,360
virtual machines made calls back to the

13967
09:53:22,239 --> 09:53:27,839
host each instruction needed to be

13968
09:53:25,360 --> 09:53:30,800
translated by the hypervisor

13969
09:53:27,839 --> 09:53:32,879
using what's called a binary translation

13970
09:53:30,800 --> 09:53:35,756
now without this translation the

13971
09:53:32,879 --> 09:53:38,959
emulation wouldn't work and would cause

13972
09:53:35,756 --> 09:53:41,520
system crashes bringing down all virtual

13973
09:53:38,959 --> 09:53:44,080
machines in the process now the problem

13974
09:53:41,519 --> 09:53:46,879
with this process is that it made the

13975
09:53:44,080 --> 09:53:49,520
system painfully slow and it was this

13976
09:53:46,879 --> 09:53:52,559
performance penalty that caused this

13977
09:53:49,519 --> 09:53:55,435
process to not be so widely adopted but

13978
09:53:52,559 --> 09:53:59,199
then another type of virtualization came

13979
09:53:55,436 --> 09:54:01,680
on the scene called para virtualization

13980
09:53:59,199 --> 09:54:04,319
now in this model a modified guest

13981
09:54:01,680 --> 09:54:06,720
operating system is able to speak

13982
09:54:04,319 --> 09:54:08,959
directly to the hypervisor and this

13983
09:54:06,720 --> 09:54:12,720
involves having the operating system

13984
09:54:08,959 --> 09:54:15,595
kernel to be modified and recompiled

13985
09:54:12,720 --> 09:54:17,840
before installation onto the virtual

13986
09:54:15,595 --> 09:54:20,399
machine this would allow the operating

13987
09:54:17,839 --> 09:54:23,435
system to talk directly with the

13988
09:54:20,400 --> 09:54:26,319
hypervisor without any performance hits

13989
09:54:23,436 --> 09:54:29,275
as there is no translation going on like

13990
09:54:26,319 --> 09:54:31,436
an emulation para virtualization

13991
09:54:29,275 --> 09:54:34,239
replaces instructions that cannot be

13992
09:54:31,436 --> 09:54:36,720
virtualized with hyper calls that

13993
09:54:34,239 --> 09:54:39,119
communicate directly with the hypervisor

13994
09:54:36,720 --> 09:54:41,756
so a hypercall is based on the same

13995
09:54:39,120 --> 09:54:42,959
concept as a system call privileged

13996
09:54:41,756 --> 09:54:44,880
instructions

13997
09:54:42,959 --> 09:54:47,839
that accept instead of calling the

13998
09:54:44,879 --> 09:54:49,839
kernel directly it calls the hypervisor

13999
09:54:47,839 --> 09:54:52,559
and due to the modification in this

14000
09:54:49,839 --> 09:54:55,519
guest operating system performance is

14001
09:54:52,559 --> 09:54:58,239
enhanced as the modified guest operating

14002
09:54:55,519 --> 09:55:01,199
system communicates directly with the

14003
09:54:58,239 --> 09:55:03,915
hypervisor and emulation overhead is

14004
09:55:01,199 --> 09:55:07,199
removed the guest operating system

14005
09:55:03,915 --> 09:55:09,519
becomes almost virtualization aware yet

14006
09:55:07,199 --> 09:55:11,915
there is still a process whereby

14007
09:55:09,519 --> 09:55:14,559
software was used to speak to the

14008
09:55:11,915 --> 09:55:17,275
hardware the virtual machines could

14009
09:55:14,559 --> 09:55:18,319
still not access the hardware directly

14010
09:55:17,275 --> 09:55:19,595
although

14011
09:55:18,319 --> 09:55:21,756
things changed in the world of

14012
09:55:19,595 --> 09:55:23,915
virtualization when the physical

14013
09:55:21,756 --> 09:55:26,400
hardware on the host became

14014
09:55:23,915 --> 09:55:28,959
virtualization aware and this is where

14015
09:55:26,400 --> 09:55:31,360
hardware assisted virtualization came

14016
09:55:28,959 --> 09:55:34,239
into play now hardware assisted

14017
09:55:31,360 --> 09:55:36,080
virtualization is an approach that

14018
09:55:34,239 --> 09:55:38,959
enables efficient

14019
09:55:36,080 --> 09:55:40,800
full virtualization using help from

14020
09:55:38,959 --> 09:55:44,080
hardware capabilities

14021
09:55:40,800 --> 09:55:46,560
on the host cpu using this model the

14022
09:55:44,080 --> 09:55:49,276
operating system has direct access to

14023
09:55:46,559 --> 09:55:51,435
resources without any hypervisor

14024
09:55:49,275 --> 09:55:54,879
emulation or operating system

14025
09:55:51,436 --> 09:55:58,480
modification the hardware itself becomes

14026
09:55:54,879 --> 09:56:01,680
virtualization aware the cpu contains

14027
09:55:58,480 --> 09:56:03,840
specific instructions and capabilities

14028
09:56:01,680 --> 09:56:06,800
so that the hypervisor can directly

14029
09:56:03,839 --> 09:56:09,755
control and configure this support it

14030
09:56:06,800 --> 09:56:12,400
also provides improved performance

14031
09:56:09,756 --> 09:56:15,120
because the privileged instructions from

14032
09:56:12,400 --> 09:56:17,840
the virtual machines are now trapped and

14033
09:56:15,120 --> 09:56:20,400
emulated in the hardware directly this

14034
09:56:17,839 --> 09:56:22,479
means that the operating system kernels

14035
09:56:20,400 --> 09:56:25,916
no longer need to be modified and

14036
09:56:22,480 --> 09:56:29,276
recompiled like in para virtualization

14037
09:56:25,915 --> 09:56:31,595
and can run as is at the same time the

14038
09:56:29,275 --> 09:56:35,040
hypervisor also does not need to be

14039
09:56:31,595 --> 09:56:37,680
involved in the extremely slow process

14040
09:56:35,040 --> 09:56:40,319
of binary translation now there is one

14041
09:56:37,680 --> 09:56:42,959
more iteration that i wanted to discuss

14042
09:56:40,319 --> 09:56:45,915
when it comes to virtualization and that

14043
09:56:42,959 --> 09:56:48,720
is kernel level virtualization

14044
09:56:45,915 --> 09:56:51,199
now instead of using a hypervisor

14045
09:56:48,720 --> 09:56:54,160
kernel level virtualization runs a

14046
09:56:51,199 --> 09:56:56,959
separate version of the linux kernel and

14047
09:56:54,160 --> 09:57:00,320
sees the associated virtual machine as a

14048
09:56:56,959 --> 09:57:02,959
user space process on the physical host

14049
09:57:00,319 --> 09:57:05,680
this makes it easy to run multiple

14050
09:57:02,959 --> 09:57:08,879
virtual machines on a single host a

14051
09:57:05,680 --> 09:57:11,436
device driver is used for communication

14052
09:57:08,879 --> 09:57:14,959
between the main linux kernel and the

14053
09:57:11,436 --> 09:57:17,596
virtual machine every vm is implemented

14054
09:57:14,959 --> 09:57:19,360
as a regular linux process

14055
09:57:17,595 --> 09:57:20,479
scheduled by the standard linux

14056
09:57:19,360 --> 09:57:23,120
scheduler

14057
09:57:20,480 --> 09:57:24,319
with dedicated virtual hardware like a

14058
09:57:23,120 --> 09:57:25,840
network card

14059
09:57:24,319 --> 09:57:29,436
graphics adapter

14060
09:57:25,839 --> 09:57:33,119
cpu memory and disk hardware support by

14061
09:57:29,436 --> 09:57:36,080
the cpu is required for virtualization a

14062
09:57:33,120 --> 09:57:38,639
slightly modified emulation process is

14063
09:57:36,080 --> 09:57:41,680
used as the display and execution

14064
09:57:38,639 --> 09:57:44,879
containers for the virtual machines in

14065
09:57:41,680 --> 09:57:47,120
many ways kernel level virtualization is

14066
09:57:44,879 --> 09:57:49,680
a specialized form of server

14067
09:57:47,120 --> 09:57:52,560
virtualization and this is the type of

14068
09:57:49,680 --> 09:57:54,720
virtualization platform that is used in

14069
09:57:52,559 --> 09:57:57,435
all of google cloud now with this type

14070
09:57:54,720 --> 09:58:00,239
of virtualization because of the kernel

14071
09:57:57,436 --> 09:58:02,880
acting as the hypervisor it enables a

14072
09:58:00,239 --> 09:58:05,040
specific feature called nested

14073
09:58:02,879 --> 09:58:08,159
virtualization now with nested

14074
09:58:05,040 --> 09:58:10,800
virtualization it is made possible to

14075
09:58:08,160 --> 09:58:13,200
install a hypervisor on top of the

14076
09:58:10,800 --> 09:58:15,276
already running virtual machine

14077
09:58:13,199 --> 09:58:17,839
and so this is what google cloud has

14078
09:58:15,275 --> 09:58:19,915
done now you're probably wondering after

14079
09:58:17,839 --> 09:58:22,559
going through all the complexities

14080
09:58:19,915 --> 09:58:23,519
involved with previous virtualization

14081
09:58:22,559 --> 09:58:26,879
models

14082
09:58:23,519 --> 09:58:29,680
what makes this scenario worthwhile well

14083
09:58:26,879 --> 09:58:31,755
using nested virtualization it makes it

14084
09:58:29,680 --> 09:58:33,275
easier for users to move their

14085
09:58:31,756 --> 09:58:36,480
on-premises

14086
09:58:33,275 --> 09:58:39,595
virtualized workloads to the cloud

14087
09:58:36,480 --> 09:58:41,840
without having to import and convert vm

14088
09:58:39,595 --> 09:58:45,040
images so in essence

14089
09:58:41,839 --> 09:58:47,435
it eases the use when migrating to cloud

14090
09:58:45,040 --> 09:58:50,239
a great use case for many but wouldn't

14091
09:58:47,436 --> 09:58:52,239
be possible on google cloud without the

14092
09:58:50,239 --> 09:58:54,639
benefit of running kernel level

14093
09:58:52,239 --> 09:58:56,720
virtualization now this is an advanced

14094
09:58:54,639 --> 09:58:59,199
concept that does not show up on the

14095
09:58:56,720 --> 09:59:01,436
exam but i wanted you to understand

14096
09:58:59,199 --> 09:59:03,595
virtualization at a high level

14097
09:59:01,436 --> 09:59:06,239
so that you can understand nested

14098
09:59:03,595 --> 09:59:08,639
virtualization within google cloud

14099
09:59:06,239 --> 09:59:10,959
as it is a part of the feature set of

14100
09:59:08,639 --> 09:59:13,199
compute engine and so that's pretty much

14101
09:59:10,959 --> 09:59:14,400
all i wanted to cover when it comes to

14102
09:59:13,199 --> 09:59:16,000
virtualization

14103
09:59:14,400 --> 09:59:18,239
so you can now mark this lesson as

14104
09:59:16,000 --> 09:59:18,849
complete and let's move on to the next

14105
09:59:18,239 --> 09:59:22,799
one

14106
09:59:18,849 --> 09:59:25,040
[Music]

14107
09:59:22,800 --> 09:59:27,916
welcome back now earlier on in the

14108
09:59:25,040 --> 09:59:31,040
course i discussed compute engine at a

14109
09:59:27,915 --> 09:59:33,755
high level to understand what it is and

14110
09:59:31,040 --> 09:59:36,639
what it does the goal for this section

14111
09:59:33,756 --> 09:59:39,360
is to dive deeper into compute engine as

14112
09:59:36,639 --> 09:59:41,360
it comes up heavily on the exam and so i

14113
09:59:39,360 --> 09:59:42,400
want to make sure i expose all the

14114
09:59:41,360 --> 09:59:45,436
nuances

14115
09:59:42,400 --> 09:59:48,319
as well it is the go-to service offering

14116
09:59:45,436 --> 09:59:50,800
from google cloud when looking to solve

14117
09:59:48,319 --> 09:59:53,519
any general computing needs with this

14118
09:59:50,800 --> 09:59:55,596
lesson specifically i will be going into

14119
09:59:53,519 --> 09:59:57,755
what makes up an instance and the

14120
09:59:55,595 --> 09:59:59,915
different options that are available

14121
09:59:57,756 --> 10:00:02,720
when creating the instance so with that

14122
09:59:59,915 --> 10:00:05,680
being said let's dive in

14123
10:00:02,720 --> 10:00:09,360
now compute engine lets you create and

14124
10:00:05,680 --> 10:00:11,915
run virtual machines known as instances

14125
10:00:09,360 --> 10:00:13,915
and host them on google's infrastructure

14126
10:00:11,915 --> 10:00:16,239
compute engine is google's

14127
10:00:13,915 --> 10:00:19,119
infrastructure as a service virtual

14128
10:00:16,239 --> 10:00:21,119
machine offering so it being an is

14129
10:00:19,120 --> 10:00:23,680
service google takes care of the

14130
10:00:21,120 --> 10:00:26,639
virtualization platform the physical

14131
10:00:23,680 --> 10:00:28,800
servers the network and storage along

14132
10:00:26,639 --> 10:00:31,120
with managing the data center and these

14133
10:00:28,800 --> 10:00:34,080
instances are available in different

14134
10:00:31,120 --> 10:00:36,720
sizes depending on how much cpu and

14135
10:00:34,080 --> 10:00:39,360
memory you might need as well compute

14136
10:00:36,720 --> 10:00:41,520
engine offers different family types for

14137
10:00:39,360 --> 10:00:44,559
the type of workload you need it for

14138
10:00:41,519 --> 10:00:47,275
each instance is charged by the second

14139
10:00:44,559 --> 10:00:49,756
after the first minute as this is a

14140
10:00:47,275 --> 10:00:52,479
consumption based model and as well

14141
10:00:49,756 --> 10:00:55,360
these instances are launched in a vpc

14142
10:00:52,480 --> 10:00:58,400
network in a specific zone and these

14143
10:00:55,360 --> 10:01:00,559
instances will actually sit on hosts in

14144
10:00:58,400 --> 10:01:03,916
these zones and you will be given the

14145
10:01:00,559 --> 10:01:05,680
option of using a multi-tenant host

14146
10:01:03,915 --> 10:01:07,915
where the server that is hosting your

14147
10:01:05,680 --> 10:01:10,800
machine is shared with others

14148
10:01:07,915 --> 10:01:13,680
but please note that each instance is

14149
10:01:10,800 --> 10:01:15,916
completely isolated from the other so no

14150
10:01:13,680 --> 10:01:18,000
one can see each other's instances

14151
10:01:15,915 --> 10:01:20,399
now you're also given the option of

14152
10:01:18,000 --> 10:01:23,360
running your instance on a sole tenant

14153
10:01:20,400 --> 10:01:26,080
node whereby your instance is on its own

14154
10:01:23,360 --> 10:01:28,559
dedicated hosts that is reserved just

14155
10:01:26,080 --> 10:01:31,200
for you and you alone you don't share it

14156
10:01:28,559 --> 10:01:33,595
with anyone else and this is strictly

14157
10:01:31,199 --> 10:01:36,159
for you only now although this option

14158
10:01:33,595 --> 10:01:37,435
may sound really great it does come at a

14159
10:01:36,160 --> 10:01:39,916
steep cost

14160
10:01:37,436 --> 10:01:43,200
so only if your use case requires you to

14161
10:01:39,915 --> 10:01:45,519
use a sole tenant node for security or

14162
10:01:43,199 --> 10:01:48,159
compliance purposes i recommend that you

14163
10:01:45,519 --> 10:01:50,079
stick with a multi-tenant host when

14164
10:01:48,160 --> 10:01:52,400
launching your instances and this is

14165
10:01:50,080 --> 10:01:53,276
usually the most common selection for

14166
10:01:52,400 --> 10:01:55,360
most

14167
10:01:53,275 --> 10:01:57,915
now compute engine instances can be

14168
10:01:55,360 --> 10:02:00,319
configured in many different ways and

14169
10:01:57,915 --> 10:02:02,959
allow you the flexibility to fulfill the

14170
10:02:00,319 --> 10:02:05,040
requests for your specific scenario and

14171
10:02:02,959 --> 10:02:07,120
as you can see here there are four

14172
10:02:05,040 --> 10:02:09,680
different base options when it comes to

14173
10:02:07,120 --> 10:02:12,000
configuration of the instance that you

14174
10:02:09,680 --> 10:02:14,480
are preparing to launch and so i wanted

14175
10:02:12,000 --> 10:02:16,959
to take time to go through them in just

14176
10:02:14,480 --> 10:02:20,480
a bit of detail for context starting

14177
10:02:16,959 --> 10:02:23,360
first with the machine type which covers

14178
10:02:20,480 --> 10:02:25,916
vcpu and memory now there are many

14179
10:02:23,360 --> 10:02:28,160
different predefined machine types that

14180
10:02:25,915 --> 10:02:30,639
i will be covering in great depth in a

14181
10:02:28,160 --> 10:02:32,400
different lesson but for now just know

14182
10:02:30,639 --> 10:02:35,360
that they are available in different

14183
10:02:32,400 --> 10:02:37,756
families depending on your needs and can

14184
10:02:35,360 --> 10:02:40,639
be chosen from the general

14185
10:02:37,756 --> 10:02:43,040
compute optimize and memory optimize

14186
10:02:40,639 --> 10:02:45,839
machine types they are available in

14187
10:02:43,040 --> 10:02:48,080
intel or amd flavors and if the

14188
10:02:45,839 --> 10:02:50,639
pre-defined options doesn't fit your

14189
10:02:48,080 --> 10:02:52,880
need you have the option of creating a

14190
10:02:50,639 --> 10:02:55,519
custom machine that will suit your

14191
10:02:52,879 --> 10:02:58,239
specific workload now when creating a vm

14192
10:02:55,519 --> 10:03:02,639
instance on compute engine each virtual

14193
10:02:58,239 --> 10:03:05,119
cpu or vcpu is implemented as a single

14194
10:03:02,639 --> 10:03:08,319
hardware hyper thread on one of the

14195
10:03:05,120 --> 10:03:10,720
available cpu processors that live on

14196
10:03:08,319 --> 10:03:12,959
the host now when choosing the amount of

14197
10:03:10,720 --> 10:03:15,520
vcpus on an instance

14198
10:03:12,959 --> 10:03:18,479
you must take into consideration the

14199
10:03:15,519 --> 10:03:21,839
desired network throughput as the amount

14200
10:03:18,480 --> 10:03:24,720
of vcpus will determine this throughput

14201
10:03:21,839 --> 10:03:27,915
as the bandwidth is determined per vm

14202
10:03:24,720 --> 10:03:30,319
instance not per network interface or

14203
10:03:27,915 --> 10:03:33,275
per ip address and so the network

14204
10:03:30,319 --> 10:03:36,959
throughput is determined by calculating

14205
10:03:33,275 --> 10:03:39,119
2 gigabits per second for every vcpu on

14206
10:03:36,959 --> 10:03:41,275
your instance so if you're looking for

14207
10:03:39,120 --> 10:03:44,000
greater network throughput then you may

14208
10:03:41,275 --> 10:03:46,639
want to select an instance with more

14209
10:03:44,000 --> 10:03:48,879
vcpus and so once you've determined a

14210
10:03:46,639 --> 10:03:51,275
machine type for your compute engine

14211
10:03:48,879 --> 10:03:53,755
instance you will need to provide it an

14212
10:03:51,275 --> 10:03:55,915
image with an operating system to boot

14213
10:03:53,756 --> 10:03:58,319
up with now when creating your vm

14214
10:03:55,915 --> 10:04:01,360
instances you must use an operating

14215
10:03:58,319 --> 10:04:04,400
system image to create boot disks for

14216
10:04:01,360 --> 10:04:07,275
your instances now compute engine offers

14217
10:04:04,400 --> 10:04:10,080
many pre-configured public images that

14218
10:04:07,275 --> 10:04:12,400
have compatible linux or windows

14219
10:04:10,080 --> 10:04:15,360
operating systems and these operating

14220
10:04:12,400 --> 10:04:18,480
system images can be used to create and

14221
10:04:15,360 --> 10:04:21,520
start instances compute engine uses your

14222
10:04:18,480 --> 10:04:24,880
selected image to create a persistent

14223
10:04:21,519 --> 10:04:27,275
boot disk for each instance by default

14224
10:04:24,879 --> 10:04:30,479
the boot disk for your instance is the

14225
10:04:27,275 --> 10:04:33,360
same size as the image that you selected

14226
10:04:30,480 --> 10:04:36,319
and you can use most public images at no

14227
10:04:33,360 --> 10:04:38,879
additional cost but please be aware that

14228
10:04:36,319 --> 10:04:41,756
there are some premium images that do

14229
10:04:38,879 --> 10:04:44,799
add additional cost to your instances

14230
10:04:41,756 --> 10:04:47,680
now moving on to custom images this is a

14231
10:04:44,800 --> 10:04:50,560
boot disk image that you own and control

14232
10:04:47,680 --> 10:04:53,595
access to a private image if you will

14233
10:04:50,559 --> 10:04:56,479
custom images are available only to your

14234
10:04:53,595 --> 10:04:58,879
cloud project unless you specifically

14235
10:04:56,480 --> 10:05:01,756
decide to share them with another

14236
10:04:58,879 --> 10:05:05,119
project or another organization you can

14237
10:05:01,756 --> 10:05:08,239
create a custom image from boot disks or

14238
10:05:05,120 --> 10:05:10,639
other images then use the custom image

14239
10:05:08,239 --> 10:05:14,079
to create an instance custom images that

14240
10:05:10,639 --> 10:05:17,040
you import to compute engine add no cost

14241
10:05:14,080 --> 10:05:18,400
to your instances but do incur an image

14242
10:05:17,040 --> 10:05:20,639
storage charge

14243
10:05:18,400 --> 10:05:22,800
while you keep your custom image in your

14244
10:05:20,639 --> 10:05:26,080
project now the third option that you

14245
10:05:22,800 --> 10:05:28,480
have is by using a marketplace image now

14246
10:05:26,080 --> 10:05:29,916
google cloud marketplace lets you

14247
10:05:28,480 --> 10:05:32,560
quickly deploy

14248
10:05:29,915 --> 10:05:35,199
functional software packages that run on

14249
10:05:32,559 --> 10:05:37,756
google cloud you can start up a software

14250
10:05:35,199 --> 10:05:41,039
package without having to manually

14251
10:05:37,756 --> 10:05:43,756
configure the software the vm instances

14252
10:05:41,040 --> 10:05:46,959
the storage or even the network settings

14253
10:05:43,756 --> 10:05:49,436
this is a all-in-one instance template

14254
10:05:46,959 --> 10:05:51,756
that includes the operating system and

14255
10:05:49,436 --> 10:05:53,756
the software pre-configured and you can

14256
10:05:51,756 --> 10:05:56,959
deploy a software package whenever you

14257
10:05:53,756 --> 10:05:59,200
like and is by far the easiest way to

14258
10:05:56,959 --> 10:06:00,959
launch a software package and i will be

14259
10:05:59,199 --> 10:06:04,000
giving you a run through on these

14260
10:06:00,959 --> 10:06:06,799
marketplace images in a later demo now

14261
10:06:04,000 --> 10:06:08,720
once you've decided on your machine type

14262
10:06:06,800 --> 10:06:11,040
as well as the type of image that you

14263
10:06:08,720 --> 10:06:13,275
wanted to use moving into the type of

14264
10:06:11,040 --> 10:06:15,915
storage that you want would be your next

14265
10:06:13,275 --> 10:06:18,239
step now when configuring a new instance

14266
10:06:15,915 --> 10:06:20,319
you will need to create a new boot disk

14267
10:06:18,239 --> 10:06:23,119
for it and this is where performance

14268
10:06:20,319 --> 10:06:26,400
versus cost comes into play as you have

14269
10:06:23,120 --> 10:06:29,520
the option to pay less and have a slower

14270
10:06:26,400 --> 10:06:32,400
disk speed or lower iops or you can

14271
10:06:29,519 --> 10:06:35,839
choose to have fast disk speed with

14272
10:06:32,400 --> 10:06:38,080
higher iops but pay a higher cost and so

14273
10:06:35,839 --> 10:06:40,959
the slowest and most inexpensive of

14274
10:06:38,080 --> 10:06:43,840
these options is the standard persistent

14275
10:06:40,959 --> 10:06:46,720
disk which are backed by standard hard

14276
10:06:43,839 --> 10:06:49,275
disk drives the balance persistent disks

14277
10:06:46,720 --> 10:06:52,720
are backed by solid state drives and are

14278
10:06:49,275 --> 10:06:56,159
faster and can provide higher iops than

14279
10:06:52,720 --> 10:06:58,720
the standard option and lastly ssd is

14280
10:06:56,160 --> 10:07:01,596
the fastest option which also brings

14281
10:06:58,720 --> 10:07:04,000
with it the highest iops available for

14282
10:07:01,595 --> 10:07:06,639
persistent disks now outside of these

14283
10:07:04,000 --> 10:07:09,199
three options for persistent disks you

14284
10:07:06,639 --> 10:07:12,159
also have the option of choosing a local

14285
10:07:09,199 --> 10:07:14,079
ssd and these are solid state drives

14286
10:07:12,160 --> 10:07:17,276
that are physically attached to the

14287
10:07:14,080 --> 10:07:19,360
server that hosts your vm instances and

14288
10:07:17,275 --> 10:07:22,639
this is why they have the highest

14289
10:07:19,360 --> 10:07:25,360
throughput and lowest latency than any

14290
10:07:22,639 --> 10:07:27,915
of the available persistent disks just

14291
10:07:25,360 --> 10:07:31,360
as a note the data that you store on a

14292
10:07:27,915 --> 10:07:34,079
local ssd persists only until the

14293
10:07:31,360 --> 10:07:36,959
instance is stopped or deleted which is

14294
10:07:34,080 --> 10:07:40,160
why local ssds are suited only for

14295
10:07:36,959 --> 10:07:43,275
temporary storage such as caches or swap

14296
10:07:40,160 --> 10:07:44,400
disk and so lastly moving into

14297
10:07:43,275 --> 10:07:46,879
networking

14298
10:07:44,400 --> 10:07:49,680
each network interface of a compute

14299
10:07:46,879 --> 10:07:53,199
engine instance is associated with a

14300
10:07:49,680 --> 10:07:55,756
subnet of a unique vpc network as you've

14301
10:07:53,199 --> 10:07:58,959
seen in the last section you can do this

14302
10:07:55,756 --> 10:08:01,840
with an auto a default or a custom

14303
10:07:58,959 --> 10:08:04,479
network each network is available in

14304
10:08:01,839 --> 10:08:06,719
many different regions and zones within

14305
10:08:04,480 --> 10:08:10,160
that region we've also experienced

14306
10:08:06,720 --> 10:08:12,800
routing traffic for our instance both in

14307
10:08:10,160 --> 10:08:15,680
and out of the vpc network

14308
10:08:12,800 --> 10:08:16,720
by use of firewall rules targeting ip

14309
10:08:15,680 --> 10:08:19,915
ranges

14310
10:08:16,720 --> 10:08:22,639
specific network tags or by instances

14311
10:08:19,915 --> 10:08:25,119
within the network now load balancers

14312
10:08:22,639 --> 10:08:26,479
are responsible for helping distribute

14313
10:08:25,120 --> 10:08:29,276
user traffic

14314
10:08:26,480 --> 10:08:32,240
across multiple instances either within

14315
10:08:29,275 --> 10:08:34,959
the network or externally using a

14316
10:08:32,239 --> 10:08:37,119
regional or global load balancer

14317
10:08:34,959 --> 10:08:39,436
and i will be getting into low balancing

14318
10:08:37,120 --> 10:08:42,319
in another section of the course but i

14319
10:08:39,436 --> 10:08:45,120
wanted to stress that load balancers are

14320
10:08:42,319 --> 10:08:48,319
part of instance networking that help

14321
10:08:45,120 --> 10:08:50,400
route and manage traffic coming in and

14322
10:08:48,319 --> 10:08:52,959
going out of the network

14323
10:08:50,400 --> 10:08:55,275
and so this is a high level overview of

14324
10:08:52,959 --> 10:08:57,839
the different configuration types that

14325
10:08:55,275 --> 10:09:00,239
go into putting together an instance and

14326
10:08:57,839 --> 10:09:02,799
i will be diving deeper into each

14327
10:09:00,239 --> 10:09:05,275
in this section as well i will be

14328
10:09:02,800 --> 10:09:07,840
putting a hands-on approach to this by

14329
10:09:05,275 --> 10:09:10,079
creating an instance in the next lesson

14330
10:09:07,839 --> 10:09:12,959
and focusing on the different available

14331
10:09:10,080 --> 10:09:15,436
features that you can use for your

14332
10:09:12,959 --> 10:09:17,756
specific use case and so this is all i

14333
10:09:15,436 --> 10:09:20,000
wanted to cover for this lesson so you

14334
10:09:17,756 --> 10:09:21,860
can now mark this lesson as complete and

14335
10:09:20,000 --> 10:09:25,756
let's move on to the next one

14336
10:09:21,860 --> 10:09:28,080
[Music]

14337
10:09:25,756 --> 10:09:30,880
welcome back now i know in previous

14338
10:09:28,080 --> 10:09:33,040
demonstrations we've built quite a few

14339
10:09:30,879 --> 10:09:34,959
compute engine instances and have

14340
10:09:33,040 --> 10:09:37,436
configured them accordingly in this

14341
10:09:34,959 --> 10:09:39,915
demonstration we're going to go through

14342
10:09:37,436 --> 10:09:42,319
a build of another instance but i wanted

14343
10:09:39,915 --> 10:09:44,879
to dig deeper into the specific

14344
10:09:42,319 --> 10:09:47,436
configurations that are available for

14345
10:09:44,879 --> 10:09:50,319
compute engine so with that being said

14346
10:09:47,436 --> 10:09:54,000
let's dive in and so i am now logged in

14347
10:09:50,319 --> 10:09:56,080
under tony bowties gmail.com as well i

14348
10:09:54,000 --> 10:09:58,319
am logged in under the bowtie inc

14349
10:09:56,080 --> 10:10:00,480
project so in order to kick off this

14350
10:09:58,319 --> 10:10:02,319
demo i'm going to head on over to the

14351
10:10:00,480 --> 10:10:04,640
compute engine console so i'm going to

14352
10:10:02,319 --> 10:10:07,275
go over to the navigation menu and i'm

14353
10:10:04,639 --> 10:10:09,199
going to scroll down to compute engine

14354
10:10:07,275 --> 10:10:12,720
and so here i'm prompted

14355
10:10:09,199 --> 10:10:14,879
to either create or import a vm instance

14356
10:10:12,720 --> 10:10:16,880
as well as taking the quick start and so

14357
10:10:14,879 --> 10:10:18,799
i'm not going to import or take the

14358
10:10:16,879 --> 10:10:20,239
quick start so i'm going to simply click

14359
10:10:18,800 --> 10:10:22,319
on create

14360
10:10:20,239 --> 10:10:24,720
and so i want to take a moment here to

14361
10:10:22,319 --> 10:10:26,879
focus on the left hand menu where there

14362
10:10:24,720 --> 10:10:29,595
are a bunch of different options to

14363
10:10:26,879 --> 10:10:32,159
create any given instance so the first

14364
10:10:29,595 --> 10:10:34,639
and default option allows me to create

14365
10:10:32,160 --> 10:10:37,360
the instance from scratch choosing the

14366
10:10:34,639 --> 10:10:40,319
new vm instance from template option

14367
10:10:37,360 --> 10:10:42,559
allows me to create a new instance from

14368
10:10:40,319 --> 10:10:44,639
an instance template and because i don't

14369
10:10:42,559 --> 10:10:46,799
have any instance templates i am

14370
10:10:44,639 --> 10:10:48,800
prompted here with the option to create

14371
10:10:46,800 --> 10:10:51,040
one and so for those of you who are

14372
10:10:48,800 --> 10:10:53,200
unfamiliar with instance templates

14373
10:10:51,040 --> 10:10:56,000
templates are used in managed instance

14374
10:10:53,199 --> 10:10:58,719
groups and define instance properties

14375
10:10:56,000 --> 10:11:00,959
for when instances are launched within

14376
10:10:58,720 --> 10:11:03,436
that managed instance group but don't

14377
10:11:00,959 --> 10:11:06,239
worry i will be covering instance groups

14378
10:11:03,436 --> 10:11:08,400
and instant templates in a later lesson

14379
10:11:06,239 --> 10:11:11,119
the next option that's available is new

14380
10:11:08,400 --> 10:11:13,916
vm instance from machine image and an

14381
10:11:11,120 --> 10:11:16,319
image is a clone or a copy of an

14382
10:11:13,915 --> 10:11:18,479
instance and again i will be covering

14383
10:11:16,319 --> 10:11:20,800
this in a separate lesson and going

14384
10:11:18,480 --> 10:11:23,120
through all the details of machine

14385
10:11:20,800 --> 10:11:25,680
images but if i did have any machine

14386
10:11:23,120 --> 10:11:28,480
images i would be able to create my

14387
10:11:25,680 --> 10:11:30,559
instance from here but since i do not i

14388
10:11:28,480 --> 10:11:32,960
am prompted with the option to create a

14389
10:11:30,559 --> 10:11:34,399
new machine image now the last option

14390
10:11:32,959 --> 10:11:36,319
that i wanted to show you is the

14391
10:11:34,400 --> 10:11:38,720
marketplace

14392
10:11:36,319 --> 10:11:40,720
and so the marketplace has existing

14393
10:11:38,720 --> 10:11:43,360
machine images that are all

14394
10:11:40,720 --> 10:11:45,595
pre-configured with its proper operating

14395
10:11:43,360 --> 10:11:48,160
system as well as the software to

14396
10:11:45,595 --> 10:11:50,959
accompany it so for instance if i'm

14397
10:11:48,160 --> 10:11:53,520
looking to create a vm with a wordpress

14398
10:11:50,959 --> 10:11:55,519
installation on it i can simply go up to

14399
10:11:53,519 --> 10:11:57,915
the top to the search bar type in

14400
10:11:55,519 --> 10:11:59,755
wordpress and i will be presented with

14401
10:11:57,915 --> 10:12:01,755
many different options and i'm just

14402
10:11:59,756 --> 10:12:05,275
going to choose the one here at the top

14403
10:12:01,756 --> 10:12:08,160
and i am presented with 49 results of

14404
10:12:05,275 --> 10:12:10,319
virtual machines with different types of

14405
10:12:08,160 --> 10:12:12,400
wordpress installations on them and

14406
10:12:10,319 --> 10:12:14,879
these are all different instances that

14407
10:12:12,400 --> 10:12:17,596
have been configured specifically for

14408
10:12:14,879 --> 10:12:20,079
wordpress by different companies like

14409
10:12:17,595 --> 10:12:22,000
lightspeed analog innovation and

14410
10:12:20,080 --> 10:12:24,319
cognosis inc and so for this

14411
10:12:22,000 --> 10:12:28,000
demonstration i'm going to choose

14412
10:12:24,319 --> 10:12:30,159
wordpress on centos 7

14413
10:12:28,000 --> 10:12:32,400
and here i'm giving an overview about

14414
10:12:30,160 --> 10:12:34,000
the software itself i'm also given

14415
10:12:32,400 --> 10:12:36,560
information about the company that

14416
10:12:34,000 --> 10:12:39,519
configured this as well at the top i'm

14417
10:12:36,559 --> 10:12:41,756
given a monthly estimated cost for this

14418
10:12:39,519 --> 10:12:44,079
specific instance and if i scroll down

14419
10:12:41,756 --> 10:12:46,720
the page i can get a little bit more

14420
10:12:44,080 --> 10:12:48,880
information with regards to this image

14421
10:12:46,720 --> 10:12:51,360
and as shown here on the right i can see

14422
10:12:48,879 --> 10:12:54,799
my pricing the usage fee will cost me

14423
10:12:51,360 --> 10:12:57,040
109 a month along with the vm instance

14424
10:12:54,800 --> 10:12:59,040
type that the software is configured for

14425
10:12:57,040 --> 10:13:01,436
the amount of disk space and the

14426
10:12:59,040 --> 10:13:03,840
sustained use discount i've also been

14427
10:13:01,436 --> 10:13:05,200
given some links here for tutorials and

14428
10:13:03,839 --> 10:13:07,359
documentation

14429
10:13:05,199 --> 10:13:09,360
and i've also been given instructions

14430
10:13:07,360 --> 10:13:12,080
for maintenance and support i've been

14431
10:13:09,360 --> 10:13:14,160
given both an email and a link to live

14432
10:13:12,080 --> 10:13:16,480
support and of course at the bottom we

14433
10:13:14,160 --> 10:13:19,120
have the terms of service and this is a

14434
10:13:16,480 --> 10:13:21,360
typical software package amongst many

14435
10:13:19,120 --> 10:13:23,680
others that's available in the google

14436
10:13:21,360 --> 10:13:25,915
cloud marketplace now i can go ahead and

14437
10:13:23,680 --> 10:13:27,680
launch this if i choose but i'm going to

14438
10:13:25,915 --> 10:13:29,755
choose not to launch this and i'm going

14439
10:13:27,680 --> 10:13:31,756
to back out and so just to give you some

14440
10:13:29,756 --> 10:13:32,800
context with regards to enterprise

14441
10:13:31,756 --> 10:13:36,000
software

14442
10:13:32,800 --> 10:13:38,240
software packages like f5 and jenkins

14443
10:13:36,000 --> 10:13:40,319
are also available in the google cloud

14444
10:13:38,239 --> 10:13:42,479
marketplace and again when i click on

14445
10:13:40,319 --> 10:13:45,839
the first option it'll give me a bunch

14446
10:13:42,480 --> 10:13:48,800
of available options on jenkins and its

14447
10:13:45,839 --> 10:13:51,595
availability from different companies on

14448
10:13:48,800 --> 10:13:54,240
different platforms now just as a note

14449
10:13:51,595 --> 10:13:55,680
to update your existing deployment of a

14450
10:13:54,239 --> 10:13:58,479
software package

14451
10:13:55,680 --> 10:14:01,275
you have to redeploy the software

14452
10:13:58,480 --> 10:14:04,080
package from marketplace in order to

14453
10:14:01,275 --> 10:14:07,519
update it but other than that caveat the

14454
10:14:04,080 --> 10:14:09,840
easiest way to deploy a software package

14455
10:14:07,519 --> 10:14:11,519
is definitely through the marketplace

14456
10:14:09,839 --> 10:14:14,159
and so now that we've gone through all

14457
10:14:11,519 --> 10:14:16,959
the different options on how to create

14458
10:14:14,160 --> 10:14:20,400
an instance i'm gonna go back and select

14459
10:14:16,959 --> 10:14:22,879
new vm instance so i can create a new vm

14460
10:14:20,400 --> 10:14:25,120
from scratch and so i am prompted here

14461
10:14:22,879 --> 10:14:27,839
at the top with a note telling me that

14462
10:14:25,120 --> 10:14:29,680
there was a draft that was saved from

14463
10:14:27,839 --> 10:14:32,559
when i started to create in my new

14464
10:14:29,680 --> 10:14:34,639
instance but i navigated away from it

14465
10:14:32,559 --> 10:14:37,040
and i have the option to restore the

14466
10:14:34,639 --> 10:14:39,199
configuration i was working on and so

14467
10:14:37,040 --> 10:14:40,959
just know that when you are in the midst

14468
10:14:39,199 --> 10:14:43,360
of creating an instance

14469
10:14:40,959 --> 10:14:46,319
google cloud will automatically save a

14470
10:14:43,360 --> 10:14:48,800
draft of your build so that you are able

14471
10:14:46,319 --> 10:14:51,199
to continue working on it later now i

14472
10:14:48,800 --> 10:14:53,436
don't really need this draft but i will

14473
10:14:51,199 --> 10:14:55,435
just hit restore

14474
10:14:53,436 --> 10:14:57,916
and for the name i'm going to keep it as

14475
10:14:55,436 --> 10:14:59,520
instance 1 and for the sake of this demo

14476
10:14:57,915 --> 10:15:01,839
i'm going to add a label

14477
10:14:59,519 --> 10:15:03,755
the key is going to be environment and

14478
10:15:01,839 --> 10:15:05,839
the value will be testing i'm going to

14479
10:15:03,756 --> 10:15:08,239
go down to the bottom click save now

14480
10:15:05,839 --> 10:15:10,959
when it comes to the geographic location

14481
10:15:08,239 --> 10:15:13,199
of the instance using regions i can

14482
10:15:10,959 --> 10:15:16,639
simply click on the drop down and i will

14483
10:15:13,199 --> 10:15:19,199
have access to deploy this instance in

14484
10:15:16,639 --> 10:15:21,360
any currently available region as

14485
10:15:19,199 --> 10:15:23,435
regions are added they will be added

14486
10:15:21,360 --> 10:15:26,800
here as well and so i'm going to keep it

14487
10:15:23,436 --> 10:15:29,596
as us east one

14488
10:15:26,800 --> 10:15:31,756
and under zone i have the availability

14489
10:15:29,595 --> 10:15:33,915
of putting it in any zone within that

14490
10:15:31,756 --> 10:15:36,959
region and so i'm going to keep it as us

14491
10:15:33,915 --> 10:15:38,879
east 1b and just as another note once

14492
10:15:36,959 --> 10:15:41,436
you've deployed the instance in a

14493
10:15:38,879 --> 10:15:43,755
specific region you will not be able to

14494
10:15:41,436 --> 10:15:45,520
move that instance to a different region

14495
10:15:43,756 --> 10:15:47,916
you will have to recreate it using a

14496
10:15:45,519 --> 10:15:50,319
snapshot in another region and i will be

14497
10:15:47,915 --> 10:15:52,719
going over this in a later lesson now

14498
10:15:50,319 --> 10:15:54,159
scrolling down to machine configuration

14499
10:15:52,720 --> 10:15:56,319
there are three different types of

14500
10:15:54,160 --> 10:15:58,720
families that you can choose from when

14501
10:15:56,319 --> 10:16:01,519
it comes to machine types the general

14502
10:15:58,720 --> 10:16:03,840
purpose the compute optimized and the

14503
10:16:01,519 --> 10:16:06,319
memory optimized the general purpose

14504
10:16:03,839 --> 10:16:08,719
machine family has a great available

14505
10:16:06,319 --> 10:16:10,879
selection of different series types that

14506
10:16:08,720 --> 10:16:13,595
you can choose from and is usually the

14507
10:16:10,879 --> 10:16:16,079
go to machine family if you're unsure

14508
10:16:13,595 --> 10:16:17,680
about which machine type to select so

14509
10:16:16,080 --> 10:16:20,720
for this demo i'm going to keep my

14510
10:16:17,680 --> 10:16:23,040
selection for series type as e2 and

14511
10:16:20,720 --> 10:16:25,916
under machine type i'm given a very

14512
10:16:23,040 --> 10:16:29,120
large selection of different sizes when

14513
10:16:25,915 --> 10:16:31,839
it comes to vcpu and memory and so i can

14514
10:16:29,120 --> 10:16:35,756
select from a shared core a standard

14515
10:16:31,839 --> 10:16:38,000
type a high memory type or a high cpu

14516
10:16:35,756 --> 10:16:40,559
type and i will be going over this in

14517
10:16:38,000 --> 10:16:43,436
greater detail in another lesson on

14518
10:16:40,559 --> 10:16:46,159
machine types now in case the predefined

14519
10:16:43,436 --> 10:16:49,040
machine types do not fit my needs

14520
10:16:46,160 --> 10:16:50,640
or the scope for the amount of vcpus and

14521
10:16:49,040 --> 10:16:53,120
memory that i need

14522
10:16:50,639 --> 10:16:56,000
fall in between those predefined machine

14523
10:16:53,120 --> 10:16:58,400
types i can simply select the custom

14524
10:16:56,000 --> 10:16:59,519
option and this will bring up a set of

14525
10:16:58,400 --> 10:17:01,840
sliders

14526
10:16:59,519 --> 10:17:04,879
where i am able to select both the

14527
10:17:01,839 --> 10:17:07,679
amount of vcpus and amount of memory

14528
10:17:04,879 --> 10:17:10,239
that i need for the instance that i am

14529
10:17:07,680 --> 10:17:14,080
creating now as i change the course

14530
10:17:10,239 --> 10:17:16,239
slider to either more vcpus or less my

14531
10:17:14,080 --> 10:17:18,720
core to memory ratio for this series

14532
10:17:16,239 --> 10:17:21,360
will stay the same and therefore my

14533
10:17:18,720 --> 10:17:23,436
memory will be adjusted automatically i

14534
10:17:21,360 --> 10:17:26,400
also have the option to change the

14535
10:17:23,436 --> 10:17:29,200
memory as i see fit to either add more

14536
10:17:26,400 --> 10:17:32,239
memory or to remove it and so this is

14537
10:17:29,199 --> 10:17:33,435
great for when you're in between sizes

14538
10:17:32,239 --> 10:17:36,079
and you're looking for something

14539
10:17:33,436 --> 10:17:37,680
specific that fits your workload and so

14540
10:17:36,080 --> 10:17:40,800
i'm going to change back the machine

14541
10:17:37,680 --> 10:17:43,436
type to an e2 micro

14542
10:17:40,800 --> 10:17:46,240
and as you can see in the top right

14543
10:17:43,436 --> 10:17:48,639
i will find a monthly estimate of how

14544
10:17:46,239 --> 10:17:51,360
much the instance will cost me

14545
10:17:48,639 --> 10:17:54,479
and i can click on this drop down and it

14546
10:17:51,360 --> 10:17:58,319
will give me a breakdown of the cost for

14547
10:17:54,480 --> 10:18:01,200
vcpu in memory the cost for my disks as

14548
10:17:58,319 --> 10:18:03,360
well as my sustained use discount and if

14549
10:18:01,199 --> 10:18:06,879
i had any other resources that i was

14550
10:18:03,360 --> 10:18:09,360
consuming like a static ip or an extra

14551
10:18:06,879 --> 10:18:11,680
attached disk those costs would show up

14552
10:18:09,360 --> 10:18:14,319
here as well and so if i went to a

14553
10:18:11,680 --> 10:18:16,319
compute optimized you can see how the

14554
10:18:14,319 --> 10:18:18,879
price has changed but i'm given the

14555
10:18:16,319 --> 10:18:20,559
breakdown so that i know exactly what

14556
10:18:18,879 --> 10:18:23,275
i'm paying for so i'm going to switch it

14557
10:18:20,559 --> 10:18:26,000
back to general purpose

14558
10:18:23,275 --> 10:18:29,915
and i wanted to point out here the cpu

14559
10:18:26,000 --> 10:18:32,559
platform and gpu as you can add gpus to

14560
10:18:29,915 --> 10:18:34,399
your specific machine configuration and

14561
10:18:32,559 --> 10:18:38,000
so just as another note

14562
10:18:34,400 --> 10:18:41,275
gpus can only be added to an n1 machine

14563
10:18:38,000 --> 10:18:44,160
type as any other type will show the gpu

14564
10:18:41,275 --> 10:18:47,040
selection as grayed out and so here i

14565
10:18:44,160 --> 10:18:49,436
can add the gpu type as well as adding

14566
10:18:47,040 --> 10:18:51,360
the number of gpus that i need but for

14567
10:18:49,436 --> 10:18:53,436
the sake of this demonstration i'm not

14568
10:18:51,360 --> 10:18:56,800
going to add any gpus

14569
10:18:53,436 --> 10:18:59,436
and i'm going to select the e2 series

14570
10:18:56,800 --> 10:19:01,756
and change it back to e2 micro scrolling

14571
10:18:59,436 --> 10:19:04,560
down a little bit here

14572
10:19:01,756 --> 10:19:06,559
when it comes to cpu platform depending

14573
10:19:04,559 --> 10:19:09,680
on the machine type you can choose

14574
10:19:06,559 --> 10:19:12,639
between intel or amd if you are looking

14575
10:19:09,680 --> 10:19:14,959
for a specific cpu but just know that

14576
10:19:12,639 --> 10:19:17,120
your configuration is permanent now

14577
10:19:14,959 --> 10:19:19,595
moving down a little bit more you will

14578
10:19:17,120 --> 10:19:22,319
see here display device now display

14579
10:19:19,595 --> 10:19:25,275
device is a feature on compute engine

14580
10:19:22,319 --> 10:19:28,720
that allows you to add a virtual display

14581
10:19:25,275 --> 10:19:31,275
to a vm for system management tools

14582
10:19:28,720 --> 10:19:34,319
remote desktop software and any

14583
10:19:31,275 --> 10:19:37,119
application that requires you to connect

14584
10:19:34,319 --> 10:19:39,199
to a display device on a remote server

14585
10:19:37,120 --> 10:19:41,276
this is an especially great feature to

14586
10:19:39,199 --> 10:19:44,399
have for when your server is stuck at

14587
10:19:41,275 --> 10:19:46,720
boot patching or hardware failure and

14588
10:19:44,400 --> 10:19:49,596
you can't log in and the drivers are

14589
10:19:46,720 --> 10:19:52,559
already included for both windows and

14590
10:19:49,595 --> 10:19:55,756
linux vms this feature works with the

14591
10:19:52,559 --> 10:19:57,199
default vga driver right out of the box

14592
10:19:55,756 --> 10:19:59,200
and so i'm going to keep this checked

14593
10:19:57,199 --> 10:20:02,079
off as i don't need it and i'm going to

14594
10:19:59,199 --> 10:20:04,719
move down to confidential vm service now

14595
10:20:02,080 --> 10:20:07,680
confidential computing is a security

14596
10:20:04,720 --> 10:20:11,040
feature to encrypt sensitive code and

14597
10:20:07,680 --> 10:20:14,000
data that's in memory so even when it's

14598
10:20:11,040 --> 10:20:16,000
being processed it is still encrypted

14599
10:20:14,000 --> 10:20:18,400
and is a great use case when you're

14600
10:20:16,000 --> 10:20:21,360
dealing with very sensitive information

14601
10:20:18,400 --> 10:20:24,319
that requires strict requirements now

14602
10:20:21,360 --> 10:20:26,559
compute engine also gives you the option

14603
10:20:24,319 --> 10:20:29,275
of deploying containers on it and this

14604
10:20:26,559 --> 10:20:31,519
is a great way to test your containers

14605
10:20:29,275 --> 10:20:34,000
instead of deploying a whole kubernetes

14606
10:20:31,519 --> 10:20:36,959
cluster and may even suffice for

14607
10:20:34,000 --> 10:20:40,160
specific use cases but just note that

14608
10:20:36,959 --> 10:20:42,319
you can only deploy one container per vm

14609
10:20:40,160 --> 10:20:44,240
instance and so now that we've covered

14610
10:20:42,319 --> 10:20:46,559
most of the general configuration

14611
10:20:44,239 --> 10:20:48,959
options for compute engine i wanted to

14612
10:20:46,559 --> 10:20:51,519
take a minute to dive into the options

14613
10:20:48,959 --> 10:20:53,275
that are available for boot disk so i'm

14614
10:20:51,519 --> 10:20:55,680
going to go ahead and click on change

14615
10:20:53,275 --> 10:20:58,159
and here i have the option of choosing

14616
10:20:55,680 --> 10:21:00,480
from a bunch of different public images

14617
10:20:58,160 --> 10:21:03,276
with different operating systems that i

14618
10:21:00,480 --> 10:21:05,916
can use for my boot disk so if i wanted

14619
10:21:03,275 --> 10:21:08,559
to load up ubuntu i can simply select

14620
10:21:05,915 --> 10:21:10,399
ubuntu and i can choose from each

14621
10:21:08,559 --> 10:21:13,040
different version that's available

14622
10:21:10,400 --> 10:21:15,756
as well i'm shown here the boot disk

14623
10:21:13,040 --> 10:21:18,559
type which is currently selected as the

14624
10:21:15,756 --> 10:21:21,040
standard persistent disk but i also have

14625
10:21:18,559 --> 10:21:23,915
the option of selecting either a

14626
10:21:21,040 --> 10:21:25,915
balanced persistent disk or ssd

14627
10:21:23,915 --> 10:21:28,079
persistent disk and i'm going to keep it

14628
10:21:25,915 --> 10:21:30,159
as standard persistent disk and if i

14629
10:21:28,080 --> 10:21:32,800
wanted to i can increase the boot disk

14630
10:21:30,160 --> 10:21:35,360
size so if i wanted 100 gigs i can

14631
10:21:32,800 --> 10:21:37,840
simply add it and if i select it and i

14632
10:21:35,360 --> 10:21:40,400
go back up to the top right hand corner

14633
10:21:37,839 --> 10:21:42,959
i can see that my price for the instance

14634
10:21:40,400 --> 10:21:45,360
has changed now i'm not charged for the

14635
10:21:42,959 --> 10:21:48,000
operating system due to it being an open

14636
10:21:45,360 --> 10:21:50,160
source image but i am charged more for

14637
10:21:48,000 --> 10:21:52,879
the standard persistent disk because i'm

14638
10:21:50,160 --> 10:21:54,640
no longer using 10 gigs but i'm using

14639
10:21:52,879 --> 10:21:57,119
100 gigabytes

14640
10:21:54,639 --> 10:22:00,159
now let's say i wanted to go back and i

14641
10:21:57,120 --> 10:22:01,756
wanted to change this image to a windows

14642
10:22:00,160 --> 10:22:03,916
image i'm going to go down here to

14643
10:22:01,756 --> 10:22:06,720
windows server and i want to select

14644
10:22:03,915 --> 10:22:08,879
windows server 2016 i'm going to load up

14645
10:22:06,720 --> 10:22:10,800
the data center version and i'm going to

14646
10:22:08,879 --> 10:22:13,119
keep the standard persistent disk along

14647
10:22:10,800 --> 10:22:15,840
with 100 gigabytes i'm going to select

14648
10:22:13,120 --> 10:22:18,720
it if i scroll back up i can see that

14649
10:22:15,839 --> 10:22:20,799
i'm charged a licensing fee for windows

14650
10:22:18,720 --> 10:22:23,520
server and these images with these

14651
10:22:20,800 --> 10:22:25,840
licensing fees are known as premium

14652
10:22:23,519 --> 10:22:28,000
images so please make sure that you are

14653
10:22:25,839 --> 10:22:29,915
aware of these licensing fees when

14654
10:22:28,000 --> 10:22:32,239
launching your instances and because i

14655
10:22:29,915 --> 10:22:33,915
want to save on money just for now i'm

14656
10:22:32,239 --> 10:22:37,436
going to scroll back down to my boot

14657
10:22:33,915 --> 10:22:39,755
disk and change it back to ubuntu

14658
10:22:37,436 --> 10:22:42,400
and i'm going to change the size back

14659
10:22:39,756 --> 10:22:44,639
down to 10 gigabytes as well before you

14660
10:22:42,400 --> 10:22:47,200
move on i wanted to touch on custom

14661
10:22:44,639 --> 10:22:49,915
images and so if i did have any custom

14662
10:22:47,199 --> 10:22:52,479
images i could see them here and i would

14663
10:22:49,915 --> 10:22:55,360
be able to create instances from my

14664
10:22:52,480 --> 10:22:57,520
custom images using this method i also

14665
10:22:55,360 --> 10:22:59,595
have the option of creating an instance

14666
10:22:57,519 --> 10:23:02,239
from a snapshot and because i don't have

14667
10:22:59,595 --> 10:23:05,435
any nothing shows up and lastly i have

14668
10:23:02,239 --> 10:23:07,595
the option of using existing disks so

14669
10:23:05,436 --> 10:23:10,239
let's say for instance i had a vm

14670
10:23:07,595 --> 10:23:12,799
instance and i had deleted it but i

14671
10:23:10,239 --> 10:23:15,360
decided to keep the attached boot disk

14672
10:23:12,800 --> 10:23:18,720
it would show up as unattached and i am

14673
10:23:15,360 --> 10:23:20,480
able to attach that to a new instance

14674
10:23:18,720 --> 10:23:22,880
and so now that i've shown you all the

14675
10:23:20,480 --> 10:23:24,800
available options when it comes to boot

14676
10:23:22,879 --> 10:23:27,435
disk i'm going to go ahead and select

14677
10:23:24,800 --> 10:23:29,840
the ubuntu operating system and move on

14678
10:23:27,436 --> 10:23:32,239
to the next option here we have identity

14679
10:23:29,839 --> 10:23:34,719
and api access which we've gone through

14680
10:23:32,239 --> 10:23:37,199
in great depth in a previous demo as

14681
10:23:34,720 --> 10:23:41,319
well i'm given an option to create a

14682
10:23:37,199 --> 10:23:44,799
firewall rule automatically for http and

14683
10:23:41,319 --> 10:23:46,879
https traffic and as for networking as

14684
10:23:44,800 --> 10:23:47,840
we covered it in great depth in the last

14685
10:23:46,879 --> 10:23:49,199
section

14686
10:23:47,839 --> 10:23:51,915
i will skip that part of the

14687
10:23:49,199 --> 10:23:54,639
configuration and simply launch it in

14688
10:23:51,915 --> 10:23:57,275
the default vpc and so just as a quick

14689
10:23:54,639 --> 10:23:59,275
note i wanted to remind you that down at

14690
10:23:57,275 --> 10:24:01,519
the bottom of the page you can find the

14691
10:23:59,275 --> 10:24:03,595
command line shortcut and when you click

14692
10:24:01,519 --> 10:24:06,079
on it it will give you the gcloud

14693
10:24:03,595 --> 10:24:08,239
command to run that you can use in order

14694
10:24:06,080 --> 10:24:10,880
to create your instance and so i want to

14695
10:24:08,239 --> 10:24:13,436
deploy this as is so i'm going to click

14696
10:24:10,879 --> 10:24:14,799
here on close and i'm going to click on

14697
10:24:13,436 --> 10:24:16,000
create

14698
10:24:14,800 --> 10:24:17,916
and so i'm just going to give it a

14699
10:24:16,000 --> 10:24:20,160
minute now so the instance can be

14700
10:24:17,915 --> 10:24:22,319
created and it took a few seconds but

14701
10:24:20,160 --> 10:24:25,200
the instance is created and this is

14702
10:24:22,319 --> 10:24:27,839
regarded as the inventory page to view

14703
10:24:25,199 --> 10:24:30,479
your instance inventory and to look up

14704
10:24:27,839 --> 10:24:32,799
any correlating information on any of

14705
10:24:30,480 --> 10:24:35,120
your instances and so this probably

14706
10:24:32,800 --> 10:24:37,276
looks familiar to you from the previous

14707
10:24:35,120 --> 10:24:39,436
instances that you've launched so here

14708
10:24:37,275 --> 10:24:40,400
we have the name of the instance the

14709
10:24:39,436 --> 10:24:43,520
zone

14710
10:24:40,400 --> 10:24:46,239
the internal ip along with the external

14711
10:24:43,519 --> 10:24:48,479
ip and a selection to connect to the

14712
10:24:46,239 --> 10:24:50,879
instance as well i'm also given the

14713
10:24:48,480 --> 10:24:53,360
option to connect to this instance in

14714
10:24:50,879 --> 10:24:55,595
different ways you also have the option

14715
10:24:53,360 --> 10:24:58,800
of adding more column information to

14716
10:24:55,595 --> 10:25:00,079
your inventory dashboard with regards to

14717
10:24:58,800 --> 10:25:01,840
your instance

14718
10:25:00,080 --> 10:25:04,400
and you can do this by simply clicking

14719
10:25:01,839 --> 10:25:06,879
on the columns button right here above

14720
10:25:04,400 --> 10:25:08,639
the list of instances and you can select

14721
10:25:06,879 --> 10:25:12,000
from creation time

14722
10:25:08,639 --> 10:25:14,159
machine type preserve state and even the

14723
10:25:12,000 --> 10:25:16,879
network and this may bring you more

14724
10:25:14,160 --> 10:25:19,200
insight on the information available for

14725
10:25:16,879 --> 10:25:22,159
that instance or even grouping of

14726
10:25:19,199 --> 10:25:24,639
instances with common configurations

14727
10:25:22,160 --> 10:25:27,360
this will also help you identify your

14728
10:25:24,639 --> 10:25:29,680
instances visually in the console and so

14729
10:25:27,360 --> 10:25:30,480
i'm just going to put the columns back

14730
10:25:29,680 --> 10:25:33,595
to

14731
10:25:30,480 --> 10:25:33,596
exactly what it was

14732
10:25:34,639 --> 10:25:39,436
and so now i want to take a moment to

14733
10:25:36,800 --> 10:25:42,080
dive right into the instance and have a

14734
10:25:39,436 --> 10:25:45,200
look at the instance details so as you

14735
10:25:42,080 --> 10:25:48,639
remember we selected the machine type of

14736
10:25:45,199 --> 10:25:50,879
e2 micro which has two vcpus and one

14737
10:25:48,639 --> 10:25:54,319
gigabyte of memory here we have the

14738
10:25:50,879 --> 10:25:57,040
instance id as well scrolling down we

14739
10:25:54,319 --> 10:25:59,120
have the cpu platform we have the

14740
10:25:57,040 --> 10:26:02,239
display device that i was mentioning

14741
10:25:59,120 --> 10:26:05,040
earlier along with the zone the labels

14742
10:26:02,239 --> 10:26:07,519
the creation time as well as the network

14743
10:26:05,040 --> 10:26:10,639
interface and scrolling down i can see

14744
10:26:07,519 --> 10:26:12,879
here the boot disk with the ubuntu image

14745
10:26:10,639 --> 10:26:14,800
as well as the name of the boot disk so

14746
10:26:12,879 --> 10:26:17,680
there are quite a few configurations

14747
10:26:14,800 --> 10:26:20,080
here and if i click on edit i can edit

14748
10:26:17,680 --> 10:26:22,400
some of these configurations on the fly

14749
10:26:20,080 --> 10:26:24,800
and with some configurations i need to

14750
10:26:22,400 --> 10:26:26,880
stop the instance before editing them

14751
10:26:24,800 --> 10:26:29,360
and there are some configurations like

14752
10:26:26,879 --> 10:26:32,000
the network interface where i would have

14753
10:26:29,360 --> 10:26:34,800
to delete the instance in order to

14754
10:26:32,000 --> 10:26:37,120
recreate it so for instance if i wanted

14755
10:26:34,800 --> 10:26:39,756
to change the machine type i need to

14756
10:26:37,120 --> 10:26:41,916
stop the instance in order to change it

14757
10:26:39,756 --> 10:26:45,120
and the same thing goes for my display

14758
10:26:41,915 --> 10:26:46,879
device as well the network interface in

14759
10:26:45,120 --> 10:26:49,520
order for me to change it from its

14760
10:26:46,879 --> 10:26:52,000
current network or subnetwork i'm going

14761
10:26:49,519 --> 10:26:54,159
to have to stop the instance in order to

14762
10:26:52,000 --> 10:26:56,319
change it as well and so i hope this

14763
10:26:54,160 --> 10:26:58,800
general walkthrough of configuring an

14764
10:26:56,319 --> 10:27:01,120
instance has given you a sense of what

14765
10:26:58,800 --> 10:27:03,680
can be configured on launch

14766
10:27:01,120 --> 10:27:06,160
and allowed you to gain some insight on

14767
10:27:03,680 --> 10:27:08,319
editing features of an instance after

14768
10:27:06,160 --> 10:27:11,436
launch a lot of what you've seen here in

14769
10:27:08,319 --> 10:27:13,680
this demo will come up in the exam and

14770
10:27:11,436 --> 10:27:16,080
so i would recommend that before going

14771
10:27:13,680 --> 10:27:18,559
into the exam to spend some time

14772
10:27:16,080 --> 10:27:21,200
launching instances knowing exactly how

14773
10:27:18,559 --> 10:27:23,519
they will behave and what can be edited

14774
10:27:21,199 --> 10:27:26,000
after creation that can be done on the

14775
10:27:23,519 --> 10:27:28,239
fly edits that need the instance to be

14776
10:27:26,000 --> 10:27:30,559
shut down and edits that need the

14777
10:27:28,239 --> 10:27:32,720
instance to be recreated and so that's

14778
10:27:30,559 --> 10:27:35,119
pretty much all i wanted to cover when

14779
10:27:32,720 --> 10:27:37,436
it comes to creating an instance so you

14780
10:27:35,120 --> 10:27:41,400
can now mark this as complete and let's

14781
10:27:37,436 --> 10:27:41,400
move on to the next one

14782
10:27:43,199 --> 10:27:47,915
welcome back now in this lesson i'm

14783
10:27:45,680 --> 10:27:50,639
going to be discussing compute engine

14784
10:27:47,915 --> 10:27:53,275
machine types now a machine type is a

14785
10:27:50,639 --> 10:27:56,000
set of virtualized hardware resources

14786
10:27:53,275 --> 10:27:58,479
that's available to a vm instance

14787
10:27:56,000 --> 10:28:00,480
including the system memory size

14788
10:27:58,480 --> 10:28:03,436
virtual cpu count

14789
10:28:00,480 --> 10:28:06,640
and persistent disks in compute engine

14790
10:28:03,436 --> 10:28:09,200
machine types are grouped and curated by

14791
10:28:06,639 --> 10:28:11,360
families for different workloads you

14792
10:28:09,199 --> 10:28:13,519
must always choose a machine type when

14793
10:28:11,360 --> 10:28:16,000
you create an instance and you can

14794
10:28:13,519 --> 10:28:18,799
select from a number of pre-defined

14795
10:28:16,000 --> 10:28:21,595
machine types in each machine type

14796
10:28:18,800 --> 10:28:23,680
family if the pre-defined machine types

14797
10:28:21,595 --> 10:28:26,559
don't meet your needs then you can

14798
10:28:23,680 --> 10:28:28,959
create your own custom machine types in

14799
10:28:26,559 --> 10:28:30,959
this lesson i will be going through all

14800
10:28:28,959 --> 10:28:33,680
the different machine types their

14801
10:28:30,959 --> 10:28:36,879
families and their use cases so with

14802
10:28:33,680 --> 10:28:39,519
that being said let's dive in

14803
10:28:36,879 --> 10:28:42,559
now each machine type family displayed

14804
10:28:39,519 --> 10:28:45,595
here includes different machine types

14805
10:28:42,559 --> 10:28:48,159
each family is curated for specific

14806
10:28:45,595 --> 10:28:50,879
workload types the following primary

14807
10:28:48,160 --> 10:28:53,840
machine types are offered on compute

14808
10:28:50,879 --> 10:28:56,799
engine which is general purpose compute

14809
10:28:53,839 --> 10:28:58,479
optimized and memory optimized and so i

14810
10:28:56,800 --> 10:29:01,360
wanted to go through each one of these

14811
10:28:58,480 --> 10:29:03,520
families in a little bit of detail now

14812
10:29:01,360 --> 10:29:06,080
before diving right into it

14813
10:29:03,519 --> 10:29:09,039
defining what type of machine type you

14814
10:29:06,080 --> 10:29:11,680
are running can be overwhelming for some

14815
10:29:09,040 --> 10:29:14,239
but can be broken down to be understood

14816
10:29:11,680 --> 10:29:17,756
a bit better they are broken down into

14817
10:29:14,239 --> 10:29:20,479
three parts and separated by hyphens the

14818
10:29:17,756 --> 10:29:23,360
first part in this example shown here

14819
10:29:20,480 --> 10:29:26,319
is the series so for this example the

14820
10:29:23,360 --> 10:29:28,959
series is e2 and the number after the

14821
10:29:26,319 --> 10:29:31,680
letter is the generation type in this

14822
10:29:28,959 --> 10:29:33,915
case it would be the second generation

14823
10:29:31,680 --> 10:29:36,480
now the series come in many different

14824
10:29:33,915 --> 10:29:39,119
varieties and each are designed for

14825
10:29:36,480 --> 10:29:41,436
specific workloads now moving on to the

14826
10:29:39,120 --> 10:29:44,160
middle part of the machine type this is

14827
10:29:41,436 --> 10:29:46,639
the actual type and types as well can

14828
10:29:44,160 --> 10:29:48,720
come in a slew of different flavors and

14829
10:29:46,639 --> 10:29:51,436
is usually coupled with a specific

14830
10:29:48,720 --> 10:29:53,680
series so in this example the type here

14831
10:29:51,436 --> 10:29:55,840
is standard and so moving on to the

14832
10:29:53,680 --> 10:29:57,915
third part of the machine type this is

14833
10:29:55,839 --> 10:30:00,719
the amount of vcp use

14834
10:29:57,915 --> 10:30:03,435
in the machine type and so with vcpus

14835
10:30:00,720 --> 10:30:08,319
they can be offered anywhere from one

14836
10:30:03,436 --> 10:30:11,120
vcpu up to 416 vcpus and so for the

14837
10:30:08,319 --> 10:30:15,040
example shown here this machine type has

14838
10:30:11,120 --> 10:30:16,400
32 vcpus and so there is one more aspect

14839
10:30:15,040 --> 10:30:18,559
of a machine type

14840
10:30:16,400 --> 10:30:21,436
which is the gpus

14841
10:30:18,559 --> 10:30:24,799
but please note that gpus are only

14842
10:30:21,436 --> 10:30:27,275
available for the n1 series and so

14843
10:30:24,800 --> 10:30:28,720
combining the series the type and the

14844
10:30:27,275 --> 10:30:31,040
vcpu

14845
10:30:28,720 --> 10:30:32,959
you will get your machine type and so

14846
10:30:31,040 --> 10:30:35,680
now that we've broken down the machine

14847
10:30:32,959 --> 10:30:38,400
types in order to properly define them

14848
10:30:35,680 --> 10:30:40,400
i wanted to get into the predefined

14849
10:30:38,400 --> 10:30:42,319
machine type families

14850
10:30:40,400 --> 10:30:44,959
specifically starting off with the

14851
10:30:42,319 --> 10:30:46,959
general purpose predefined machine type

14852
10:30:44,959 --> 10:30:50,319
and all the general purpose machine

14853
10:30:46,959 --> 10:30:53,120
types are available in the standard type

14854
10:30:50,319 --> 10:30:55,595
the high memory type and the high cpu

14855
10:30:53,120 --> 10:30:58,480
type so the standard type

14856
10:30:55,595 --> 10:31:00,720
is the balance of cpu and memory and

14857
10:30:58,480 --> 10:31:03,520
this is the most common general purpose

14858
10:31:00,720 --> 10:31:06,239
machine type general purpose also comes

14859
10:31:03,519 --> 10:31:10,079
in high memory and this is a high memory

14860
10:31:06,239 --> 10:31:11,595
to cpu ratio so very high memory a lower

14861
10:31:10,080 --> 10:31:14,480
cpu

14862
10:31:11,595 --> 10:31:18,079
and lastly we have the high cpu machine

14863
10:31:14,480 --> 10:31:20,480
type and this is a high cpu to memory

14864
10:31:18,080 --> 10:31:23,360
ratio so this would be the opposite of

14865
10:31:20,480 --> 10:31:26,160
the high memory so very high cpu to

14866
10:31:23,360 --> 10:31:28,879
lower memory so now digging into the

14867
10:31:26,160 --> 10:31:32,080
general purpose machine family i wanted

14868
10:31:28,879 --> 10:31:35,040
to start off with the e2 series and this

14869
10:31:32,080 --> 10:31:37,520
is designed for day-to-day computing at

14870
10:31:35,040 --> 10:31:39,436
a low cost so if you're looking to do

14871
10:31:37,519 --> 10:31:41,199
things like web serving

14872
10:31:39,436 --> 10:31:43,275
application serving

14873
10:31:41,199 --> 10:31:46,959
back office applications

14874
10:31:43,275 --> 10:31:49,519
small to medium databases microservices

14875
10:31:46,959 --> 10:31:52,400
virtual desktops or even development

14876
10:31:49,519 --> 10:31:54,799
environments the e2 series would serve

14877
10:31:52,400 --> 10:31:57,200
the purpose perfectly

14878
10:31:54,800 --> 10:31:59,756
now the e2 machine types are cost

14879
10:31:57,199 --> 10:32:04,399
optimized machine types that offer

14880
10:31:59,756 --> 10:32:08,400
sizing between 2 to 32 vcpus and half a

14881
10:32:04,400 --> 10:32:10,480
gigabyte to 128 gigabytes of memory so

14882
10:32:08,400 --> 10:32:13,916
small to medium workloads that don't

14883
10:32:10,480 --> 10:32:17,520
require as many vcpus and applications

14884
10:32:13,915 --> 10:32:21,040
that don't require local ssds or gpus

14885
10:32:17,519 --> 10:32:23,915
are an ideal fit for e2 machines e2

14886
10:32:21,040 --> 10:32:26,720
machine types do not offer sustained use

14887
10:32:23,915 --> 10:32:28,159
discounts however they do provide

14888
10:32:26,720 --> 10:32:31,436
consistently

14889
10:32:28,160 --> 10:32:33,916
low on-demand and committed use pricing

14890
10:32:31,436 --> 10:32:36,639
in other words they offer the lowest

14891
10:32:33,915 --> 10:32:39,915
on-demand pricing across the general

14892
10:32:36,639 --> 10:32:43,040
purpose machine types as well the e2

14893
10:32:39,915 --> 10:32:46,239
series machines are available in both

14894
10:32:43,040 --> 10:32:48,800
pre-defined and custom machine types

14895
10:32:46,239 --> 10:32:51,839
moving on i wanted to touch on all the

14896
10:32:48,800 --> 10:32:53,916
machine types available in the n-series

14897
10:32:51,839 --> 10:32:56,799
and these are a balanced machine type

14898
10:32:53,915 --> 10:32:59,680
with price and performance across a wide

14899
10:32:56,800 --> 10:33:02,480
range of vm flavors and these machines

14900
10:32:59,680 --> 10:33:05,595
are designed for web servers application

14901
10:33:02,480 --> 10:33:08,880
servers back office applications medium

14902
10:33:05,595 --> 10:33:11,680
to large databases as well as caching

14903
10:33:08,879 --> 10:33:15,275
and media streaming and they are offered

14904
10:33:11,680 --> 10:33:16,559
in the standard high memory and high cpu

14905
10:33:15,275 --> 10:33:19,275
types

14906
10:33:16,559 --> 10:33:22,479
now the n1 machine types are compute

14907
10:33:19,275 --> 10:33:25,040
engines first generation general purpose

14908
10:33:22,480 --> 10:33:30,960
machine types now this machine type

14909
10:33:25,040 --> 10:33:32,959
offers up to 96 vcpus and 624 gigabytes

14910
10:33:30,959 --> 10:33:35,756
of memory and again as i mentioned

14911
10:33:32,959 --> 10:33:39,756
earlier this is the only machine type

14912
10:33:35,756 --> 10:33:42,959
that offers both gpu support and tpu

14913
10:33:39,756 --> 10:33:45,595
support the n1 type is available as both

14914
10:33:42,959 --> 10:33:48,959
pre-defined machine types and custom

14915
10:33:45,595 --> 10:33:52,079
machine types and the n1 series offers a

14916
10:33:48,959 --> 10:33:54,559
larger sustained use discount than n2

14917
10:33:52,080 --> 10:33:57,360
machine types speaking of which

14918
10:33:54,559 --> 10:34:00,239
the n2 machine types are the second

14919
10:33:57,360 --> 10:34:03,756
generation general purpose machine types

14920
10:34:00,239 --> 10:34:07,436
and these offer flexible sizing between

14921
10:34:03,756 --> 10:34:11,040
two 280 vcpus and half a gigabyte of

14922
10:34:07,436 --> 10:34:13,436
memory to 640 gigabytes of memory and

14923
10:34:11,040 --> 10:34:16,080
these machine types also offer an

14924
10:34:13,436 --> 10:34:18,880
overall performance improvement over the

14925
10:34:16,080 --> 10:34:21,680
n1 machine types workloads that can take

14926
10:34:18,879 --> 10:34:23,119
advantage of the higher clock frequency

14927
10:34:21,680 --> 10:34:25,915
of the cpu

14928
10:34:23,120 --> 10:34:28,240
are a good choice for n2 machine types

14929
10:34:25,915 --> 10:34:30,879
and these workloads can get higher per

14930
10:34:28,239 --> 10:34:33,199
thread performance while benefiting from

14931
10:34:30,879 --> 10:34:35,839
all the flexibility that a general

14932
10:34:33,199 --> 10:34:39,119
purpose machine type offers and two

14933
10:34:35,839 --> 10:34:41,595
machine types also offer the extended

14934
10:34:39,120 --> 10:34:44,560
memory feature and this helps control

14935
10:34:41,595 --> 10:34:46,799
per cpu software licensing costs now

14936
10:34:44,559 --> 10:34:50,559
getting into the last n series machine

14937
10:34:46,800 --> 10:34:53,720
type the n2d machine type is the largest

14938
10:34:50,559 --> 10:34:56,839
general purpose machine type with up to

14939
10:34:53,720 --> 10:34:59,840
224 vcpus and

14940
10:34:56,839 --> 10:35:02,239
896 gigabytes of memory this machine

14941
10:34:59,839 --> 10:35:04,639
type is available in predefined and

14942
10:35:02,239 --> 10:35:07,360
custom machine types and this machine

14943
10:35:04,639 --> 10:35:09,915
type as well has the extended memory

14944
10:35:07,360 --> 10:35:12,239
feature which i discussed earlier that

14945
10:35:09,915 --> 10:35:15,360
helps you avoid per cpu software

14946
10:35:12,239 --> 10:35:17,915
licensing the n2d machine type supports

14947
10:35:15,360 --> 10:35:20,559
the committed use and sustain use

14948
10:35:17,915 --> 10:35:23,040
discounts now moving on from the general

14949
10:35:20,559 --> 10:35:25,519
purpose machine type family i wanted to

14950
10:35:23,040 --> 10:35:27,595
move into the compute optimize machine

14951
10:35:25,519 --> 10:35:29,839
family now this series

14952
10:35:27,595 --> 10:35:32,639
offers ultra high performance for

14953
10:35:29,839 --> 10:35:34,319
compute intensive workloads such as high

14954
10:35:32,639 --> 10:35:36,639
performance computing

14955
10:35:34,319 --> 10:35:39,680
electronic design automation

14956
10:35:36,639 --> 10:35:42,000
gaming and single threaded applications

14957
10:35:39,680 --> 10:35:44,400
so anything that is designed for compute

14958
10:35:42,000 --> 10:35:46,639
intensive workloads this will definitely

14959
10:35:44,400 --> 10:35:48,800
be your best choice

14960
10:35:46,639 --> 10:35:51,756
now compute engine optimized machine

14961
10:35:48,800 --> 10:35:54,240
types are ideal for as i said earlier

14962
10:35:51,756 --> 10:35:56,480
compute intensive workloads and these

14963
10:35:54,239 --> 10:35:58,479
machine types offer the highest

14964
10:35:56,480 --> 10:36:00,800
performance per core

14965
10:35:58,480 --> 10:36:03,916
on compute engine compute optimized

14966
10:36:00,800 --> 10:36:06,080
types are only available as predefined

14967
10:36:03,915 --> 10:36:09,199
machine types and so they are not

14968
10:36:06,080 --> 10:36:12,319
available for any custom machine types

14969
10:36:09,199 --> 10:36:17,039
the c2 machine types offer a maximum of

14970
10:36:12,319 --> 10:36:19,595
60 vcpus and a maximum of 240 gigabytes

14971
10:36:17,040 --> 10:36:21,915
of memory now although the c2 machine

14972
10:36:19,595 --> 10:36:25,040
type works great for compute intensive

14973
10:36:21,915 --> 10:36:26,799
workloads it does come with some caveats

14974
10:36:25,040 --> 10:36:29,595
and so you cannot use regional

14975
10:36:26,800 --> 10:36:31,680
persistent disks with compute optimized

14976
10:36:29,595 --> 10:36:34,319
machine types and i will be getting into

14977
10:36:31,680 --> 10:36:36,959
the details of persistent disks in a

14978
10:36:34,319 --> 10:36:40,400
later lesson and they are only available

14979
10:36:36,959 --> 10:36:43,120
in select zones and regions on select

14980
10:36:40,400 --> 10:36:45,840
cpu platforms and so now moving into the

14981
10:36:43,120 --> 10:36:48,400
last family is the memory optimize

14982
10:36:45,839 --> 10:36:51,435
machine family and this is for ultra

14983
10:36:48,400 --> 10:36:54,560
high memory workloads this family is

14984
10:36:51,436 --> 10:36:57,756
designed for large in memory databases

14985
10:36:54,559 --> 10:36:58,959
like sap hana as well as in memory

14986
10:36:57,756 --> 10:37:01,756
analytics

14987
10:36:58,959 --> 10:37:03,120
now the m series comes in two separate

14988
10:37:01,756 --> 10:37:07,880
generations

14989
10:37:03,120 --> 10:37:13,240
m1 and m2 the m1 offering a maximum of

14990
10:37:07,879 --> 10:37:17,040
160 vcpus and a maximum memory of

14991
10:37:13,239 --> 10:37:21,680
3844 gigabytes whereas the m2 offering

14992
10:37:17,040 --> 10:37:24,520
again a maximum of 160 vcpus but

14993
10:37:21,680 --> 10:37:28,400
offering a whopping 11

14994
10:37:24,519 --> 10:37:30,719
776 gigabytes of maximum memory and as i

14995
10:37:28,400 --> 10:37:34,000
said before these machine types they're

14996
10:37:30,720 --> 10:37:36,400
ideal for tasks that require intensive

14997
10:37:34,000 --> 10:37:39,199
use of memory so they are suited for

14998
10:37:36,400 --> 10:37:42,160
in-memory databases and in memory

14999
10:37:39,199 --> 10:37:45,119
analytics data warehousing workloads

15000
10:37:42,160 --> 10:37:47,916
genomics analysis and sql analysis

15001
10:37:45,120 --> 10:37:50,800
services memory optimized machine types

15002
10:37:47,915 --> 10:37:53,119
are only available as predefined machine

15003
10:37:50,800 --> 10:37:55,840
types and the caveats here is that you

15004
10:37:53,120 --> 10:37:58,480
cannot use regional persistent disks

15005
10:37:55,839 --> 10:38:01,275
with memory optimized machine types as

15006
10:37:58,480 --> 10:38:03,520
well they're only available in specific

15007
10:38:01,275 --> 10:38:04,559
zones now i wanted to take a moment to

15008
10:38:03,519 --> 10:38:07,119
go back

15009
10:38:04,559 --> 10:38:09,275
to the general purpose machine type so

15010
10:38:07,120 --> 10:38:11,916
that i can dig into the shared cord

15011
10:38:09,275 --> 10:38:15,436
machine type and this is spread amongst

15012
10:38:11,915 --> 10:38:17,595
the e2 and n1 series and these shared

15013
10:38:15,436 --> 10:38:19,916
core machine types are used for

15014
10:38:17,595 --> 10:38:22,479
burstable workloads are very cost

15015
10:38:19,915 --> 10:38:25,119
effective as well they're great for

15016
10:38:22,480 --> 10:38:27,916
non-resource intensive applications

15017
10:38:25,120 --> 10:38:30,720
shared core machine types use context

15018
10:38:27,915 --> 10:38:33,755
switching to share a physical core

15019
10:38:30,720 --> 10:38:35,756
between vcpus for the purpose of

15020
10:38:33,756 --> 10:38:38,800
multitasking different shared core

15021
10:38:35,756 --> 10:38:42,000
machine types sustain different amounts

15022
10:38:38,800 --> 10:38:44,960
of time on a physical core which allows

15023
10:38:42,000 --> 10:38:48,000
google cloud to cut the price in general

15024
10:38:44,959 --> 10:38:50,400
share core instances can be more cost

15025
10:38:48,000 --> 10:38:53,680
effective for running small

15026
10:38:50,400 --> 10:38:57,520
non-resource intensive applications than

15027
10:38:53,680 --> 10:39:00,639
standard high memory or high cpu machine

15028
10:38:57,519 --> 10:39:03,275
types now when it comes to cpu bursting

15029
10:39:00,639 --> 10:39:05,756
these shared core machine types offer

15030
10:39:03,275 --> 10:39:09,360
bursting capabilities that allow

15031
10:39:05,756 --> 10:39:11,680
instances to use additional physical cpu

15032
10:39:09,360 --> 10:39:14,239
for short periods of time bursting

15033
10:39:11,680 --> 10:39:16,959
happens automatically when your instance

15034
10:39:14,239 --> 10:39:20,000
requires more physical cpu than

15035
10:39:16,959 --> 10:39:22,479
originally allocated during these spikes

15036
10:39:20,000 --> 10:39:26,000
your instance will take advantage of

15037
10:39:22,480 --> 10:39:28,960
available physical cpu in bursts and the

15038
10:39:26,000 --> 10:39:32,400
e2 shared core machine type is offered

15039
10:39:28,959 --> 10:39:35,839
in micro small and medium while the n1

15040
10:39:32,400 --> 10:39:38,800
series is offered in the f1 micro and

15041
10:39:35,839 --> 10:39:42,399
the g1 small and both of these series

15042
10:39:38,800 --> 10:39:45,276
have a maximum of two vcpus with a

15043
10:39:42,400 --> 10:39:47,680
maximum of four gigabytes of memory now

15044
10:39:45,275 --> 10:39:50,079
i wanted to take a moment to touch on

15045
10:39:47,680 --> 10:39:52,319
custom machine types and these are

15046
10:39:50,080 --> 10:39:54,800
available for any general purpose

15047
10:39:52,319 --> 10:39:57,680
machine and so this is customer defined

15048
10:39:54,800 --> 10:39:59,436
cpu and memory designed for custom

15049
10:39:57,680 --> 10:40:01,595
workloads

15050
10:39:59,436 --> 10:40:04,560
now if none of the general purpose

15051
10:40:01,595 --> 10:40:05,519
predefined machine types cater to your

15052
10:40:04,559 --> 10:40:07,680
needs

15053
10:40:05,519 --> 10:40:10,399
you can create a custom machine type

15054
10:40:07,680 --> 10:40:12,800
with a specific number of vcpus and

15055
10:40:10,400 --> 10:40:15,840
amount of memory that you need for your

15056
10:40:12,800 --> 10:40:18,560
instance these machine types are ideal

15057
10:40:15,839 --> 10:40:21,199
for workloads that are not a good fit

15058
10:40:18,559 --> 10:40:23,199
for the pre-defined machine types that

15059
10:40:21,199 --> 10:40:26,399
are available they're also great for

15060
10:40:23,199 --> 10:40:28,639
when you need more memory or more cpu

15061
10:40:26,400 --> 10:40:31,040
but the predefined machine types don't

15062
10:40:28,639 --> 10:40:33,436
quite fit exactly what you need for your

15063
10:40:31,040 --> 10:40:35,840
workload just as a note it costs

15064
10:40:33,436 --> 10:40:38,239
slightly more to use a custom machine

15065
10:40:35,839 --> 10:40:40,159
type than a pre-defined machine type and

15066
10:40:38,239 --> 10:40:43,199
there are limitations in the amount of

15067
10:40:40,160 --> 10:40:45,680
memory and vcpu you can select and as i

15068
10:40:43,199 --> 10:40:49,360
stated earlier when creating a custom

15069
10:40:45,680 --> 10:40:50,480
machine type you can choose from the e2

15070
10:40:49,360 --> 10:40:54,080
n2

15071
10:40:50,480 --> 10:40:56,560
and 2d and n1 machine types and so the

15072
10:40:54,080 --> 10:40:58,880
last part i wanted to touch on are the

15073
10:40:56,559 --> 10:41:01,115
gpus that are available and these are

15074
10:40:58,879 --> 10:41:03,915
designed for the graphic intensive

15075
10:41:01,116 --> 10:41:07,436
workloads and again are only available

15076
10:41:03,915 --> 10:41:10,000
for the n1 machine type and gpus come in

15077
10:41:07,436 --> 10:41:13,680
five different flavors from nvidia

15078
10:41:10,000 --> 10:41:18,319
showing here as the tesla k80 the tesla

15079
10:41:13,680 --> 10:41:21,040
p4 the tesla t4 the tesla v100 and the

15080
10:41:18,319 --> 10:41:23,199
tesla p100 and so these are all the

15081
10:41:21,040 --> 10:41:25,915
families and machine types that are

15082
10:41:23,199 --> 10:41:27,839
available for you in google cloud and

15083
10:41:25,915 --> 10:41:30,319
will allow you to be a little bit more

15084
10:41:27,839 --> 10:41:32,879
flexible with the type of workload that

15085
10:41:30,319 --> 10:41:35,436
you need them for and so for the exam

15086
10:41:32,879 --> 10:41:37,519
you won't have to memorize each machine

15087
10:41:35,436 --> 10:41:40,560
type but you will need to know an

15088
10:41:37,519 --> 10:41:42,479
overview of what each machine type does

15089
10:41:40,559 --> 10:41:44,639
now i know there's been a lot of theory

15090
10:41:42,480 --> 10:41:45,916
presented here in this lesson but i hope

15091
10:41:44,639 --> 10:41:48,319
this is giving you a better

15092
10:41:45,915 --> 10:41:50,559
understanding of all the available

15093
10:41:48,319 --> 10:41:52,480
pre-defined machine types in google

15094
10:41:50,559 --> 10:41:54,559
cloud and so that's pretty much all i

15095
10:41:52,480 --> 10:41:56,880
wanted to cover in this lesson on

15096
10:41:54,559 --> 10:41:58,959
compute engine machine types so you can

15097
10:41:56,879 --> 10:42:00,709
now mark this lesson as complete and

15098
10:41:58,959 --> 10:42:04,639
let's move on to the next one

15099
10:42:00,709 --> 10:42:07,360
[Music]

15100
10:42:04,639 --> 10:42:10,639
welcome back in this lesson i'm going to

15101
10:42:07,360 --> 10:42:12,959
be reviewing managing your instances now

15102
10:42:10,639 --> 10:42:14,639
how you manage your instances is a big

15103
10:42:12,959 --> 10:42:17,275
topic in the exam

15104
10:42:14,639 --> 10:42:19,680
as well it's very useful to know for

15105
10:42:17,275 --> 10:42:22,079
your work as a cloud engineer in the

15106
10:42:19,680 --> 10:42:24,080
environments you are responsible for

15107
10:42:22,080 --> 10:42:26,959
knowing both the features that are

15108
10:42:24,080 --> 10:42:29,596
available as well as the best practices

15109
10:42:26,959 --> 10:42:32,400
will allow you to make better decisions

15110
10:42:29,595 --> 10:42:34,559
with regards to your instances and allow

15111
10:42:32,400 --> 10:42:37,200
you to keep your environment healthy

15112
10:42:34,559 --> 10:42:39,915
this lesson will dive into the many

15113
10:42:37,199 --> 10:42:42,559
features that are available in order to

15114
10:42:39,915 --> 10:42:45,680
better manage your instances using the

15115
10:42:42,559 --> 10:42:48,799
specific features within google cloud so

15116
10:42:45,680 --> 10:42:50,879
with that being said let's dive in

15117
10:42:48,800 --> 10:42:53,520
now i wanted to start off this lesson

15118
10:42:50,879 --> 10:42:56,719
discussing the life cycle of an instance

15119
10:42:53,519 --> 10:42:59,595
within google cloud every instance has a

15120
10:42:56,720 --> 10:43:02,480
predefined life cycle from its starting

15121
10:42:59,595 --> 10:43:05,040
provisioning state to its deletion an

15122
10:43:02,480 --> 10:43:07,916
instance can transition through many

15123
10:43:05,040 --> 10:43:09,756
instant states as part of its life cycle

15124
10:43:07,915 --> 10:43:12,719
when you first create an instance

15125
10:43:09,756 --> 10:43:15,520
compute engine provisions resources to

15126
10:43:12,720 --> 10:43:18,080
start your instance next the instance

15127
10:43:15,519 --> 10:43:20,719
moves into staging where it prepares the

15128
10:43:18,080 --> 10:43:22,800
first boot and then it finally boots up

15129
10:43:20,720 --> 10:43:25,116
and is considered running during its

15130
10:43:22,800 --> 10:43:28,240
lifetime a running instance can be

15131
10:43:25,116 --> 10:43:31,200
repeatedly stopped and restarted or

15132
10:43:28,239 --> 10:43:33,275
suspended and resumed so now i wanted to

15133
10:43:31,199 --> 10:43:36,239
take a few minutes to go through the

15134
10:43:33,275 --> 10:43:38,959
instance life cycle in a bit of detail

15135
10:43:36,239 --> 10:43:41,595
starting with the provisioning state

15136
10:43:38,959 --> 10:43:44,080
now this is where resources are being

15137
10:43:41,595 --> 10:43:46,559
allocated for the instance the instance

15138
10:43:44,080 --> 10:43:49,520
is not yet running and the instance is

15139
10:43:46,559 --> 10:43:52,720
being allocated its requested amount of

15140
10:43:49,519 --> 10:43:54,719
cpu and memory along with its root disk

15141
10:43:52,720 --> 10:43:57,116
any additional disks that are attached

15142
10:43:54,720 --> 10:43:59,275
to it and as well some additional

15143
10:43:57,116 --> 10:44:01,520
feature sets that are assigned to this

15144
10:43:59,275 --> 10:44:03,436
instance and when it comes to the cost

15145
10:44:01,519 --> 10:44:05,755
while in the provisioning state there

15146
10:44:03,436 --> 10:44:08,080
are no costs that are being incurred

15147
10:44:05,756 --> 10:44:10,480
moving right along to the staging state

15148
10:44:08,080 --> 10:44:12,480
after finishing the provisioning state

15149
10:44:10,480 --> 10:44:14,240
the life cycle continues with the

15150
10:44:12,480 --> 10:44:16,480
staging state and this is where

15151
10:44:14,239 --> 10:44:18,720
resources have been acquired and the

15152
10:44:16,480 --> 10:44:22,400
instance is being prepared for first

15153
10:44:18,720 --> 10:44:25,275
boot both internal and external ips are

15154
10:44:22,400 --> 10:44:27,840
allocated and can be either static or

15155
10:44:25,275 --> 10:44:30,400
ephemeral in the system image that was

15156
10:44:27,839 --> 10:44:32,959
originally chosen for this instance

15157
10:44:30,400 --> 10:44:35,840
is used to boot up the instance and this

15158
10:44:32,959 --> 10:44:38,959
can be either a public image or a custom

15159
10:44:35,839 --> 10:44:41,755
image costs in the state are still not

15160
10:44:38,959 --> 10:44:43,595
incurred as the instance is still in the

15161
10:44:41,756 --> 10:44:46,639
pre-boot state

15162
10:44:43,595 --> 10:44:49,115
now once the instance has left staging

15163
10:44:46,639 --> 10:44:51,680
it will move on to the running state and

15164
10:44:49,116 --> 10:44:54,319
this is where the instance is booting up

15165
10:44:51,680 --> 10:44:57,436
or running and should allow you to log

15166
10:44:54,319 --> 10:45:00,959
into the instance either using ssh or

15167
10:44:57,436 --> 10:45:03,436
rdp within a short waiting period due to

15168
10:45:00,959 --> 10:45:05,839
any startup scripts or any boot

15169
10:45:03,436 --> 10:45:08,319
maintenance tasks for the operating

15170
10:45:05,839 --> 10:45:10,639
system now during the running state you

15171
10:45:08,319 --> 10:45:13,116
can reset your instance and this is

15172
10:45:10,639 --> 10:45:16,080
where you would wipe the memory contents

15173
10:45:13,116 --> 10:45:18,880
of the vm instance and reset the virtual

15174
10:45:16,080 --> 10:45:20,000
machine to its initial state resetting

15175
10:45:18,879 --> 10:45:23,435
an instance

15176
10:45:20,000 --> 10:45:25,436
causes an immediate hard reset of the vm

15177
10:45:23,436 --> 10:45:27,840
and therefore the vm does not do a

15178
10:45:25,436 --> 10:45:29,916
graceful shutdown for the guest

15179
10:45:27,839 --> 10:45:33,275
operating system however

15180
10:45:29,915 --> 10:45:35,115
the vm retains all persistent disk data

15181
10:45:33,275 --> 10:45:38,000
and none of the instance properties

15182
10:45:35,116 --> 10:45:40,720
change the instance remains in running

15183
10:45:38,000 --> 10:45:43,595
state through the reset now as well in

15184
10:45:40,720 --> 10:45:46,000
the running state a repair can happen

15185
10:45:43,595 --> 10:45:48,639
due to the instance encountering an

15186
10:45:46,000 --> 10:45:51,199
internal error or the underlying machine

15187
10:45:48,639 --> 10:45:54,239
is unavailable due to maintenance during

15188
10:45:51,199 --> 10:45:56,639
this time the instance is unusable and

15189
10:45:54,239 --> 10:45:59,275
if the repair is successful the instance

15190
10:45:56,639 --> 10:46:00,879
returns back to the running state paying

15191
10:45:59,275 --> 10:46:02,959
attention to costs

15192
10:46:00,879 --> 10:46:05,199
this state is where the instance starts

15193
10:46:02,959 --> 10:46:07,756
to occur them and is related to the

15194
10:46:05,199 --> 10:46:11,435
resources assigned to the instance like

15195
10:46:07,756 --> 10:46:13,756
the cpu and memory any static ips and

15196
10:46:11,436 --> 10:46:15,916
any disks that are attached to the

15197
10:46:13,756 --> 10:46:18,800
instance and i will be going into a bit

15198
10:46:15,915 --> 10:46:20,000
of detail in just a bit with regards to

15199
10:46:18,800 --> 10:46:22,400
this state

15200
10:46:20,000 --> 10:46:25,680
and finally we end the life cycle with

15201
10:46:22,400 --> 10:46:28,000
the stopping suspended and terminated

15202
10:46:25,680 --> 10:46:30,559
states now when you are suspending an

15203
10:46:28,000 --> 10:46:33,275
instance it is like closing the lid of

15204
10:46:30,559 --> 10:46:35,360
your laptop suspending the instance will

15205
10:46:33,275 --> 10:46:37,915
preserve the guest operating system

15206
10:46:35,360 --> 10:46:41,116
memory and application state of the

15207
10:46:37,915 --> 10:46:43,115
instance otherwise it'll be discarded

15208
10:46:41,116 --> 10:46:46,000
and from this state you can choose

15209
10:46:43,116 --> 10:46:48,800
either to resume or to delete it when it

15210
10:46:46,000 --> 10:46:51,595
comes to stopping either a user has made

15211
10:46:48,800 --> 10:46:54,080
a request to stop the instance or there

15212
10:46:51,595 --> 10:46:56,479
was a failure and this is a temporary

15213
10:46:54,080 --> 10:46:58,800
status and the instance will move to

15214
10:46:56,480 --> 10:47:01,436
terminated touching on costs for just a

15215
10:46:58,800 --> 10:47:04,240
second when suspending or stopping an

15216
10:47:01,436 --> 10:47:07,040
instance you pay for resources that are

15217
10:47:04,239 --> 10:47:10,000
still attached to the vm instance

15218
10:47:07,040 --> 10:47:12,239
such as static ips and persistent disk

15219
10:47:10,000 --> 10:47:15,275
data you do not pay the cost of a

15220
10:47:12,239 --> 10:47:17,680
running vm instance ephemeral external

15221
10:47:15,275 --> 10:47:20,159
ip addresses are released from the

15222
10:47:17,680 --> 10:47:22,400
instance and will be assigned a new one

15223
10:47:20,160 --> 10:47:24,560
when the instance is started now when it

15224
10:47:22,400 --> 10:47:27,200
comes to stopping suspending or

15225
10:47:24,559 --> 10:47:29,435
resetting an instance you can stop or

15226
10:47:27,199 --> 10:47:31,199
suspend an instance if you no longer

15227
10:47:29,436 --> 10:47:34,080
need it but want to keep the instance

15228
10:47:31,199 --> 10:47:36,000
around for future use compute engine

15229
10:47:34,080 --> 10:47:39,200
waits for the guest to finish shutting

15230
10:47:36,000 --> 10:47:41,680
down and then transitions the instance

15231
10:47:39,199 --> 10:47:44,319
to the terminated state so touching on

15232
10:47:41,680 --> 10:47:47,040
the terminated state this is where a

15233
10:47:44,319 --> 10:47:49,199
user either shuts down the instance or

15234
10:47:47,040 --> 10:47:51,680
the instance encounters a failure you

15235
10:47:49,199 --> 10:47:54,479
can choose to restart the instance or

15236
10:47:51,680 --> 10:47:57,436
delete it as well as holding some reset

15237
10:47:54,480 --> 10:48:00,000
options within the availability policy

15238
10:47:57,436 --> 10:48:01,680
in this state you still pay for static

15239
10:48:00,000 --> 10:48:03,915
ips and disks

15240
10:48:01,680 --> 10:48:06,720
but like the suspending or stopping

15241
10:48:03,915 --> 10:48:09,040
state you do not pay for the cpu and

15242
10:48:06,720 --> 10:48:10,400
memory resources allocated to the

15243
10:48:09,040 --> 10:48:13,275
instance

15244
10:48:10,400 --> 10:48:15,596
and so this covers a high level overview

15245
10:48:13,275 --> 10:48:18,400
of the instance lifecycle in google

15246
10:48:15,595 --> 10:48:20,559
cloud and all of the states that make up

15247
10:48:18,400 --> 10:48:23,200
this lifecycle now to get into some

15248
10:48:20,559 --> 10:48:25,595
detail with regards to some feature sets

15249
10:48:23,199 --> 10:48:28,239
for compute engine i wanted to revisit

15250
10:48:25,595 --> 10:48:30,639
the states where those features apply

15251
10:48:28,239 --> 10:48:34,000
now when creating your instance you have

15252
10:48:30,639 --> 10:48:36,639
the option of using shielded vms for

15253
10:48:34,000 --> 10:48:39,360
added security and when using them the

15254
10:48:36,639 --> 10:48:41,839
instance would instantiate them as the

15255
10:48:39,360 --> 10:48:43,040
instance boots and enters into the

15256
10:48:41,839 --> 10:48:46,079
running state

15257
10:48:43,040 --> 10:48:49,436
so what exactly is a shielded vm

15258
10:48:46,080 --> 10:48:52,080
well shielded vms offer verifiable

15259
10:48:49,436 --> 10:48:54,480
integrity of your compute engine vm

15260
10:48:52,080 --> 10:48:57,116
instances so you can be sure that your

15261
10:48:54,480 --> 10:49:00,640
instances haven't been compromised by

15262
10:48:57,116 --> 10:49:02,880
boot or kernel level malware or rootkits

15263
10:49:00,639 --> 10:49:03,915
and this is achieved through a four-step

15264
10:49:02,879 --> 10:49:06,719
process

15265
10:49:03,915 --> 10:49:09,435
which is covered by secure boot virtual

15266
10:49:06,720 --> 10:49:12,319
trusted platform module also known as

15267
10:49:09,436 --> 10:49:15,200
vtpm measure boot which is running on

15268
10:49:12,319 --> 10:49:17,680
vtpm and integrity monitoring so i

15269
10:49:15,199 --> 10:49:20,559
wanted to dig into this for just a sec

15270
10:49:17,680 --> 10:49:24,080
to give you a bit more context

15271
10:49:20,559 --> 10:49:26,720
now the boot process for shielded vms

15272
10:49:24,080 --> 10:49:29,596
start with secure boot and this helps

15273
10:49:26,720 --> 10:49:32,239
ensure that the system only runs

15274
10:49:29,595 --> 10:49:34,239
authentic software by verifying the

15275
10:49:32,239 --> 10:49:37,360
digital signature for all boot

15276
10:49:34,239 --> 10:49:40,000
components and stopping the boot process

15277
10:49:37,360 --> 10:49:42,959
if signature verification fails so

15278
10:49:40,000 --> 10:49:45,275
shielded vm instances run firmware

15279
10:49:42,959 --> 10:49:47,519
that's signed and verified using

15280
10:49:45,275 --> 10:49:50,159
google's certificate authority and on

15281
10:49:47,519 --> 10:49:52,399
each and every boot any boot component

15282
10:49:50,160 --> 10:49:55,116
that isn't properly signed or isn't

15283
10:49:52,400 --> 10:49:58,160
signed at all is not allowed to run and

15284
10:49:55,116 --> 10:50:00,480
so the first time you boot a vm instance

15285
10:49:58,160 --> 10:50:03,200
measure boot creates the integrity

15286
10:50:00,480 --> 10:50:05,360
policy baseline from the first set of

15287
10:50:03,199 --> 10:50:07,595
these measurements and then securely

15288
10:50:05,360 --> 10:50:09,520
stores this data each time the vm

15289
10:50:07,595 --> 10:50:11,756
instance boots after that these

15290
10:50:09,519 --> 10:50:14,719
measurements are taken again and stored

15291
10:50:11,756 --> 10:50:16,959
in secure memory until the next reboot

15292
10:50:14,720 --> 10:50:19,436
having these two sets of measurements

15293
10:50:16,959 --> 10:50:22,400
enables integrity monitoring which is

15294
10:50:19,436 --> 10:50:24,480
the next step and allows it to determine

15295
10:50:22,400 --> 10:50:27,520
if there have been changes to a vm

15296
10:50:24,480 --> 10:50:30,080
instance's boot sequence and this policy

15297
10:50:27,519 --> 10:50:33,275
is loaded onto a virtualized trusted

15298
10:50:30,080 --> 10:50:35,520
platform module again known as the vtpm

15299
10:50:33,275 --> 10:50:37,915
for short which is a specialized

15300
10:50:35,519 --> 10:50:40,399
computer chip that you can use to

15301
10:50:37,915 --> 10:50:43,040
protect objects like keys and

15302
10:50:40,400 --> 10:50:45,916
certificates that you use to

15303
10:50:43,040 --> 10:50:49,840
authenticate access to your system with

15304
10:50:45,915 --> 10:50:52,319
shielded vms vtpm enables measured boot

15305
10:50:49,839 --> 10:50:55,275
by performing the measurements needed to

15306
10:50:52,319 --> 10:50:57,436
create a known good boot baseline and

15307
10:50:55,275 --> 10:51:00,319
this is called the integrity policy

15308
10:50:57,436 --> 10:51:02,400
baseline the integrity policy baseline

15309
10:51:00,319 --> 10:51:04,879
is used for comparison

15310
10:51:02,400 --> 10:51:07,200
with measurements from subsequent vm

15311
10:51:04,879 --> 10:51:10,079
boots to determine if anything has

15312
10:51:07,199 --> 10:51:12,239
changed integrity monitoring relies on

15313
10:51:10,080 --> 10:51:14,800
the measurements created by measured

15314
10:51:12,239 --> 10:51:16,799
boot for both the integrity policy

15315
10:51:14,800 --> 10:51:19,596
baseline and the most recent boot

15316
10:51:16,800 --> 10:51:22,000
sequence integrity monitoring compares

15317
10:51:19,595 --> 10:51:24,479
the most recent boot measurements

15318
10:51:22,000 --> 10:51:28,319
to the integrity policy baseline and

15319
10:51:24,480 --> 10:51:30,720
returns a pair of pass or failed results

15320
10:51:28,319 --> 10:51:33,595
depending on whether they match or not

15321
10:51:30,720 --> 10:51:35,916
one for the early boot sequence and one

15322
10:51:33,595 --> 10:51:39,360
for the late boot sequence and so in

15323
10:51:35,915 --> 10:51:42,559
summary this is how shielded vms help

15324
10:51:39,360 --> 10:51:45,436
prevent data exfiltration so touching

15325
10:51:42,559 --> 10:51:48,479
now on the running state when you start

15326
10:51:45,436 --> 10:51:51,520
a vm instance using google provided

15327
10:51:48,480 --> 10:51:54,160
public images a guest environment is

15328
10:51:51,519 --> 10:51:56,959
automatically installed on the vm

15329
10:51:54,160 --> 10:52:00,000
instance a guest environment is a set of

15330
10:51:56,959 --> 10:52:02,720
scripts daemons and binaries that read

15331
10:52:00,000 --> 10:52:06,000
the content of the metadata server to

15332
10:52:02,720 --> 10:52:09,040
make a virtual machine run properly on

15333
10:52:06,000 --> 10:52:11,680
compute engine a metadata server is a

15334
10:52:09,040 --> 10:52:14,800
communication channel for transferring

15335
10:52:11,680 --> 10:52:17,436
information from a client to the guest

15336
10:52:14,800 --> 10:52:19,916
operating system vm instances created

15337
10:52:17,436 --> 10:52:21,756
using google provided public images

15338
10:52:19,915 --> 10:52:24,079
include a guest environment that is

15339
10:52:21,756 --> 10:52:25,200
installed by default creating vm

15340
10:52:24,080 --> 10:52:28,080
instances

15341
10:52:25,199 --> 10:52:30,559
using a custom image will require you to

15342
10:52:28,080 --> 10:52:32,959
manually install the guest environment

15343
10:52:30,559 --> 10:52:36,159
this guest environment is available for

15344
10:52:32,959 --> 10:52:38,000
both linux and windows systems and each

15345
10:52:36,160 --> 10:52:40,480
supported operating system that is

15346
10:52:38,000 --> 10:52:42,879
available on compute engine requires

15347
10:52:40,480 --> 10:52:44,960
specific guest environment packages

15348
10:52:42,879 --> 10:52:47,595
either google or the owner of the

15349
10:52:44,959 --> 10:52:49,519
operating system builds these packages

15350
10:52:47,595 --> 10:52:52,079
now when it comes to the linux guest

15351
10:52:49,519 --> 10:52:54,399
environment it is either built by google

15352
10:52:52,080 --> 10:52:56,160
or the owner of the operating system

15353
10:52:54,400 --> 10:52:59,040
and there are some key components that

15354
10:52:56,160 --> 10:53:00,720
are applicable to all builds which can

15355
10:52:59,040 --> 10:53:02,959
be found in the link that i have

15356
10:53:00,720 --> 10:53:05,756
included in the lesson text the base

15357
10:53:02,959 --> 10:53:08,159
components of a linux guest environment

15358
10:53:05,756 --> 10:53:11,360
is a python package that contains

15359
10:53:08,160 --> 10:53:13,840
scripts daemons and packages for the

15360
10:53:11,360 --> 10:53:16,160
supported linux distributions when it

15361
10:53:13,839 --> 10:53:18,639
comes to windows a similar approach

15362
10:53:16,160 --> 10:53:21,680
applies where a package is available

15363
10:53:18,639 --> 10:53:23,519
with main scripts and binaries as a part

15364
10:53:21,680 --> 10:53:26,080
of this guest environment

15365
10:53:23,519 --> 10:53:28,959
now touching back on the metadata server

15366
10:53:26,080 --> 10:53:31,756
compute engine provides a method for

15367
10:53:28,959 --> 10:53:35,040
storing and retrieving metadata in the

15368
10:53:31,756 --> 10:53:38,239
form of the metadata server this service

15369
10:53:35,040 --> 10:53:41,116
provides a central point to set metadata

15370
10:53:38,239 --> 10:53:43,436
in the form of key value pairs which is

15371
10:53:41,116 --> 10:53:45,840
then provided to virtual machines at

15372
10:53:43,436 --> 10:53:48,319
runtime and you can query this metadata

15373
10:53:45,839 --> 10:53:51,359
server programmatically from within the

15374
10:53:48,319 --> 10:53:53,756
instance and from the compute engine api

15375
10:53:51,360 --> 10:53:56,319
this is great for use with startup and

15376
10:53:53,756 --> 10:53:58,480
shutdown scripts or gaining more insight

15377
10:53:56,319 --> 10:54:00,800
with your instance metadata can be

15378
10:53:58,480 --> 10:54:02,800
assigned to projects as well as

15379
10:54:00,800 --> 10:54:05,596
instances and project metadata

15380
10:54:02,800 --> 10:54:08,319
propagates to all instances within the

15381
10:54:05,595 --> 10:54:10,959
project while instance metadata only

15382
10:54:08,319 --> 10:54:14,080
impacts that instance and you can access

15383
10:54:10,959 --> 10:54:16,239
the metadata using the following url

15384
10:54:14,080 --> 10:54:18,240
with the curl command you see here on

15385
10:54:16,239 --> 10:54:21,040
the screen so if you're looking for the

15386
10:54:18,239 --> 10:54:24,239
metadata for a project you would use the

15387
10:54:21,040 --> 10:54:26,720
first url that ends in project and for

15388
10:54:24,239 --> 10:54:29,360
any instance metadata you can use the

15389
10:54:26,720 --> 10:54:31,756
second url that ends in instance now

15390
10:54:29,360 --> 10:54:33,915
please note that when you make a request

15391
10:54:31,756 --> 10:54:36,639
to get information from the metadata

15392
10:54:33,915 --> 10:54:39,275
server your request and the subsequent

15393
10:54:36,639 --> 10:54:41,519
metadata response never leaves the

15394
10:54:39,275 --> 10:54:44,159
physical host running the virtual

15395
10:54:41,519 --> 10:54:46,079
machine instance now once the instance

15396
10:54:44,160 --> 10:54:48,320
has booted and has gone through the

15397
10:54:46,080 --> 10:54:51,436
startup scripts you will then have the

15398
10:54:48,319 --> 10:54:54,639
ability to login to your instance using

15399
10:54:51,436 --> 10:54:57,116
ssh or rdp now there are some different

15400
10:54:54,639 --> 10:55:00,239
methods that you can use to connect and

15401
10:54:57,116 --> 10:55:02,480
access both your linux instances and

15402
10:55:00,239 --> 10:55:03,680
your windows instances that i will be

15403
10:55:02,480 --> 10:55:06,480
going over

15404
10:55:03,680 --> 10:55:08,480
now when it comes to linux instances

15405
10:55:06,480 --> 10:55:11,040
we've already gone through accessing

15406
10:55:08,480 --> 10:55:13,520
these types of instances in previous

15407
10:55:11,040 --> 10:55:16,160
lessons and demos but just as a

15408
10:55:13,519 --> 10:55:19,915
refresher you would typically connect to

15409
10:55:16,160 --> 10:55:23,276
your vm instance via ssh access on port

15410
10:55:19,915 --> 10:55:25,519
22. please note that you will require a

15411
10:55:23,275 --> 10:55:28,720
firewall rule as we have done in

15412
10:55:25,519 --> 10:55:31,115
previous demos to allow this access and

15413
10:55:28,720 --> 10:55:33,595
you can connect to your linux instances

15414
10:55:31,116 --> 10:55:36,720
through the google cloud console or the

15415
10:55:33,595 --> 10:55:39,519
cloud shell using the cloud sdk now i

15416
10:55:36,720 --> 10:55:42,080
know that the use of ssh keys are the

15417
10:55:39,519 --> 10:55:45,115
defacto when it comes to logging into

15418
10:55:42,080 --> 10:55:48,240
linux instances now in most scenarios on

15419
10:55:45,116 --> 10:55:52,000
google cloud google recommends using os

15420
10:55:48,239 --> 10:55:55,040
login over using ssh keys the os login

15421
10:55:52,000 --> 10:55:58,800
feature lets you use compute engine iam

15422
10:55:55,040 --> 10:56:01,275
roles to manage ssh access to linux

15423
10:55:58,800 --> 10:56:03,680
instances and then if you'd like you can

15424
10:56:01,275 --> 10:56:06,400
add an extra layer of security by

15425
10:56:03,680 --> 10:56:09,360
setting up os login with two-step

15426
10:56:06,400 --> 10:56:11,596
verification and manage access at the

15427
10:56:09,360 --> 10:56:14,639
organization level by setting up

15428
10:56:11,595 --> 10:56:17,595
organizational policies os login

15429
10:56:14,639 --> 10:56:19,915
simplifies ssh access management by

15430
10:56:17,595 --> 10:56:22,720
linking your linux user account to your

15431
10:56:19,915 --> 10:56:25,519
google identity administrators can

15432
10:56:22,720 --> 10:56:28,559
easily manage access to instances

15433
10:56:25,519 --> 10:56:31,275
at either an instance or project level

15434
10:56:28,559 --> 10:56:33,680
by setting iam permissions now if you're

15435
10:56:31,275 --> 10:56:36,959
running your own directory service for

15436
10:56:33,680 --> 10:56:40,319
managing access or are unable to set up

15437
10:56:36,959 --> 10:56:43,680
os login you can manually manage ssh

15438
10:56:40,319 --> 10:56:46,879
keys and local user accounts in metadata

15439
10:56:43,680 --> 10:56:49,915
by manually creating ssh keys and

15440
10:56:46,879 --> 10:56:52,479
editing the public ssh key metadata now

15441
10:56:49,915 --> 10:56:54,239
when it comes to windows instances you

15442
10:56:52,480 --> 10:56:59,436
would typically connect to your vm

15443
10:56:54,239 --> 10:57:02,159
instance via rdp access on port 3389 and

15444
10:56:59,436 --> 10:57:05,116
please note that you will also require a

15445
10:57:02,160 --> 10:57:07,276
firewall rule as shown here to allow

15446
10:57:05,116 --> 10:57:09,916
this access you can connect to your

15447
10:57:07,275 --> 10:57:12,239
windows instances through the rdp

15448
10:57:09,915 --> 10:57:15,040
protocol or through a powershell

15449
10:57:12,239 --> 10:57:18,000
terminal now when logging into windows

15450
10:57:15,040 --> 10:57:19,756
this requires setting a windows password

15451
10:57:18,000 --> 10:57:22,800
and can be done either through the

15452
10:57:19,756 --> 10:57:25,200
console or the gcloud command line tool

15453
10:57:22,800 --> 10:57:28,160
and then after setting your password you

15454
10:57:25,199 --> 10:57:30,959
can then log in from the recommended rdp

15455
10:57:28,160 --> 10:57:33,756
chrome extension or using a third-party

15456
10:57:30,959 --> 10:57:36,479
rdp client and i will provide a link to

15457
10:57:33,756 --> 10:57:39,520
this rdp chrome extension in the lesson

15458
10:57:36,480 --> 10:57:41,680
text now once the instance has booted up

15459
10:57:39,519 --> 10:57:44,239
and your instance is ready to be logged

15460
10:57:41,680 --> 10:57:46,400
into you always have the option of

15461
10:57:44,239 --> 10:57:48,639
modifying your instance and you can do

15462
10:57:46,400 --> 10:57:50,880
it manually by either modifying it on

15463
10:57:48,639 --> 10:57:53,595
the fly or you can take the necessary

15464
10:57:50,879 --> 10:57:55,755
steps to edit your instance like i

15465
10:57:53,595 --> 10:57:57,839
showed you in a previous lesson by

15466
10:57:55,756 --> 10:58:00,319
stopping it editing it and then

15467
10:57:57,839 --> 10:58:02,799
restarting it although when it comes to

15468
10:58:00,319 --> 10:58:05,275
google having to do maintenance on a vm

15469
10:58:02,800 --> 10:58:07,756
or you merely want to move your instance

15470
10:58:05,275 --> 10:58:10,239
to a different zone in the same region

15471
10:58:07,756 --> 10:58:12,080
this has all become possible without

15472
10:58:10,239 --> 10:58:15,519
shutting down your instance

15473
10:58:12,080 --> 10:58:17,916
using a feature called live migration

15474
10:58:15,519 --> 10:58:20,239
now when it comes to live migration

15475
10:58:17,915 --> 10:58:22,719
compute engine migrates your running

15476
10:58:20,239 --> 10:58:25,595
instances to another host

15477
10:58:22,720 --> 10:58:28,160
in the same zone instead of requiring

15478
10:58:25,595 --> 10:58:31,519
your vms to be rebooted this allows

15479
10:58:28,160 --> 10:58:34,320
google to perform maintenance reliably

15480
10:58:31,519 --> 10:58:36,159
without interrupting any of your vms

15481
10:58:34,319 --> 10:58:38,879
when a vm is scheduled to be live

15482
10:58:36,160 --> 10:58:41,520
migrated google provides a notification

15483
10:58:38,879 --> 10:58:44,559
to the guest that a migration is coming

15484
10:58:41,519 --> 10:58:47,115
soon live migration keeps your instances

15485
10:58:44,559 --> 10:58:49,275
running during compute engine hosts that

15486
10:58:47,116 --> 10:58:51,520
are in need of regular infrastructure

15487
10:58:49,275 --> 10:58:54,319
maintenance and upgrades replacement of

15488
10:58:51,519 --> 10:58:56,479
failed hardware and system configuration

15489
10:58:54,319 --> 10:58:59,839
changes when google migrates a running

15490
10:58:56,480 --> 10:59:02,720
vm instance from one host to another

15491
10:58:59,839 --> 10:59:05,679
it moves the complete instance state

15492
10:59:02,720 --> 10:59:08,639
from the source to the destination in a

15493
10:59:05,680 --> 10:59:11,199
way that is transparent to the guest os

15494
10:59:08,639 --> 10:59:13,756
and anyone communicating with it google

15495
10:59:11,199 --> 10:59:16,239
also gives you the option of doing live

15496
10:59:13,756 --> 10:59:18,959
migration manually from one zone to

15497
10:59:16,239 --> 10:59:21,199
another within the same region either

15498
10:59:18,959 --> 10:59:23,595
using the console or running the command

15499
10:59:21,199 --> 10:59:26,399
line you see here gcloud compute

15500
10:59:23,595 --> 10:59:28,479
instances move the name of the vm with

15501
10:59:26,400 --> 10:59:30,720
the zone flag and the zone that it's

15502
10:59:28,480 --> 10:59:33,200
currently in and then the destination

15503
10:59:30,720 --> 10:59:35,680
zone flag with the zone that you wanted

15504
10:59:33,199 --> 10:59:38,799
to go to and just as a note with some

15505
10:59:35,680 --> 10:59:41,275
caveats instances with gpus attached

15506
10:59:38,800 --> 10:59:44,240
cannot be live migrated and you can't

15507
10:59:41,275 --> 10:59:47,680
configure a preemptable instance to live

15508
10:59:44,239 --> 10:59:49,680
migrate and so instance lifecycle is

15509
10:59:47,680 --> 10:59:51,680
full of different options and

15510
10:59:49,680 --> 10:59:54,959
understanding them can help better

15511
10:59:51,680 --> 10:59:57,756
coordinate moving editing and repairing

15512
10:59:54,959 --> 11:00:00,479
vm instances no matter where they may

15513
10:59:57,756 --> 11:00:02,480
lie in this life cycle now i hope this

15514
11:00:00,480 --> 11:00:04,960
lesson has given you the necessary

15515
11:00:02,480 --> 11:00:07,596
theory that will help better use the

15516
11:00:04,959 --> 11:00:09,915
discuss feature sets and giving you some

15517
11:00:07,595 --> 11:00:12,159
ideas on how to better manage your

15518
11:00:09,915 --> 11:00:14,559
instances now there is a lot more to

15519
11:00:12,160 --> 11:00:16,960
know than what i've shown you here to

15520
11:00:14,559 --> 11:00:19,680
manage your instances but topics shown

15521
11:00:16,959 --> 11:00:21,915
here are what shows up in the exam as

15522
11:00:19,680 --> 11:00:24,720
well are some really great starting

15523
11:00:21,915 --> 11:00:26,319
points to begin managing your instances

15524
11:00:24,720 --> 11:00:28,639
and so that's pretty much all i wanted

15525
11:00:26,319 --> 11:00:30,559
to cover when it comes to managing

15526
11:00:28,639 --> 11:00:32,559
instances so you can now mark this

15527
11:00:30,559 --> 11:00:34,959
lesson as complete and join me in the

15528
11:00:32,559 --> 11:00:37,889
next one where i will cement the theory

15529
11:00:34,959 --> 11:00:41,839
in this lesson with the hands-on demo

15530
11:00:37,889 --> 11:00:44,720
[Music]

15531
11:00:41,839 --> 11:00:46,879
welcome back in this demonstration i'm

15532
11:00:44,720 --> 11:00:49,520
going to be cementing some of the theory

15533
11:00:46,879 --> 11:00:52,239
that we learned in the last lesson with

15534
11:00:49,519 --> 11:00:55,275
regards to the different login methods

15535
11:00:52,239 --> 11:00:57,756
for windows and linux instances how to

15536
11:00:55,275 --> 11:01:00,639
implement these methods are extremely

15537
11:00:57,756 --> 11:01:03,595
useful to know both for the exam and for

15538
11:01:00,639 --> 11:01:05,680
managing multiple instances in different

15539
11:01:03,595 --> 11:01:08,319
environments now there's a lot to cover

15540
11:01:05,680 --> 11:01:11,116
here so with that being said let's dive

15541
11:01:08,319 --> 11:01:13,199
in so as you can see i am logged in here

15542
11:01:11,116 --> 11:01:16,800
under tony bowtie ace

15543
11:01:13,199 --> 11:01:19,199
gmail.com as well i am in the project of

15544
11:01:16,800 --> 11:01:22,319
bowtie inc and so the first thing that i

15545
11:01:19,199 --> 11:01:25,435
want to do is create both a linux

15546
11:01:22,319 --> 11:01:27,680
instance and a windows instance and this

15547
11:01:25,436 --> 11:01:30,400
is to demonstrate the different options

15548
11:01:27,680 --> 11:01:32,720
you have for logging into an instance

15549
11:01:30,400 --> 11:01:35,040
and so in order for me to do that i need

15550
11:01:32,720 --> 11:01:37,040
to head on over to compute engine so i'm

15551
11:01:35,040 --> 11:01:38,959
going to go over to the navigation menu

15552
11:01:37,040 --> 11:01:41,840
and i'm going to scroll down to compute

15553
11:01:38,959 --> 11:01:44,639
engine and so just as a note before

15554
11:01:41,839 --> 11:01:47,519
creating your instances please make sure

15555
11:01:44,639 --> 11:01:49,680
that you have a default vpc created

15556
11:01:47,519 --> 11:01:51,915
before going ahead and creating these

15557
11:01:49,680 --> 11:01:54,559
instances if you've forgotten how to

15558
11:01:51,915 --> 11:01:56,879
create a default vpc please go back to

15559
11:01:54,559 --> 11:01:59,595
the networking services section and

15560
11:01:56,879 --> 11:02:01,755
watch the vpc lesson for a refresher and

15561
11:01:59,595 --> 11:02:03,915
so i'm going to go ahead and create my

15562
11:02:01,756 --> 11:02:06,160
first instance and i'm going to start

15563
11:02:03,915 --> 11:02:08,239
with the windows instance so i'm going

15564
11:02:06,160 --> 11:02:10,560
to simply click on create

15565
11:02:08,239 --> 11:02:13,680
and so for the name of this instance you

15566
11:02:10,559 --> 11:02:14,959
can simply call this windows dash

15567
11:02:13,680 --> 11:02:17,360
instance

15568
11:02:14,959 --> 11:02:19,839
and i'm not going to add any labels and

15569
11:02:17,360 --> 11:02:22,319
for the region you should select us

15570
11:02:19,839 --> 11:02:25,435
east1 and you can keep the zone as the

15571
11:02:22,319 --> 11:02:27,680
default for us east 1b and scrolling

15572
11:02:25,436 --> 11:02:30,400
down to the machine configuration for

15573
11:02:27,680 --> 11:02:33,519
the machine type i'm going to keep it as

15574
11:02:30,400 --> 11:02:35,520
is as it is a windows instance and i'm

15575
11:02:33,519 --> 11:02:37,839
going to need a little bit more power

15576
11:02:35,519 --> 11:02:40,719
scrolling down to boot disk we need to

15577
11:02:37,839 --> 11:02:42,079
change this from debian over to windows

15578
11:02:40,720 --> 11:02:44,880
so i'm going to simply click on the

15579
11:02:42,080 --> 11:02:46,800
change button and under operating system

15580
11:02:44,879 --> 11:02:49,595
i'm going to click on the drop down and

15581
11:02:46,800 --> 11:02:51,436
select windows server for the version

15582
11:02:49,595 --> 11:02:53,595
i'm going to select the latest version

15583
11:02:51,436 --> 11:02:57,200
of windows server which is the windows

15584
11:02:53,595 --> 11:03:00,079
server 2019 data center and you can keep

15585
11:02:57,199 --> 11:03:02,479
the boot disk type and the size as its

15586
11:03:00,080 --> 11:03:04,880
default and simply head on down and

15587
11:03:02,480 --> 11:03:07,040
click on select and we're going to leave

15588
11:03:04,879 --> 11:03:10,719
everything else as the default and

15589
11:03:07,040 --> 11:03:12,800
simply click on create

15590
11:03:10,720 --> 11:03:14,959
and success our windows instance has

15591
11:03:12,800 --> 11:03:16,800
been created and so the first thing that

15592
11:03:14,959 --> 11:03:19,275
you want to do is you want to set a

15593
11:03:16,800 --> 11:03:21,520
windows password for this instance and

15594
11:03:19,275 --> 11:03:23,199
so i'm going to head on over to the rdp

15595
11:03:21,519 --> 11:03:25,839
button and i'm going to click on the

15596
11:03:23,199 --> 11:03:28,079
drop-down and here i'm going to select

15597
11:03:25,839 --> 11:03:30,479
set windows password and here i'm going

15598
11:03:28,080 --> 11:03:32,480
to get a pop-up to set a new windows

15599
11:03:30,480 --> 11:03:35,116
password the username has been

15600
11:03:32,480 --> 11:03:37,200
propagated for me as tony bowties i'm

15601
11:03:35,116 --> 11:03:40,080
going to leave it as is and i'm going to

15602
11:03:37,199 --> 11:03:42,079
click on set

15603
11:03:40,080 --> 11:03:44,400
and i'm going to be prompted with a new

15604
11:03:42,080 --> 11:03:46,800
windows password that has been set for

15605
11:03:44,400 --> 11:03:49,200
me so i'm going to copy this and i'm

15606
11:03:46,800 --> 11:03:51,596
going to paste it into my notepad so be

15607
11:03:49,199 --> 11:03:52,479
sure to record it somewhere either write

15608
11:03:51,595 --> 11:03:55,115
it down

15609
11:03:52,480 --> 11:03:56,960
or copy and paste it into a text editor

15610
11:03:55,116 --> 11:03:59,916
of your choice i'm going to click on

15611
11:03:56,959 --> 11:04:02,479
close and so now for me to log into this

15612
11:03:59,915 --> 11:04:04,639
i need to make sure of a couple things

15613
11:04:02,480 --> 11:04:07,596
the first thing is i need to make sure

15614
11:04:04,639 --> 11:04:11,360
that i have a firewall rule open for

15615
11:04:07,595 --> 11:04:14,319
port 3389 the second is i need to make

15616
11:04:11,360 --> 11:04:16,800
sure that i have an rdp client and so in

15617
11:04:14,319 --> 11:04:19,040
order to satisfy my first constraint i'm

15618
11:04:16,800 --> 11:04:22,880
going to head on over to the navigation

15619
11:04:19,040 --> 11:04:25,595
menu and go down to vpc network

15620
11:04:22,879 --> 11:04:29,360
here i'm going to select firewall and as

15621
11:04:25,595 --> 11:04:31,595
expected the rdp firewall rule has been

15622
11:04:29,360 --> 11:04:34,879
already created due to the fact that

15623
11:04:31,595 --> 11:04:37,199
upon creation of the default vpc network

15624
11:04:34,879 --> 11:04:39,360
this default firewall rule is always

15625
11:04:37,199 --> 11:04:41,435
created and so now that i've gotten that

15626
11:04:39,360 --> 11:04:43,199
out of the way i'm going to head back on

15627
11:04:41,436 --> 11:04:44,880
over to compute engine

15628
11:04:43,199 --> 11:04:47,839
and what i'm going to do is i'm going to

15629
11:04:44,879 --> 11:04:50,319
record the external ip so that i'll be

15630
11:04:47,839 --> 11:04:52,319
able to log into it now i'm going to be

15631
11:04:50,319 --> 11:04:55,199
logging into this instance

15632
11:04:52,319 --> 11:04:57,275
from both a windows client and a mac

15633
11:04:55,199 --> 11:04:58,959
client so starting with windows i'm

15634
11:04:57,275 --> 11:05:01,115
going to head on over to my windows

15635
11:04:58,959 --> 11:05:04,319
virtual machine and because i know

15636
11:05:01,116 --> 11:05:06,319
windows has a default rdp client already

15637
11:05:04,319 --> 11:05:08,720
built in i'm going to simply bring it up

15638
11:05:06,319 --> 11:05:11,199
by hitting the windows key and typing

15639
11:05:08,720 --> 11:05:13,116
remote desktop connection

15640
11:05:11,199 --> 11:05:15,360
i'm going to click on that i'm going to

15641
11:05:13,116 --> 11:05:17,360
paste in the public ip for the instance

15642
11:05:15,360 --> 11:05:19,680
that i just recorded and i'm going to

15643
11:05:17,360 --> 11:05:21,756
click on connect you should get a pop-up

15644
11:05:19,680 --> 11:05:25,595
asking for your credentials i'm going to

15645
11:05:21,756 --> 11:05:27,200
type in my username as tony bowtie ace

15646
11:05:25,595 --> 11:05:29,839
as well i'm going to paste in the

15647
11:05:27,199 --> 11:05:31,755
password and i'm going to click on ok

15648
11:05:29,839 --> 11:05:34,559
i'm prompted to accept the security

15649
11:05:31,756 --> 11:05:36,080
certificate and i'm going to select yes

15650
11:05:34,559 --> 11:05:38,720
and success

15651
11:05:36,080 --> 11:05:41,040
i'm now connected to my windows server

15652
11:05:38,720 --> 11:05:43,360
instance and it's going to run all its

15653
11:05:41,040 --> 11:05:45,275
necessary startup scripts you may get a

15654
11:05:43,360 --> 11:05:47,040
couple of prompts that come up

15655
11:05:45,275 --> 11:05:48,639
asking you if you want to connect to

15656
11:05:47,040 --> 11:05:50,879
your network

15657
11:05:48,639 --> 11:05:53,040
absolutely i'm going to close down

15658
11:05:50,879 --> 11:05:55,199
server manager just for now

15659
11:05:53,040 --> 11:05:56,959
and another thing that i wanted to note

15660
11:05:55,199 --> 11:05:59,360
is that when you create a windows

15661
11:05:56,959 --> 11:06:02,080
instance there will automatically be

15662
11:05:59,360 --> 11:06:05,116
provisioned a google cloud shell with

15663
11:06:02,080 --> 11:06:07,916
the sdk pre-installed and so you'll be

15664
11:06:05,116 --> 11:06:10,240
able to run all your regular commands

15665
11:06:07,915 --> 11:06:12,639
right from this shell without having to

15666
11:06:10,239 --> 11:06:14,799
install it and this is due to the guest

15667
11:06:12,639 --> 11:06:17,519
environment that was automatically

15668
11:06:14,800 --> 11:06:19,916
installed on the vm instance upon

15669
11:06:17,519 --> 11:06:21,275
creation and this is a perfect example

15670
11:06:19,915 --> 11:06:23,360
of some of the scripts that are

15671
11:06:21,275 --> 11:06:25,360
installed with the guest environment i'm

15672
11:06:23,360 --> 11:06:26,959
going to go ahead and close out of this

15673
11:06:25,360 --> 11:06:29,275
and i'm going to go ahead and close out

15674
11:06:26,959 --> 11:06:31,839
of my instance

15675
11:06:29,275 --> 11:06:34,159
hit ok and so being here in windows i

15676
11:06:31,839 --> 11:06:36,479
wanted to show you an alternate way of

15677
11:06:34,160 --> 11:06:38,720
logging into your instance through

15678
11:06:36,480 --> 11:06:41,040
powershell so for those of you who are

15679
11:06:38,720 --> 11:06:43,360
quite versed in windows and use

15680
11:06:41,040 --> 11:06:45,756
powershell in your day-to-day there is

15681
11:06:43,360 --> 11:06:48,080
an easy way to log into your instance

15682
11:06:45,756 --> 11:06:51,200
using powershell now in order for me to

15683
11:06:48,080 --> 11:06:55,756
do that i need to open another firewall

15684
11:06:51,199 --> 11:06:57,680
rule covering tcp port 5986 so i'm going

15685
11:06:55,756 --> 11:06:59,436
to head on over back to the google cloud

15686
11:06:57,680 --> 11:07:01,756
console i'm going to head over to the

15687
11:06:59,436 --> 11:07:04,160
navigation menu and i'm going to scroll

15688
11:07:01,756 --> 11:07:06,319
down to vpc network

15689
11:07:04,160 --> 11:07:08,960
i'm going to go into firewall and i'm

15690
11:07:06,319 --> 11:07:12,000
going to create a new firewall rule and

15691
11:07:08,959 --> 11:07:13,360
under name i'm going to name this as

15692
11:07:12,000 --> 11:07:15,519
allow

15693
11:07:13,360 --> 11:07:17,436
powershell i'm going to use the same for

15694
11:07:15,519 --> 11:07:20,000
the description i'm going to scroll down

15695
11:07:17,436 --> 11:07:22,160
to targets and i'm going to select all

15696
11:07:20,000 --> 11:07:25,199
instances in the network and under

15697
11:07:22,160 --> 11:07:27,240
source ip ranges for this demonstration

15698
11:07:25,199 --> 11:07:30,559
i'm going to use

15699
11:07:27,239 --> 11:07:32,400
0.0.0.0 forward slash 0. and again this

15700
11:07:30,559 --> 11:07:34,799
should not be used in a production

15701
11:07:32,400 --> 11:07:36,560
environment but is used merely for this

15702
11:07:34,800 --> 11:07:38,560
demo i'm going to leave everything else

15703
11:07:36,559 --> 11:07:40,559
as is and i'm going to go down to

15704
11:07:38,559 --> 11:07:44,479
protocols and ports i'm going to click

15705
11:07:40,559 --> 11:07:46,479
on tcp and i'm going to type in 5986 for

15706
11:07:44,480 --> 11:07:48,400
the port and i'm going to click on

15707
11:07:46,480 --> 11:07:50,640
create i'm going to give it a second

15708
11:07:48,400 --> 11:07:53,360
just to create and it took a couple

15709
11:07:50,639 --> 11:07:55,436
seconds but our firewall rule is now

15710
11:07:53,360 --> 11:07:58,080
created and so now i'm gonna head over

15711
11:07:55,436 --> 11:08:00,319
to my windows vm and i'm gonna open up a

15712
11:07:58,080 --> 11:08:03,680
powershell command prompt and hit the

15713
11:08:00,319 --> 11:08:05,756
windows key and type in powershell

15714
11:08:03,680 --> 11:08:08,480
and so in order for me to not get

15715
11:08:05,756 --> 11:08:11,116
constantly asked about my username and

15716
11:08:08,480 --> 11:08:13,596
password i'm going to use a variable

15717
11:08:11,116 --> 11:08:15,276
that will keep my password for me and so

15718
11:08:13,595 --> 11:08:17,435
every time i connect to my windows

15719
11:08:15,275 --> 11:08:19,519
instance i won't need to type it in all

15720
11:08:17,436 --> 11:08:22,800
the time and so the command for that is

15721
11:08:19,519 --> 11:08:24,959
dollar sign credentials equals get dash

15722
11:08:22,800 --> 11:08:26,639
credential i'm going to hit enter and

15723
11:08:24,959 --> 11:08:28,559
i'm going to get a prompt to type in my

15724
11:08:26,639 --> 11:08:30,639
username and password so i'm going to

15725
11:08:28,559 --> 11:08:33,519
simply type that in now along with my

15726
11:08:30,639 --> 11:08:36,000
password and hit ok and if you don't get

15727
11:08:33,519 --> 11:08:38,399
a prompt with any errors then chances

15728
11:08:36,000 --> 11:08:40,639
are that you've been successful at

15729
11:08:38,400 --> 11:08:42,639
entering your credentials and so now in

15730
11:08:40,639 --> 11:08:44,400
order to connect to the instance you're

15731
11:08:42,639 --> 11:08:46,319
going to need the public ip address

15732
11:08:44,400 --> 11:08:48,080
again so i'm going to head on over back

15733
11:08:46,319 --> 11:08:50,319
to the console i'm going to head on over

15734
11:08:48,080 --> 11:08:52,319
to the navigation menu and back to

15735
11:08:50,319 --> 11:08:54,480
compute engine here i'm going to record

15736
11:08:52,319 --> 11:08:56,639
the external ip and i'm going to head on

15737
11:08:54,480 --> 11:08:58,080
over back to my windows virtual machine

15738
11:08:56,639 --> 11:09:00,000
and so you're going to enter this

15739
11:08:58,080 --> 11:09:02,319
command which i will include in the

15740
11:09:00,000 --> 11:09:04,879
lesson text and you'll also be able to

15741
11:09:02,319 --> 11:09:06,959
find it in the github repository beside

15742
11:09:04,879 --> 11:09:09,680
computer name you're going to put in

15743
11:09:06,959 --> 11:09:11,915
your public ip address of your windows

15744
11:09:09,680 --> 11:09:14,000
instance and make sure at the end you

15745
11:09:11,915 --> 11:09:17,040
have your credentials variable i'm going

15746
11:09:14,000 --> 11:09:20,000
to simply click enter and success i'm

15747
11:09:17,040 --> 11:09:22,480
now connected to my windows instance in

15748
11:09:20,000 --> 11:09:23,436
google cloud so as you can see here on

15749
11:09:22,480 --> 11:09:26,720
the left

15750
11:09:23,436 --> 11:09:28,560
is the public ip of my windows instance

15751
11:09:26,720 --> 11:09:31,040
and so these are the various ways that

15752
11:09:28,559 --> 11:09:33,275
you can connect to your windows instance

15753
11:09:31,040 --> 11:09:35,436
from a windows machine and so now for me

15754
11:09:33,275 --> 11:09:37,915
to connect to my windows instance on a

15755
11:09:35,436 --> 11:09:40,239
mac i'm going to head on over there now

15756
11:09:37,915 --> 11:09:43,435
and like i said before i need to satisfy

15757
11:09:40,239 --> 11:09:45,915
the constraint of having an rdp client

15758
11:09:43,436 --> 11:09:48,480
unfortunately mac does not come with an

15759
11:09:45,915 --> 11:09:51,360
rdp client and so the recommended tool

15760
11:09:48,480 --> 11:09:54,240
to use is the chrome extension but i

15761
11:09:51,360 --> 11:09:56,400
personally like microsoft's rdp for mac

15762
11:09:54,239 --> 11:09:58,720
application and so i'm going to go ahead

15763
11:09:56,400 --> 11:10:00,319
and do a walkthrough of the installation

15764
11:09:58,720 --> 11:10:02,480
so i'm going to start off by opening up

15765
11:10:00,319 --> 11:10:04,959
safari and i'm going to paste in this

15766
11:10:02,480 --> 11:10:06,400
url which i will include in the lesson

15767
11:10:04,959 --> 11:10:08,879
text

15768
11:10:06,400 --> 11:10:11,436
and microsoft has made available a

15769
11:10:08,879 --> 11:10:13,595
microsoft remote desktop app available

15770
11:10:11,436 --> 11:10:15,680
in the app store i'm going to go ahead

15771
11:10:13,595 --> 11:10:17,915
and view it in the app store and i'm

15772
11:10:15,680 --> 11:10:19,840
going to simply click on get and then

15773
11:10:17,915 --> 11:10:21,519
install and once you've entered your

15774
11:10:19,839 --> 11:10:23,679
credentials and you've downloaded and

15775
11:10:21,519 --> 11:10:26,239
installed it you can simply click on

15776
11:10:23,680 --> 11:10:28,160
open i'm going to click on not now and

15777
11:10:26,239 --> 11:10:30,559
continue and i'm going to close all

15778
11:10:28,160 --> 11:10:32,560
these other windows for better viewing

15779
11:10:30,559 --> 11:10:34,639
i'm going to click on add pc i'm going

15780
11:10:32,559 --> 11:10:37,519
to paste in the public ip address of my

15781
11:10:34,639 --> 11:10:40,159
windows instance and under user account

15782
11:10:37,519 --> 11:10:42,959
i'm going to add my user account type in

15783
11:10:40,160 --> 11:10:44,880
my username paste in my password you can

15784
11:10:42,959 --> 11:10:48,799
add a friendly name here i'm going to

15785
11:10:44,879 --> 11:10:50,639
type in windows dash gc for google cloud

15786
11:10:48,800 --> 11:10:51,916
and i'm going to click on add and then

15787
11:10:50,639 --> 11:10:54,319
once you've pasted in all the

15788
11:10:51,915 --> 11:10:56,639
credentials and your information you can

15789
11:10:54,319 --> 11:10:58,639
then click on add and i should be able

15790
11:10:56,639 --> 11:11:00,479
to connect to my windows instance by

15791
11:10:58,639 --> 11:11:02,879
double clicking on this window it's

15792
11:11:00,480 --> 11:11:04,319
asking me for my certificates i'm going

15793
11:11:02,879 --> 11:11:07,199
to hit continue

15794
11:11:04,319 --> 11:11:09,199
and success i'm connected to my windows

15795
11:11:07,199 --> 11:11:11,435
instance and so this is how you would

15796
11:11:09,199 --> 11:11:14,479
connect to a windows instance from a

15797
11:11:11,436 --> 11:11:17,116
windows machine as well as from a mac as

15798
11:11:14,480 --> 11:11:19,436
well there are a couple of other options

15799
11:11:17,116 --> 11:11:22,720
that i wanted to show you over here on

15800
11:11:19,436 --> 11:11:25,275
the drop down beside rdp i can download

15801
11:11:22,720 --> 11:11:27,436
an rdp file which will contain the

15802
11:11:25,275 --> 11:11:29,915
public ip address of the windows

15803
11:11:27,436 --> 11:11:32,160
instance along with your username if i

15804
11:11:29,915 --> 11:11:34,879
need to reset my password i can view the

15805
11:11:32,160 --> 11:11:37,596
gcloud command to do it or i can set a

15806
11:11:34,879 --> 11:11:39,519
new windows password if i forgotten my

15807
11:11:37,595 --> 11:11:41,360
old one and so that's everything i had

15808
11:11:39,519 --> 11:11:44,000
to show you with regards to connecting

15809
11:11:41,360 --> 11:11:46,239
to a windows instance and so since this

15810
11:11:44,000 --> 11:11:48,400
demo was getting kind of long i decided

15811
11:11:46,239 --> 11:11:50,400
to split it up into two parts

15812
11:11:48,400 --> 11:11:52,319
and so this is the end of part one of

15813
11:11:50,400 --> 11:11:55,116
this demo and this would be a great

15814
11:11:52,319 --> 11:11:57,436
opportunity to get up and have a stretch

15815
11:11:55,116 --> 11:11:59,596
grab yourself a tea or a coffee and

15816
11:11:57,436 --> 11:12:01,840
whenever you're ready you can join me in

15817
11:11:59,595 --> 11:12:04,720
part two where we will be starting

15818
11:12:01,839 --> 11:12:06,959
immediately from the end of part 1 so

15819
11:12:04,720 --> 11:12:08,540
you can complete this video and i'll see

15820
11:12:06,959 --> 11:12:12,400
you in part 2.

15821
11:12:08,540 --> 11:12:15,360
[Music]

15822
11:12:12,400 --> 11:12:18,080
welcome back this is part 2 of the

15823
11:12:15,360 --> 11:12:20,319
connecting to your instances demo and we

15824
11:12:18,080 --> 11:12:23,360
will be starting exactly where we left

15825
11:12:20,319 --> 11:12:25,436
off in part one so with that being said

15826
11:12:23,360 --> 11:12:27,915
let's dive in and so now that we've

15827
11:12:25,436 --> 11:12:29,596
created our windows instance and went

15828
11:12:27,915 --> 11:12:31,915
through all the methods of how to

15829
11:12:29,595 --> 11:12:34,000
connect to it let's go ahead and create

15830
11:12:31,915 --> 11:12:36,079
a linux instance i'm going to go up to

15831
11:12:34,000 --> 11:12:38,080
the top menu here and click on create

15832
11:12:36,080 --> 11:12:39,116
instance and i'm going to name this

15833
11:12:38,080 --> 11:12:41,596
instance

15834
11:12:39,116 --> 11:12:44,240
linux instance i'm not going to give it

15835
11:12:41,595 --> 11:12:47,040
any labels under region i'm going to

15836
11:12:44,239 --> 11:12:49,040
select the us east one region and the

15837
11:12:47,040 --> 11:12:52,080
zone i'm going to leave it as its set

15838
11:12:49,040 --> 11:12:54,239
default as us east 1b the machine

15839
11:12:52,080 --> 11:12:56,560
configuration i'm going to leave it as

15840
11:12:54,239 --> 11:12:59,595
is under boot disk i'm going to leave

15841
11:12:56,559 --> 11:13:01,275
this as is with the debian distribution

15842
11:12:59,595 --> 11:13:03,680
and i'm going to go ahead and click on

15843
11:13:01,275 --> 11:13:03,680
create

15844
11:13:03,839 --> 11:13:08,319
okay and our linux instance has been

15845
11:13:06,000 --> 11:13:09,199
created and in order for me to connect

15846
11:13:08,319 --> 11:13:12,080
to it

15847
11:13:09,199 --> 11:13:14,479
i am going to ssh into it but first i

15848
11:13:12,080 --> 11:13:18,319
need to satisfy the constraint of having

15849
11:13:14,480 --> 11:13:19,520
a firewall rule with tcp port 22 open so

15850
11:13:18,319 --> 11:13:21,116
i'm going to head on over to the

15851
11:13:19,519 --> 11:13:23,595
navigation menu

15852
11:13:21,116 --> 11:13:25,276
and i'm going to scroll down to vpc

15853
11:13:23,595 --> 11:13:28,799
network i'm going to head on over to

15854
11:13:25,275 --> 11:13:32,079
firewall and as expected the allow ssh

15855
11:13:28,800 --> 11:13:34,560
firewall rule has been created alongside

15856
11:13:32,080 --> 11:13:36,800
the default vpc network and so since

15857
11:13:34,559 --> 11:13:39,275
i've satisfied that constraint i can

15858
11:13:36,800 --> 11:13:41,436
head back on over to compute engine and

15859
11:13:39,275 --> 11:13:43,756
so here i have a few different options

15860
11:13:41,436 --> 11:13:46,239
that i can select from for logging into

15861
11:13:43,756 --> 11:13:48,800
my linux instance i can open in a

15862
11:13:46,239 --> 11:13:51,519
browser window if i decided i wanted to

15863
11:13:48,800 --> 11:13:54,800
put it on a custom port i can use this

15864
11:13:51,519 --> 11:13:57,680
option here if i provided a private ssh

15865
11:13:54,800 --> 11:13:59,916
key to connect to this linux instance i

15866
11:13:57,680 --> 11:14:02,400
can use this option here i have the

15867
11:13:59,915 --> 11:14:04,399
option of viewing the gcloud command in

15868
11:14:02,400 --> 11:14:06,720
order to connect to it

15869
11:14:04,400 --> 11:14:09,116
and i've been presented with a pop-up

15870
11:14:06,720 --> 11:14:11,595
with the command to use within the

15871
11:14:09,116 --> 11:14:14,080
gcloud command line in order to connect

15872
11:14:11,595 --> 11:14:16,319
to my instance i can run it now in cloud

15873
11:14:14,080 --> 11:14:19,200
shell but i'm going to simply close it

15874
11:14:16,319 --> 11:14:22,080
and so whether you are on a mac a

15875
11:14:19,199 --> 11:14:25,199
windows machine or a linux machine you

15876
11:14:22,080 --> 11:14:27,756
can simply click on ssh and it will open

15877
11:14:25,199 --> 11:14:30,559
a new browser window connecting you to

15878
11:14:27,756 --> 11:14:30,559
your instance

15879
11:14:31,680 --> 11:14:35,680
now when you connect to your linux

15880
11:14:33,756 --> 11:14:38,800
instance for the first time

15881
11:14:35,680 --> 11:14:42,000
compute engine generates an ssh key pair

15882
11:14:38,800 --> 11:14:44,080
for you this key pair by default is

15883
11:14:42,000 --> 11:14:45,915
added to your project or instance

15884
11:14:44,080 --> 11:14:48,240
metadata and this will give you the

15885
11:14:45,915 --> 11:14:50,639
freedom of not having to worry about

15886
11:14:48,239 --> 11:14:54,079
managing keys now if your account is

15887
11:14:50,639 --> 11:14:56,720
configured to use os login compute

15888
11:14:54,080 --> 11:14:58,639
engine stores the generated key pair

15889
11:14:56,720 --> 11:15:00,559
with your user account

15890
11:14:58,639 --> 11:15:03,040
now when connecting to your linux

15891
11:15:00,559 --> 11:15:06,399
instance in most scenarios google

15892
11:15:03,040 --> 11:15:09,756
recommends using os login this feature

15893
11:15:06,400 --> 11:15:12,480
lets you use iam roles to manage ssh

15894
11:15:09,756 --> 11:15:14,880
access to linux instances and this

15895
11:15:12,480 --> 11:15:17,436
relieves the complexity of having to

15896
11:15:14,879 --> 11:15:20,799
manage multiple key pairs and is the

15897
11:15:17,436 --> 11:15:23,916
recommended way to manage many users

15898
11:15:20,800 --> 11:15:25,916
across multiple instances or projects

15899
11:15:23,915 --> 11:15:28,719
and so i'm going to go ahead now and

15900
11:15:25,915 --> 11:15:31,115
show you how to configure os login for

15901
11:15:28,720 --> 11:15:33,595
your linux instance and the way to do

15902
11:15:31,116 --> 11:15:35,680
this will be very similar on all

15903
11:15:33,595 --> 11:15:38,159
platforms so i'm going to go ahead and

15904
11:15:35,680 --> 11:15:39,756
go back to my mac vm and i'm going to

15905
11:15:38,160 --> 11:15:42,320
open up my terminal

15906
11:15:39,756 --> 11:15:43,840
make this bigger for better viewing

15907
11:15:42,319 --> 11:15:46,239
and i'm going to start by running the

15908
11:15:43,839 --> 11:15:48,879
gcloud init command in order to make

15909
11:15:46,239 --> 11:15:51,199
sure i'm using the right user and for

15910
11:15:48,879 --> 11:15:54,000
the sake of this demonstration i'm going

15911
11:15:51,199 --> 11:15:56,399
to re-initialize this configuration so

15912
11:15:54,000 --> 11:15:59,275
i'm going to click on one hit enter

15913
11:15:56,400 --> 11:16:02,560
number two for tony bowtie ace and i'm

15914
11:15:59,275 --> 11:16:05,436
going to use project bow tie ink so 1

15915
11:16:02,559 --> 11:16:08,000
and i'm not going to configure a default

15916
11:16:05,436 --> 11:16:11,040
compute region in zone and so if i run

15917
11:16:08,000 --> 11:16:13,199
the gcloud config list command i can see

15918
11:16:11,040 --> 11:16:17,360
that the account that i'm using is tony

15919
11:16:13,199 --> 11:16:20,399
bowties gmail.com in project bowtie inc

15920
11:16:17,360 --> 11:16:22,480
and so because os login requires a key

15921
11:16:20,400 --> 11:16:24,160
pair i'm going to have to generate that

15922
11:16:22,480 --> 11:16:26,240
myself so i'm going to go ahead and

15923
11:16:24,160 --> 11:16:29,840
clear the screen and i'm going to use

15924
11:16:26,239 --> 11:16:32,319
the command ssh keygen and this is the

15925
11:16:29,839 --> 11:16:34,239
command to create a public and private

15926
11:16:32,319 --> 11:16:36,480
key pair i'm going to use the default

15927
11:16:34,239 --> 11:16:38,319
path to save my key and i'm going to

15928
11:16:36,480 --> 11:16:40,240
enter a passphrase

15929
11:16:38,319 --> 11:16:41,519
i'm going to enter it again and i

15930
11:16:40,239 --> 11:16:43,756
recommend that you write down your

15931
11:16:41,519 --> 11:16:46,239
passphrase so that you don't forget it

15932
11:16:43,756 --> 11:16:48,720
as when you lose it you will be unable

15933
11:16:46,239 --> 11:16:52,159
to use your key pair and so if i change

15934
11:16:48,720 --> 11:16:55,040
directory to dot ssh and do an ls for

15935
11:16:52,160 --> 11:16:57,360
list i can see that i now have my public

15936
11:16:55,040 --> 11:17:00,319
and private key pair the private key

15937
11:16:57,360 --> 11:17:03,080
lying in id underscore rsa and the

15938
11:17:00,319 --> 11:17:06,080
public key lying in id underscore

15939
11:17:03,080 --> 11:17:09,520
rsa.pub and so another constraint that i

15940
11:17:06,080 --> 11:17:12,000
have is i need to enable os login for my

15941
11:17:09,519 --> 11:17:14,079
linux instance so i'm going to go ahead

15942
11:17:12,000 --> 11:17:16,160
and go back to the console and i'm going

15943
11:17:14,080 --> 11:17:17,200
to go ahead and go into my linux

15944
11:17:16,160 --> 11:17:19,360
instance

15945
11:17:17,199 --> 11:17:22,799
i'm going to click on edit and if you

15946
11:17:19,360 --> 11:17:25,756
scroll down you will come to some fields

15947
11:17:22,800 --> 11:17:28,560
marked as custom metadata and under key

15948
11:17:25,756 --> 11:17:30,880
you will type in enable dash os login

15949
11:17:28,559 --> 11:17:33,839
and under value you will type in all

15950
11:17:30,879 --> 11:17:36,559
caps true now i wanted to take a moment

15951
11:17:33,839 --> 11:17:41,115
here to discuss this feature here under

15952
11:17:36,559 --> 11:17:44,799
ssh keys for block project wide ssh keys

15953
11:17:41,116 --> 11:17:47,520
now project wide public ssh keys are

15954
11:17:44,800 --> 11:17:50,880
meant to give users access to all of the

15955
11:17:47,519 --> 11:17:53,839
linux instances in a project that allow

15956
11:17:50,879 --> 11:17:56,159
project project-wide public ssh keys so

15957
11:17:53,839 --> 11:17:59,359
if an instance blocks project-wide

15958
11:17:56,160 --> 11:18:01,756
public ssh keys as you see here

15959
11:17:59,360 --> 11:18:04,080
a user can't use their project-wide

15960
11:18:01,756 --> 11:18:05,116
public ssh key to connect to the

15961
11:18:04,080 --> 11:18:08,880
instance

15962
11:18:05,116 --> 11:18:11,680
unless the same public ssh key is also

15963
11:18:08,879 --> 11:18:15,519
added to the instance metadata this

15964
11:18:11,680 --> 11:18:18,879
allows only users whose public ssh key

15965
11:18:15,519 --> 11:18:20,479
is stored in instance level metadata to

15966
11:18:18,879 --> 11:18:22,399
access the instance

15967
11:18:20,480 --> 11:18:24,960
and so this is an important feature to

15968
11:18:22,400 --> 11:18:27,040
note for the exam and so we're going to

15969
11:18:24,959 --> 11:18:28,559
leave this feature checked off for now

15970
11:18:27,040 --> 11:18:31,116
and then you can go to the bottom and

15971
11:18:28,559 --> 11:18:35,115
click on save now if i wanted to enable

15972
11:18:31,116 --> 11:18:37,756
os login for all instances in my project

15973
11:18:35,116 --> 11:18:40,480
i can simply go over to the menu on the

15974
11:18:37,756 --> 11:18:43,595
left and click on metadata and add the

15975
11:18:40,480 --> 11:18:47,040
metadata here with the same values so

15976
11:18:43,595 --> 11:18:49,839
under key i type in enable dash os login

15977
11:18:47,040 --> 11:18:52,480
and under value i type in in all caps

15978
11:18:49,839 --> 11:18:54,000
true but i don't want to enable it for

15979
11:18:52,480 --> 11:18:56,720
all my instances

15980
11:18:54,000 --> 11:19:00,480
only for that one specific instance so

15981
11:18:56,720 --> 11:19:02,160
with regards to project-wide public keys

15982
11:19:00,480 --> 11:19:05,040
these keys can be managed through

15983
11:19:02,160 --> 11:19:08,400
metadata and should only be used as a

15984
11:19:05,040 --> 11:19:12,239
last resort if you cannot use the other

15985
11:19:08,400 --> 11:19:14,560
tools such as ssh from the console or os

15986
11:19:12,239 --> 11:19:17,040
login these are where the keys are

15987
11:19:14,559 --> 11:19:19,360
stored and so you can always find them

15988
11:19:17,040 --> 11:19:22,239
here when looking for them here as you

15989
11:19:19,360 --> 11:19:24,879
can see there are a couple of keys for

15990
11:19:22,239 --> 11:19:27,040
tony bowtie ace that i have used for

15991
11:19:24,879 --> 11:19:29,360
previous instances and so i'm going to

15992
11:19:27,040 --> 11:19:32,000
go back to metadata just to make sure

15993
11:19:29,360 --> 11:19:34,639
that my key value pair for os login has

15994
11:19:32,000 --> 11:19:36,720
not been saved and it is not and i'm

15995
11:19:34,639 --> 11:19:39,040
going to head back on over to my

15996
11:19:36,720 --> 11:19:41,200
instances and so now that my constraint

15997
11:19:39,040 --> 11:19:43,756
has been fulfilled where i've enabled

15998
11:19:41,199 --> 11:19:46,079
the os login feature by adding the

15999
11:19:43,756 --> 11:19:48,880
unnecessary metadata i'm going to head

16000
11:19:46,080 --> 11:19:50,240
on over back to my mac vm

16001
11:19:48,879 --> 11:19:52,559
i'm going to go ahead and clear the

16002
11:19:50,239 --> 11:19:55,839
screen so now i'm going to go ahead and

16003
11:19:52,559 --> 11:20:00,000
log into my instance using os login by

16004
11:19:55,839 --> 11:20:04,239
using the command gcloud compute os dash

16005
11:20:00,000 --> 11:20:07,756
login ssh dash keys add and then the

16006
11:20:04,239 --> 11:20:11,040
flag key dash file and then the path for

16007
11:20:07,756 --> 11:20:15,116
my public key which is dot ssh forward

16008
11:20:11,040 --> 11:20:16,800
slash id underscore rsa.pub i'm gonna

16009
11:20:15,116 --> 11:20:18,880
hit enter

16010
11:20:16,800 --> 11:20:21,276
and so my key has been successfully

16011
11:20:18,879 --> 11:20:22,879
stored with my user account i'm gonna go

16012
11:20:21,275 --> 11:20:25,115
ahead and make this a little bigger for

16013
11:20:22,879 --> 11:20:27,595
better viewing and so in order to log

16014
11:20:25,116 --> 11:20:30,160
into my instance i'm going to need my

16015
11:20:27,595 --> 11:20:32,879
username which is right up here under

16016
11:20:30,160 --> 11:20:34,320
username i'm going to copy that and i'm

16017
11:20:32,879 --> 11:20:36,719
just going to clear my screen for a

16018
11:20:34,319 --> 11:20:39,519
second here for better viewing and so in

16019
11:20:36,720 --> 11:20:43,360
order for me to ssh into my instance i'm

16020
11:20:39,519 --> 11:20:45,115
going to type in the command ssh minus i

16021
11:20:43,360 --> 11:20:49,199
i'm going to have to provide my private

16022
11:20:45,116 --> 11:20:51,840
key which is in dot ssh forward slash id

16023
11:20:49,199 --> 11:20:54,479
underscore rsa and then my username that

16024
11:20:51,839 --> 11:20:56,879
i had recorded earlier at and then i'm

16025
11:20:54,480 --> 11:20:59,116
going to need my public ip address of my

16026
11:20:56,879 --> 11:21:01,839
linux instance so i'm going to head back

16027
11:20:59,116 --> 11:21:04,319
over to the console for just a sec

16028
11:21:01,839 --> 11:21:06,879
i'm going to copy the ip address head

16029
11:21:04,319 --> 11:21:08,639
back over to my mac vm paste it in and

16030
11:21:06,879 --> 11:21:10,639
hit enter it's asking if i want to

16031
11:21:08,639 --> 11:21:13,595
continue yes i do

16032
11:21:10,639 --> 11:21:16,639
enter the passphrase for my key

16033
11:21:13,595 --> 11:21:19,115
and success i am connected and so there

16034
11:21:16,639 --> 11:21:22,319
is one caveat that i wanted to show you

16035
11:21:19,116 --> 11:21:23,680
with regards to permissions for os login

16036
11:21:22,319 --> 11:21:25,519
so i'm going to head back over to the

16037
11:21:23,680 --> 11:21:28,559
console and i'm going to go up to the

16038
11:21:25,519 --> 11:21:31,595
navigation menu and head over to i am an

16039
11:21:28,559 --> 11:21:35,519
admin now as you can see here tony

16040
11:21:31,595 --> 11:21:38,399
bowties gmail.com has the role of owner

16041
11:21:35,519 --> 11:21:41,039
and therefore i don't need any granular

16042
11:21:38,400 --> 11:21:44,239
specific permissions i have the access

16043
11:21:41,040 --> 11:21:46,720
to do absolutely anything now in case i

16044
11:21:44,239 --> 11:21:49,839
was a different user and i didn't hold

16045
11:21:46,720 --> 11:21:51,680
the role of owner i would be looking for

16046
11:21:49,839 --> 11:21:54,799
specific permissions

16047
11:21:51,680 --> 11:21:56,879
that would be under compute

16048
11:21:54,800 --> 11:21:59,596
os login and this would give me

16049
11:21:56,879 --> 11:22:03,275
permissions as a standard user now if i

16050
11:21:59,595 --> 11:22:06,159
wanted super user access or root access

16051
11:22:03,275 --> 11:22:08,559
i would need to be given the compute os

16052
11:22:06,160 --> 11:22:10,640
admin login role and as you can see it

16053
11:22:08,559 --> 11:22:13,680
would allow me administrator user

16054
11:22:10,639 --> 11:22:16,000
privileges so when using os login and

16055
11:22:13,680 --> 11:22:18,080
the member is not an owner one of these

16056
11:22:16,000 --> 11:22:20,720
two roles are needed so i'm going to

16057
11:22:18,080 --> 11:22:22,880
exit out of here i'm going to hit cancel

16058
11:22:20,720 --> 11:22:25,595
and so that about covers everything that

16059
11:22:22,879 --> 11:22:28,079
i wanted to show you with regards to all

16060
11:22:25,595 --> 11:22:31,275
the different methods that you can use

16061
11:22:28,080 --> 11:22:34,720
for connecting to vm instances for both

16062
11:22:31,275 --> 11:22:37,360
windows and linux instances now i know

16063
11:22:34,720 --> 11:22:38,800
this may have been a refresher for some

16064
11:22:37,360 --> 11:22:41,040
but for others

16065
11:22:38,800 --> 11:22:43,916
knowing all the different methods of

16066
11:22:41,040 --> 11:22:47,116
connecting to instances can come in very

16067
11:22:43,915 --> 11:22:49,839
useful especially when coordinating many

16068
11:22:47,116 --> 11:22:51,916
instances in bigger environments i want

16069
11:22:49,839 --> 11:22:54,399
to congratulate you on making it to the

16070
11:22:51,915 --> 11:22:56,719
end of this demo and gaining a bit more

16071
11:22:54,400 --> 11:22:59,840
knowledge on this crucial part of

16072
11:22:56,720 --> 11:23:02,000
managing your instances so before you go

16073
11:22:59,839 --> 11:23:05,039
be sure to delete any resources that

16074
11:23:02,000 --> 11:23:07,519
you've created and again congrats on the

16075
11:23:05,040 --> 11:23:09,520
great job so you can now mark this as

16076
11:23:07,519 --> 11:23:12,519
complete and i'll see you in the next

16077
11:23:09,519 --> 11:23:12,519
one

16078
11:23:14,000 --> 11:23:19,360
welcome back in this demonstration i'll

16079
11:23:16,959 --> 11:23:22,000
be discussing metadata and how it can

16080
11:23:19,360 --> 11:23:24,400
pertain to a project as well as an

16081
11:23:22,000 --> 11:23:26,959
instance as well i'm going to touch on

16082
11:23:24,400 --> 11:23:30,000
startup and shutdown scripts and it's

16083
11:23:26,959 --> 11:23:32,159
real world use cases in the last lesson

16084
11:23:30,000 --> 11:23:34,559
we touched the tip of the iceberg when

16085
11:23:32,160 --> 11:23:37,360
it came to metadata and wanted to go a

16086
11:23:34,559 --> 11:23:40,159
bit deeper on this topic as i personally

16087
11:23:37,360 --> 11:23:42,319
feel that it holds so much value

16088
11:23:40,160 --> 11:23:44,240
and give you some ideas on how you can

16089
11:23:42,319 --> 11:23:47,199
use it i'm also going to combine the

16090
11:23:44,239 --> 11:23:49,519
metadata using variables in a startup

16091
11:23:47,199 --> 11:23:51,915
script and i'm going to bring to life

16092
11:23:49,519 --> 11:23:54,639
something that's dynamic in nature so

16093
11:23:51,915 --> 11:23:57,680
with that being said let's dive in so i

16094
11:23:54,639 --> 11:23:59,595
am currently logged in as tony at bowtie

16095
11:23:57,680 --> 11:24:02,559
ace gmail.com

16096
11:23:59,595 --> 11:24:04,799
under the project of bow tie inc and so

16097
11:24:02,559 --> 11:24:06,079
in order to get right into the metadata

16098
11:24:04,800 --> 11:24:08,480
i'm going to head on over to my

16099
11:24:06,080 --> 11:24:11,360
navigation menu and go straight to

16100
11:24:08,480 --> 11:24:14,319
compute engine and over here on the left

16101
11:24:11,360 --> 11:24:16,559
hand menu you will see metadata and you

16102
11:24:14,319 --> 11:24:18,559
can drill down into there now as i

16103
11:24:16,559 --> 11:24:20,799
explained in a previous lesson

16104
11:24:18,559 --> 11:24:23,435
metadata can be assigned to both

16105
11:24:20,800 --> 11:24:24,480
projects and instances while instance

16106
11:24:23,436 --> 11:24:27,840
metadata

16107
11:24:24,480 --> 11:24:30,960
only impacts a specific instance so here

16108
11:24:27,839 --> 11:24:34,159
i can add and store metadata which will

16109
11:24:30,959 --> 11:24:36,799
be used on a project-wide basis as well

16110
11:24:34,160 --> 11:24:39,916
as mentioned earlier metadata is stored

16111
11:24:36,800 --> 11:24:42,880
in key value pairs and can be added at

16112
11:24:39,915 --> 11:24:45,519
any time now this is a way to add custom

16113
11:24:42,879 --> 11:24:48,559
metadata but there is a default set of

16114
11:24:45,519 --> 11:24:50,799
metadata entries that every instance has

16115
11:24:48,559 --> 11:24:53,595
access to and again this applies for

16116
11:24:50,800 --> 11:24:55,680
both project and instance metadata so

16117
11:24:53,595 --> 11:24:58,479
here i have the option of setting my

16118
11:24:55,680 --> 11:25:00,239
custom metadata for the entire project

16119
11:24:58,480 --> 11:25:03,360
and so i'm going to dive into where to

16120
11:25:00,239 --> 11:25:05,595
store custom metadata on an instance and

16121
11:25:03,360 --> 11:25:08,559
so in order for me to show you this i'm

16122
11:25:05,595 --> 11:25:11,115
going to first head over to vm instances

16123
11:25:08,559 --> 11:25:13,680
and create my instance and so just as a

16124
11:25:11,116 --> 11:25:15,840
note before creating your instance make

16125
11:25:13,680 --> 11:25:18,080
sure that you have the default vpc

16126
11:25:15,839 --> 11:25:19,519
created and so because i like to double

16127
11:25:18,080 --> 11:25:21,840
check things i'm going to head over to

16128
11:25:19,519 --> 11:25:24,879
the navigation menu i'm going to scroll

16129
11:25:21,839 --> 11:25:28,399
down to vpc network and as expected i

16130
11:25:24,879 --> 11:25:30,159
have the default vpc already created and

16131
11:25:28,400 --> 11:25:32,480
so this means i can go ahead and create

16132
11:25:30,160 --> 11:25:35,040
my instance so i'm going to head back on

16133
11:25:32,480 --> 11:25:37,680
over to compute engine

16134
11:25:35,040 --> 11:25:39,756
and i'm going to create my instance and

16135
11:25:37,680 --> 11:25:43,040
i'm going to name this instance

16136
11:25:39,756 --> 11:25:45,680
bowtie dash web server i'm not going to

16137
11:25:43,040 --> 11:25:48,559
add any labels and under the region i'm

16138
11:25:45,680 --> 11:25:51,040
going to select us east one and you can

16139
11:25:48,559 --> 11:25:53,680
keep the zone as the default as us east

16140
11:25:51,040 --> 11:25:55,915
1b under machine type i want to keep

16141
11:25:53,680 --> 11:25:58,559
things cost effective so i'm going to

16142
11:25:55,915 --> 11:26:02,239
select the e2 micro i'm going to scroll

16143
11:25:58,559 --> 11:26:04,959
down and under identity and api access i

16144
11:26:02,239 --> 11:26:07,436
want to set access for each api

16145
11:26:04,959 --> 11:26:09,680
and scroll down to compute engine i want

16146
11:26:07,436 --> 11:26:11,756
to select it and i want to select on

16147
11:26:09,680 --> 11:26:14,239
read write and i'm going to leave the

16148
11:26:11,756 --> 11:26:16,400
rest as is and scrolling down to the

16149
11:26:14,239 --> 11:26:18,639
bottom i want to click on management

16150
11:26:16,400 --> 11:26:19,756
security disks networking and sold

16151
11:26:18,639 --> 11:26:22,639
tenancy

16152
11:26:19,756 --> 11:26:25,360
and under here you will find the option

16153
11:26:22,639 --> 11:26:28,080
to add any custom metadata and you can

16154
11:26:25,360 --> 11:26:30,319
provide it right here under metadata as

16155
11:26:28,080 --> 11:26:32,480
a key value pair but we're not going to

16156
11:26:30,319 --> 11:26:34,239
add any metadata right now so i'm just

16157
11:26:32,480 --> 11:26:36,400
going to scroll down to the bottom i'm

16158
11:26:34,239 --> 11:26:38,319
going to leave everything else as is and

16159
11:26:36,400 --> 11:26:40,319
simply click on create

16160
11:26:38,319 --> 11:26:42,639
and it should take a few moments for my

16161
11:26:40,319 --> 11:26:45,040
instance to be created okay and now that

16162
11:26:42,639 --> 11:26:47,436
my instance is up i want to go ahead and

16163
11:26:45,040 --> 11:26:50,480
start querying the metadata now just as

16164
11:26:47,436 --> 11:26:53,040
a note metadata must be queried from the

16165
11:26:50,480 --> 11:26:55,520
instance itself and can't be done from

16166
11:26:53,040 --> 11:26:57,756
another instance or even from the cloud

16167
11:26:55,519 --> 11:27:00,159
sdk on your computer so i'm going to go

16168
11:26:57,756 --> 11:27:02,800
ahead and log into the instance using

16169
11:27:00,160 --> 11:27:02,800
ssh

16170
11:27:02,879 --> 11:27:06,559
okay and now that i'm logged into my

16171
11:27:04,720 --> 11:27:09,436
instance i want to start querying the

16172
11:27:06,559 --> 11:27:12,479
metadata now normally you would use

16173
11:27:09,436 --> 11:27:13,520
tools like wget or curl to make these

16174
11:27:12,480 --> 11:27:16,240
queries

16175
11:27:13,519 --> 11:27:18,559
in this demo i will use curl and for

16176
11:27:16,239 --> 11:27:21,756
those who don't know curl is a command

16177
11:27:18,559 --> 11:27:24,839
line tool to transfer data to or from a

16178
11:27:21,756 --> 11:27:29,756
server using supported protocols like

16179
11:27:24,839 --> 11:27:32,479
http ftp scp and many more this tool is

16180
11:27:29,756 --> 11:27:34,800
fantastic for automation since it's

16181
11:27:32,480 --> 11:27:36,960
designed to work without any user

16182
11:27:34,800 --> 11:27:39,756
interaction and so i'm going to paste in

16183
11:27:36,959 --> 11:27:42,000
the url that i am going to use to query

16184
11:27:39,756 --> 11:27:45,360
the instance metadata and this is the

16185
11:27:42,000 --> 11:27:48,239
default url that you would use to query

16186
11:27:45,360 --> 11:27:51,116
any metadata on any instance getting a

16187
11:27:48,239 --> 11:27:54,159
little deeper into it a trailing slash

16188
11:27:51,116 --> 11:27:56,720
shown here shows that the instance value

16189
11:27:54,160 --> 11:27:59,436
is actually a directory and will have

16190
11:27:56,720 --> 11:28:01,520
other values that append to this url

16191
11:27:59,436 --> 11:28:04,239
whether they are other directories or

16192
11:28:01,519 --> 11:28:06,559
just endpoint values now when you query

16193
11:28:04,239 --> 11:28:09,595
for metadata you must provide the

16194
11:28:06,559 --> 11:28:13,115
following header in all of your requests

16195
11:28:09,595 --> 11:28:15,435
metadata dash flavor colon google and

16196
11:28:13,116 --> 11:28:18,080
should be put in quotations if you don't

16197
11:28:15,436 --> 11:28:20,239
provide this header the metadata server

16198
11:28:18,080 --> 11:28:22,400
will deny your request so i'm going to

16199
11:28:20,239 --> 11:28:23,756
go ahead and hit enter and as you can

16200
11:28:22,400 --> 11:28:26,000
see i've been brought up a lot of

16201
11:28:23,756 --> 11:28:28,000
different values that i can choose from

16202
11:28:26,000 --> 11:28:30,959
in order to retrieve different types of

16203
11:28:28,000 --> 11:28:33,360
metadata and as stated before anything

16204
11:28:30,959 --> 11:28:36,000
with a trailing slash is actually a

16205
11:28:33,360 --> 11:28:38,559
directory and will have other values

16206
11:28:36,000 --> 11:28:40,639
underneath it so if i wanted to query

16207
11:28:38,559 --> 11:28:42,879
the network interfaces

16208
11:28:40,639 --> 11:28:44,879
and because it's a directory i need to

16209
11:28:42,879 --> 11:28:47,199
make sure that i add the trailing slash

16210
11:28:44,879 --> 11:28:49,839
at the end and as you can see here i

16211
11:28:47,199 --> 11:28:51,915
have the network interface of 0 and i'm

16212
11:28:49,839 --> 11:28:54,719
going to go ahead and query that

16213
11:28:51,915 --> 11:28:57,275
and here i will have access to all the

16214
11:28:54,720 --> 11:28:59,275
information about the network interface

16215
11:28:57,275 --> 11:29:01,519
on this instance so i'm going to go

16216
11:28:59,275 --> 11:29:04,400
ahead and query the network on this

16217
11:29:01,519 --> 11:29:06,319
interface and as expected the default

16218
11:29:04,400 --> 11:29:08,480
network is displayed i'm going to

16219
11:29:06,319 --> 11:29:10,639
quickly go ahead and clear my screen and

16220
11:29:08,480 --> 11:29:12,720
i'm going to go ahead and query some

16221
11:29:10,639 --> 11:29:15,680
more metadata this time i'm going to do

16222
11:29:12,720 --> 11:29:18,160
the name of the server and as expected

16223
11:29:15,680 --> 11:29:20,239
bowtie dash web server showed up and

16224
11:29:18,160 --> 11:29:22,400
because it's an endpoint i don't need

16225
11:29:20,239 --> 11:29:24,639
the trailing slash at the end i'm going

16226
11:29:22,400 --> 11:29:27,916
to go ahead and do one more this time

16227
11:29:24,639 --> 11:29:30,800
i'm going to choose machine type

16228
11:29:27,915 --> 11:29:33,275
and again as expected the e2 micro

16229
11:29:30,800 --> 11:29:35,756
machine type is displayed and so just as

16230
11:29:33,275 --> 11:29:38,319
a note for those who haven't noticed any

16231
11:29:35,756 --> 11:29:40,400
time that you query metadata it will

16232
11:29:38,319 --> 11:29:42,720
show up to the left of your command

16233
11:29:40,400 --> 11:29:45,040
prompt now what i've shown you here is

16234
11:29:42,720 --> 11:29:46,800
what you can do with instance metadata

16235
11:29:45,040 --> 11:29:49,595
and so how about if you wanted to query

16236
11:29:46,800 --> 11:29:51,680
any project metadata well instead of

16237
11:29:49,595 --> 11:29:53,915
instance at the end you would use

16238
11:29:51,680 --> 11:29:55,915
project with the trailing slash i'm

16239
11:29:53,915 --> 11:29:57,839
going to simply click on enter and as

16240
11:29:55,915 --> 11:30:00,319
you can see here project doesn't give me

16241
11:29:57,839 --> 11:30:03,435
a whole lot of options but it does give

16242
11:30:00,319 --> 11:30:05,199
me some important values like project id

16243
11:30:03,436 --> 11:30:08,000
so i'm going to simply query that right

16244
11:30:05,199 --> 11:30:10,799
now and as expected bowtie inc is

16245
11:30:08,000 --> 11:30:14,400
displayed and so this is a great example

16246
11:30:10,800 --> 11:30:16,800
of how to query any default metadata for

16247
11:30:14,400 --> 11:30:19,200
instances and for projects now you're

16248
11:30:16,800 --> 11:30:21,680
probably wondering how do i query my

16249
11:30:19,199 --> 11:30:24,719
custom metadata well once custom

16250
11:30:21,680 --> 11:30:27,199
metadata has been set you can then query

16251
11:30:24,720 --> 11:30:30,000
it from the attributes directory in the

16252
11:30:27,199 --> 11:30:32,719
attributes directory can be found in

16253
11:30:30,000 --> 11:30:34,160
both the instance and project metadata

16254
11:30:32,720 --> 11:30:37,116
so i'm going to go ahead and show you

16255
11:30:34,160 --> 11:30:39,680
that now but first i wanted to add some

16256
11:30:37,116 --> 11:30:42,000
custom metadata and this can be set in

16257
11:30:39,680 --> 11:30:45,040
either the console the gcloud command

16258
11:30:42,000 --> 11:30:47,116
line tool or using the api and so i'm

16259
11:30:45,040 --> 11:30:50,480
going to run the command here gcloud

16260
11:30:47,116 --> 11:30:52,480
compute instances add dash metadata the

16261
11:30:50,480 --> 11:30:54,880
name of your instance and when you're

16262
11:30:52,480 --> 11:30:57,840
adding custom metadata you would add the

16263
11:30:54,879 --> 11:31:00,559
flag dash dash metadata with the key

16264
11:30:57,839 --> 11:31:03,199
value pair which in this example is

16265
11:31:00,559 --> 11:31:05,595
environment equals dev and then i'm also

16266
11:31:03,199 --> 11:31:08,319
going to add the zone of the instance

16267
11:31:05,595 --> 11:31:09,519
which is us east 1a and i'm going to hit

16268
11:31:08,319 --> 11:31:11,519
enter

16269
11:31:09,519 --> 11:31:14,159
and because i had a typo there i'm going

16270
11:31:11,519 --> 11:31:15,435
to go ahead and try that again using us

16271
11:31:14,160 --> 11:31:17,916
east 1b

16272
11:31:15,436 --> 11:31:20,639
i'm going to hit on enter

16273
11:31:17,915 --> 11:31:22,079
and success and so to verify that this

16274
11:31:20,639 --> 11:31:23,595
command has worked

16275
11:31:22,080 --> 11:31:25,840
i'm going to go ahead and query the

16276
11:31:23,595 --> 11:31:27,435
instance and i'm going to go under

16277
11:31:25,839 --> 11:31:29,519
attributes

16278
11:31:27,436 --> 11:31:31,840
i'm going to hit on enter and as you can

16279
11:31:29,519 --> 11:31:34,079
see here the environment endpoint has

16280
11:31:31,839 --> 11:31:37,359
been populated so i'm going to query

16281
11:31:34,080 --> 11:31:39,596
that and as expected dev is displaying

16282
11:31:37,360 --> 11:31:41,520
as the environment value now if i wanted

16283
11:31:39,595 --> 11:31:43,680
to double check that in the console i

16284
11:31:41,519 --> 11:31:46,239
can go over to the console i can drill

16285
11:31:43,680 --> 11:31:48,800
down into bowtie web server

16286
11:31:46,239 --> 11:31:51,115
and if i scroll down to the bottom under

16287
11:31:48,800 --> 11:31:55,040
custom metadata you can see the key

16288
11:31:51,116 --> 11:31:57,116
value pair here has m as the key and dev

16289
11:31:55,040 --> 11:31:58,959
being the value and so these are the

16290
11:31:57,116 --> 11:32:02,560
many different ways that you can query

16291
11:31:58,959 --> 11:32:04,959
metadata for any instances or projects

16292
11:32:02,559 --> 11:32:07,519
now i wanted to take a quick moment to

16293
11:32:04,959 --> 11:32:10,080
switch gears and talk about startup and

16294
11:32:07,519 --> 11:32:13,039
shutdown scripts now compute engine lets

16295
11:32:10,080 --> 11:32:16,000
you create and run your own startup and

16296
11:32:13,040 --> 11:32:18,319
shutdown scripts on your vm instance and

16297
11:32:16,000 --> 11:32:20,800
this allows you to perform automation

16298
11:32:18,319 --> 11:32:22,959
that can perform actions when starting

16299
11:32:20,800 --> 11:32:25,436
up such as installing software

16300
11:32:22,959 --> 11:32:27,519
performing updates or any other tasks

16301
11:32:25,436 --> 11:32:30,319
that are defined in the script and when

16302
11:32:27,519 --> 11:32:33,595
shutting down you can allow instances

16303
11:32:30,319 --> 11:32:36,480
time to clean up on perform tasks such

16304
11:32:33,595 --> 11:32:39,360
as exporting logs to cloud storage or

16305
11:32:36,480 --> 11:32:41,276
bigquery or syncing with other systems

16306
11:32:39,360 --> 11:32:43,199
and so i wanted to go ahead and show you

16307
11:32:41,275 --> 11:32:45,595
how this would work while combining

16308
11:32:43,199 --> 11:32:47,680
metadata into the script so i'm going to

16309
11:32:45,595 --> 11:32:48,399
go ahead and drill down into bow tie web

16310
11:32:47,680 --> 11:32:50,400
server

16311
11:32:48,400 --> 11:32:52,080
i'm going to click on edit and i'm going

16312
11:32:50,400 --> 11:32:54,480
to scroll down here

16313
11:32:52,080 --> 11:32:57,116
to custom metadata i'm going to click on

16314
11:32:54,480 --> 11:32:57,840
add item and under key i'm going to type

16315
11:32:57,116 --> 11:33:02,000
in

16316
11:32:57,839 --> 11:33:04,159
startup dash script and under value i'm

16317
11:33:02,000 --> 11:33:06,559
going to paste in my script i'm going to

16318
11:33:04,160 --> 11:33:08,240
just enlarge this here for a second and

16319
11:33:06,559 --> 11:33:10,720
i will be providing the script in the

16320
11:33:08,239 --> 11:33:13,436
github repository now just to break it

16321
11:33:10,720 --> 11:33:15,680
down this is a bash script i'm pulling

16322
11:33:13,436 --> 11:33:18,480
in a variable called name which will

16323
11:33:15,680 --> 11:33:21,040
query the instance name as well i have a

16324
11:33:18,480 --> 11:33:23,040
variable called zone which will query

16325
11:33:21,040 --> 11:33:25,436
the instance zone i'm going to be

16326
11:33:23,040 --> 11:33:27,756
installing an apache web server and it's

16327
11:33:25,436 --> 11:33:30,000
going to display on a web browser both

16328
11:33:27,756 --> 11:33:32,160
the server name and the zone that it's

16329
11:33:30,000 --> 11:33:34,559
in and so in order for me to see this

16330
11:33:32,160 --> 11:33:37,116
web page i also need to open up some

16331
11:33:34,559 --> 11:33:39,915
firewall rules and so an easy way to do

16332
11:33:37,116 --> 11:33:43,276
this would be to scroll up to firewalls

16333
11:33:39,915 --> 11:33:46,719
and simply click on allow http and allow

16334
11:33:43,275 --> 11:33:50,000
https traffic this will tag the instance

16335
11:33:46,720 --> 11:33:53,436
with some network tags as http server

16336
11:33:50,000 --> 11:33:56,319
and https server and create two separate

16337
11:33:53,436 --> 11:33:59,596
firewall rules that will allow traffic

16338
11:33:56,319 --> 11:34:01,360
for port 80 and port 443 so i'm going to

16339
11:33:59,595 --> 11:34:03,435
leave everything else as is i'm going to

16340
11:34:01,360 --> 11:34:05,756
scroll down to the bottom and click on

16341
11:34:03,436 --> 11:34:08,239
save okay and it took a few seconds

16342
11:34:05,756 --> 11:34:10,160
there but it did finish saving i'm going

16343
11:34:08,239 --> 11:34:12,639
to go ahead and go up to the top and

16344
11:34:10,160 --> 11:34:14,960
click on reset and this will perform a

16345
11:34:12,639 --> 11:34:17,199
hard reset on the instance and will

16346
11:34:14,959 --> 11:34:18,879
allow the startup script to take effect

16347
11:34:17,199 --> 11:34:20,319
so i'm going to click on reset it's

16348
11:34:18,879 --> 11:34:22,319
going to ask me if i really want to do

16349
11:34:20,319 --> 11:34:24,319
this and for the purposes of this

16350
11:34:22,319 --> 11:34:26,400
demonstration i'm going to click on

16351
11:34:24,319 --> 11:34:28,800
reset please note you should never do

16352
11:34:26,400 --> 11:34:31,275
this in production as it doesn't do a

16353
11:34:28,800 --> 11:34:33,360
clean shutdown on the operating system

16354
11:34:31,275 --> 11:34:36,720
but as this is an instance with nothing

16355
11:34:33,360 --> 11:34:38,639
on it i'm going to simply click on reset

16356
11:34:36,720 --> 11:34:41,436
now i'm going to head on back to the

16357
11:34:38,639 --> 11:34:44,239
main console for my vm instances and i'm

16358
11:34:41,436 --> 11:34:46,319
going to record my external ip i'm going

16359
11:34:44,239 --> 11:34:48,479
to open up a new browser i'm going to

16360
11:34:46,319 --> 11:34:51,199
zoom in for better viewing and i'm going

16361
11:34:48,480 --> 11:34:53,200
to paste in my ip address and hit enter

16362
11:34:51,199 --> 11:34:56,000
and as you can see here

16363
11:34:53,199 --> 11:34:58,559
i've used my startup script to display

16364
11:34:56,000 --> 11:35:00,879
not only this web page but i was able to

16365
11:34:58,559 --> 11:35:03,360
bring in metadata that i pulled using

16366
11:35:00,879 --> 11:35:05,680
variables and was able to display it

16367
11:35:03,360 --> 11:35:08,080
here in the browser and so before i end

16368
11:35:05,680 --> 11:35:10,800
this demonstration i wanted to show you

16369
11:35:08,080 --> 11:35:12,959
another way of using a startup script

16370
11:35:10,800 --> 11:35:14,800
but being able to pull it in from cloud

16371
11:35:12,959 --> 11:35:17,275
storage so i'm going to go back to the

16372
11:35:14,800 --> 11:35:20,160
navigation menu and i'm going to scroll

16373
11:35:17,275 --> 11:35:23,040
down to storage

16374
11:35:20,160 --> 11:35:25,756
here i will create a new bucket

16375
11:35:23,040 --> 11:35:27,436
and for now find a globally unique name

16376
11:35:25,756 --> 11:35:31,116
to name your bucket and i'm going to

16377
11:35:27,436 --> 11:35:32,639
call my bucket bowtie web server site

16378
11:35:31,116 --> 11:35:34,639
and i'm going to leave the rest as its

16379
11:35:32,639 --> 11:35:35,680
default and i'm going to simply click on

16380
11:35:34,639 --> 11:35:37,839
create

16381
11:35:35,680 --> 11:35:39,756
and if you have a globally unique name

16382
11:35:37,839 --> 11:35:42,319
for your bucket you will be prompted

16383
11:35:39,756 --> 11:35:44,319
with this page without any errors and

16384
11:35:42,319 --> 11:35:45,595
i'm going to go ahead and upload the

16385
11:35:44,319 --> 11:35:47,199
script

16386
11:35:45,595 --> 11:35:49,360
and you can find this script in the

16387
11:35:47,199 --> 11:35:51,595
github repository so i'm going to go

16388
11:35:49,360 --> 11:35:54,400
into my repo and i'm going to look for

16389
11:35:51,595 --> 11:35:56,720
bow tie start up final sh i'm going to

16390
11:35:54,400 --> 11:35:58,959
open it

16391
11:35:56,720 --> 11:36:00,959
and now that i have the script uploaded

16392
11:35:58,959 --> 11:36:02,639
i'm going to drill into this file so i

16393
11:36:00,959 --> 11:36:05,040
can get some more information that i

16394
11:36:02,639 --> 11:36:07,756
need for the instance and what i need

16395
11:36:05,040 --> 11:36:09,756
from here is to copy the uri so i'm

16396
11:36:07,756 --> 11:36:11,680
going to copy this to my clipboard and

16397
11:36:09,756 --> 11:36:13,756
i'm going to head back on over to

16398
11:36:11,680 --> 11:36:15,519
compute engine i'm going to drill down

16399
11:36:13,756 --> 11:36:17,436
into my instance

16400
11:36:15,519 --> 11:36:19,595
i'm going to click on edit at the top

16401
11:36:17,436 --> 11:36:22,239
and i'm going to scroll down to where it

16402
11:36:19,595 --> 11:36:25,115
says custom metadata and here i'm going

16403
11:36:22,239 --> 11:36:27,275
to remove the startup script metadata

16404
11:36:25,116 --> 11:36:30,800
and i'm going to add a new item and i'm

16405
11:36:27,275 --> 11:36:33,756
going to be adding startup dash script

16406
11:36:30,800 --> 11:36:36,720
dash url and in the value i'm going to

16407
11:36:33,756 --> 11:36:39,756
paste in the uri that i had just copied

16408
11:36:36,720 --> 11:36:42,160
over and this way on startup my instance

16409
11:36:39,756 --> 11:36:44,000
will use this startup script that's in

16410
11:36:42,160 --> 11:36:46,400
cloud storage so i'm going to scroll

16411
11:36:44,000 --> 11:36:48,319
down to the bottom click on save

16412
11:36:46,400 --> 11:36:50,239
and now i'm going to click on reset i'm

16413
11:36:48,319 --> 11:36:52,800
going to reset here i'm going to go back

16414
11:36:50,239 --> 11:36:55,040
to the main page for my vm instances and

16415
11:36:52,800 --> 11:36:56,960
i can see that my external ip hasn't

16416
11:36:55,040 --> 11:36:59,116
changed so i'm going to go back to my

16417
11:36:56,959 --> 11:37:02,239
open web browser and i'm going to click

16418
11:36:59,116 --> 11:37:04,400
on refresh and success and as you can

16419
11:37:02,239 --> 11:37:06,319
see here i've taken a whole bunch of

16420
11:37:04,400 --> 11:37:07,596
different variables including the

16421
11:37:06,319 --> 11:37:10,559
machine name

16422
11:37:07,595 --> 11:37:12,720
the environment variable the zone as

16423
11:37:10,559 --> 11:37:15,519
well as the project and i've displayed

16424
11:37:12,720 --> 11:37:17,680
it here in a simple website and although

16425
11:37:15,519 --> 11:37:19,839
you may not find this website

16426
11:37:17,680 --> 11:37:22,400
specifically useful in your production

16427
11:37:19,839 --> 11:37:24,879
environment this is just an idea to get

16428
11:37:22,400 --> 11:37:27,756
creative using default and custom

16429
11:37:24,879 --> 11:37:29,915
metadata along with a startup script

16430
11:37:27,756 --> 11:37:32,559
i've seen in some environments where

16431
11:37:29,915 --> 11:37:35,595
people have multiple web servers and

16432
11:37:32,559 --> 11:37:38,079
create a web page to display all the

16433
11:37:35,595 --> 11:37:40,959
specific web servers in their different

16434
11:37:38,080 --> 11:37:43,360
environments along with their ips their

16435
11:37:40,959 --> 11:37:45,519
data and their configurations and so

16436
11:37:43,360 --> 11:37:48,720
just as a recap we've gone through the

16437
11:37:45,519 --> 11:37:51,039
default and custom metadata and how to

16438
11:37:48,720 --> 11:37:53,436
query it in an instance we also went

16439
11:37:51,040 --> 11:37:55,915
through startup scripts and how to apply

16440
11:37:53,436 --> 11:37:58,480
them both locally and using cloud

16441
11:37:55,915 --> 11:38:01,199
storage and so i hope you have enjoyed

16442
11:37:58,480 --> 11:38:03,596
having fun with metadata and using them

16443
11:38:01,199 --> 11:38:05,680
in startup scripts such as this one i

16444
11:38:03,595 --> 11:38:08,399
also hope you find some fascinating use

16445
11:38:05,680 --> 11:38:11,275
cases in your current environments and

16446
11:38:08,400 --> 11:38:13,275
so before you go just a quick reminder

16447
11:38:11,275 --> 11:38:16,319
to delete any resources that you've

16448
11:38:13,275 --> 11:38:17,915
created to not incur any added costs and

16449
11:38:16,319 --> 11:38:20,159
so that's pretty much all i wanted to

16450
11:38:17,915 --> 11:38:22,719
cover with this demonstration so you can

16451
11:38:20,160 --> 11:38:24,070
now mark this as complete and let's move

16452
11:38:22,720 --> 11:38:28,000
on to the next one

16453
11:38:24,069 --> 11:38:30,319
[Music]

16454
11:38:28,000 --> 11:38:32,480
welcome back and in this lesson i'm

16455
11:38:30,319 --> 11:38:34,720
going to be discussing compute engine

16456
11:38:32,480 --> 11:38:37,276
billing now when it comes to pricing

16457
11:38:34,720 --> 11:38:39,520
with regards to compute engine i've only

16458
11:38:37,275 --> 11:38:41,839
gone over the fact that instances are

16459
11:38:39,519 --> 11:38:44,159
charged by the second after the first

16460
11:38:41,839 --> 11:38:46,719
minute but i never got into the depths

16461
11:38:44,160 --> 11:38:49,360
of billing and the various ways to save

16462
11:38:46,720 --> 11:38:52,319
money when using compute engine in this

16463
11:38:49,360 --> 11:38:55,199
lesson i will be unveiling how both

16464
11:38:52,319 --> 11:38:57,519
costs and discounts are broken down in

16465
11:38:55,199 --> 11:38:59,519
google cloud as it refers to the

16466
11:38:57,519 --> 11:39:01,915
resource based billing model and the

16467
11:38:59,519 --> 11:39:04,319
various savings that can be had when

16468
11:39:01,915 --> 11:39:07,115
using compute engine so with that being

16469
11:39:04,319 --> 11:39:10,400
said let's dive in

16470
11:39:07,116 --> 11:39:12,880
now each vcpu and each gigabyte of

16471
11:39:10,400 --> 11:39:15,360
memory on compute engine is built

16472
11:39:12,879 --> 11:39:17,519
separately rather than as part of a

16473
11:39:15,360 --> 11:39:20,000
single machine type you are still

16474
11:39:17,519 --> 11:39:22,559
creating instances using pre-defined

16475
11:39:20,000 --> 11:39:26,400
machine types but your bill shows them

16476
11:39:22,559 --> 11:39:29,275
as individual cpus and memory used per

16477
11:39:26,400 --> 11:39:31,756
hour and this is what google refers to

16478
11:39:29,275 --> 11:39:34,479
as resource-based billing which i will

16479
11:39:31,756 --> 11:39:38,959
get into in just a bit the billing model

16480
11:39:34,480 --> 11:39:42,240
applies to all vcpus gpus and memory

16481
11:39:38,959 --> 11:39:44,639
resources and are charged a minimum of

16482
11:39:42,239 --> 11:39:47,275
one minute for example if you run your

16483
11:39:44,639 --> 11:39:50,400
virtual machine for 30 seconds you will

16484
11:39:47,275 --> 11:39:53,519
be billed for one minute of usage after

16485
11:39:50,400 --> 11:39:56,400
one minute instances are charged in one

16486
11:39:53,519 --> 11:39:59,199
second increments instance up time is

16487
11:39:56,400 --> 11:40:01,200
another determining factor for cost and

16488
11:39:59,199 --> 11:40:03,519
is measured as the number of seconds

16489
11:40:01,199 --> 11:40:06,000
between when you start an instance and

16490
11:40:03,519 --> 11:40:08,319
when you stop an instance in other words

16491
11:40:06,000 --> 11:40:11,116
when your instance is in the terminated

16492
11:40:08,319 --> 11:40:13,275
state if an instance is idle but still

16493
11:40:11,116 --> 11:40:16,000
has a state of running it will be

16494
11:40:13,275 --> 11:40:18,720
charged for instance uptime but again

16495
11:40:16,000 --> 11:40:21,199
you will not be charged if your instance

16496
11:40:18,720 --> 11:40:24,559
is in a terminated state

16497
11:40:21,199 --> 11:40:27,755
now getting into reservations these are

16498
11:40:24,559 --> 11:40:30,879
designed to reserve the vm instances you

16499
11:40:27,756 --> 11:40:33,520
need so after you create a reservation

16500
11:40:30,879 --> 11:40:36,479
the reservation ensures that those

16501
11:40:33,519 --> 11:40:39,435
resources are always available for you

16502
11:40:36,480 --> 11:40:42,080
to use during the creation process you

16503
11:40:39,436 --> 11:40:44,880
can choose how a reservation is to be

16504
11:40:42,080 --> 11:40:47,520
used for example you can choose for a

16505
11:40:44,879 --> 11:40:50,639
reservation to be automatically applied

16506
11:40:47,519 --> 11:40:53,199
to any new or existing instances that

16507
11:40:50,639 --> 11:40:55,680
match the reservation's properties which

16508
11:40:53,199 --> 11:40:58,559
is the default behavior or you can

16509
11:40:55,680 --> 11:41:02,400
specify that reservation to be consumed

16510
11:40:58,559 --> 11:41:05,275
by a specific instance in all cases a vm

16511
11:41:02,400 --> 11:41:07,756
instance can only use a reservation if

16512
11:41:05,275 --> 11:41:10,159
its properties exactly match the

16513
11:41:07,756 --> 11:41:13,200
properties of the reservation after you

16514
11:41:10,160 --> 11:41:15,916
create a reservation you begin paying

16515
11:41:13,199 --> 11:41:17,915
for the reserved resources immediately

16516
11:41:15,915 --> 11:41:20,879
and they remain available for your

16517
11:41:17,915 --> 11:41:23,915
project to use indefinitely until the

16518
11:41:20,879 --> 11:41:26,399
reservation is deleted reservations are

16519
11:41:23,915 --> 11:41:30,000
great to ensure that your project has

16520
11:41:26,400 --> 11:41:33,200
resources for future increases in demand

16521
11:41:30,000 --> 11:41:36,080
including planned or unplanned spikes

16522
11:41:33,199 --> 11:41:38,319
backup and disaster recovery or for a

16523
11:41:36,080 --> 11:41:40,720
buffer when you're planning growth when

16524
11:41:38,319 --> 11:41:43,116
you no longer need a reservation you can

16525
11:41:40,720 --> 11:41:46,239
simply delete the reservation to stop

16526
11:41:43,116 --> 11:41:49,520
incurring charges each reservation like

16527
11:41:46,239 --> 11:41:52,559
normal vms are charged based on existing

16528
11:41:49,519 --> 11:41:55,359
on-demand rates which include sustained

16529
11:41:52,559 --> 11:41:57,756
use discounts and are eligible for

16530
11:41:55,360 --> 11:41:59,915
committed use discounts which i will be

16531
11:41:57,756 --> 11:42:02,480
getting into in just a bit now

16532
11:41:59,915 --> 11:42:03,915
purchasing reservations do come with

16533
11:42:02,480 --> 11:42:06,400
some caveats

16534
11:42:03,915 --> 11:42:08,319
reservations apply only to compute

16535
11:42:06,400 --> 11:42:11,040
engine data proc

16536
11:42:08,319 --> 11:42:13,915
and google kubernetes engine as well

16537
11:42:11,040 --> 11:42:17,275
reservations don't apply to shared core

16538
11:42:13,915 --> 11:42:18,719
machine types preemptable vms sole

16539
11:42:17,275 --> 11:42:21,680
tenant nodes

16540
11:42:18,720 --> 11:42:24,800
cloud sql and data flow now as i

16541
11:42:21,680 --> 11:42:27,840
explained before each vcpu and each

16542
11:42:24,800 --> 11:42:30,400
gigabyte of memory on compute engine is

16543
11:42:27,839 --> 11:42:33,199
built separately rather than as a part

16544
11:42:30,400 --> 11:42:36,480
of a single machine type and is billed

16545
11:42:33,199 --> 11:42:39,199
as individual cpus and memory used per

16546
11:42:36,480 --> 11:42:41,596
hour resource-based pricing allows

16547
11:42:39,199 --> 11:42:42,879
compute engine to apply sustained use

16548
11:42:41,595 --> 11:42:45,275
discounts

16549
11:42:42,879 --> 11:42:48,239
to all of your pre-defined machine type

16550
11:42:45,275 --> 11:42:51,040
usage in a region collectively

16551
11:42:48,239 --> 11:42:54,479
rather than to individual machine types

16552
11:42:51,040 --> 11:42:57,915
and this way vcpu and memory usage for

16553
11:42:54,480 --> 11:43:00,560
each machine type can receive any one of

16554
11:42:57,915 --> 11:43:03,595
the following discounts sustained use

16555
11:43:00,559 --> 11:43:06,159
discounts committed use discounts and

16556
11:43:03,595 --> 11:43:09,519
preemptable vms and i'd like to take a

16557
11:43:06,160 --> 11:43:12,240
moment to dive into a bit of detail on

16558
11:43:09,519 --> 11:43:15,519
each of these discount types starting

16559
11:43:12,239 --> 11:43:17,436
with sustained use discounts

16560
11:43:15,519 --> 11:43:20,799
now sustained use discounts are

16561
11:43:17,436 --> 11:43:23,916
automatic discounts for running specific

16562
11:43:20,800 --> 11:43:26,960
compute engine resources a significant

16563
11:43:23,915 --> 11:43:29,275
portion of the billing month for example

16564
11:43:26,959 --> 11:43:32,239
when you run one of these resources for

16565
11:43:29,275 --> 11:43:34,000
more than 25 percent of a month compute

16566
11:43:32,239 --> 11:43:36,879
engine automatically gives you a

16567
11:43:34,000 --> 11:43:39,436
discount for every incremental minute

16568
11:43:36,879 --> 11:43:41,915
that you use for that instance now the

16569
11:43:39,436 --> 11:43:44,319
following tables show the discounts

16570
11:43:41,915 --> 11:43:47,199
applied for the specific resources

16571
11:43:44,319 --> 11:43:51,756
described here now for the table on the

16572
11:43:47,199 --> 11:43:54,399
left for general purpose n2 and n2d

16573
11:43:51,756 --> 11:43:57,040
predefined and custom machine types and

16574
11:43:54,400 --> 11:43:59,916
for compute optimized machine types you

16575
11:43:57,040 --> 11:44:02,639
can receive a discount of up to 20

16576
11:43:59,915 --> 11:44:06,559
percent the table on the right shows

16577
11:44:02,639 --> 11:44:09,360
that for general purpose n1 predefined

16578
11:44:06,559 --> 11:44:12,239
and custom machine types as well as sole

16579
11:44:09,360 --> 11:44:15,199
tenant nodes and gpus you can get a

16580
11:44:12,239 --> 11:44:18,400
discount of up to 30 percent sustained

16581
11:44:15,199 --> 11:44:21,680
use discounts are applied automatically

16582
11:44:18,400 --> 11:44:23,840
to usage within a project separately for

16583
11:44:21,680 --> 11:44:26,400
each region so there is no action

16584
11:44:23,839 --> 11:44:28,559
required on your part to enable these

16585
11:44:26,400 --> 11:44:30,720
discounts now some notes that i wanted

16586
11:44:28,559 --> 11:44:33,756
to cover here is that sustained use

16587
11:44:30,720 --> 11:44:36,800
discounts automatically apply to vms

16588
11:44:33,756 --> 11:44:39,436
created by both google kubernetes engine

16589
11:44:36,800 --> 11:44:42,560
and compute engine as well they do not

16590
11:44:39,436 --> 11:44:45,275
apply to vms created using the app

16591
11:44:42,559 --> 11:44:48,319
engine flexible environment as well as

16592
11:44:45,275 --> 11:44:50,959
data flow and the e-2 machine types

16593
11:44:48,319 --> 11:44:54,159
sustained use discounts are applied on

16594
11:44:50,959 --> 11:44:57,756
incremental use after you reach certain

16595
11:44:54,160 --> 11:44:59,916
usage thresholds this means that you pay

16596
11:44:57,756 --> 11:45:02,480
only for the number of minutes that you

16597
11:44:59,915 --> 11:45:04,959
use an instance and compute engine

16598
11:45:02,480 --> 11:45:07,436
automatically gives you the best price

16599
11:45:04,959 --> 11:45:09,756
google truly believes that there's no

16600
11:45:07,436 --> 11:45:11,436
reason to run an instance for longer

16601
11:45:09,756 --> 11:45:14,319
than you need it

16602
11:45:11,436 --> 11:45:17,360
now sustained use discounts are applied

16603
11:45:14,319 --> 11:45:20,400
on incremental use after you reach

16604
11:45:17,360 --> 11:45:22,559
certain usage thresholds this means that

16605
11:45:20,400 --> 11:45:24,880
you pay only for the number of minutes

16606
11:45:22,559 --> 11:45:27,199
that you use an instance and compute

16607
11:45:24,879 --> 11:45:30,000
engine automatically gives you the best

16608
11:45:27,199 --> 11:45:32,799
price now consider a scenario where you

16609
11:45:30,000 --> 11:45:35,116
have two instances or sole tenant nodes

16610
11:45:32,800 --> 11:45:37,520
in the same region that have different

16611
11:45:35,116 --> 11:45:38,720
machine types and run at different times

16612
11:45:37,519 --> 11:45:40,079
of the month

16613
11:45:38,720 --> 11:45:42,720
compute engine

16614
11:45:40,080 --> 11:45:45,520
breaks down the number of vcpus and

16615
11:45:42,720 --> 11:45:48,319
amount of memory used across all

16616
11:45:45,519 --> 11:45:51,435
instances that use predefined machine

16617
11:45:48,319 --> 11:45:54,319
types and combines the resources to

16618
11:45:51,436 --> 11:45:57,360
qualify for the largest sustained usage

16619
11:45:54,319 --> 11:45:59,595
discounts possible now in this example

16620
11:45:57,360 --> 11:46:00,800
assume you run the following two

16621
11:45:59,595 --> 11:46:03,915
instances

16622
11:46:00,800 --> 11:46:06,319
in the us east one region during a month

16623
11:46:03,915 --> 11:46:10,159
for the first half you run an n1

16624
11:46:06,319 --> 11:46:12,400
standard four instance with four vcpus

16625
11:46:10,160 --> 11:46:14,480
and 15 gigabytes of memory for the

16626
11:46:12,400 --> 11:46:18,080
second half of the month you run a

16627
11:46:14,480 --> 11:46:22,160
larger and one standard 16 instance with

16628
11:46:18,080 --> 11:46:25,360
16 vcpus and 60 gigabytes of memory in

16629
11:46:22,160 --> 11:46:28,960
this scenario compute engine reorganizes

16630
11:46:25,360 --> 11:46:31,595
these machine types into individual vcpu

16631
11:46:28,959 --> 11:46:34,639
and memory resources and combines their

16632
11:46:31,595 --> 11:46:38,559
usage to create the following resources

16633
11:46:34,639 --> 11:46:40,559
for vcpus so because four vcpus were

16634
11:46:38,559 --> 11:46:43,040
being used for the whole month the

16635
11:46:40,559 --> 11:46:46,079
discount here would be thirty percent

16636
11:46:43,040 --> 11:46:48,480
the additional twelve vcpus were added

16637
11:46:46,080 --> 11:46:52,000
on week two in the month and so for

16638
11:46:48,480 --> 11:46:54,319
those 12 vcpus they would receive a 10

16639
11:46:52,000 --> 11:46:56,879
discount and this is how discounts are

16640
11:46:54,319 --> 11:46:59,275
applied when it comes to sustained use

16641
11:46:56,879 --> 11:47:02,479
discounts now moving on to the next

16642
11:46:59,275 --> 11:47:04,799
discount type is committed use discounts

16643
11:47:02,480 --> 11:47:08,080
so compute engine lets you purchase

16644
11:47:04,800 --> 11:47:11,756
committed use contracts in return for

16645
11:47:08,080 --> 11:47:13,360
deeply discounted prices for vm usage so

16646
11:47:11,756 --> 11:47:16,720
when you purchase a committed use

16647
11:47:13,360 --> 11:47:20,559
contract you purchase compute resource

16648
11:47:16,720 --> 11:47:24,000
which is comprised of vcpus memory

16649
11:47:20,559 --> 11:47:27,360
gpus and local ssds and you purchase

16650
11:47:24,000 --> 11:47:29,519
these resources at a discounted price in

16651
11:47:27,360 --> 11:47:32,480
return for committing to paying for

16652
11:47:29,519 --> 11:47:35,680
those resources for one year or three

16653
11:47:32,480 --> 11:47:38,800
years committed use discounts are ideal

16654
11:47:35,680 --> 11:47:41,360
for workloads with predictable resource

16655
11:47:38,800 --> 11:47:43,916
needs so if you know exactly what you're

16656
11:47:41,360 --> 11:47:46,480
going to use committed use discounts

16657
11:47:43,915 --> 11:47:49,360
would be a great option for this and the

16658
11:47:46,480 --> 11:47:52,240
discount is up to 57

16659
11:47:49,360 --> 11:47:55,040
for most resources like machine types or

16660
11:47:52,239 --> 11:47:58,000
gpus when it comes to memory optimized

16661
11:47:55,040 --> 11:48:00,000
machine types the discount is up to 70

16662
11:47:58,000 --> 11:48:02,800
percent now when you purchase a

16663
11:48:00,000 --> 11:48:05,680
committed use contract you can purchase

16664
11:48:02,800 --> 11:48:08,400
it for a single project and applies to a

16665
11:48:05,680 --> 11:48:10,800
single project by default or you can

16666
11:48:08,400 --> 11:48:13,520
purchase multiple contracts which you

16667
11:48:10,800 --> 11:48:16,720
can share across many projects by

16668
11:48:13,519 --> 11:48:19,115
enabling shared discounts once purchased

16669
11:48:16,720 --> 11:48:21,275
your billed monthly for the resources

16670
11:48:19,116 --> 11:48:23,520
you purchased for the duration of the

16671
11:48:21,275 --> 11:48:26,000
term you selected whether you use the

16672
11:48:23,519 --> 11:48:27,755
services or not if you have multiple

16673
11:48:26,000 --> 11:48:30,400
projects that share the same cloud

16674
11:48:27,756 --> 11:48:33,116
billing account you can enable committed

16675
11:48:30,400 --> 11:48:35,520
use discount sharing so that all of your

16676
11:48:33,116 --> 11:48:38,319
projects within that cloud billing

16677
11:48:35,519 --> 11:48:40,879
account share all of your committed use

16678
11:48:38,319 --> 11:48:44,080
discount contracts your sustained use

16679
11:48:40,879 --> 11:48:46,559
discounts are also pooled at the same

16680
11:48:44,080 --> 11:48:48,959
time now some caveats when it comes to

16681
11:48:46,559 --> 11:48:51,915
committed use discounts shared core

16682
11:48:48,959 --> 11:48:54,479
machines are excluded on this as well

16683
11:48:51,915 --> 11:48:57,199
you can purchase commitments only on a

16684
11:48:54,480 --> 11:48:59,680
per region basis if a reservation is

16685
11:48:57,199 --> 11:49:02,559
attached to a committed use discount the

16686
11:48:59,680 --> 11:49:05,040
reservation can't be deleted for the

16687
11:49:02,559 --> 11:49:07,595
duration of the commitment so please be

16688
11:49:05,040 --> 11:49:12,000
aware now to purchase a commitment for

16689
11:49:07,595 --> 11:49:14,639
gpus or local ssds you must purchase a

16690
11:49:12,000 --> 11:49:17,595
general purpose and one commitment and

16691
11:49:14,639 --> 11:49:20,479
lastly after you create a commitment you

16692
11:49:17,595 --> 11:49:23,275
cannot cancel it you must pay the agreed

16693
11:49:20,480 --> 11:49:25,200
upon monthly amount for the duration of

16694
11:49:23,275 --> 11:49:27,436
the commitment now committed use

16695
11:49:25,199 --> 11:49:29,839
discount recommendations give you

16696
11:49:27,436 --> 11:49:32,720
opportunities to optimize your compute

16697
11:49:29,839 --> 11:49:35,519
costs by analyzing your vm spending

16698
11:49:32,720 --> 11:49:37,840
trends with and without a committed use

16699
11:49:35,519 --> 11:49:40,159
discount contract by comparing these

16700
11:49:37,839 --> 11:49:42,639
numbers you can see how much you can

16701
11:49:40,160 --> 11:49:44,960
save each month with a committed use

16702
11:49:42,639 --> 11:49:47,756
contract and this can be found under the

16703
11:49:44,959 --> 11:49:49,839
recommendations tab on the home page in

16704
11:49:47,756 --> 11:49:52,080
the console and so i wanted to move on

16705
11:49:49,839 --> 11:49:55,679
to the last discount type which are

16706
11:49:52,080 --> 11:49:58,080
preemptable vms now preemptable vms are

16707
11:49:55,680 --> 11:50:01,519
up to eighty percent cheaper than

16708
11:49:58,080 --> 11:50:04,000
regular instances pricing is fixed and

16709
11:50:01,519 --> 11:50:06,479
you never have to worry about variable

16710
11:50:04,000 --> 11:50:08,959
pricing these prices can be found on the

16711
11:50:06,480 --> 11:50:11,040
link to instance pricing that i have

16712
11:50:08,959 --> 11:50:13,680
included in the lesson text a

16713
11:50:11,040 --> 11:50:17,360
preemptable vm is an instance that you

16714
11:50:13,680 --> 11:50:20,239
can create and run at a much lower price

16715
11:50:17,360 --> 11:50:22,639
than normal instances however compute

16716
11:50:20,239 --> 11:50:25,756
engine might stop or preempt these

16717
11:50:22,639 --> 11:50:29,360
instances if it requires access to those

16718
11:50:25,756 --> 11:50:32,080
resources for other tasks as preemptable

16719
11:50:29,360 --> 11:50:34,959
instances our access compute engine

16720
11:50:32,080 --> 11:50:37,756
capacity so their availability varies

16721
11:50:34,959 --> 11:50:40,159
with usage now generally compute engine

16722
11:50:37,756 --> 11:50:42,800
avoids preempting instances

16723
11:50:40,160 --> 11:50:46,320
but compute engine does not use an

16724
11:50:42,800 --> 11:50:48,560
instant cpu usage or other behavior to

16725
11:50:46,319 --> 11:50:50,639
determine whether or not to preempt it

16726
11:50:48,559 --> 11:50:53,360
now a crucial characteristic to know

16727
11:50:50,639 --> 11:50:56,080
about preemptable vms is that compute

16728
11:50:53,360 --> 11:50:58,720
engine always stops them after they run

16729
11:50:56,080 --> 11:51:01,276
for 24 hours and this is something to be

16730
11:50:58,720 --> 11:51:03,916
aware of for the exam preemptable

16731
11:51:01,275 --> 11:51:06,799
instances are finite compute engine

16732
11:51:03,915 --> 11:51:08,639
resources so they might not always be

16733
11:51:06,800 --> 11:51:11,360
available and if you happen to

16734
11:51:08,639 --> 11:51:13,680
accidentally spin up a preemptable vm

16735
11:51:11,360 --> 11:51:16,239
and you want to shut it down there is no

16736
11:51:13,680 --> 11:51:18,800
charge if it's running for less than 10

16737
11:51:16,239 --> 11:51:21,595
minutes now another thing to note is

16738
11:51:18,800 --> 11:51:24,960
that preemptable instances can't live

16739
11:51:21,595 --> 11:51:27,435
migrate to a regular vm instance or be

16740
11:51:24,959 --> 11:51:29,199
set to automatically restart when there

16741
11:51:27,436 --> 11:51:32,080
is a maintenance event due to the

16742
11:51:29,199 --> 11:51:34,559
limitations preemptable instances are

16743
11:51:32,080 --> 11:51:36,319
not covered by any service level

16744
11:51:34,559 --> 11:51:38,399
agreement and when it comes to the

16745
11:51:36,319 --> 11:51:40,879
google cloud free tier credits for

16746
11:51:38,400 --> 11:51:43,436
compute engine this does not apply to

16747
11:51:40,879 --> 11:51:46,079
preemptable instances so you're probably

16748
11:51:43,436 --> 11:51:49,360
asking when is a great time to use

16749
11:51:46,080 --> 11:51:51,520
preemptable vms well if your apps are

16750
11:51:49,360 --> 11:51:53,915
fault tolerant and can withstand

16751
11:51:51,519 --> 11:51:56,239
possible instance preemptions then

16752
11:51:53,915 --> 11:51:59,275
preemptable instances can reduce your

16753
11:51:56,239 --> 11:52:02,319
compute engine costs significantly for

16754
11:51:59,275 --> 11:52:04,720
example batch processing jobs can run on

16755
11:52:02,319 --> 11:52:07,519
preemptable instances if some of those

16756
11:52:04,720 --> 11:52:10,400
instances stop during processing the job

16757
11:52:07,519 --> 11:52:13,199
slows down but does not completely stop

16758
11:52:10,400 --> 11:52:16,400
preemptable instances create your batch

16759
11:52:13,199 --> 11:52:18,639
processing tasks without placing any

16760
11:52:16,400 --> 11:52:21,360
additional workload on your existing

16761
11:52:18,639 --> 11:52:24,080
instances and without requiring for you

16762
11:52:21,360 --> 11:52:26,319
to pay full price for additional normal

16763
11:52:24,080 --> 11:52:29,200
instances and since containers are

16764
11:52:26,319 --> 11:52:32,080
naturally stateless and fault tolerant

16765
11:52:29,199 --> 11:52:34,959
this makes containers an amazing fit for

16766
11:52:32,080 --> 11:52:38,000
preemptable vms so running preemptable

16767
11:52:34,959 --> 11:52:40,720
vms for google kubernetes engine is

16768
11:52:38,000 --> 11:52:42,400
another fantastic use case now it's

16769
11:52:40,720 --> 11:52:44,160
really critical that you have an

16770
11:52:42,400 --> 11:52:46,880
understanding for each different

16771
11:52:44,160 --> 11:52:49,040
discount type and when is a good time to

16772
11:52:46,879 --> 11:52:50,959
use each as you may be presented

16773
11:52:49,040 --> 11:52:52,879
different cost-effective solutions in

16774
11:52:50,959 --> 11:52:55,116
the exam and understanding these

16775
11:52:52,879 --> 11:52:57,595
discount types will prepare you to

16776
11:52:55,116 --> 11:53:00,400
answer them understanding the theory

16777
11:52:57,595 --> 11:53:02,879
behind this resource-based pricing model

16778
11:53:00,400 --> 11:53:04,720
all the available discount types along

16779
11:53:02,879 --> 11:53:07,199
with the types of workloads that are

16780
11:53:04,720 --> 11:53:09,840
good for each will guarantee that you

16781
11:53:07,199 --> 11:53:12,399
will become familiar with what types of

16782
11:53:09,839 --> 11:53:14,559
questions are being asked in the exam

16783
11:53:12,400 --> 11:53:17,436
and will also make you a better cloud

16784
11:53:14,559 --> 11:53:19,915
engineer as you will be able to spot

16785
11:53:17,436 --> 11:53:22,000
where you can save money and be able to

16786
11:53:19,915 --> 11:53:24,079
make the appropriate changes and so

16787
11:53:22,000 --> 11:53:26,480
that's pretty much all i wanted to cover

16788
11:53:24,080 --> 11:53:28,720
when it comes to compute engine billing

16789
11:53:26,480 --> 11:53:30,960
and its discount types so you can now

16790
11:53:28,720 --> 11:53:34,916
mark this lesson as complete and let's

16791
11:53:30,959 --> 11:53:34,915
move on to the next one

16792
11:53:36,400 --> 11:53:41,275
welcome back in this lesson i'm going to

16793
11:53:39,116 --> 11:53:44,160
be covering the fundamentals as it

16794
11:53:41,275 --> 11:53:46,079
pertains to storage these concepts are

16795
11:53:44,160 --> 11:53:48,640
needed to know in order to fully

16796
11:53:46,080 --> 11:53:50,800
understand the different google cloud

16797
11:53:48,639 --> 11:53:54,080
storage options that i will be diving

16798
11:53:50,800 --> 11:53:55,916
into later as well the exam expects that

16799
11:53:54,080 --> 11:53:58,400
you know the different types of storage

16800
11:53:55,915 --> 11:53:59,519
that's available for all the various

16801
11:53:58,400 --> 11:54:01,436
services

16802
11:53:59,519 --> 11:54:03,915
and so before i get into the different

16803
11:54:01,436 --> 11:54:06,239
types of storage i wanted to cover the

16804
11:54:03,915 --> 11:54:09,040
underlying theory behind it so with that

16805
11:54:06,239 --> 11:54:10,879
being said let's dive in

16806
11:54:09,040 --> 11:54:13,200
so i wanted to start off by going

16807
11:54:10,879 --> 11:54:16,239
through the three types of storage and

16808
11:54:13,199 --> 11:54:19,039
how data is presented to a user or to

16809
11:54:16,239 --> 11:54:22,000
the server there is block storage file

16810
11:54:19,040 --> 11:54:24,480
storage and object storage these types

16811
11:54:22,000 --> 11:54:27,040
of storage tie into the available

16812
11:54:24,480 --> 11:54:29,520
services that are available in google

16813
11:54:27,040 --> 11:54:31,756
cloud and they offer different options

16814
11:54:29,519 --> 11:54:33,915
for different types of workloads and i

16815
11:54:31,756 --> 11:54:36,000
will be going over each of these in a

16816
11:54:33,915 --> 11:54:38,959
bit of depth and so the first one i

16817
11:54:36,000 --> 11:54:41,275
wanted to touch on is block storage

16818
11:54:38,959 --> 11:54:44,159
now block storage is sometimes referred

16819
11:54:41,275 --> 11:54:46,400
to as block level storage and is a

16820
11:54:44,160 --> 11:54:49,840
technology that is used to store data

16821
11:54:46,400 --> 11:54:52,639
files on storage systems or cloud-based

16822
11:54:49,839 --> 11:54:55,359
storage environments block storage is

16823
11:54:52,639 --> 11:54:58,479
the fastest available storage type and

16824
11:54:55,360 --> 11:55:01,040
it is also efficient and reliable with

16825
11:54:58,480 --> 11:55:03,840
block storage files are split into

16826
11:55:01,040 --> 11:55:06,319
evenly sized blocks of data each with

16827
11:55:03,839 --> 11:55:08,799
its own unique identifier it is

16828
11:55:06,319 --> 11:55:11,839
presented to the operating system as

16829
11:55:08,800 --> 11:55:14,880
structureless raw data in the form of a

16830
11:55:11,839 --> 11:55:17,275
logical volume or a hard drive and the

16831
11:55:14,879 --> 11:55:22,239
operating system structures it with a

16832
11:55:17,275 --> 11:55:25,115
file system like ext3 or ext4 on linux

16833
11:55:22,239 --> 11:55:28,239
and ntfs for windows it would then mount

16834
11:55:25,116 --> 11:55:32,080
this volume or drive as the root volume

16835
11:55:28,239 --> 11:55:34,400
in linux or a c or d drive in windows

16836
11:55:32,080 --> 11:55:36,560
block storage is usually delivered on

16837
11:55:34,400 --> 11:55:39,680
physical media in the case of google

16838
11:55:36,559 --> 11:55:43,115
cloud it is delivered as either spinning

16839
11:55:39,680 --> 11:55:45,519
hard drives or solid state drives so in

16840
11:55:43,116 --> 11:55:47,840
google cloud you're presented with block

16841
11:55:45,519 --> 11:55:51,275
storage that consists of either

16842
11:55:47,839 --> 11:55:54,239
persistent disks or local ssd

16843
11:55:51,275 --> 11:55:56,720
which can both be mountable and bootable

16844
11:55:54,239 --> 11:55:59,436
block storage volumes can then be used

16845
11:55:56,720 --> 11:56:01,916
as your boot volumes for compute

16846
11:55:59,436 --> 11:56:04,080
instances in google cloud

16847
11:56:01,915 --> 11:56:06,719
installed with your operating system of

16848
11:56:04,080 --> 11:56:10,560
choice and structured so that your

16849
11:56:06,720 --> 11:56:12,720
operating system database or application

16850
11:56:10,559 --> 11:56:15,519
will then be able to consume it now

16851
11:56:12,720 --> 11:56:17,595
moving on to the second type of storage

16852
11:56:15,519 --> 11:56:20,559
is file storage

16853
11:56:17,595 --> 11:56:23,680
now file storage is also referred to as

16854
11:56:20,559 --> 11:56:26,159
file level or file based storage and is

16855
11:56:23,680 --> 11:56:29,595
normally storage that is presented to

16856
11:56:26,160 --> 11:56:32,320
users and applications as a traditional

16857
11:56:29,595 --> 11:56:35,680
network file system in other words the

16858
11:56:32,319 --> 11:56:38,559
user or application receives data

16859
11:56:35,680 --> 11:56:41,680
through directory trees folders and

16860
11:56:38,559 --> 11:56:44,720
files file storage also allows you to do

16861
11:56:41,680 --> 11:56:47,756
the same this functions similarly to a

16862
11:56:44,720 --> 11:56:50,080
local hard drive however a structure has

16863
11:56:47,756 --> 11:56:52,480
already been applied and cannot be

16864
11:56:50,080 --> 11:56:55,436
adjusted after the fact this type of

16865
11:56:52,480 --> 11:56:58,319
structure only has the capabilities of

16866
11:56:55,436 --> 11:57:00,639
being mountable but not bootable you

16867
11:56:58,319 --> 11:57:03,040
cannot install an operating system on

16868
11:57:00,639 --> 11:57:05,436
file storage as i said before the

16869
11:57:03,040 --> 11:57:08,480
structure has already been put in place

16870
11:57:05,436 --> 11:57:10,720
for you and is ready for you or your

16871
11:57:08,480 --> 11:57:13,040
application to consume due to this

16872
11:57:10,720 --> 11:57:15,520
structure the service that is serving

16873
11:57:13,040 --> 11:57:18,559
the file system has some underlying

16874
11:57:15,519 --> 11:57:21,275
software that can handle access rights

16875
11:57:18,559 --> 11:57:24,000
file sharing file locking and other

16876
11:57:21,275 --> 11:57:26,559
controls related to file storage in

16877
11:57:24,000 --> 11:57:29,360
google cloud this service that serves

16878
11:57:26,559 --> 11:57:31,915
this type of storage is known as cloud

16879
11:57:29,360 --> 11:57:35,915
file store and is usually presented over

16880
11:57:31,915 --> 11:57:39,360
the network to users in your vpc network

16881
11:57:35,915 --> 11:57:42,239
using the nfs protocol or in this case

16882
11:57:39,360 --> 11:57:44,480
nfs version 3. but i'll be diving into

16883
11:57:42,239 --> 11:57:46,799
that a little bit later and the last

16884
11:57:44,480 --> 11:57:48,240
storage type that i wanted to cover is

16885
11:57:46,800 --> 11:57:51,276
object storage

16886
11:57:48,239 --> 11:57:53,040
now object storage also referred to as

16887
11:57:51,275 --> 11:57:55,680
object-based storage

16888
11:57:53,040 --> 11:57:58,480
is a general term that refers to the way

16889
11:57:55,680 --> 11:58:01,519
in which we organize and work with units

16890
11:57:58,480 --> 11:58:04,240
of storage called objects and this is a

16891
11:58:01,519 --> 11:58:06,719
storage type that is a flat collection

16892
11:58:04,239 --> 11:58:09,595
of unstructured data and this type of

16893
11:58:06,720 --> 11:58:11,756
storage holds no structure like the

16894
11:58:09,595 --> 11:58:14,319
other two types of storage and is made

16895
11:58:11,756 --> 11:58:17,520
up of three characteristics the first

16896
11:58:14,319 --> 11:58:20,720
one is the data itself and this could be

16897
11:58:17,519 --> 11:58:23,519
anything from movies songs and even

16898
11:58:20,720 --> 11:58:26,319
photos of men in fancy bow ties the data

16899
11:58:23,519 --> 11:58:29,435
could also be binary data as well the

16900
11:58:26,319 --> 11:58:31,756
second characteristic is the metadata

16901
11:58:29,436 --> 11:58:34,400
and this is usually related to any

16902
11:58:31,756 --> 11:58:37,520
contextual information about what the

16903
11:58:34,400 --> 11:58:40,319
data is or anything that is relevant to

16904
11:58:37,519 --> 11:58:43,039
the data and the third characteristic is

16905
11:58:40,319 --> 11:58:45,519
a globally unique identifier and this

16906
11:58:43,040 --> 11:58:47,436
way it's possible to find the data

16907
11:58:45,519 --> 11:58:49,839
without having to know the physical

16908
11:58:47,436 --> 11:58:52,639
location of the data and this is what

16909
11:58:49,839 --> 11:58:55,275
allows object storage to be infinitely

16910
11:58:52,639 --> 11:58:58,000
scalable as it doesn't matter where the

16911
11:58:55,275 --> 11:59:00,239
object is stored this type of storage

16912
11:58:58,000 --> 11:59:03,436
can be found in google cloud and is

16913
11:59:00,239 --> 11:59:06,239
known as cloud storage cloud storage is

16914
11:59:03,436 --> 11:59:08,639
flat storage with a logical container

16915
11:59:06,239 --> 11:59:11,275
called a bucket that you put objects

16916
11:59:08,639 --> 11:59:13,839
into now although this type of storage

16917
11:59:11,275 --> 11:59:17,199
is not bootable using an open source

16918
11:59:13,839 --> 11:59:19,679
tool called fuse this storage type can

16919
11:59:17,199 --> 11:59:22,000
be mounted in google cloud and i will be

16920
11:59:19,680 --> 11:59:25,040
covering that a little bit later in the

16921
11:59:22,000 --> 11:59:27,595
cloud storage lesson but in most cases

16922
11:59:25,040 --> 11:59:30,400
object store is designed as the type of

16923
11:59:27,595 --> 11:59:32,559
storage that is not bootable or

16924
11:59:30,400 --> 11:59:34,800
mountable and because of the

16925
11:59:32,559 --> 11:59:37,680
characteristics of this storage

16926
11:59:34,800 --> 11:59:40,319
it allows object storage again to be

16927
11:59:37,680 --> 11:59:42,800
infinitely scalable and so these are the

16928
11:59:40,319 --> 11:59:46,080
three main types of storage that you

16929
11:59:42,800 --> 11:59:48,480
will need to know and understand as each

16930
11:59:46,080 --> 11:59:50,800
has its use cases so if you're looking

16931
11:59:48,480 --> 11:59:53,360
for high performance storage you will

16932
11:59:50,800 --> 11:59:55,596
always look to block storage to satisfy

16933
11:59:53,360 --> 11:59:58,559
your needs if you're looking to share

16934
11:59:55,595 --> 12:00:00,479
files across multiple systems or have

16935
11:59:58,559 --> 12:00:02,879
multiple applications

16936
12:00:00,480 --> 12:00:05,596
that need access to the same files and

16937
12:00:02,879 --> 12:00:07,839
directories then file storage might be

16938
12:00:05,595 --> 12:00:09,756
your best bet if you're looking to store

16939
12:00:07,839 --> 12:00:12,159
terabytes of pictures for a web

16940
12:00:09,756 --> 12:00:14,880
application and you don't want to worry

16941
12:00:12,160 --> 12:00:17,596
about scaling object storage will allow

16942
12:00:14,879 --> 12:00:19,519
you to read and write an infinite amount

16943
12:00:17,595 --> 12:00:21,839
of pictures that will meet your

16944
12:00:19,519 --> 12:00:24,319
requirements so now that we've covered

16945
12:00:21,839 --> 12:00:27,115
these storage types let's take a few

16946
12:00:24,319 --> 12:00:29,275
moments to discuss storage performance

16947
12:00:27,116 --> 12:00:31,596
terms now when discussing storage

16948
12:00:29,275 --> 12:00:34,400
performance there are some key terms to

16949
12:00:31,595 --> 12:00:37,680
understand that when used together

16950
12:00:34,400 --> 12:00:40,959
define the performance of your storage

16951
12:00:37,680 --> 12:00:41,915
first there is io which stands for input

16952
12:00:40,959 --> 12:00:44,479
output

16953
12:00:41,915 --> 12:00:46,799
and is a single read write request and

16954
12:00:44,480 --> 12:00:49,436
can be measured in block size and this

16955
12:00:46,800 --> 12:00:52,720
block size can vary anywhere from one

16956
12:00:49,436 --> 12:00:55,520
kilobyte to four megabytes and beyond

16957
12:00:52,720 --> 12:00:58,000
depending on your workload now q depth

16958
12:00:55,519 --> 12:01:01,115
when it comes to storage is the number

16959
12:00:58,000 --> 12:01:03,915
of pending input output requests

16960
12:01:01,116 --> 12:01:07,116
waiting to be performed on a disk io

16961
12:01:03,915 --> 12:01:09,275
requests become queued when reads or

16962
12:01:07,116 --> 12:01:12,080
writes are requested faster than they

16963
12:01:09,275 --> 12:01:14,479
can be processed by the disk when io

16964
12:01:12,080 --> 12:01:17,596
requests are queued the total amount of

16965
12:01:14,480 --> 12:01:20,560
time it takes to read or write data to

16966
12:01:17,595 --> 12:01:22,479
disk becomes significantly higher this

16967
12:01:20,559 --> 12:01:25,115
is where performance degradation can

16968
12:01:22,480 --> 12:01:27,360
occur and queue depth must be adjusted

16969
12:01:25,116 --> 12:01:29,116
accordingly now the next term is a

16970
12:01:27,360 --> 12:01:32,480
common touch point when it comes to

16971
12:01:29,116 --> 12:01:35,680
discussing storage performance on gcp

16972
12:01:32,480 --> 12:01:38,960
and on the exam which is iops and this

16973
12:01:35,680 --> 12:01:41,680
is a metric that stands for input output

16974
12:01:38,959 --> 12:01:44,159
operations per second this value

16975
12:01:41,680 --> 12:01:47,436
indicates how many different input or

16976
12:01:44,160 --> 12:01:50,880
output operations a device or group of

16977
12:01:47,436 --> 12:01:53,520
devices can perform in one second more

16978
12:01:50,879 --> 12:01:57,115
value in the iops signifies the

16979
12:01:53,519 --> 12:01:59,519
capability of executing more operations

16980
12:01:57,116 --> 12:02:01,756
per second and again this is a common

16981
12:01:59,519 --> 12:02:04,000
touch point that i will be diving into a

16982
12:02:01,756 --> 12:02:06,720
little bit later now next up is

16983
12:02:04,000 --> 12:02:08,800
throughput and this is the speed at

16984
12:02:06,720 --> 12:02:11,916
which the data is transferred in a

16985
12:02:08,800 --> 12:02:14,240
second and is most commonly measured in

16986
12:02:11,915 --> 12:02:16,239
megabytes per second this is going to be

16987
12:02:14,239 --> 12:02:18,879
another common topic that comes up

16988
12:02:16,239 --> 12:02:20,879
frequently when discussing storage on

16989
12:02:18,879 --> 12:02:23,915
gcp as well

16990
12:02:20,879 --> 12:02:27,115
latency is the measurement of delay

16991
12:02:23,915 --> 12:02:29,680
between the time data is requested when

16992
12:02:27,116 --> 12:02:32,240
the data starts being returned and is

16993
12:02:29,680 --> 12:02:35,040
measured in milliseconds so the time

16994
12:02:32,239 --> 12:02:37,595
each io request will take to complete

16995
12:02:35,040 --> 12:02:39,595
results in being your average latency

16996
12:02:37,595 --> 12:02:42,959
and the last two terms i wanted to bring

16997
12:02:39,595 --> 12:02:46,079
up is sequential and random access

16998
12:02:42,959 --> 12:02:48,720
sequential would be a large single file

16999
12:02:46,080 --> 12:02:51,200
like a video and random access would be

17000
12:02:48,720 --> 12:02:53,680
loading an application or an operating

17001
12:02:51,199 --> 12:02:55,839
system so lots of little files that are

17002
12:02:53,680 --> 12:02:59,040
all over the place it's obvious that

17003
12:02:55,839 --> 12:03:01,435
accessing data randomly is much slower

17004
12:02:59,040 --> 12:03:03,595
and less efficient than accessing it

17005
12:03:01,436 --> 12:03:06,000
sequentially and this can also affect

17006
12:03:03,595 --> 12:03:08,559
performance now why i bring up all these

17007
12:03:06,000 --> 12:03:10,559
terms is not about calculating the

17008
12:03:08,559 --> 12:03:13,435
average throughput but to give you a

17009
12:03:10,559 --> 12:03:16,639
holistic view on storage performance

17010
12:03:13,436 --> 12:03:19,040
as all these characteristics play a part

17011
12:03:16,639 --> 12:03:20,080
in defining the performance of your

17012
12:03:19,040 --> 12:03:22,879
storage

17013
12:03:20,080 --> 12:03:25,756
there is not one specific characteristic

17014
12:03:22,879 --> 12:03:28,159
that is responsible for disk performance

17015
12:03:25,756 --> 12:03:30,400
but all have a role in achieving the

17016
12:03:28,160 --> 12:03:32,800
highest performance possible

17017
12:03:30,400 --> 12:03:34,959
for your selected storage now i know

17018
12:03:32,800 --> 12:03:37,116
this is a lot of theory to take in but

17019
12:03:34,959 --> 12:03:39,199
this will all start to make more sense

17020
12:03:37,116 --> 12:03:41,596
when we dive into other parts of the

17021
12:03:39,199 --> 12:03:43,519
course where we will discuss disk

17022
12:03:41,595 --> 12:03:46,239
performance with all these

17023
12:03:43,519 --> 12:03:49,115
characteristics as it relates to compute

17024
12:03:46,239 --> 12:03:51,040
engine and other services that use

17025
12:03:49,116 --> 12:03:53,596
storage it is crucial to know the

17026
12:03:51,040 --> 12:03:56,480
storage types as well as the performance

17027
12:03:53,595 --> 12:03:59,435
characteristics as it will bring clarity

17028
12:03:56,480 --> 12:04:02,000
to questions in the exam and also give

17029
12:03:59,436 --> 12:04:04,400
you a better sense on how to increase

17030
12:04:02,000 --> 12:04:06,559
your storage performance in your work

17031
12:04:04,400 --> 12:04:08,800
environment and so that's pretty much

17032
12:04:06,559 --> 12:04:11,839
all i wanted to cover when it comes to

17033
12:04:08,800 --> 12:04:14,319
storage types and storage performance as

17034
12:04:11,839 --> 12:04:16,639
it pertains to storage as a whole so you

17035
12:04:14,319 --> 12:04:18,620
can now mark this lesson as complete and

17036
12:04:16,639 --> 12:04:22,559
let's move on to the next one

17037
12:04:18,620 --> 12:04:24,800
[Music]

17038
12:04:22,559 --> 12:04:27,115
welcome back and in this lesson i'm

17039
12:04:24,800 --> 12:04:29,756
going to be covering persistent disks

17040
12:04:27,116 --> 12:04:32,400
and local ssds i'm going to be getting

17041
12:04:29,756 --> 12:04:35,595
into the detail with the most commonly

17042
12:04:32,400 --> 12:04:39,520
used storage types for instances which

17043
12:04:35,595 --> 12:04:41,756
are both persistent disks and local ssds

17044
12:04:39,519 --> 12:04:44,239
this lesson will sift through all the

17045
12:04:41,756 --> 12:04:47,595
different types of persistent disks and

17046
12:04:44,239 --> 12:04:50,319
local ssds along with the performance of

17047
12:04:47,595 --> 12:04:53,115
each knowing what type of disk to use

17048
12:04:50,319 --> 12:04:56,159
for your instance and how to increase

17049
12:04:53,116 --> 12:04:58,240
disk performance shows up on the exam

17050
12:04:56,160 --> 12:05:01,680
and so i want to make sure to cover it

17051
12:04:58,239 --> 12:05:04,879
in detail and leave no stone unturned so

17052
12:05:01,680 --> 12:05:08,319
with that being said let's dive in now

17053
12:05:04,879 --> 12:05:10,719
persistent disks and local ssds are the

17054
12:05:08,319 --> 12:05:11,839
two available types of block storage

17055
12:05:10,720 --> 12:05:14,160
devices

17056
12:05:11,839 --> 12:05:16,799
available in google cloud and the

17057
12:05:14,160 --> 12:05:19,756
determining factor of what you will use

17058
12:05:16,800 --> 12:05:22,319
for your particular scenario will depend

17059
12:05:19,756 --> 12:05:24,800
on your use case and the specific

17060
12:05:22,319 --> 12:05:27,839
characteristics that you require from

17061
12:05:24,800 --> 12:05:30,720
each storage medium now by default each

17062
12:05:27,839 --> 12:05:33,519
compute engine instance has a single

17063
12:05:30,720 --> 12:05:35,756
boot persistent disk that contains the

17064
12:05:33,519 --> 12:05:38,639
operating system when you require

17065
12:05:35,756 --> 12:05:41,436
additional storage space you can add one

17066
12:05:38,639 --> 12:05:44,959
or more additional persistent disks or

17067
12:05:41,436 --> 12:05:47,200
local ssds to your instance and i will

17068
12:05:44,959 --> 12:05:49,595
be going through these storage options

17069
12:05:47,199 --> 12:05:52,239
along with their characteristics now as

17070
12:05:49,595 --> 12:05:55,519
you can see here persistent disks and

17071
12:05:52,239 --> 12:05:58,559
local ssds come in a slew of different

17072
12:05:55,519 --> 12:06:01,519
types as well with persistent disks they

17073
12:05:58,559 --> 12:06:04,239
are available in both zonal and regional

17074
12:06:01,519 --> 12:06:06,799
options so starting off with persistent

17075
12:06:04,239 --> 12:06:09,115
disks you have three different types you

17076
12:06:06,800 --> 12:06:11,436
can choose from as well you have the

17077
12:06:09,116 --> 12:06:13,680
flexibility of choosing from two

17078
12:06:11,436 --> 12:06:15,436
different geographic options when it

17079
12:06:13,680 --> 12:06:17,840
comes to the redundancy of your

17080
12:06:15,436 --> 12:06:20,800
persistent disks and i will be covering

17081
12:06:17,839 --> 12:06:23,519
the zonal and regional options in detail

17082
12:06:20,800 --> 12:06:26,000
in just a bit now persistent disks are

17083
12:06:23,519 --> 12:06:28,879
durable network storage devices

17084
12:06:26,000 --> 12:06:31,436
that your instances can access like

17085
12:06:28,879 --> 12:06:34,239
physical disks in a computer so these

17086
12:06:31,436 --> 12:06:36,800
are not physically attached disks but

17087
12:06:34,239 --> 12:06:39,199
network disks that are connected over

17088
12:06:36,800 --> 12:06:42,000
google's internal network persistent

17089
12:06:39,199 --> 12:06:44,639
disks are independent of your instance

17090
12:06:42,000 --> 12:06:46,959
and can persist after your instance has

17091
12:06:44,639 --> 12:06:49,756
been terminated and this can be done by

17092
12:06:46,959 --> 12:06:52,239
turning on this flag upon creation you

17093
12:06:49,756 --> 12:06:54,880
can even detach your disk and move it to

17094
12:06:52,239 --> 12:06:56,959
other instances when you need to scaling

17095
12:06:54,879 --> 12:07:00,079
persistent disks can be done

17096
12:06:56,959 --> 12:07:02,720
automatically and on the fly by using

17097
12:07:00,080 --> 12:07:05,040
the disk resize feature and this gives

17098
12:07:02,720 --> 12:07:07,360
you the flexibility to resize your

17099
12:07:05,040 --> 12:07:10,720
current persistent disks with no

17100
12:07:07,360 --> 12:07:12,720
downtime and even add additional disks

17101
12:07:10,720 --> 12:07:15,916
to your instance for additional

17102
12:07:12,720 --> 12:07:18,880
performance and storage persistent disks

17103
12:07:15,915 --> 12:07:21,199
are also encrypted by default and google

17104
12:07:18,879 --> 12:07:24,319
also gives you the option of using your

17105
12:07:21,199 --> 12:07:28,159
own custom keys each persistent disk can

17106
12:07:24,319 --> 12:07:32,000
be up to 64 terabytes in size and most

17107
12:07:28,160 --> 12:07:36,480
instances can have up to 128 persistent

17108
12:07:32,000 --> 12:07:39,116
disks and up to 257 terabytes of total

17109
12:07:36,480 --> 12:07:41,840
persistent disk space attached and just

17110
12:07:39,116 --> 12:07:45,200
as a note share core machine types are

17111
12:07:41,839 --> 12:07:48,399
limited to 16 persistent disks and 3

17112
12:07:45,199 --> 12:07:49,839
terabytes of total persistent disk space

17113
12:07:48,400 --> 12:07:52,639
and so now that i've gone through the

17114
12:07:49,839 --> 12:07:55,435
details of persistent disks i wanted to

17115
12:07:52,639 --> 12:07:58,159
dive into the two geographic options

17116
12:07:55,436 --> 12:08:01,040
that's available for persistent disks

17117
12:07:58,160 --> 12:08:03,360
first starting with zonal now zonal

17118
12:08:01,040 --> 12:08:06,319
persistent disks are disks that are

17119
12:08:03,360 --> 12:08:08,800
available in one zone in one region

17120
12:08:06,319 --> 12:08:11,680
these disks are the most commonly used

17121
12:08:08,800 --> 12:08:15,040
persistent disks for general day-to-day

17122
12:08:11,680 --> 12:08:17,519
usage and used for those whose workloads

17123
12:08:15,040 --> 12:08:19,756
are not sensitive to specific zone

17124
12:08:17,519 --> 12:08:22,000
outages they are redundant within the

17125
12:08:19,756 --> 12:08:24,880
zone you've created them in but cannot

17126
12:08:22,000 --> 12:08:27,275
survive an outage of that zone and may

17127
12:08:24,879 --> 12:08:29,915
be subjected to data loss if that

17128
12:08:27,275 --> 12:08:32,639
specific zone is affected and this is

17129
12:08:29,915 --> 12:08:35,435
where snapshots should be a part of your

17130
12:08:32,639 --> 12:08:38,000
high availability strategy when using

17131
12:08:35,436 --> 12:08:41,040
zonal persistent disks snapshots are

17132
12:08:38,000 --> 12:08:43,519
incremental and can be taken even if you

17133
12:08:41,040 --> 12:08:45,840
snapshot disks that are attached to

17134
12:08:43,519 --> 12:08:49,115
running instances and i'll be going into

17135
12:08:45,839 --> 12:08:52,319
detail about snapshots in a later lesson

17136
12:08:49,116 --> 12:08:54,639
zonal persistent disks can also be used

17137
12:08:52,319 --> 12:08:57,595
with any machine type including

17138
12:08:54,639 --> 12:08:59,839
pre-defined shared core and custom

17139
12:08:57,595 --> 12:09:02,239
machine types now when it comes to

17140
12:08:59,839 --> 12:09:04,879
regional persistent disks they have

17141
12:09:02,239 --> 12:09:07,839
storage qualities that are similar to

17142
12:09:04,879 --> 12:09:10,959
zonal persistent disks however regional

17143
12:09:07,839 --> 12:09:14,000
persistent disks provide durable storage

17144
12:09:10,959 --> 12:09:16,479
and replication of data between two

17145
12:09:14,000 --> 12:09:18,959
zones in the same region if you are

17146
12:09:16,480 --> 12:09:21,520
designing systems that require high

17147
12:09:18,959 --> 12:09:24,000
availability on compute engine you

17148
12:09:21,519 --> 12:09:27,275
should use regional persistent disks

17149
12:09:24,000 --> 12:09:29,519
combined with snapshots for durability

17150
12:09:27,275 --> 12:09:31,915
regional persistent disks are also

17151
12:09:29,519 --> 12:09:34,719
designed to work with regional managed

17152
12:09:31,915 --> 12:09:37,435
instance groups in the unlikely event of

17153
12:09:34,720 --> 12:09:39,916
a zonal outage you can usually fail over

17154
12:09:37,436 --> 12:09:42,959
your workload running on regional

17155
12:09:39,915 --> 12:09:45,839
persistent disks to another zone by

17156
12:09:42,959 --> 12:09:48,400
simply using the force attached flag

17157
12:09:45,839 --> 12:09:50,479
regional persistent disks are slower

17158
12:09:48,400 --> 12:09:53,200
than zonal persistent disks and should

17159
12:09:50,480 --> 12:09:56,000
be taken into consideration when write

17160
12:09:53,199 --> 12:09:59,039
performance is less critical than data

17161
12:09:56,000 --> 12:10:01,436
redundancy across multiple zones now

17162
12:09:59,040 --> 12:10:04,480
noting a couple of caveats here when it

17163
12:10:01,436 --> 12:10:07,275
comes to disk limits regional persistent

17164
12:10:04,480 --> 12:10:09,756
disks are similar to zonal persistent

17165
12:10:07,275 --> 12:10:12,799
disks however regional standard

17166
12:10:09,756 --> 12:10:15,520
persistent disks have a 200 gigabyte

17167
12:10:12,800 --> 12:10:18,560
size minimum and may be a major factor

17168
12:10:15,519 --> 12:10:20,799
when it comes to cost so please be aware

17169
12:10:18,559 --> 12:10:23,756
as well you can't use regional

17170
12:10:20,800 --> 12:10:26,319
persistent disks with memory optimized

17171
12:10:23,756 --> 12:10:29,360
machine types or compute optimized

17172
12:10:26,319 --> 12:10:32,080
machine types now these two geographic

17173
12:10:29,360 --> 12:10:34,160
options are available for all three

17174
12:10:32,080 --> 12:10:37,040
persistent disk types whose

17175
12:10:34,160 --> 12:10:38,880
characteristics i will dive into now

17176
12:10:37,040 --> 12:10:41,200
starting off with the standard

17177
12:10:38,879 --> 12:10:44,239
persistent disk type also known in

17178
12:10:41,199 --> 12:10:47,275
google cloud as pd standard now these

17179
12:10:44,239 --> 12:10:49,360
persistent disks are backed by standard

17180
12:10:47,275 --> 12:10:52,239
hard disk drives and these are your

17181
12:10:49,360 --> 12:10:54,480
standard spinning hard disk drives and

17182
12:10:52,239 --> 12:10:56,799
allows google cloud to give a cost

17183
12:10:54,480 --> 12:10:59,436
effective solution for your specific

17184
12:10:56,800 --> 12:11:01,596
needs standard persistent disks are

17185
12:10:59,436 --> 12:11:04,880
great for large data processing

17186
12:11:01,595 --> 12:11:08,319
workloads that primarily use sequential

17187
12:11:04,879 --> 12:11:11,199
ios now as explained earlier sequential

17188
12:11:08,319 --> 12:11:13,915
access would be accessing larger files

17189
12:11:11,199 --> 12:11:16,879
and would require less work by the hard

17190
12:11:13,915 --> 12:11:18,799
drive thus decreasing latency as there

17191
12:11:16,879 --> 12:11:21,519
are physical moving parts in this hard

17192
12:11:18,800 --> 12:11:24,240
drive this would allow the disc to do

17193
12:11:21,519 --> 12:11:26,639
the least amount of work as possible and

17194
12:11:24,239 --> 12:11:29,519
therefore making it the most efficient

17195
12:11:26,639 --> 12:11:31,839
as possible and therefore sequential ios

17196
12:11:29,519 --> 12:11:34,639
are best suited for this type of

17197
12:11:31,839 --> 12:11:37,199
persistent disk and again this is the

17198
12:11:34,639 --> 12:11:39,839
lowest price persistent disks out of all

17199
12:11:37,199 --> 12:11:41,680
the persistent disk types now stepping

17200
12:11:39,839 --> 12:11:44,079
into the performance of standard

17201
12:11:41,680 --> 12:11:46,160
persistent disks for just a second

17202
12:11:44,080 --> 12:11:49,276
please remember that iops and throughput

17203
12:11:46,160 --> 12:11:52,800
performance depends on disk size

17204
12:11:49,275 --> 12:11:55,519
instance vcpu count and i o block size

17205
12:11:52,800 --> 12:11:57,840
among other factors and so this table

17206
12:11:55,519 --> 12:12:00,399
here along with the subsequent tables

17207
12:11:57,839 --> 12:12:03,039
you will see later are average speeds

17208
12:12:00,400 --> 12:12:05,520
that google has deemed optimum for these

17209
12:12:03,040 --> 12:12:08,400
specific disk types they cover the

17210
12:12:05,519 --> 12:12:10,959
maximum sustained iops as well as the

17211
12:12:08,400 --> 12:12:13,680
maximum sustained throughput along with

17212
12:12:10,959 --> 12:12:16,479
the granular breakdown of each here you

17213
12:12:13,680 --> 12:12:19,680
can see the differences between both the

17214
12:12:16,480 --> 12:12:22,160
zonal and regional standard pd and as

17215
12:12:19,680 --> 12:12:25,275
you can see here in the table the zonal

17216
12:12:22,160 --> 12:12:27,200
standard pd and the regional standard pd

17217
12:12:25,275 --> 12:12:29,360
are pretty much the same when it comes

17218
12:12:27,199 --> 12:12:31,435
to most of these metrics but when you

17219
12:12:29,360 --> 12:12:34,080
look closely at the read iops per

17220
12:12:31,436 --> 12:12:37,840
instance this is where they differ where

17221
12:12:34,080 --> 12:12:40,240
the zonal standard pd has a higher read

17222
12:12:37,839 --> 12:12:42,399
iops per instance than the regional

17223
12:12:40,239 --> 12:12:45,360
standard pd and this is because the

17224
12:12:42,400 --> 12:12:48,000
regional standard pd is accessing two

17225
12:12:45,360 --> 12:12:50,480
different disks in two separate zones

17226
12:12:48,000 --> 12:12:52,720
and so the latency will be higher the

17227
12:12:50,480 --> 12:12:55,436
same thing goes for right throughput per

17228
12:12:52,720 --> 12:12:58,559
instance and so this would be a decision

17229
12:12:55,436 --> 12:13:00,480
between high availability versus speed

17230
12:12:58,559 --> 12:13:03,519
moving on to the next type of persistent

17231
12:13:00,480 --> 12:13:06,319
disk is the balanced persistent disk in

17232
12:13:03,519 --> 12:13:09,519
google cloud known as pd balance this

17233
12:13:06,319 --> 12:13:12,400
disk type is the alternative to the ssd

17234
12:13:09,519 --> 12:13:15,680
persistent disks that balance both

17235
12:13:12,400 --> 12:13:18,880
performance and cost as this disk type

17236
12:13:15,680 --> 12:13:21,436
has the same maximum iops as the ssd

17237
12:13:18,879 --> 12:13:24,319
persistent disk type but holds a lower

17238
12:13:21,436 --> 12:13:26,639
iops per gigabyte and so this disk is

17239
12:13:24,319 --> 12:13:29,116
designed for general purpose use the

17240
12:13:26,639 --> 12:13:32,319
price for this disk also falls in

17241
12:13:29,116 --> 12:13:34,800
between the standard and the ssd

17242
12:13:32,319 --> 12:13:36,959
persistent disks so this is basically

17243
12:13:34,800 --> 12:13:40,319
your middle of the road disk when you're

17244
12:13:36,959 --> 12:13:42,639
trying to decide between price and speed

17245
12:13:40,319 --> 12:13:45,360
moving straight into performance i put

17246
12:13:42,639 --> 12:13:48,000
the standard pd metric here so that you

17247
12:13:45,360 --> 12:13:50,480
can see a side-by-side comparison

17248
12:13:48,000 --> 12:13:53,116
between the balance pd and the standard

17249
12:13:50,480 --> 12:13:55,276
pd and as you can see here when it comes

17250
12:13:53,116 --> 12:13:58,560
to the metrics under the maximum

17251
12:13:55,275 --> 12:14:01,040
sustained iops the balance pd is

17252
12:13:58,559 --> 12:14:04,079
significantly higher than the standard

17253
12:14:01,040 --> 12:14:06,639
pd in both the zonal and regional

17254
12:14:04,080 --> 12:14:08,720
options as well looking at the maximum

17255
12:14:06,639 --> 12:14:11,436
sustained throughput the read write

17256
12:14:08,720 --> 12:14:13,595
throughput per gigabyte is a little over

17257
12:14:11,436 --> 12:14:16,080
two times faster and the right

17258
12:14:13,595 --> 12:14:18,639
throughput per instance is three times

17259
12:14:16,080 --> 12:14:21,840
faster so quite a bit of jump from the

17260
12:14:18,639 --> 12:14:24,720
standard pd to the balance pd and moving

17261
12:14:21,839 --> 12:14:27,755
on to the last persistent disk type is

17262
12:14:24,720 --> 12:14:31,436
the ssd persistent disk type also known

17263
12:14:27,756 --> 12:14:33,436
in google cloud as a pd ssd and these

17264
12:14:31,436 --> 12:14:34,639
are the fastest persistent disks that

17265
12:14:33,436 --> 12:14:36,480
are available

17266
12:14:34,639 --> 12:14:38,639
and are great for enterprise

17267
12:14:36,480 --> 12:14:41,756
applications and high performance

17268
12:14:38,639 --> 12:14:44,479
databases that demand lower latency and

17269
12:14:41,756 --> 12:14:47,520
more iops so this would be great for

17270
12:14:44,480 --> 12:14:50,000
transactional databases or applications

17271
12:14:47,519 --> 12:14:53,595
that require demanding and near

17272
12:14:50,000 --> 12:14:56,160
real-time performance the pd ssds have a

17273
12:14:53,595 --> 12:14:58,959
single digit millisecond latency and

17274
12:14:56,160 --> 12:15:01,116
because of this comes at a higher cost

17275
12:14:58,959 --> 12:15:03,116
and therefore is the highest price

17276
12:15:01,116 --> 12:15:05,436
persistent disk moving on to the

17277
12:15:03,116 --> 12:15:08,160
performance of this persistent disk this

17278
12:15:05,436 --> 12:15:10,880
disk type is five times faster when it

17279
12:15:08,160 --> 12:15:14,400
comes to read iops per gigabyte than the

17280
12:15:10,879 --> 12:15:16,959
balance pd as well as five times faster

17281
12:15:14,400 --> 12:15:19,040
for the right iops per gigabyte and so

17282
12:15:16,959 --> 12:15:22,400
the table here on the left shows the

17283
12:15:19,040 --> 12:15:25,040
performance for the pd ssd and the table

17284
12:15:22,400 --> 12:15:28,000
on the right shows the performance of

17285
12:15:25,040 --> 12:15:30,400
both the standard pd and the balance pd

17286
12:15:28,000 --> 12:15:33,040
and so here you can see the difference

17287
12:15:30,400 --> 12:15:35,756
moving from the standard pd over to the

17288
12:15:33,040 --> 12:15:37,840
ssd pd the read write throughput per

17289
12:15:35,756 --> 12:15:41,200
instance stays the same from the

17290
12:15:37,839 --> 12:15:43,595
standard pd all the way up to the ssd pd

17291
12:15:41,199 --> 12:15:45,755
but where the ssd outperforms all the

17292
12:15:43,595 --> 12:15:48,000
other ones is through the read write

17293
12:15:45,756 --> 12:15:50,559
throughput per gigabyte it's one and a

17294
12:15:48,000 --> 12:15:52,800
half times faster than the balance pd

17295
12:15:50,559 --> 12:15:55,680
and four times faster than the standard

17296
12:15:52,800 --> 12:15:58,480
pd and again you will also notice a drop

17297
12:15:55,680 --> 12:16:00,720
in performance from the zonal option to

17298
12:15:58,480 --> 12:16:03,040
the regional option and so this is the

17299
12:16:00,720 --> 12:16:05,200
end of part one of this lesson as it

17300
12:16:03,040 --> 12:16:06,959
started to get a little bit long and so

17301
12:16:05,199 --> 12:16:09,360
whenever you're ready you can join me in

17302
12:16:06,959 --> 12:16:12,159
part two where i will be starting

17303
12:16:09,360 --> 12:16:14,160
immediately from the end of part one so

17304
12:16:12,160 --> 12:16:15,470
you can complete this video and i will

17305
12:16:14,160 --> 12:16:19,360
see you in the next

17306
12:16:15,470 --> 12:16:21,840
[Music]

17307
12:16:19,360 --> 12:16:24,959
welcome back this is part two of the

17308
12:16:21,839 --> 12:16:26,879
persistent disks and local ssds lesson

17309
12:16:24,959 --> 12:16:29,436
and we will be starting exactly where we

17310
12:16:26,879 --> 12:16:32,000
left off in part one so with that being

17311
12:16:29,436 --> 12:16:34,720
said let's dive in and so now that i've

17312
12:16:32,000 --> 12:16:36,400
covered all the persistent disk types i

17313
12:16:34,720 --> 12:16:39,520
wanted to move into discussing the

17314
12:16:36,400 --> 12:16:42,560
characteristics of the local ssd local

17315
12:16:39,519 --> 12:16:45,755
ssds are physically attached to the

17316
12:16:42,559 --> 12:16:48,879
server that hosts your vm instance local

17317
12:16:45,756 --> 12:16:51,200
ssds have higher throughput and lower

17318
12:16:48,879 --> 12:16:53,519
latency than any of the available

17319
12:16:51,199 --> 12:16:56,079
persistent disk options and again this

17320
12:16:53,519 --> 12:16:58,159
is because it's physically attached and

17321
12:16:56,080 --> 12:17:00,319
the data doesn't have to travel over the

17322
12:16:58,160 --> 12:17:03,276
network now the crucial thing to know

17323
12:17:00,319 --> 12:17:07,275
about local ssds is that the data you

17324
12:17:03,275 --> 12:17:10,479
store on a local ssd persists only until

17325
12:17:07,275 --> 12:17:13,040
the instance is stopped or deleted once

17326
12:17:10,480 --> 12:17:15,520
the instance is stopped or deleted your

17327
12:17:13,040 --> 12:17:19,239
data will be gone and there is no chance

17328
12:17:15,519 --> 12:17:22,959
of getting it back now each local ssd is

17329
12:17:19,239 --> 12:17:27,519
375 gigabytes in size but you can attach

17330
12:17:22,959 --> 12:17:30,720
a maximum of 24 local ssd partitions for

17331
12:17:27,519 --> 12:17:34,239
a total of 9 terabytes per instance

17332
12:17:30,720 --> 12:17:37,595
local ssds are designed to offer very

17333
12:17:34,239 --> 12:17:39,915
high iops and very low latency and this

17334
12:17:37,595 --> 12:17:43,040
is great for when you need a fast

17335
12:17:39,915 --> 12:17:46,319
scratch disk or a cache and you don't

17336
12:17:43,040 --> 12:17:49,756
want to use instance memory local ssds

17337
12:17:46,319 --> 12:17:52,319
are also available in two flavors scuzzy

17338
12:17:49,756 --> 12:17:53,436
and mvme now for those of you who are

17339
12:17:52,319 --> 12:17:56,239
unaware

17340
12:17:53,436 --> 12:17:58,800
scuzzy is an older protocol and made

17341
12:17:56,239 --> 12:18:02,239
specifically for hard drives it also

17342
12:17:58,800 --> 12:18:05,436
holds the limitation of having one queue

17343
12:18:02,239 --> 12:18:09,040
for commands nvme on the other hand also

17344
12:18:05,436 --> 12:18:12,239
known as non-volatile memory express is

17345
12:18:09,040 --> 12:18:15,116
a newer protocol and is designed for the

17346
12:18:12,239 --> 12:18:19,595
specific use of flash memory and

17347
12:18:15,116 --> 12:18:22,720
designed to have up to 64 000 qs as well

17348
12:18:19,595 --> 12:18:26,079
each of those queues in turn can have up

17349
12:18:22,720 --> 12:18:29,680
to 64 000 commands running at the same

17350
12:18:26,080 --> 12:18:32,800
time and thus making nvme infinitely

17351
12:18:29,680 --> 12:18:35,595
faster now although nvme comes with

17352
12:18:32,800 --> 12:18:37,756
these incredible speeds it does come at

17353
12:18:35,595 --> 12:18:40,639
a cost and so when it comes to the

17354
12:18:37,756 --> 12:18:42,959
caveats of local ssd although compute

17355
12:18:40,639 --> 12:18:45,199
engine automatically encrypts your data

17356
12:18:42,959 --> 12:18:47,915
when it's written to local ssd storage

17357
12:18:45,199 --> 12:18:51,519
space you can't use customer supplied

17358
12:18:47,915 --> 12:18:55,680
encryption keys with local ssds as well

17359
12:18:51,519 --> 12:18:58,959
local ssds are only available for the n1

17360
12:18:55,680 --> 12:19:01,040
n2 and compute optimized machine types

17361
12:18:58,959 --> 12:19:03,839
now moving on to the performance of

17362
12:19:01,040 --> 12:19:07,116
local ssds throughput is the same

17363
12:19:03,839 --> 12:19:10,239
between scuzzy and nvme but the read

17364
12:19:07,116 --> 12:19:13,040
write iops per instance is where nvme

17365
12:19:10,239 --> 12:19:16,159
comes out on top and as you can see here

17366
12:19:13,040 --> 12:19:18,319
the read iops per instance is a whopping

17367
12:19:16,160 --> 12:19:21,680
two million four hundred thousand read

17368
12:19:18,319 --> 12:19:25,595
iops per instance as well the right iops

17369
12:19:21,680 --> 12:19:28,720
per instance is 1.2 million over the 800

17370
12:19:25,595 --> 12:19:31,360
000 for local ssd now before i end this

17371
12:19:28,720 --> 12:19:32,959
lesson i wanted to cover a few points on

17372
12:19:31,360 --> 12:19:35,520
performance scaling

17373
12:19:32,959 --> 12:19:38,159
as it pertains to block storage on

17374
12:19:35,519 --> 12:19:40,479
compute engine now persistent disk

17375
12:19:38,160 --> 12:19:43,756
performance scales with the size of the

17376
12:19:40,480 --> 12:19:46,160
disk and with the number of vcpus on

17377
12:19:43,756 --> 12:19:49,436
your vm instance persistent disk

17378
12:19:46,160 --> 12:19:52,160
performance scales linearly until it

17379
12:19:49,436 --> 12:19:54,720
reaches either the limits of the volume

17380
12:19:52,160 --> 12:19:57,596
or the limits of each compute engine

17381
12:19:54,720 --> 12:19:59,436
instance whichever is lower now this may

17382
12:19:57,595 --> 12:20:02,399
seem odd that the performance of your

17383
12:19:59,436 --> 12:20:04,720
disk scales with cpu count but you have

17384
12:20:02,400 --> 12:20:07,436
to remember persistent disks aren't

17385
12:20:04,720 --> 12:20:10,720
physically attached to your vm they are

17386
12:20:07,436 --> 12:20:14,400
independently located as such i o on a

17387
12:20:10,720 --> 12:20:17,840
pd is a network operation and thus it

17388
12:20:14,400 --> 12:20:21,275
takes cpu to do i o which means that

17389
12:20:17,839 --> 12:20:24,799
smaller instances run out of cpu to

17390
12:20:21,275 --> 12:20:27,360
perform disk io at higher rates so in

17391
12:20:24,800 --> 12:20:29,916
order for you to get better performance

17392
12:20:27,360 --> 12:20:32,319
you can increase the iops for your disk

17393
12:20:29,915 --> 12:20:34,639
by resizing them to their maximum

17394
12:20:32,319 --> 12:20:36,959
capacity but once that size has been

17395
12:20:34,639 --> 12:20:39,915
reached you will have to increase the

17396
12:20:36,959 --> 12:20:42,319
number of cpus on your instance in order

17397
12:20:39,915 --> 12:20:44,639
to increase your disk performance a

17398
12:20:42,319 --> 12:20:50,080
recommendation by google is that you

17399
12:20:44,639 --> 12:20:51,756
have one available vcpu for every 2000

17400
12:20:50,080 --> 12:20:55,520
to

17401
12:20:51,756 --> 12:20:58,080
iops of expected traffic so to sum it up

17402
12:20:55,519 --> 12:21:00,239
performance scales until it reaches

17403
12:20:58,080 --> 12:21:03,040
either the limits of the disk or the

17404
12:21:00,239 --> 12:21:06,079
limits of the vm instance to which the

17405
12:21:03,040 --> 12:21:08,400
disk is attached the vm instance limits

17406
12:21:06,080 --> 12:21:11,520
are determined by the machine type and

17407
12:21:08,400 --> 12:21:13,436
the number of vcpus of the instance now

17408
12:21:11,519 --> 12:21:15,755
if you want to get more granular with

17409
12:21:13,436 --> 12:21:18,560
regards to disk performance i've

17410
12:21:15,756 --> 12:21:20,880
included a few links in the lesson text

17411
12:21:18,559 --> 12:21:23,680
that will give you some more insight but

17412
12:21:20,879 --> 12:21:26,159
for most general purposes and for the

17413
12:21:23,680 --> 12:21:28,400
exam remember that persistent disk

17414
12:21:26,160 --> 12:21:30,560
performance is based on the total

17415
12:21:28,400 --> 12:21:32,800
persistent disk capacity

17416
12:21:30,559 --> 12:21:36,159
attached to an instance and the number

17417
12:21:32,800 --> 12:21:38,480
of vcpus that the instance has and so

17418
12:21:36,160 --> 12:21:41,116
that's pretty much all i wanted to cover

17419
12:21:38,480 --> 12:21:43,680
when it comes to persistent disks and

17420
12:21:41,116 --> 12:21:46,000
local ssds so you can now mark this

17421
12:21:43,680 --> 12:21:49,319
lesson as complete and let's move on to

17422
12:21:46,000 --> 12:21:49,319
the next one

17423
12:21:51,040 --> 12:21:56,400
welcome back in this demo i'm going to

17424
12:21:53,680 --> 12:21:59,040
be covering how to manage and interact

17425
12:21:56,400 --> 12:22:00,959
with your disks on compute engine this

17426
12:21:59,040 --> 12:22:03,840
demo is designed to give you both

17427
12:22:00,959 --> 12:22:06,479
experience and understanding on working

17428
12:22:03,839 --> 12:22:08,159
with persistent disks and how you would

17429
12:22:06,480 --> 12:22:10,560
interact with them we're going to start

17430
12:22:08,160 --> 12:22:12,320
the demo off by creating an instance

17431
12:22:10,559 --> 12:22:14,639
we're then going to create a separate

17432
12:22:12,319 --> 12:22:16,720
persistent disk and attach it to the

17433
12:22:14,639 --> 12:22:19,519
instance we're going to then interact

17434
12:22:16,720 --> 12:22:22,000
with the disk and then resize the disk

17435
12:22:19,519 --> 12:22:24,399
while afterwards we will delete it and

17436
12:22:22,000 --> 12:22:27,116
we're going to do this all by both using

17437
12:22:24,400 --> 12:22:30,080
the console and the command line so with

17438
12:22:27,116 --> 12:22:32,639
that being said let's dive in so here i

17439
12:22:30,080 --> 12:22:36,480
am in the console i'm logged in as tony

17440
12:22:32,639 --> 12:22:38,559
bowties gmail.com and i am in project

17441
12:22:36,480 --> 12:22:41,040
bowtie inc and so the first thing we

17442
12:22:38,559 --> 12:22:42,959
need to do to kick off this demo is to

17443
12:22:41,040 --> 12:22:45,915
create an instance that we can attach

17444
12:22:42,959 --> 12:22:48,959
our disk to but first i always like to

17445
12:22:45,915 --> 12:22:51,519
make sure that i have a vpc to deploy my

17446
12:22:48,959 --> 12:22:53,839
instance into with its corresponding

17447
12:22:51,519 --> 12:22:56,239
default firewall rules so i'm going to

17448
12:22:53,839 --> 12:23:00,399
head on over to the navigation menu

17449
12:22:56,239 --> 12:23:03,436
and i'm going to go down to vpc network

17450
12:23:00,400 --> 12:23:05,756
and as expected my default vpc has been

17451
12:23:03,436 --> 12:23:08,639
created and just to make sure that i

17452
12:23:05,756 --> 12:23:10,880
have all my necessary firewall rules i'm

17453
12:23:08,639 --> 12:23:12,959
going to drill down into the vpc and

17454
12:23:10,879 --> 12:23:15,199
head on over to firewall rules i'm going

17455
12:23:12,959 --> 12:23:17,839
to click on firewall rules and the

17456
12:23:15,199 --> 12:23:21,199
necessary firewall rule that i need for

17457
12:23:17,839 --> 12:23:23,199
ssh is created and so i can go ahead and

17458
12:23:21,199 --> 12:23:25,360
create my instance so i'm going to go

17459
12:23:23,199 --> 12:23:27,519
back up to the navigation menu and i'm

17460
12:23:25,360 --> 12:23:28,800
going to go over to compute engine so

17461
12:23:27,519 --> 12:23:30,959
i'm going to go ahead and click on

17462
12:23:28,800 --> 12:23:34,800
create and i'm going to name this

17463
12:23:30,959 --> 12:23:36,879
instance bowtie dash instance and for

17464
12:23:34,800 --> 12:23:38,720
the sake of this demo i'll add in a

17465
12:23:36,879 --> 12:23:40,799
label here the key is going to be

17466
12:23:38,720 --> 12:23:42,400
environment and the value will be

17467
12:23:40,800 --> 12:23:44,800
testing i'm going to go down to the

17468
12:23:42,400 --> 12:23:47,916
bottom click on save with regards to the

17469
12:23:44,800 --> 12:23:49,276
region i'm going to select us east 1 and

17470
12:23:47,915 --> 12:23:52,719
i'm going to keep the zone as the

17471
12:23:49,275 --> 12:23:55,275
default for us east 1b and under machine

17472
12:23:52,720 --> 12:23:57,520
type to keep things cost effective i'm

17473
12:23:55,275 --> 12:24:00,000
going to use an e2 micro shared core

17474
12:23:57,519 --> 12:24:02,079
machine and i'm going to scroll down to

17475
12:24:00,000 --> 12:24:03,839
service account and under service

17476
12:24:02,080 --> 12:24:05,840
account you want to select the set

17477
12:24:03,839 --> 12:24:07,595
access for each api

17478
12:24:05,839 --> 12:24:10,159
you want to scroll down to compute

17479
12:24:07,595 --> 12:24:11,680
engine and here you want to select read

17480
12:24:10,160 --> 12:24:13,840
write and this will give us the

17481
12:24:11,680 --> 12:24:16,000
necessary permissions in order to

17482
12:24:13,839 --> 12:24:17,679
interact with our disk that we will be

17483
12:24:16,000 --> 12:24:19,680
creating later so i'm going to scroll

17484
12:24:17,680 --> 12:24:22,160
down to the bottom here and i'm going to

17485
12:24:19,680 --> 12:24:24,400
leave everything else set at its default

17486
12:24:22,160 --> 12:24:26,320
and just before creating the instance

17487
12:24:24,400 --> 12:24:28,560
please do remember you can always click

17488
12:24:26,319 --> 12:24:30,879
on the command line link where you can

17489
12:24:28,559 --> 12:24:33,040
get the gcloud command to create this

17490
12:24:30,879 --> 12:24:34,959
instance through the command line i'm

17491
12:24:33,040 --> 12:24:37,360
going to close this up and i'm going to

17492
12:24:34,959 --> 12:24:39,519
simply click on create i'm just going to

17493
12:24:37,360 --> 12:24:42,319
wait a few seconds here for my instance

17494
12:24:39,519 --> 12:24:44,559
to come up okay and my instance is up

17495
12:24:42,319 --> 12:24:46,639
and so now what we want to do is we want

17496
12:24:44,559 --> 12:24:48,720
to create our new disk so i'm going to

17497
12:24:46,639 --> 12:24:50,879
go over here to the left hand menu and

17498
12:24:48,720 --> 12:24:53,360
i'm going to click on disks and as you

17499
12:24:50,879 --> 12:24:56,159
can see here the disk for the instance

17500
12:24:53,360 --> 12:24:58,720
that i had just created has 10 gigabytes

17501
12:24:56,160 --> 12:25:01,116
in us east 1b and we want to leave that

17502
12:24:58,720 --> 12:25:02,720
alone and we want to create our new disk

17503
12:25:01,116 --> 12:25:05,200
so i'm going to go up to the top here

17504
12:25:02,720 --> 12:25:06,800
and simply click on create disk

17505
12:25:05,199 --> 12:25:09,595
and so for the name of the disk i'm

17506
12:25:06,800 --> 12:25:11,596
going to call this disk new pd for

17507
12:25:09,595 --> 12:25:13,595
persistent disk and i'm going to give it

17508
12:25:11,595 --> 12:25:16,239
the same description i'm going to keep

17509
12:25:13,595 --> 12:25:19,360
the type as standard persistent disk and

17510
12:25:16,239 --> 12:25:21,275
for the region i want to select us east

17511
12:25:19,360 --> 12:25:24,559
one i'm going to keep the zone as its

17512
12:25:21,275 --> 12:25:27,519
default in us east 1b and as the disk is

17513
12:25:24,559 --> 12:25:29,839
in us east 1b i'll be able to attach it

17514
12:25:27,519 --> 12:25:32,319
to my instance and so just as a note

17515
12:25:29,839 --> 12:25:35,039
here there is a selection where you can

17516
12:25:32,319 --> 12:25:37,360
replicate this disk within the region if

17517
12:25:35,040 --> 12:25:39,840
i click that off i've now changed this

17518
12:25:37,360 --> 12:25:42,160
from a zonal persistent disk to a

17519
12:25:39,839 --> 12:25:44,479
regional persistent disk and over here

17520
12:25:42,160 --> 12:25:47,276
in zones it'll give me the option to

17521
12:25:44,480 --> 12:25:48,960
select any two zones that i prefer and

17522
12:25:47,275 --> 12:25:51,115
so if you're looking at creating some

17523
12:25:48,959 --> 12:25:53,275
regional persistent disks these are the

17524
12:25:51,116 --> 12:25:55,276
steps you would need to take in order to

17525
12:25:53,275 --> 12:25:57,040
get it done in the console now in order

17526
12:25:55,275 --> 12:25:59,199
to save on costs i'm going to keep this

17527
12:25:57,040 --> 12:26:01,116
as a zonal persistent disk so i'm going

17528
12:25:59,199 --> 12:26:03,595
to click on cancel i'm going to uncheck

17529
12:26:01,116 --> 12:26:06,480
the option and make sure your region is

17530
12:26:03,595 --> 12:26:09,115
still set at us east 1 and your zone is

17531
12:26:06,480 --> 12:26:11,596
selected as us east 1b we're going to

17532
12:26:09,116 --> 12:26:14,160
leave the snapshot schedule alone and

17533
12:26:11,595 --> 12:26:16,000
i'll be diving into snapshot schedules

17534
12:26:14,160 --> 12:26:17,756
in a later lesson i'm going to scroll

17535
12:26:16,000 --> 12:26:20,319
down here to source type i'm going to

17536
12:26:17,756 --> 12:26:23,116
keep it as blank disk and the size here

17537
12:26:20,319 --> 12:26:26,159
is set at 500 gigabytes and we want to

17538
12:26:23,116 --> 12:26:28,319
set it to 100 gigabytes but before we do

17539
12:26:26,160 --> 12:26:30,800
that i wanted to bring your attention to

17540
12:26:28,319 --> 12:26:34,000
the estimated performance here you can

17541
12:26:30,800 --> 12:26:36,000
see the sustain random iops limits as

17542
12:26:34,000 --> 12:26:37,756
well as the throughput limit and so

17543
12:26:36,000 --> 12:26:40,000
depending on the size of the disk that

17544
12:26:37,756 --> 12:26:43,436
you want to add these limits will change

17545
12:26:40,000 --> 12:26:46,400
accordingly so if i change this to 100

17546
12:26:43,436 --> 12:26:51,520
my sustained random iops limit on read

17547
12:26:46,400 --> 12:26:53,756
went from 375 iops to 75 iops and so

17548
12:26:51,519 --> 12:26:55,755
this is a great demonstration that the

17549
12:26:53,756 --> 12:26:58,000
larger your disc the better your

17550
12:26:55,756 --> 12:27:00,400
performance and so this is a great way

17551
12:26:58,000 --> 12:27:03,436
to figure out on what your performance

17552
12:27:00,400 --> 12:27:05,680
will be before you create your disk and

17553
12:27:03,436 --> 12:27:07,840
i've also been prompted with a note here

17554
12:27:05,680 --> 12:27:10,080
saying that because my disk is under 200

17555
12:27:07,839 --> 12:27:12,479
gigabytes that i will have reduced

17556
12:27:10,080 --> 12:27:14,720
performance and so for this demo that's

17557
12:27:12,480 --> 12:27:17,756
okay i'm going to keep my encryption as

17558
12:27:14,720 --> 12:27:20,319
the google manage key and under labels i

17559
12:27:17,756 --> 12:27:22,080
will add environment as the key and

17560
12:27:20,319 --> 12:27:23,756
value is testing

17561
12:27:22,080 --> 12:27:25,916
and so now that i've entered all my

17562
12:27:23,756 --> 12:27:27,275
options i'm going to simply click on

17563
12:27:25,915 --> 12:27:29,519
create

17564
12:27:27,275 --> 12:27:32,319
and i'm going to give it a few seconds

17565
12:27:29,519 --> 12:27:34,639
and my new disk should be created okay

17566
12:27:32,319 --> 12:27:36,559
and my new disk has been created and you

17567
12:27:34,639 --> 12:27:38,720
can easily create this disk through the

17568
12:27:36,559 --> 12:27:41,199
command line and i will be supplying

17569
12:27:38,720 --> 12:27:43,360
that in the lesson text i merely want to

17570
12:27:41,199 --> 12:27:45,680
go through the console setup so that you

17571
12:27:43,360 --> 12:27:48,160
are aware of all the different options

17572
12:27:45,680 --> 12:27:50,639
and so now that i've created my disk and

17573
12:27:48,160 --> 12:27:53,360
i've created my instance i want to now

17574
12:27:50,639 --> 12:27:55,436
log into my instance and attach this new

17575
12:27:53,360 --> 12:27:58,559
disk so i'm going to go back to vm

17576
12:27:55,436 --> 12:28:00,800
instances and here i want to ssh into

17577
12:27:58,559 --> 12:28:02,799
the bowtie instance and i'm going to

17578
12:28:00,800 --> 12:28:04,400
give it a few seconds here to connect

17579
12:28:02,800 --> 12:28:07,116
and i'm going to zoom in for better

17580
12:28:04,400 --> 12:28:08,959
viewing i'm going to clear my screen

17581
12:28:07,116 --> 12:28:11,436
and so the first thing i want to do is i

17582
12:28:08,959 --> 12:28:13,839
want to list all my block devices that

17583
12:28:11,436 --> 12:28:17,436
are available to me on this instance and

17584
12:28:13,839 --> 12:28:19,519
the linux command for that is ls blk

17585
12:28:17,436 --> 12:28:20,400
and as you can see my boot disk has been

17586
12:28:19,519 --> 12:28:22,799
mounted

17587
12:28:20,400 --> 12:28:24,720
and is available to me and so now i want

17588
12:28:22,800 --> 12:28:27,276
to attach the new disk that we just

17589
12:28:24,720 --> 12:28:29,840
created and just as a note i could as

17590
12:28:27,275 --> 12:28:31,915
easily have done this in the console but

17591
12:28:29,839 --> 12:28:33,839
i wanted to give you an idea of what it

17592
12:28:31,915 --> 12:28:35,680
would look like doing it from the

17593
12:28:33,839 --> 12:28:38,000
command line and so i'm going to paste

17594
12:28:35,680 --> 12:28:41,436
in the command to attach the disk which

17595
12:28:38,000 --> 12:28:43,680
is gcloud compute instances attach dash

17596
12:28:41,436 --> 12:28:46,080
disk the name of the instance which is

17597
12:28:43,680 --> 12:28:48,959
bow tie dash instance along with the

17598
12:28:46,080 --> 12:28:51,840
flag dash dash disk the disk name which

17599
12:28:48,959 --> 12:28:54,639
is new pd and the zone of the disk using

17600
12:28:51,839 --> 12:28:56,719
the zone flag with us east 1b so i'm

17601
12:28:54,639 --> 12:28:58,879
going to go ahead and hit enter

17602
12:28:56,720 --> 12:29:00,880
and no errors came up so i'm assuming

17603
12:28:58,879 --> 12:29:03,275
that this had worked and so just to

17604
12:29:00,879 --> 12:29:06,079
double check i'm gonna run the lsblk

17605
12:29:03,275 --> 12:29:08,879
command again and success as you can see

17606
12:29:06,080 --> 12:29:11,276
here my block device sdb has been

17607
12:29:08,879 --> 12:29:14,239
attached to my instance and is available

17608
12:29:11,275 --> 12:29:16,159
to me with the size of 100 gigabytes and

17609
12:29:14,239 --> 12:29:18,559
so now i want to look at the state that

17610
12:29:16,160 --> 12:29:21,040
this roblox device is in and so the

17611
12:29:18,559 --> 12:29:23,915
command for that will be sudo

17612
12:29:21,040 --> 12:29:26,879
file dash s followed by the path of the

17613
12:29:23,915 --> 12:29:29,115
block device which is forward slash dev

17614
12:29:26,879 --> 12:29:31,435
forward slash sdb i'm going to hit on

17615
12:29:29,116 --> 12:29:34,240
enter and as you can see it is showing

17616
12:29:31,436 --> 12:29:36,720
data which means that it is just a raw

17617
12:29:34,239 --> 12:29:38,879
data device and so in order for me to

17618
12:29:36,720 --> 12:29:40,959
interact with it i need to format the

17619
12:29:38,879 --> 12:29:42,799
drive with a file system that the

17620
12:29:40,959 --> 12:29:44,879
operating system will be able to

17621
12:29:42,800 --> 12:29:48,080
interact with and so the command to

17622
12:29:44,879 --> 12:29:50,159
format the drive would be sudo mkfs

17623
12:29:48,080 --> 12:29:53,276
which is make file system i'm going to

17624
12:29:50,160 --> 12:29:55,680
use ext4 as the file system minus

17625
12:29:53,275 --> 12:29:58,639
capital f along with the path of the new

17626
12:29:55,680 --> 12:30:00,319
disk so i'm going to hit on enter and no

17627
12:29:58,639 --> 12:30:02,959
errors so i'm assuming that it was

17628
12:30:00,319 --> 12:30:06,239
successful so just to verify i'm going

17629
12:30:02,959 --> 12:30:08,639
to run the sudo file minus s command and

17630
12:30:06,239 --> 12:30:10,799
as you can see here because the disk now

17631
12:30:08,639 --> 12:30:12,959
has a file system i've been given the

17632
12:30:10,800 --> 12:30:15,756
information with regards to this disk

17633
12:30:12,959 --> 12:30:17,839
whereas before it was simply raw data

17634
12:30:15,756 --> 12:30:20,239
and so now that we've created our disk

17635
12:30:17,839 --> 12:30:22,479
and we've formatted our disk to a file

17636
12:30:20,239 --> 12:30:25,040
system that the operating system is able

17637
12:30:22,480 --> 12:30:27,200
to read we need to now mount the disk

17638
12:30:25,040 --> 12:30:28,879
and so in order to do that we need to

17639
12:30:27,199 --> 12:30:31,115
create a mount point so i'm going to

17640
12:30:28,879 --> 12:30:34,959
first clear the screen and i'm going to

17641
12:30:31,116 --> 12:30:37,040
run the command sudo mkdir and the new

17642
12:30:34,959 --> 12:30:39,360
mount point i'm going to call it slash

17643
12:30:37,040 --> 12:30:41,040
new pd i'm going to hit enter and now

17644
12:30:39,360 --> 12:30:43,680
i'm going to mount the disk and the

17645
12:30:41,040 --> 12:30:45,680
command for that is sudo mount the path

17646
12:30:43,680 --> 12:30:48,720
for the block device which is forward

17647
12:30:45,680 --> 12:30:50,959
slash dev forward slash sdb and then the

17648
12:30:48,720 --> 12:30:53,680
mount point which is forward slash new

17649
12:30:50,959 --> 12:30:55,756
pd i'm going to hit enter no errors so

17650
12:30:53,680 --> 12:30:58,519
i'm assuming that it had worked but just

17651
12:30:55,756 --> 12:31:00,239
to verify i'm going to run the command

17652
12:30:58,519 --> 12:31:03,680
lsblk

17653
12:31:00,239 --> 12:31:07,275
and success as you can see sdb has now

17654
12:31:03,680 --> 12:31:09,519
been mounted as new pd and so now i can

17655
12:31:07,275 --> 12:31:11,519
interact with this disk so the first

17656
12:31:09,519 --> 12:31:13,839
thing i want to do is i want to change

17657
12:31:11,519 --> 12:31:16,719
directories to this mount point i'm in

17658
12:31:13,839 --> 12:31:18,559
now new pd i'm going to do an ls and so

17659
12:31:16,720 --> 12:31:21,756
just as a note for those of you who are

17660
12:31:18,559 --> 12:31:24,319
wondering the lost and found directory

17661
12:31:21,756 --> 12:31:26,880
is found on each linux file system and

17662
12:31:24,319 --> 12:31:29,519
this is designed to place orphaned or

17663
12:31:26,879 --> 12:31:32,239
corrupted files or any corrupted bits of

17664
12:31:29,519 --> 12:31:34,000
data from the file system to be placed

17665
12:31:32,239 --> 12:31:36,239
here and so it's not something that you

17666
12:31:34,000 --> 12:31:38,559
would interact with but always a good to

17667
12:31:36,239 --> 12:31:40,559
know so i'm going to now create a file

17668
12:31:38,559 --> 12:31:43,756
in new pd so i'm going to run the

17669
12:31:40,559 --> 12:31:46,959
command sudo nano file a bow ties dot

17670
12:31:43,756 --> 12:31:49,436
text so file a bow ties is the file that

17671
12:31:46,959 --> 12:31:51,680
i'm going to create nano is my text

17672
12:31:49,436 --> 12:31:54,639
editor and so i'm going to hit on enter

17673
12:31:51,680 --> 12:31:57,756
and so in this file i'm going to type in

17674
12:31:54,639 --> 12:31:59,680
bow ties are so classy

17675
12:31:57,756 --> 12:32:01,916
because after all they are i'm going to

17676
12:31:59,680 --> 12:32:05,199
hit ctrl o to save i'm going to hit

17677
12:32:01,915 --> 12:32:08,000
enter to verify it and ctrl x to exit so

17678
12:32:05,199 --> 12:32:10,159
if i do another ls i can see the file of

17679
12:32:08,000 --> 12:32:13,116
bow ties has been created also by

17680
12:32:10,160 --> 12:32:15,520
running the command df minus k i'll be

17681
12:32:13,116 --> 12:32:17,276
able to see the file system here as well

17682
12:32:15,519 --> 12:32:19,680
and so this is the end of part one of

17683
12:32:17,275 --> 12:32:21,680
this demo it was getting a bit long so i

17684
12:32:19,680 --> 12:32:24,239
decided to break it up this would be a

17685
12:32:21,680 --> 12:32:27,040
great opportunity for you to get up have

17686
12:32:24,239 --> 12:32:28,959
a stretch get yourself a coffee or tea

17687
12:32:27,040 --> 12:32:31,436
and whenever you're ready you can join

17688
12:32:28,959 --> 12:32:33,519
me in the next one where part two will

17689
12:32:31,436 --> 12:32:34,580
be starting immediately from the end of

17690
12:32:33,519 --> 12:32:38,479
part one

17691
12:32:34,580 --> 12:32:40,800
[Music]

17692
12:32:38,480 --> 12:32:42,800
welcome back this is part two of this

17693
12:32:40,800 --> 12:32:45,200
demo and we're gonna continue

17694
12:32:42,800 --> 12:32:47,840
immediately from the end of part one so

17695
12:32:45,199 --> 12:32:50,079
with that being said let's dive in and

17696
12:32:47,839 --> 12:32:52,000
so what i want to do now is i want to

17697
12:32:50,080 --> 12:32:54,639
reboot the instance in order to

17698
12:32:52,000 --> 12:32:56,000
demonstrate the mounting of this device

17699
12:32:54,639 --> 12:32:58,239
and i'm going to do that by using the

17700
12:32:56,000 --> 12:33:00,000
command sudo reboot it's going to

17701
12:32:58,239 --> 12:33:01,756
disconnect me i'm going to click on

17702
12:33:00,000 --> 12:33:03,839
close and i'm going to wait about a

17703
12:33:01,756 --> 12:33:05,595
minute for it to reboot okay and it's

17704
12:33:03,839 --> 12:33:09,039
been about a minute so i'm going to now

17705
12:33:05,595 --> 12:33:09,040
ssh into my instance

17706
12:33:09,275 --> 12:33:13,436
okay and here i am back again logged

17707
12:33:11,519 --> 12:33:15,519
into my instance i'm going to quickly

17708
12:33:13,436 --> 12:33:18,639
clear the screen and i'm going to run

17709
12:33:15,519 --> 12:33:20,719
the lsblk command now what i wanted to

17710
12:33:18,639 --> 12:33:23,199
demonstrate here is that although i

17711
12:33:20,720 --> 12:33:25,436
mounted the new device it did not stay

17712
12:33:23,199 --> 12:33:27,915
mounted through the reboot and this is

17713
12:33:25,436 --> 12:33:30,239
because there is a configuration file in

17714
12:33:27,915 --> 12:33:32,639
linux that points to which partitions

17715
12:33:30,239 --> 12:33:34,639
get mounted automatically upon startup

17716
12:33:32,639 --> 12:33:36,720
that i need to edit in order to make

17717
12:33:34,639 --> 12:33:38,879
sure that this device is mounted every

17718
12:33:36,720 --> 12:33:41,680
time the instance reboots and so in

17719
12:33:38,879 --> 12:33:44,079
order to do that i need to edit a file

17720
12:33:41,680 --> 12:33:46,239
called fstab and i'm going to have to

17721
12:33:44,080 --> 12:33:49,520
add the unique identifier for this

17722
12:33:46,239 --> 12:33:50,959
partition also known as the device sdb

17723
12:33:49,519 --> 12:33:53,115
and this will mount the partition

17724
12:33:50,959 --> 12:33:55,275
automatically every time there happens

17725
12:33:53,116 --> 12:33:59,040
to be a reboot so in order to do that

17726
12:33:55,275 --> 12:34:01,199
i'm going to run the command sudo blk id

17727
12:33:59,040 --> 12:34:04,160
and the path of the block device forward

17728
12:34:01,199 --> 12:34:06,959
slash dev forward slash sdb i'm going to

17729
12:34:04,160 --> 12:34:09,756
hit on enter and here is the identifier

17730
12:34:06,959 --> 12:34:12,319
also known as the uuid that i need to

17731
12:34:09,756 --> 12:34:14,319
append to the fstab file so i'm going to

17732
12:34:12,319 --> 12:34:16,319
copy the uuid

17733
12:34:14,319 --> 12:34:18,159
and i'm going to use the command

17734
12:34:16,319 --> 12:34:19,360
sudo nano

17735
12:34:18,160 --> 12:34:21,916
etc

17736
12:34:19,360 --> 12:34:24,480
fs tab and i'm going to hit on enter and

17737
12:34:21,915 --> 12:34:26,159
here you will find the uuid for your

17738
12:34:24,480 --> 12:34:28,080
other partitions and so you're going to

17739
12:34:26,160 --> 12:34:29,916
be appending a line here right at the

17740
12:34:28,080 --> 12:34:33,116
end so i'm going to move my cursor down

17741
12:34:29,915 --> 12:34:35,199
here i'm going to type in uuid equals

17742
12:34:33,116 --> 12:34:37,360
and then the uuid that i had copied

17743
12:34:35,199 --> 12:34:40,559
earlier the amount point which is going

17744
12:34:37,360 --> 12:34:43,595
to be forward slash new pd the type of

17745
12:34:40,559 --> 12:34:45,115
file system which is ext4 along with

17746
12:34:43,595 --> 12:34:47,839
defaults

17747
12:34:45,116 --> 12:34:50,639
comma no fail i'm going to hit control o

17748
12:34:47,839 --> 12:34:52,639
to save hit enter to verify and control

17749
12:34:50,639 --> 12:34:55,040
x to exit and so now i'm going to mount

17750
12:34:52,639 --> 12:34:57,756
this device by running the command sudo

17751
12:34:55,040 --> 12:34:59,680
mount dash a and hit enter and this

17752
12:34:57,756 --> 12:35:02,319
command will mount all the partitions

17753
12:34:59,680 --> 12:35:05,275
that are available in the fstab file and

17754
12:35:02,319 --> 12:35:09,040
so when i run a lsblk

17755
12:35:05,275 --> 12:35:12,239
i can see here that my block device sdb

17756
12:35:09,040 --> 12:35:14,239
is now mounted on forward slash new pd

17757
12:35:12,239 --> 12:35:16,879
now i know this may be a refresher for

17758
12:35:14,239 --> 12:35:19,115
some but this is a perfect demonstration

17759
12:35:16,879 --> 12:35:22,000
of the tasks that need to be done when

17760
12:35:19,116 --> 12:35:25,116
creating and attaching a new disk to an

17761
12:35:22,000 --> 12:35:27,839
instance and is a common task for many

17762
12:35:25,116 --> 12:35:30,720
working on linux instances and working

17763
12:35:27,839 --> 12:35:32,639
in cloud this can definitely be scripted

17764
12:35:30,720 --> 12:35:34,959
but i wanted to show you the steps that

17765
12:35:32,639 --> 12:35:38,879
need to be taken in order to get a new

17766
12:35:34,959 --> 12:35:41,595
disk in a usable state okay so great we

17767
12:35:38,879 --> 12:35:44,319
have created a new disk we had attached

17768
12:35:41,595 --> 12:35:46,559
the disk created a file system and had

17769
12:35:44,319 --> 12:35:48,879
mounted the disk along with editing the

17770
12:35:46,559 --> 12:35:51,199
configuration file to make sure that the

17771
12:35:48,879 --> 12:35:53,115
device mounts whenever the instance

17772
12:35:51,199 --> 12:35:55,755
starts up so now that we've done all

17773
12:35:53,116 --> 12:35:59,276
that i wanted to demonstrate resizing

17774
12:35:55,756 --> 12:36:01,520
this disk from 100 gigabytes to 150

17775
12:35:59,275 --> 12:36:03,360
gigabytes and so just to show you where

17776
12:36:01,519 --> 12:36:05,839
it is in the console i'm going to

17777
12:36:03,360 --> 12:36:07,275
quickly go back to my console tab and so

17778
12:36:05,839 --> 12:36:09,519
here i'm going to go to the left hand

17779
12:36:07,275 --> 12:36:11,915
menu i'm going to click on disks i'm

17780
12:36:09,519 --> 12:36:13,755
going to drill down into new pd and at

17781
12:36:11,915 --> 12:36:15,839
the top i'm going to click on edit and

17782
12:36:13,756 --> 12:36:18,720
so here i'm able to adjust the disk

17783
12:36:15,839 --> 12:36:20,959
space size and simply click on save not

17784
12:36:18,720 --> 12:36:22,880
much that i really need to do here but i

17785
12:36:20,959 --> 12:36:24,639
did want to show you how to do this in

17786
12:36:22,879 --> 12:36:26,959
the command line so i'm going to go back

17787
12:36:24,639 --> 12:36:29,116
to the tab of my instance and i'm going

17788
12:36:26,959 --> 12:36:31,436
to quickly clear the screen and i'm

17789
12:36:29,116 --> 12:36:32,880
going to paste in the command gcloud

17790
12:36:31,436 --> 12:36:35,520
compute disks

17791
12:36:32,879 --> 12:36:38,879
resize the name of the disk which is new

17792
12:36:35,519 --> 12:36:42,799
pd and the new size in gigabytes using

17793
12:36:38,879 --> 12:36:45,519
the dash dash size flag 150 which is the

17794
12:36:42,800 --> 12:36:48,639
new size of the disc along with the dash

17795
12:36:45,519 --> 12:36:50,719
dash zone flag of us east 1b i'm going

17796
12:36:48,639 --> 12:36:52,319
to hit enter it's going to ask me if i

17797
12:36:50,720 --> 12:36:54,720
want to do this as this is not

17798
12:36:52,319 --> 12:36:56,959
reversible and please remember when you

17799
12:36:54,720 --> 12:36:59,200
resize a disk you can only make it

17800
12:36:56,959 --> 12:37:01,116
bigger and never smaller so i'm going to

17801
12:36:59,199 --> 12:37:03,115
hit y to continue

17802
12:37:01,116 --> 12:37:06,480
and it took a few seconds there but it

17803
12:37:03,116 --> 12:37:09,276
was successful so if i run a df minus k

17804
12:37:06,480 --> 12:37:11,360
you can see here that i only have 100

17805
12:37:09,275 --> 12:37:14,079
gigabytes available to me and this is

17806
12:37:11,360 --> 12:37:16,559
because i have to extend the file system

17807
12:37:14,080 --> 12:37:18,800
on the disk so i've made the disk larger

17808
12:37:16,559 --> 12:37:20,955
but i haven't allocated those raw blocks

17809
12:37:18,800 --> 12:37:23,116
to the file system so in order for the

17810
12:37:20,955 --> 12:37:25,595
file system to see those unallocated

17811
12:37:23,116 --> 12:37:27,276
blocks that's available to it i need to

17812
12:37:25,595 --> 12:37:29,275
run another command so i'm going to

17813
12:37:27,275 --> 12:37:31,680
quickly clear my screen again

17814
12:37:29,275 --> 12:37:34,955
and i'm going to run the command sudo

17815
12:37:31,680 --> 12:37:36,800
resize to fs along with the block device

17816
12:37:34,955 --> 12:37:38,879
i'm going to hit enter and as you can

17817
12:37:36,800 --> 12:37:42,080
see it was successful showing the old

17818
12:37:38,879 --> 12:37:45,839
blocks as 13 and the new blocks as 19.

17819
12:37:42,080 --> 12:37:48,720
so if i run a df minus k i can now see

17820
12:37:45,839 --> 12:37:50,639
my 150 gigabytes that's available to me

17821
12:37:48,720 --> 12:37:53,040
and so just to demonstrate after

17822
12:37:50,639 --> 12:37:55,040
resizing the disk along with mounting

17823
12:37:53,040 --> 12:37:57,275
and then remounting the disk that the

17824
12:37:55,040 --> 12:38:00,480
file that i've created still exists i'm

17825
12:37:57,275 --> 12:38:01,595
going to run an ls minus al but first i

17826
12:38:00,480 --> 12:38:04,400
will need to

17827
12:38:01,595 --> 12:38:07,595
change directories into new pd clear my

17828
12:38:04,400 --> 12:38:09,756
screen and run an ls and phyla bow ties

17829
12:38:07,595 --> 12:38:12,879
is still there and so this is a great

17830
12:38:09,756 --> 12:38:15,520
example demonstrating how the data on

17831
12:38:12,879 --> 12:38:18,799
persistent disks persist through the

17832
12:38:15,519 --> 12:38:22,399
lifetime of a disk even when mounting

17833
12:38:18,800 --> 12:38:24,319
unmounting rebooting and resizing and so

17834
12:38:22,400 --> 12:38:26,955
as you can see we've done a lot of work

17835
12:38:24,319 --> 12:38:29,436
here and so just as a recap where we've

17836
12:38:26,955 --> 12:38:31,839
created a new disk we attached this disk

17837
12:38:29,436 --> 12:38:35,040
to an instance we formatted the disk

17838
12:38:31,839 --> 12:38:37,679
into an ext4 file system we've mounted

17839
12:38:35,040 --> 12:38:39,840
this disk we've written a file to it

17840
12:38:37,680 --> 12:38:42,239
added its unique identifier to the

17841
12:38:39,839 --> 12:38:44,879
configuration file so that it mounts on

17842
12:38:42,239 --> 12:38:46,955
startup and then we've resized the disk

17843
12:38:44,879 --> 12:38:48,955
along with extending the file system on

17844
12:38:46,955 --> 12:38:51,360
the disk and so this is the end of the

17845
12:38:48,955 --> 12:38:53,519
demo and i wanted to congratulate you on

17846
12:38:51,360 --> 12:38:56,480
making it to the end and i hope this

17847
12:38:53,519 --> 12:38:58,879
demo has been extremely useful and again

17848
12:38:56,480 --> 12:39:01,200
fantastic job on your part now before

17849
12:38:58,879 --> 12:39:03,755
you go i wanted to quickly walk through

17850
12:39:01,199 --> 12:39:05,595
the steps of deleting all the resources

17851
12:39:03,756 --> 12:39:07,840
you've created and so the first thing

17852
12:39:05,595 --> 12:39:10,000
that i want to do is delete the disk

17853
12:39:07,839 --> 12:39:11,755
that was created for this demo and so

17854
12:39:10,000 --> 12:39:14,000
before i can delete the disk i'm going

17855
12:39:11,756 --> 12:39:16,239
to first detach the disk from the

17856
12:39:14,000 --> 12:39:17,839
instance and the easiest way to do that

17857
12:39:16,239 --> 12:39:19,839
is through the command line so i'm going

17858
12:39:17,839 --> 12:39:22,319
to quickly clear my screen and so i'm

17859
12:39:19,839 --> 12:39:24,239
going to show you how to detach the disk

17860
12:39:22,319 --> 12:39:26,800
from the instance and so i'm going to

17861
12:39:24,239 --> 12:39:30,000
paste in this command gcloud compute

17862
12:39:26,800 --> 12:39:32,240
instances detach disk the instance name

17863
12:39:30,000 --> 12:39:34,639
which is bow tie dash instance along

17864
12:39:32,239 --> 12:39:36,559
with the disc with the flag dash dash

17865
12:39:34,639 --> 12:39:38,720
disc the name of the disc which is new

17866
12:39:36,559 --> 12:39:39,915
pd along with the zone i'm going to hit

17867
12:39:38,720 --> 12:39:42,239
enter

17868
12:39:39,915 --> 12:39:44,639
and it's been successfully detached and

17869
12:39:42,239 --> 12:39:46,720
so now that it's detached i can actually

17870
12:39:44,639 --> 12:39:48,639
delete the disk and so i'm going to head

17871
12:39:46,720 --> 12:39:50,955
on over back to the console and i'm

17872
12:39:48,639 --> 12:39:52,955
going to go ahead and delete the new pd

17873
12:39:50,955 --> 12:39:54,720
disk i'm going to click on delete i'm

17874
12:39:52,955 --> 12:39:57,360
going to get a prompt asking me if i'm

17875
12:39:54,720 --> 12:39:59,520
sure yes i am if i go back to the main

17876
12:39:57,360 --> 12:40:01,915
menu for my disks and this should just

17877
12:39:59,519 --> 12:40:03,839
take a moment and once it's deleted you

17878
12:40:01,915 --> 12:40:06,239
will no longer see it here and i'm going

17879
12:40:03,839 --> 12:40:09,519
to go back over to vm instances and i'm

17880
12:40:06,239 --> 12:40:09,519
going to delete this as well

17881
12:40:10,000 --> 12:40:13,915
and so there's no need to delete your

17882
12:40:11,839 --> 12:40:16,239
default vpc unless you'd like to

17883
12:40:13,915 --> 12:40:18,319
recreate it again but don't worry for

17884
12:40:16,239 --> 12:40:20,955
those who decide to keep it you will not

17885
12:40:18,319 --> 12:40:23,275
be charged for your vpc as we will be

17886
12:40:20,955 --> 12:40:25,360
using it in the next demo and so that's

17887
12:40:23,275 --> 12:40:27,756
pretty much all i wanted to cover when

17888
12:40:25,360 --> 12:40:29,915
it comes to managing disks with compute

17889
12:40:27,756 --> 12:40:32,160
engine so you can now mark this as

17890
12:40:29,915 --> 12:40:33,290
complete and let's move on to the next

17891
12:40:32,160 --> 12:40:37,116
one

17892
12:40:33,290 --> 12:40:39,680
[Music]

17893
12:40:37,116 --> 12:40:42,639
welcome back in this lesson i'll be

17894
12:40:39,680 --> 12:40:45,840
discussing persistent disk snapshots now

17895
12:40:42,639 --> 12:40:48,720
snapshots are a great way to backup data

17896
12:40:45,839 --> 12:40:50,955
from any running or stopped instances

17897
12:40:48,720 --> 12:40:53,680
from unexpected data loss

17898
12:40:50,955 --> 12:40:56,879
snapshots are also a great strategy for

17899
12:40:53,680 --> 12:40:58,955
use in a backup plan for any and all

17900
12:40:56,879 --> 12:41:01,435
instances no matter where they are

17901
12:40:58,955 --> 12:41:04,319
located and so as cloud engineers and

17902
12:41:01,436 --> 12:41:06,880
architects this is a great tool for

17903
12:41:04,319 --> 12:41:09,436
achieving the greatest uptime for your

17904
12:41:06,879 --> 12:41:12,159
instances so diving right into it

17905
12:41:09,436 --> 12:41:14,480
snapshots as i mentioned before are a

17906
12:41:12,160 --> 12:41:17,040
great way for both backing up and

17907
12:41:14,480 --> 12:41:19,360
restoring the data of your persistent

17908
12:41:17,040 --> 12:41:21,756
disks you can create snapshots from

17909
12:41:19,360 --> 12:41:24,239
disks even while they are attached to

17910
12:41:21,756 --> 12:41:27,520
running instances snapshots are global

17911
12:41:24,239 --> 12:41:30,879
resources so any snapshot is accessible

17912
12:41:27,519 --> 12:41:33,435
by any resource within the same project

17913
12:41:30,879 --> 12:41:36,639
you can also share snapshots across

17914
12:41:33,436 --> 12:41:40,160
projects as well snapshots also support

17915
12:41:36,639 --> 12:41:42,319
both zonal and regional persistent disks

17916
12:41:40,160 --> 12:41:44,480
snapshots are incremental and

17917
12:41:42,319 --> 12:41:47,199
automatically compressed so you can

17918
12:41:44,480 --> 12:41:48,080
create regular snapshots on a persistent

17919
12:41:47,199 --> 12:41:50,799
disk

17920
12:41:48,080 --> 12:41:53,680
faster and at a much lower cost than if

17921
12:41:50,800 --> 12:41:56,560
you regularly created a full image of a

17922
12:41:53,680 --> 12:41:58,800
disk now when you create a snapshot you

17923
12:41:56,559 --> 12:42:01,839
have the option of choosing a storage

17924
12:41:58,800 --> 12:42:02,880
location snapshots are stored in cloud

17925
12:42:01,839 --> 12:42:04,799
storage

17926
12:42:02,879 --> 12:42:07,519
and can be stored in either a

17927
12:42:04,800 --> 12:42:09,916
multi-regional location or a regional

17928
12:42:07,519 --> 12:42:12,319
cloud storage bucket a multi-regional

17929
12:42:09,915 --> 12:42:15,435
storage location provides higher

17930
12:42:12,319 --> 12:42:17,915
availability but will drive up costs

17931
12:42:15,436 --> 12:42:20,880
please be aware that the location of a

17932
12:42:17,915 --> 12:42:22,079
snapshot affects its availability and

17933
12:42:20,879 --> 12:42:24,079
can incur

17934
12:42:22,080 --> 12:42:26,880
networking costs when creating the

17935
12:42:24,080 --> 12:42:29,276
snapshot or restoring it to a new disk

17936
12:42:26,879 --> 12:42:31,680
if you do not specify storage location

17937
12:42:29,275 --> 12:42:34,159
for a snapshot google cloud uses the

17938
12:42:31,680 --> 12:42:36,319
default location which stores your

17939
12:42:34,160 --> 12:42:39,200
snapshot in a cloud storage

17940
12:42:36,319 --> 12:42:41,680
multi-regional location closest to the

17941
12:42:39,199 --> 12:42:43,595
region of your source disk if you store

17942
12:42:41,680 --> 12:42:46,080
your snapshot in the same region as your

17943
12:42:43,595 --> 12:42:48,319
source disk there is no network charge

17944
12:42:46,080 --> 12:42:50,720
when you access that snapshot from the

17945
12:42:48,319 --> 12:42:53,040
same region if you access the snapshot

17946
12:42:50,720 --> 12:42:55,360
from a different region you will incur a

17947
12:42:53,040 --> 12:42:58,639
network cost compute engine stores

17948
12:42:55,360 --> 12:43:01,840
multiple copies of each snapshot across

17949
12:42:58,639 --> 12:43:03,756
multiple locations as well you cannot

17950
12:43:01,839 --> 12:43:06,239
change the storage location of an

17951
12:43:03,756 --> 12:43:08,720
existing snapshot once a snapshot has

17952
12:43:06,239 --> 12:43:11,680
been taken it can be used to create a

17953
12:43:08,720 --> 12:43:14,319
new disk in any region and zone

17954
12:43:11,680 --> 12:43:17,040
regardless of the storage location of

17955
12:43:14,319 --> 12:43:19,680
the snapshot now as i explained earlier

17956
12:43:17,040 --> 12:43:21,915
snapshots are incremental and i wanted

17957
12:43:19,680 --> 12:43:24,879
to take a moment to dive into that for

17958
12:43:21,915 --> 12:43:27,275
just a minute so when creating snapshots

17959
12:43:24,879 --> 12:43:30,239
the first successful snapshot of a

17960
12:43:27,275 --> 12:43:32,799
persistent disk is a full snapshot that

17961
12:43:30,239 --> 12:43:36,000
contains all the data on the persistent

17962
12:43:32,800 --> 12:43:39,040
disk the second snapshot only contains

17963
12:43:36,000 --> 12:43:41,519
any new data or modify data since the

17964
12:43:39,040 --> 12:43:44,879
first snapshot data that hasn't changed

17965
12:43:41,519 --> 12:43:47,755
since snapshot 1 isn't included instead

17966
12:43:44,879 --> 12:43:51,115
snapshot 2 contains references to

17967
12:43:47,756 --> 12:43:54,955
snapshot 1 for any unchanged data as

17968
12:43:51,116 --> 12:43:58,319
shown here snapshot 3 contains any new

17969
12:43:54,955 --> 12:44:01,116
or changed data since snapshot 2 but

17970
12:43:58,319 --> 12:44:04,955
won't contain any unchanged data from

17971
12:44:01,116 --> 12:44:07,436
snapshot 1 or 2. instead snapshot 3

17972
12:44:04,955 --> 12:44:10,639
contains references to blocks in

17973
12:44:07,436 --> 12:44:13,756
snapshot 1 and snapshot 2 for any

17974
12:44:10,639 --> 12:44:16,239
unchanged data this repeats for all

17975
12:44:13,756 --> 12:44:19,520
subsequent snapshots of the persistent

17976
12:44:16,239 --> 12:44:22,239
disk snapshots are always created based

17977
12:44:19,519 --> 12:44:24,159
on the last successful snapshot taken

17978
12:44:22,239 --> 12:44:26,639
and so now you're probably wondering

17979
12:44:24,160 --> 12:44:28,640
what happens when you decide to delete a

17980
12:44:26,639 --> 12:44:31,756
snapshot are they dependent on each

17981
12:44:28,639 --> 12:44:34,159
other well when you delete a snapshot

17982
12:44:31,756 --> 12:44:36,955
compute engine immediately marks the

17983
12:44:34,160 --> 12:44:39,596
snapshot as deleted in the system if the

17984
12:44:36,955 --> 12:44:41,915
snapshot has no dependent snapshots it

17985
12:44:39,595 --> 12:44:44,799
is deleted outright however if the

17986
12:44:41,915 --> 12:44:46,639
snapshot does have dependent snapshots

17987
12:44:44,800 --> 12:44:49,276
then there are some steps that happen

17988
12:44:46,639 --> 12:44:52,479
behind the scenes so shown here in this

17989
12:44:49,275 --> 12:44:54,955
diagram snapshot 2 is deleted the next

17990
12:44:52,480 --> 12:44:57,116
snapshot from the full snapshot no

17991
12:44:54,955 --> 12:45:00,479
longer references the snapshot for

17992
12:44:57,116 --> 12:45:03,436
deletion in this example snapshot 1 then

17993
12:45:00,480 --> 12:45:06,240
becomes the reference for snapshot 3 and

17994
12:45:03,436 --> 12:45:09,275
any data that is required for restoring

17995
12:45:06,239 --> 12:45:13,040
other snapshots is moved into the next

17996
12:45:09,275 --> 12:45:15,756
snapshot increasing its size shown here

17997
12:45:13,040 --> 12:45:18,800
blocks that were unique to snapshot 2

17998
12:45:15,756 --> 12:45:22,080
are moved to snapshot 3 and the size of

17999
12:45:18,800 --> 12:45:24,240
snapshot 3 increases any data that is

18000
12:45:22,080 --> 12:45:27,436
not required for restoring other

18001
12:45:24,239 --> 12:45:30,159
snapshots is deleted so in this case

18002
12:45:27,436 --> 12:45:33,200
blocks that are already in snapshot 3

18003
12:45:30,160 --> 12:45:35,756
are deleted from snapshot 2 and the size

18004
12:45:33,199 --> 12:45:38,239
of all snapshots are lower now because

18005
12:45:35,756 --> 12:45:40,559
subsequent snapshots might require

18006
12:45:38,239 --> 12:45:41,756
information stored in a previous

18007
12:45:40,559 --> 12:45:44,559
snapshot

18008
12:45:41,756 --> 12:45:47,595
please be aware that deleting a snapshot

18009
12:45:44,559 --> 12:45:49,519
does not necessarily delete all the data

18010
12:45:47,595 --> 12:45:51,915
on the snapshot if you're looking to

18011
12:45:49,519 --> 12:45:54,239
make sure that your data has indeed been

18012
12:45:51,915 --> 12:45:57,275
deleted from your snapshots you should

18013
12:45:54,239 --> 12:46:00,000
delete all snapshots if your disk has a

18014
12:45:57,275 --> 12:46:02,799
snapshot schedule you must detach the

18015
12:46:00,000 --> 12:46:04,400
snapshot schedule from the disk before

18016
12:46:02,800 --> 12:46:06,880
you can delete the schedule

18017
12:46:04,400 --> 12:46:09,596
removing the snapshot schedule from the

18018
12:46:06,879 --> 12:46:11,040
disk prevents further snapshot activity

18019
12:46:09,595 --> 12:46:13,360
from occurring

18020
12:46:11,040 --> 12:46:16,480
now touching on the topic of scheduled

18021
12:46:13,360 --> 12:46:19,275
snapshots by far the best way to backup

18022
12:46:16,480 --> 12:46:22,080
your data on compute engine is to use

18023
12:46:19,275 --> 12:46:24,079
scheduled snapshots this way you will

18024
12:46:22,080 --> 12:46:26,880
never have to worry about manually

18025
12:46:24,080 --> 12:46:29,040
creating snapshots or even worry about

18026
12:46:26,879 --> 12:46:31,519
using other tools to kick off those

18027
12:46:29,040 --> 12:46:34,000
snapshots you can simply use this

18028
12:46:31,519 --> 12:46:36,799
built-in tool by google which is why

18029
12:46:34,000 --> 12:46:39,680
snapshot schedules are considered best

18030
12:46:36,800 --> 12:46:42,160
practice to backup any compute engine

18031
12:46:39,680 --> 12:46:44,800
persistent disks now in order to create

18032
12:46:42,160 --> 12:46:47,200
any snapshot schedules you must create

18033
12:46:44,800 --> 12:46:49,276
your snapshot schedule in the same

18034
12:46:47,199 --> 12:46:52,079
region where your persistent disk

18035
12:46:49,275 --> 12:46:54,955
resides now there are two ways to create

18036
12:46:52,080 --> 12:46:57,360
a snapshot schedule the first one is to

18037
12:46:54,955 --> 12:47:00,400
create a snapshot schedule and then

18038
12:46:57,360 --> 12:47:02,639
attach it to an existing persistent disk

18039
12:47:00,400 --> 12:47:05,520
the other way is to create a new

18040
12:47:02,639 --> 12:47:08,000
persistent disk with a snapshot schedule

18041
12:47:05,519 --> 12:47:10,719
you also have the option of setting up a

18042
12:47:08,000 --> 12:47:13,436
snapshot retention policy that defines

18043
12:47:10,720 --> 12:47:15,275
how long you want to keep your snapshots

18044
12:47:13,436 --> 12:47:18,160
some options when creating snapshot

18045
12:47:15,275 --> 12:47:20,799
schedules are both retention policies

18046
12:47:18,160 --> 12:47:22,320
and source disk deletion rules now if

18047
12:47:20,800 --> 12:47:25,200
you choose to set up a snapshot

18048
12:47:22,319 --> 12:47:27,360
retention policy you must do it as part

18049
12:47:25,199 --> 12:47:29,595
of your snapshot schedule when you

18050
12:47:27,360 --> 12:47:32,480
create a snapshot schedule is when you

18051
12:47:29,595 --> 12:47:35,199
can also set a source disk deletion rule

18052
12:47:32,480 --> 12:47:37,436
the source disk deletion rule controls

18053
12:47:35,199 --> 12:47:40,079
what happens to your snapshots if the

18054
12:47:37,436 --> 12:47:42,639
source disk is deleted now a few caveats

18055
12:47:40,080 --> 12:47:45,840
here on the scheduled snapshots is that

18056
12:47:42,639 --> 12:47:48,319
a persistent disk can only have one

18057
12:47:45,839 --> 12:47:51,115
snapshot schedule attached to it at a

18058
12:47:48,319 --> 12:47:54,080
time also you cannot delete a snapshot

18059
12:47:51,116 --> 12:47:57,040
schedule if it is attached to a disk you

18060
12:47:54,080 --> 12:47:59,680
must detach the schedule from all disks

18061
12:47:57,040 --> 12:48:01,840
then delete the schedule as well after

18062
12:47:59,680 --> 12:48:04,400
you create a snapshot schedule you

18063
12:48:01,839 --> 12:48:07,275
cannot edit it to update a snapshot

18064
12:48:04,400 --> 12:48:10,000
schedule you must delete it and create a

18065
12:48:07,275 --> 12:48:12,159
new one now before i end this lesson i

18066
12:48:10,000 --> 12:48:14,160
wanted to touch on managing snapshots

18067
12:48:12,160 --> 12:48:16,000
for just a minute so when managing

18068
12:48:14,160 --> 12:48:18,720
snapshots there's a few things to

18069
12:48:16,000 --> 12:48:21,040
remember in order to use snapshots to

18070
12:48:18,720 --> 12:48:24,160
manage your data efficiently you can

18071
12:48:21,040 --> 12:48:26,639
snapshot your disks at most once every

18072
12:48:24,160 --> 12:48:29,200
10 minutes you are unable to snapshot

18073
12:48:26,639 --> 12:48:32,080
your disks at intervals less than 10

18074
12:48:29,199 --> 12:48:34,799
minutes so please keep that in mind when

18075
12:48:32,080 --> 12:48:37,520
creating your schedules also you should

18076
12:48:34,800 --> 12:48:39,916
create snapshots on a regular schedule

18077
12:48:37,519 --> 12:48:42,479
to minimize data loss if there was an

18078
12:48:39,915 --> 12:48:44,799
unexpected failure if you have existing

18079
12:48:42,480 --> 12:48:46,956
snapshots of a persistent disk the

18080
12:48:44,800 --> 12:48:50,000
system automatically uses them as a

18081
12:48:46,955 --> 12:48:52,479
baseline for any subsequent snapshots

18082
12:48:50,000 --> 12:48:55,436
that you create from that same disk

18083
12:48:52,480 --> 12:48:58,160
so in order to improve performance you

18084
12:48:55,436 --> 12:49:01,040
can eliminate excessive snapshots by

18085
12:48:58,160 --> 12:49:03,840
creating an image and reusing it using

18086
12:49:01,040 --> 12:49:06,480
this method would not only be ideal for

18087
12:49:03,839 --> 12:49:09,039
storage and management of snapshots but

18088
12:49:06,480 --> 12:49:11,200
also help to reduce costs and if you

18089
12:49:09,040 --> 12:49:14,000
schedule regular snapshots for your

18090
12:49:11,199 --> 12:49:16,719
persistent disks you can reduce the time

18091
12:49:14,000 --> 12:49:19,360
that it takes to complete each snapshot

18092
12:49:16,720 --> 12:49:21,756
by creating them during off-peak hours

18093
12:49:19,360 --> 12:49:24,955
when possible and lastly for those of

18094
12:49:21,756 --> 12:49:27,360
you who use windows for most situations

18095
12:49:24,955 --> 12:49:30,639
you can use the volume shadow copy

18096
12:49:27,360 --> 12:49:32,800
service to take snapshots of persistent

18097
12:49:30,639 --> 12:49:36,000
disks that are attached to windows

18098
12:49:32,800 --> 12:49:38,639
instances you can create vss snapshots

18099
12:49:36,000 --> 12:49:41,199
without having to stop the instance or

18100
12:49:38,639 --> 12:49:43,436
detach the persistent disk and so that's

18101
12:49:41,199 --> 12:49:45,435
pretty much all i wanted to cover when

18102
12:49:43,436 --> 12:49:48,400
it comes to the theory of persistent

18103
12:49:45,436 --> 12:49:50,880
disk snapshots their schedules and how

18104
12:49:48,400 --> 12:49:52,800
to manage them in the next lesson i'll

18105
12:49:50,879 --> 12:49:55,115
be doing a hands-on demo

18106
12:49:52,800 --> 12:49:58,000
demonstrating snapshots and putting this

18107
12:49:55,116 --> 12:50:00,639
theory into practice and get a feel for

18108
12:49:58,000 --> 12:50:03,040
how snapshots work and how they can be

18109
12:50:00,639 --> 12:50:05,040
applied to persistent disks so you can

18110
12:50:03,040 --> 12:50:06,800
now mark this lesson as complete and

18111
12:50:05,040 --> 12:50:07,669
whenever you're ready join me in the

18112
12:50:06,800 --> 12:50:11,680
console

18113
12:50:07,669 --> 12:50:12,879
[Music]

18114
12:50:11,680 --> 12:50:14,720
welcome back

18115
12:50:12,879 --> 12:50:17,115
in this demonstration we're going to

18116
12:50:14,720 --> 12:50:19,520
dive into snapshots and snapshot

18117
12:50:17,116 --> 12:50:21,916
schedules this demo will give you the

18118
12:50:19,519 --> 12:50:24,799
hands-on knowledge you need to create

18119
12:50:21,915 --> 12:50:27,115
and delete snapshots along with how to

18120
12:50:24,800 --> 12:50:29,436
manage snapshot schedules we're going to

18121
12:50:27,116 --> 12:50:31,596
start the demo off by creating an

18122
12:50:29,436 --> 12:50:33,756
instance we're going to interact with it

18123
12:50:31,595 --> 12:50:35,199
and then take a snapshot of the disk

18124
12:50:33,756 --> 12:50:37,275
we're going to then create another

18125
12:50:35,199 --> 12:50:39,915
instance from the snapshot and then

18126
12:50:37,275 --> 12:50:42,239
create some snapshot schedules for both

18127
12:50:39,915 --> 12:50:44,639
of these instances by using both the

18128
12:50:42,239 --> 12:50:47,436
console and the command line so there's

18129
12:50:44,639 --> 12:50:49,519
a lot to do here so with that being said

18130
12:50:47,436 --> 12:50:53,436
let's dive in and so i'm currently

18131
12:50:49,519 --> 12:50:56,079
logged in as tony bowties gmail.com as

18132
12:50:53,436 --> 12:50:57,680
well i'm in project bowtie inc so the

18133
12:50:56,080 --> 12:51:00,400
first thing that we need to do to kick

18134
12:50:57,680 --> 12:51:03,116
off this demo is to create an instance

18135
12:51:00,400 --> 12:51:05,680
but first as always i like to make sure

18136
12:51:03,116 --> 12:51:08,160
that i have a vpc to deploy my instance

18137
12:51:05,680 --> 12:51:10,080
into with its corresponding default

18138
12:51:08,160 --> 12:51:12,560
firewall rules and so i'm going to head

18139
12:51:10,080 --> 12:51:16,400
on over to the navigation menu and

18140
12:51:12,559 --> 12:51:16,399
scroll down to vpc network

18141
12:51:17,360 --> 12:51:21,915
and because i didn't delete my default

18142
12:51:19,199 --> 12:51:24,319
vpc from the last demo i still have it

18143
12:51:21,915 --> 12:51:26,399
here i'm just going to drill down and

18144
12:51:24,319 --> 12:51:28,480
make sure that i have my firewall rules

18145
12:51:26,400 --> 12:51:31,520
i'm gonna go over to firewall rules and

18146
12:51:28,480 --> 12:51:34,080
as expected the ssh firewall rule that i

18147
12:51:31,519 --> 12:51:35,915
need has already been created and so now

18148
12:51:34,080 --> 12:51:37,916
that i have everything in order i'm

18149
12:51:35,915 --> 12:51:40,799
gonna go back over to the navigation

18150
12:51:37,915 --> 12:51:43,199
menu and head on over to compute engine

18151
12:51:40,800 --> 12:51:45,680
to create my instance now i figure for

18152
12:51:43,199 --> 12:51:47,519
this demo i'd switch it up a little bit

18153
12:51:45,680 --> 12:51:49,199
and create the instance by the command

18154
12:51:47,519 --> 12:51:51,680
line so i'm going to head on over to

18155
12:51:49,199 --> 12:51:53,755
cloud shell i'm going to open that up

18156
12:51:51,680 --> 12:51:55,519
and it took a minute to provision and so

18157
12:51:53,756 --> 12:51:57,595
what i'm going to do now is i'm going to

18158
12:51:55,519 --> 12:51:59,755
open it up in a new tab i'm going to

18159
12:51:57,595 --> 12:52:02,239
zoom in for better viewing and i'm going

18160
12:51:59,756 --> 12:52:04,480
to paste in my command to create my

18161
12:52:02,239 --> 12:52:07,040
instance and this gcloud command to

18162
12:52:04,480 --> 12:52:09,360
create these instances will be available

18163
12:52:07,040 --> 12:52:11,040
in the github repository and you will

18164
12:52:09,360 --> 12:52:12,160
find all the instructions and the

18165
12:52:11,040 --> 12:52:14,800
commands

18166
12:52:12,160 --> 12:52:17,520
under managing snapshots in compute

18167
12:52:14,800 --> 12:52:19,596
engine so i'm going to hit enter

18168
12:52:17,519 --> 12:52:22,000
and you may get a prompt to authorize

18169
12:52:19,595 --> 12:52:23,756
this api call and i'm going to click on

18170
12:52:22,000 --> 12:52:25,756
authorize

18171
12:52:23,756 --> 12:52:28,239
and success our instance has been

18172
12:52:25,756 --> 12:52:30,559
created and is up and running and so now

18173
12:52:28,239 --> 12:52:32,400
what i want to do is ssh into the

18174
12:52:30,559 --> 12:52:34,799
instance and so i'm just going to run

18175
12:52:32,400 --> 12:52:38,080
the command from here which is gcloud

18176
12:52:34,800 --> 12:52:40,956
compute ssh dash dash zone the zone that

18177
12:52:38,080 --> 12:52:43,200
i'm in which is used 1b and the instance

18178
12:52:40,955 --> 12:52:45,436
which is bowtie dash instance i'm going

18179
12:52:43,199 --> 12:52:47,839
to hit enter it's going to prompt me if

18180
12:52:45,436 --> 12:52:50,000
i want to continue i'm going to say yes

18181
12:52:47,839 --> 12:52:51,679
and i'm going to enter my passphrase and

18182
12:52:50,000 --> 12:52:53,680
enter it again

18183
12:52:51,680 --> 12:52:55,116
it's going to update my metadata and

18184
12:52:53,680 --> 12:52:57,436
it's going to ask me again for my

18185
12:52:55,116 --> 12:52:59,520
passphrase and i'm in so i'm going to

18186
12:52:57,436 --> 12:53:01,040
just quickly clear my screen and so the

18187
12:52:59,519 --> 12:53:04,239
first thing i want to do is i want to

18188
12:53:01,040 --> 12:53:06,559
verify the name of my instance so i'm

18189
12:53:04,239 --> 12:53:09,199
going to type in the command hostname

18190
12:53:06,559 --> 12:53:11,756
and as expected bowtie dash instance

18191
12:53:09,199 --> 12:53:13,595
shows up and so now i want to create a

18192
12:53:11,756 --> 12:53:14,559
text file and so i'm going to run the

18193
12:53:13,595 --> 12:53:17,115
command

18194
12:53:14,559 --> 12:53:19,360
sudo nano file a

18195
12:53:17,116 --> 12:53:21,756
text i'm going to hit enter and it's

18196
12:53:19,360 --> 12:53:23,680
going to open up my nano text editor and

18197
12:53:21,756 --> 12:53:26,080
you can enter a message of any kind that

18198
12:53:23,680 --> 12:53:28,800
you'd like for me i'm going to enter

18199
12:53:26,080 --> 12:53:30,560
more bow tie needed because you can

18200
12:53:28,800 --> 12:53:33,276
never get enough bow ties i'm going to

18201
12:53:30,559 --> 12:53:35,756
hit ctrl o to save press enter to verify

18202
12:53:33,275 --> 12:53:38,479
the file name to write and then ctrl x

18203
12:53:35,756 --> 12:53:42,000
to exit i'm going to run the command ls

18204
12:53:38,480 --> 12:53:44,400
space minus al to list my files so i can

18205
12:53:42,000 --> 12:53:47,116
verify that my file has been created and

18206
12:53:44,400 --> 12:53:49,116
as you can see here file a bowties.txt

18207
12:53:47,116 --> 12:53:51,276
has been created and so now that i've

18208
12:53:49,116 --> 12:53:53,360
created my instance and i've written a

18209
12:53:51,275 --> 12:53:55,915
file to disk i'm going to now head on

18210
12:53:53,360 --> 12:53:58,239
over to the console and take a snapshot

18211
12:53:55,915 --> 12:54:00,159
of this disk and because my session was

18212
12:53:58,239 --> 12:54:02,159
transferred to another tab i can now

18213
12:54:00,160 --> 12:54:04,800
close the terminal and you want to head

18214
12:54:02,160 --> 12:54:07,200
over to the left-hand menu and go to

18215
12:54:04,800 --> 12:54:09,756
disks and so now i want to show you two

18216
12:54:07,199 --> 12:54:12,319
ways on how you can create this snapshot

18217
12:54:09,756 --> 12:54:14,559
the first one is going to disks and

18218
12:54:12,319 --> 12:54:17,275
choosing the disk that you want for me

18219
12:54:14,559 --> 12:54:19,275
it's bowtie instance and under actions

18220
12:54:17,275 --> 12:54:21,756
i'm going to click on the hamburger menu

18221
12:54:19,275 --> 12:54:23,436
and here i can create snapshot and this

18222
12:54:21,756 --> 12:54:25,756
will bring me straight to my snapshot

18223
12:54:23,436 --> 12:54:27,680
menu but for this demo i'm going to go

18224
12:54:25,756 --> 12:54:30,080
over to the left hand menu and i'm going

18225
12:54:27,680 --> 12:54:32,400
to click on snapshots and here i'm going

18226
12:54:30,080 --> 12:54:34,400
to click on create snapshot and so for

18227
12:54:32,400 --> 12:54:37,200
the name of the snapshot i'm going to

18228
12:54:34,400 --> 12:54:39,520
type in bowtie snapshot and i'm going to

18229
12:54:37,199 --> 12:54:41,680
use the same for the description moving

18230
12:54:39,519 --> 12:54:43,915
down on the source disk the only one

18231
12:54:41,680 --> 12:54:46,000
that i can select is bow tie instance

18232
12:54:43,915 --> 12:54:47,519
and that's the one that i want anyways

18233
12:54:46,000 --> 12:54:49,680
so i'm going to click on that the

18234
12:54:47,519 --> 12:54:51,595
location in order to cut down on costs

18235
12:54:49,680 --> 12:54:53,680
we don't need multi-regional we're going

18236
12:54:51,595 --> 12:54:56,079
to just select regional and if you

18237
12:54:53,680 --> 12:54:59,040
select on the location i'm able to

18238
12:54:56,080 --> 12:55:01,200
select any other locations like tokyo

18239
12:54:59,040 --> 12:55:03,040
and i can create my snapshot in tokyo

18240
12:55:01,199 --> 12:55:05,595
but i want to keep my snapshot in the

18241
12:55:03,040 --> 12:55:08,639
same region so i'm going to go back and

18242
12:55:05,595 --> 12:55:10,720
select us east one where it is based on

18243
12:55:08,639 --> 12:55:12,720
the source disk location and i'm going

18244
12:55:10,720 --> 12:55:15,436
to add a label here with the key

18245
12:55:12,720 --> 12:55:16,880
environment and the value of testing i'm

18246
12:55:15,436 --> 12:55:18,955
going to leave my encryption type as

18247
12:55:16,879 --> 12:55:21,115
google managed and i'm going to simply

18248
12:55:18,955 --> 12:55:23,680
click on create and this will create a

18249
12:55:21,116 --> 12:55:25,596
snapshot of the boot disk on bow tie

18250
12:55:23,680 --> 12:55:28,160
instance and that took about a minute

18251
12:55:25,595 --> 12:55:30,399
there and so just as a note if you have

18252
12:55:28,160 --> 12:55:33,116
any bigger discs they will take a little

18253
12:55:30,400 --> 12:55:35,116
bit longer to snapshot okay and now that

18254
12:55:33,116 --> 12:55:37,520
i've created my snapshot i'm going to go

18255
12:55:35,116 --> 12:55:40,000
back up to vm instances and i'm going to

18256
12:55:37,519 --> 12:55:42,000
create a new instance from that snapshot

18257
12:55:40,000 --> 12:55:44,480
and so i'm going to name this instance

18258
12:55:42,000 --> 12:55:46,239
bowtie dash instance dash 2 and i'm

18259
12:55:44,480 --> 12:55:48,880
going to give this a label i'm going to

18260
12:55:46,239 --> 12:55:51,519
add a label here the key of environment

18261
12:55:48,879 --> 12:55:54,239
and the value of testing and hit save

18262
12:55:51,519 --> 12:55:57,115
the region is going to be used 1 and you

18263
12:55:54,239 --> 12:55:59,595
can leave the zone as its default as us

18264
12:55:57,116 --> 12:56:02,000
east 1b and under machine type you can

18265
12:55:59,595 --> 12:56:04,479
select the e2 micro and you want to go

18266
12:56:02,000 --> 12:56:07,040
down to boot disk and select the change

18267
12:56:04,480 --> 12:56:09,520
button and here i'm going to select

18268
12:56:07,040 --> 12:56:11,840
snapshots instead of using a public

18269
12:56:09,519 --> 12:56:13,839
image so i'm going to click on snapshots

18270
12:56:11,839 --> 12:56:17,039
and if i select the snapshot drop down

18271
12:56:13,839 --> 12:56:18,719
menu i will see here my bowtie snapshot

18272
12:56:17,040 --> 12:56:20,559
so i'm going to select this i'm going to

18273
12:56:18,720 --> 12:56:22,319
leave the rest as default and i'm going

18274
12:56:20,559 --> 12:56:24,479
to go down to select and i'm going to

18275
12:56:22,319 --> 12:56:26,559
leave everything else as its default and

18276
12:56:24,480 --> 12:56:28,880
i'm going to click on create i'm going

18277
12:56:26,559 --> 12:56:31,275
to just give it a minute here so bowtie

18278
12:56:28,879 --> 12:56:33,199
instance 2 can be created okay and it

18279
12:56:31,275 --> 12:56:35,839
took a minute there so now i'm going to

18280
12:56:33,199 --> 12:56:37,519
ssh into this instance

18281
12:56:35,839 --> 12:56:39,595
and i'm going to zoom in for better

18282
12:56:37,519 --> 12:56:43,275
viewing and even though i know the

18283
12:56:39,595 --> 12:56:44,799
instance is named bowtie.instance2

18284
12:56:43,275 --> 12:56:47,360
i'm still going to run the hostname

18285
12:56:44,800 --> 12:56:49,680
command and as expected the same name

18286
12:56:47,360 --> 12:56:52,955
pops up but what i was really curious

18287
12:56:49,680 --> 12:56:56,800
about is if i run the command ls space

18288
12:56:52,955 --> 12:56:58,479
dash al i can see here my file of file

18289
12:56:56,800 --> 12:56:59,850
of bowties.text

18290
12:56:58,480 --> 12:57:01,200
and if i cat the file

18291
12:56:59,849 --> 12:57:03,116
[Music]

18292
12:57:01,199 --> 12:57:05,519
i'll be able to see the text that i

18293
12:57:03,116 --> 12:57:08,400
inputted into that file and so although

18294
12:57:05,519 --> 12:57:11,039
it was only one file and a text file at

18295
12:57:08,400 --> 12:57:13,200
that i was able to verify that my

18296
12:57:11,040 --> 12:57:14,955
snapshot had worked as there will be

18297
12:57:13,199 --> 12:57:17,435
times where your snapshot can get

18298
12:57:14,955 --> 12:57:19,756
corrupted and so doing some various spot

18299
12:57:17,436 --> 12:57:21,916
checks on your snapshots is some good

18300
12:57:19,756 --> 12:57:24,559
common practice and so now i want to

18301
12:57:21,915 --> 12:57:26,639
create a snapshot schedule for both of

18302
12:57:24,559 --> 12:57:28,799
these instances and so i'm going to go

18303
12:57:26,639 --> 12:57:31,116
back to the console and on the left hand

18304
12:57:28,800 --> 12:57:33,520
menu i'm going to head down to snapshots

18305
12:57:31,116 --> 12:57:35,596
and if i go over to snapshot schedules

18306
12:57:33,519 --> 12:57:37,839
you can see that i have no snapshot

18307
12:57:35,595 --> 12:57:40,159
schedules so let's go ahead and create a

18308
12:57:37,839 --> 12:57:42,479
new one by clicking on create snapshot

18309
12:57:40,160 --> 12:57:44,880
schedule and so as mentioned in the last

18310
12:57:42,480 --> 12:57:47,840
lesson we need to create this schedule

18311
12:57:44,879 --> 12:57:49,680
first before we can attach it to a disk

18312
12:57:47,839 --> 12:57:53,039
and so i'm going to name this snapshot

18313
12:57:49,680 --> 12:57:54,319
schedule as bow tie dash disk schedule

18314
12:57:53,040 --> 12:57:56,400
i'm going to use the same for the

18315
12:57:54,319 --> 12:57:58,879
description the region i'm going to

18316
12:57:56,400 --> 12:58:00,955
select it as us east one and i'm going

18317
12:57:58,879 --> 12:58:04,000
to keep the snapshot location as

18318
12:58:00,955 --> 12:58:06,955
regional under us east one you scroll

18319
12:58:04,000 --> 12:58:08,800
down here and under schedule options you

18320
12:58:06,955 --> 12:58:12,000
can leave the schedule frequency as

18321
12:58:08,800 --> 12:58:15,200
daily and just as a note for start time

18322
12:58:12,000 --> 12:58:17,199
this time is measured in utc so please

18323
12:58:15,199 --> 12:58:19,915
remember this when you're creating your

18324
12:58:17,199 --> 12:58:22,159
schedule in your specific time zone and

18325
12:58:19,915 --> 12:58:25,360
so i'm going to put the start time as o

18326
12:58:22,160 --> 12:58:28,240
600 and this will be 1 am eastern

18327
12:58:25,360 --> 12:58:30,400
standard time as backups are always best

18328
12:58:28,239 --> 12:58:32,319
done when there is the least amount of

18329
12:58:30,400 --> 12:58:35,200
activity and i'm going to keep the auto

18330
12:58:32,319 --> 12:58:36,800
delete snapshots after 14 days i'm going

18331
12:58:35,199 --> 12:58:39,519
to keep the deletion rule as keep

18332
12:58:36,800 --> 12:58:42,319
snapshots as well i can enable the

18333
12:58:39,519 --> 12:58:44,239
volume shadow copy service for windows

18334
12:58:42,319 --> 12:58:46,559
but since we're running linux i don't

18335
12:58:44,239 --> 12:58:48,159
need to enable this and since we labeled

18336
12:58:46,559 --> 12:58:50,159
everything else i might as well give

18337
12:58:48,160 --> 12:58:52,880
this a label i'm going to use the key as

18338
12:58:50,160 --> 12:58:54,400
environment and the value of testing and

18339
12:58:52,879 --> 12:58:56,559
once you've filled everything out then

18340
12:58:54,400 --> 12:58:58,560
you can simply click on create and it

18341
12:58:56,559 --> 12:59:00,639
took a minute there but the schedule was

18342
12:58:58,559 --> 12:59:03,275
created and so now that i have my

18343
12:59:00,639 --> 12:59:05,199
snapshot schedule i need to attach it to

18344
12:59:03,275 --> 12:59:07,756
a disk so i'm going to head on over to

18345
12:59:05,199 --> 12:59:09,275
the left hand menu and click on disks

18346
12:59:07,756 --> 12:59:11,275
and here i'm going to drill down into

18347
12:59:09,275 --> 12:59:13,360
bow tie instance i'm going to go up to

18348
12:59:11,275 --> 12:59:15,756
the top and click on edit and under

18349
12:59:13,360 --> 12:59:18,559
snapshot schedule i'm going to click on

18350
12:59:15,756 --> 12:59:20,639
the drop down and here i will find bow

18351
12:59:18,559 --> 12:59:22,955
tie disk schedule i'm going to select

18352
12:59:20,639 --> 12:59:25,595
that i'm going to click on save and so

18353
12:59:22,955 --> 12:59:28,239
now that i have my snapshot schedule

18354
12:59:25,595 --> 12:59:30,720
attached to my disk for the bowtie

18355
12:59:28,239 --> 12:59:33,436
instance instance i now want to create a

18356
12:59:30,720 --> 12:59:35,595
snapshot schedule for my other instance

18357
12:59:33,436 --> 12:59:37,200
and so instead of using the console i'm

18358
12:59:35,595 --> 12:59:38,879
going to go ahead and do it through the

18359
12:59:37,199 --> 12:59:41,039
command line so i'm going to go up to

18360
12:59:38,879 --> 12:59:43,595
the top to my open shell and i'm going

18361
12:59:41,040 --> 12:59:45,756
to quickly clear the screen and so in

18362
12:59:43,595 --> 12:59:48,559
order to create my schedule i'm going to

18363
12:59:45,756 --> 12:59:51,275
run this command gcloud compute resource

18364
12:59:48,559 --> 12:59:53,595
policies create snapshot schedule the

18365
12:59:51,275 --> 12:59:56,720
name of the snapshot schedule which is

18366
12:59:53,595 --> 12:59:59,275
bow tie disk schedule 2 the region the

18367
12:59:56,720 --> 13:00:01,916
maximum retention days the retention

18368
12:59:59,275 --> 13:00:04,559
policy and the schedule followed by the

18369
13:00:01,915 --> 13:00:06,399
storage location and like i said before

18370
13:00:04,559 --> 13:00:08,559
these commands you will find in the

18371
13:00:06,400 --> 13:00:10,560
github repository so i'm going to go

18372
13:00:08,559 --> 13:00:12,479
ahead and hit enter

18373
13:00:10,559 --> 13:00:14,479
and so i wanted to leave this error in

18374
13:00:12,480 --> 13:00:16,720
here to show you that i needed the

18375
13:00:14,480 --> 13:00:19,436
proper permissions in order to create

18376
13:00:16,720 --> 13:00:21,436
this snapshot schedule a great reminder

18377
13:00:19,436 --> 13:00:24,480
to always check if you have the right

18378
13:00:21,436 --> 13:00:27,116
role for the task at hand and so i have

18379
13:00:24,480 --> 13:00:29,520
two options i can either change users

18380
13:00:27,116 --> 13:00:32,000
from my service account user to tony

18381
13:00:29,519 --> 13:00:34,239
bowtie or i can simply head on over to

18382
13:00:32,000 --> 13:00:36,720
my instance and edit the service account

18383
13:00:34,239 --> 13:00:39,115
permissions and so the easiest way to do

18384
13:00:36,720 --> 13:00:41,275
it would be to just switch users and so

18385
13:00:39,116 --> 13:00:43,756
i'm going to go ahead and do that so i'm

18386
13:00:41,275 --> 13:00:46,799
going to go ahead and run the command

18387
13:00:43,756 --> 13:00:48,880
gcloud auth login and remember that this

18388
13:00:46,800 --> 13:00:50,956
is something that you don't have to do i

18389
13:00:48,879 --> 13:00:53,199
merely wanted to show you that you

18390
13:00:50,955 --> 13:00:56,080
require the proper permissions on

18391
13:00:53,199 --> 13:00:57,115
creation of specific resources okay and

18392
13:00:56,080 --> 13:00:59,200
i quickly went through the

18393
13:00:57,116 --> 13:01:00,955
authentication process i'm gonna just

18394
13:00:59,199 --> 13:01:03,360
clear my screen and i'm going to go

18395
13:01:00,955 --> 13:01:06,080
ahead and run the command again

18396
13:01:03,360 --> 13:01:08,480
and as expected the snapshot schedule

18397
13:01:06,080 --> 13:01:10,639
was created with no errors and so now

18398
13:01:08,480 --> 13:01:12,720
that my schedule has been created i can

18399
13:01:10,639 --> 13:01:15,595
now attach it to the disk so i'm going

18400
13:01:12,720 --> 13:01:18,239
to run the command gcloud compute disks

18401
13:01:15,595 --> 13:01:20,399
add resource policies the instance name

18402
13:01:18,239 --> 13:01:22,799
which is bowtie instance 2 and the

18403
13:01:20,400 --> 13:01:25,916
resource policy which is the snapshot

18404
13:01:22,800 --> 13:01:28,319
schedule named as bowtie disk schedule 2

18405
13:01:25,915 --> 13:01:29,680
in the zone of us east 1b i'm going to

18406
13:01:28,319 --> 13:01:32,559
hit enter

18407
13:01:29,680 --> 13:01:34,720
and success and so just to verify that

18408
13:01:32,559 --> 13:01:36,799
the snapshot schedule has been attached

18409
13:01:34,720 --> 13:01:38,955
to my disk i'm going to go back to the

18410
13:01:36,800 --> 13:01:41,360
console i'm going to head back on over

18411
13:01:38,955 --> 13:01:43,756
to the main page of disks i'm going to

18412
13:01:41,360 --> 13:01:46,160
drill down into bow tie instance 2 and

18413
13:01:43,756 --> 13:01:47,916
here it is the snapshot schedule has

18414
13:01:46,160 --> 13:01:50,080
been attached and so i want to

18415
13:01:47,915 --> 13:01:52,559
congratulate you on making it to the end

18416
13:01:50,080 --> 13:01:55,200
of this demo and i hope this demo has

18417
13:01:52,559 --> 13:01:58,319
been useful as snapshots in the role of

18418
13:01:55,199 --> 13:02:01,199
an engineer is a common task that can

18419
13:01:58,319 --> 13:02:03,915
save you from any data loss once set

18420
13:02:01,199 --> 13:02:06,319
into place and so just as a recap you've

18421
13:02:03,915 --> 13:02:08,399
created an instance you created a file

18422
13:02:06,319 --> 13:02:11,199
on that instance and then you've created

18423
13:02:08,400 --> 13:02:13,436
a snapshot of the disk of that instance

18424
13:02:11,199 --> 13:02:15,519
and used it to create another instance

18425
13:02:13,436 --> 13:02:18,239
you then verified the snapshot and then

18426
13:02:15,519 --> 13:02:21,039
created a snapshot schedule for both

18427
13:02:18,239 --> 13:02:23,519
boot disks of the instances using the

18428
13:02:21,040 --> 13:02:26,400
console and the command line well done

18429
13:02:23,519 --> 13:02:28,399
on another great job now before you go i

18430
13:02:26,400 --> 13:02:30,720
wanted to take a moment to clean up any

18431
13:02:28,400 --> 13:02:33,040
resources we've used so we don't

18432
13:02:30,720 --> 13:02:35,595
accumulate any costs and so the first

18433
13:02:33,040 --> 13:02:38,319
thing we want to do is we want to detach

18434
13:02:35,595 --> 13:02:40,639
the snapshot schedules from the disks

18435
13:02:38,319 --> 13:02:42,720
and so since we're in bow tie instance 2

18436
13:02:40,639 --> 13:02:44,720
i'm going to go ahead and click on edit

18437
13:02:42,720 --> 13:02:47,916
under snapshot schedule i'm going to

18438
13:02:44,720 --> 13:02:49,916
select the no schedule hit save and i'm

18439
13:02:47,915 --> 13:02:52,915
going to do the same thing with my other

18440
13:02:49,915 --> 13:02:52,915
disk

18441
13:02:53,915 --> 13:02:57,519
now i'm going to head back on over to

18442
13:02:55,595 --> 13:02:59,839
snapshots i'm going to delete this

18443
13:02:57,519 --> 13:03:02,159
snapshot and i'm going to head back on

18444
13:02:59,839 --> 13:03:04,319
over to snapshot schedules i'm going to

18445
13:03:02,160 --> 13:03:07,756
select all the snapshot schedules and

18446
13:03:04,319 --> 13:03:09,436
i'm going to click on delete

18447
13:03:07,756 --> 13:03:11,520
and now that everything's cleaned up

18448
13:03:09,436 --> 13:03:14,160
with regards to snapshots and snapshot

18449
13:03:11,519 --> 13:03:17,275
schedules i can now go over to vm

18450
13:03:14,160 --> 13:03:19,436
instances and delete the instances

18451
13:03:17,275 --> 13:03:22,159
i'm going to select them all and simply

18452
13:03:19,436 --> 13:03:22,160
click on delete

18453
13:03:22,239 --> 13:03:26,559
and so that's pretty much all i wanted

18454
13:03:24,000 --> 13:03:29,360
to cover in this demo when it comes to

18455
13:03:26,559 --> 13:03:31,915
snapshots and snapshot schedules

18456
13:03:29,360 --> 13:03:35,840
so you can now mark this as complete and

18457
13:03:31,915 --> 13:03:35,839
let's move on to the next one

18458
13:03:37,756 --> 13:03:42,720
welcome back in this lesson we're going

18459
13:03:40,239 --> 13:03:45,115
to switch gears and take an automated

18460
13:03:42,720 --> 13:03:47,756
approach to deployment by diving into

18461
13:03:45,116 --> 13:03:50,160
google's tool for infrastructure as code

18462
13:03:47,756 --> 13:03:52,400
called deployment manager now deployment

18463
13:03:50,160 --> 13:03:54,956
manager allows you to deploy

18464
13:03:52,400 --> 13:03:59,040
update and tear down resources from

18465
13:03:54,955 --> 13:04:01,436
within google cloud using yaml jinja and

18466
13:03:59,040 --> 13:04:03,520
python code templates it allows you to

18467
13:04:01,436 --> 13:04:05,680
automate the deployment of all the

18468
13:04:03,519 --> 13:04:09,199
resources that are available in google

18469
13:04:05,680 --> 13:04:12,080
cloud and deploy it in a fast easy and

18470
13:04:09,199 --> 13:04:14,639
repeatable way for consistency and

18471
13:04:12,080 --> 13:04:16,800
efficiency in this lesson we're going to

18472
13:04:14,639 --> 13:04:19,275
explore the architecture of deployment

18473
13:04:16,800 --> 13:04:22,240
manager and dive into all the different

18474
13:04:19,275 --> 13:04:24,639
components that gives it its flexibility

18475
13:04:22,239 --> 13:04:27,436
and the features that make this tool an

18476
13:04:24,639 --> 13:04:30,000
easy solution for deploying complex

18477
13:04:27,436 --> 13:04:31,680
environments so with that being said

18478
13:04:30,000 --> 13:04:33,680
let's dive in

18479
13:04:31,680 --> 13:04:36,239
now breaking down the components that i

18480
13:04:33,680 --> 13:04:38,160
mentioned earlier i wanted to start off

18481
13:04:36,239 --> 13:04:40,799
with the first component being the

18482
13:04:38,160 --> 13:04:43,116
configuration now a configuration

18483
13:04:40,800 --> 13:04:46,400
defines the structure of your deployment

18484
13:04:43,116 --> 13:04:48,955
as you must specify a configuration to

18485
13:04:46,400 --> 13:04:51,756
create a deployment a configuration

18486
13:04:48,955 --> 13:04:54,239
describes all the resources you want for

18487
13:04:51,756 --> 13:04:56,720
a single deployment and is written in

18488
13:04:54,239 --> 13:04:58,799
yaml syntax that lists each of the

18489
13:04:56,720 --> 13:05:00,955
resources you want to create and its

18490
13:04:58,800 --> 13:05:03,200
respective resource properties a

18491
13:05:00,955 --> 13:05:05,199
configuration must contain a resources

18492
13:05:03,199 --> 13:05:08,559
section followed by the list of

18493
13:05:05,199 --> 13:05:12,000
resources to create and so each resource

18494
13:05:08,559 --> 13:05:15,199
must contain these three components the

18495
13:05:12,000 --> 13:05:17,595
name the type and properties without

18496
13:05:15,199 --> 13:05:19,915
these three components a deployment will

18497
13:05:17,595 --> 13:05:21,519
not instantiate and so i wanted to take

18498
13:05:19,915 --> 13:05:24,000
a moment to go over these three

18499
13:05:21,519 --> 13:05:26,479
components in a bit of depth so the

18500
13:05:24,000 --> 13:05:29,360
first component of the configuration is

18501
13:05:26,480 --> 13:05:32,400
the name and the name is a user defined

18502
13:05:29,360 --> 13:05:35,199
string to identify this resource and can

18503
13:05:32,400 --> 13:05:38,319
be anything you choose from names like

18504
13:05:35,199 --> 13:05:41,435
instance one my-vm

18505
13:05:38,319 --> 13:05:45,595
bowtie dash instance and you can even go

18506
13:05:41,436 --> 13:05:48,480
as far to use larks dash instance dash

18507
13:05:45,595 --> 13:05:51,115
don't dash touch and the syntax can be

18508
13:05:48,480 --> 13:05:53,916
found here and must not contain any

18509
13:05:51,116 --> 13:05:56,955
spaces or invalid characters next

18510
13:05:53,915 --> 13:05:58,719
component in a configuration is type and

18511
13:05:56,955 --> 13:06:00,720
there are a couple of different types

18512
13:05:58,720 --> 13:06:04,239
that you can choose from a type can

18513
13:06:00,720 --> 13:06:05,360
represent a single api source known as a

18514
13:06:04,239 --> 13:06:07,839
base type

18515
13:06:05,360 --> 13:06:10,319
or a set of resources known as a

18516
13:06:07,839 --> 13:06:12,239
composite type and either one of these

18517
13:06:10,319 --> 13:06:14,159
can be used to create part of your

18518
13:06:12,239 --> 13:06:16,559
deployment the type of the resource

18519
13:06:14,160 --> 13:06:18,560
being deployed here in this diagram is

18520
13:06:16,559 --> 13:06:21,360
shown as a base type of

18521
13:06:18,559 --> 13:06:23,595
compute.v1.instance

18522
13:06:21,360 --> 13:06:27,680
and there are many other api resources

18523
13:06:23,595 --> 13:06:31,479
that can be used such as compute.v1.disk

18524
13:06:27,680 --> 13:06:34,879
app engine dot v1 as well as

18525
13:06:31,480 --> 13:06:38,560
bigquery.v2 and the syntax is shown here

18526
13:06:34,879 --> 13:06:40,879
as api dot version dot resource now a

18527
13:06:38,559 --> 13:06:43,040
composite type contains one or more

18528
13:06:40,879 --> 13:06:45,680
templates that are pre-configured to

18529
13:06:43,040 --> 13:06:48,239
work together these templates expand to

18530
13:06:45,680 --> 13:06:50,559
a set of base types when deployed in a

18531
13:06:48,239 --> 13:06:53,115
deployment composite types are

18532
13:06:50,559 --> 13:06:55,839
essentially hosted templates that you

18533
13:06:53,116 --> 13:06:59,596
can add to deployment manager the syntax

18534
13:06:55,839 --> 13:07:02,319
is shown here as gcp dash types forward

18535
13:06:59,595 --> 13:07:04,479
slash provider colon resource and to

18536
13:07:02,319 --> 13:07:05,915
give you an example of what a composite

18537
13:07:04,480 --> 13:07:08,560
type looks like

18538
13:07:05,915 --> 13:07:11,680
here is shown the creation of a reserved

18539
13:07:08,559 --> 13:07:14,319
ip address using the compute engine v1

18540
13:07:11,680 --> 13:07:17,519
api and you could also use composite

18541
13:07:14,319 --> 13:07:21,436
types with other apis in the same way

18542
13:07:17,519 --> 13:07:25,915
such as gcp dash types forward slash app

18543
13:07:21,436 --> 13:07:29,116
engine dash v1 colon apps or bigquery

18544
13:07:25,915 --> 13:07:31,519
v2 colon data sets and for the last

18545
13:07:29,116 --> 13:07:34,160
component in a configuration is

18546
13:07:31,519 --> 13:07:36,559
properties and this is the parameters

18547
13:07:34,160 --> 13:07:38,480
for the resource type this includes all

18548
13:07:36,559 --> 13:07:41,040
the parameters you see here in this

18549
13:07:38,480 --> 13:07:43,840
example including the zone

18550
13:07:41,040 --> 13:07:46,160
machine type the type of disk along with

18551
13:07:43,839 --> 13:07:48,719
its parameters pretty much everything

18552
13:07:46,160 --> 13:07:51,116
that gives detail on the resource type

18553
13:07:48,720 --> 13:07:53,680
now just as a note they must match the

18554
13:07:51,116 --> 13:07:56,160
properties for this type so what do i

18555
13:07:53,680 --> 13:07:58,400
mean by this so let's say you entered a

18556
13:07:56,160 --> 13:08:00,640
zone but that particular zone doesn't

18557
13:07:58,400 --> 13:08:02,880
exist or that compute engine machine

18558
13:08:00,639 --> 13:08:05,040
type doesn't exist in that zone you will

18559
13:08:02,879 --> 13:08:07,519
end up getting an error as deployment

18560
13:08:05,040 --> 13:08:09,680
manager will not be able to parse this

18561
13:08:07,519 --> 13:08:11,680
configuration and thus failing

18562
13:08:09,680 --> 13:08:14,480
deployment so make sure when you add

18563
13:08:11,680 --> 13:08:17,436
your properties that they match those of

18564
13:08:14,480 --> 13:08:19,916
the resource now a configuration can

18565
13:08:17,436 --> 13:08:22,160
contain templates which are essentially

18566
13:08:19,915 --> 13:08:24,639
parts of the configuration file that

18567
13:08:22,160 --> 13:08:27,116
have been abstracted into individual

18568
13:08:24,639 --> 13:08:30,559
building blocks a template is a separate

18569
13:08:27,116 --> 13:08:32,720
file that is imported and used as a type

18570
13:08:30,559 --> 13:08:34,239
in a configuration and you can use as

18571
13:08:32,720 --> 13:08:36,800
many templates as you want in a

18572
13:08:34,239 --> 13:08:39,360
configuration and allow you to separate

18573
13:08:36,800 --> 13:08:42,720
your configuration out into different

18574
13:08:39,360 --> 13:08:44,879
pieces that you can use and reuse across

18575
13:08:42,720 --> 13:08:48,000
different deployments templates can be

18576
13:08:44,879 --> 13:08:49,519
as generalized or specific as you need

18577
13:08:48,000 --> 13:08:51,756
and they also allow you to take

18578
13:08:49,519 --> 13:08:54,719
advantage of features like template

18579
13:08:51,756 --> 13:08:57,756
properties environment variables and

18580
13:08:54,720 --> 13:09:00,480
modules to create dynamic configuration

18581
13:08:57,756 --> 13:09:02,639
as shown here templates can be written

18582
13:09:00,480 --> 13:09:05,840
in a couple of different ways they can

18583
13:09:02,639 --> 13:09:08,879
be written in either ginger 2.1 or

18584
13:09:05,839 --> 13:09:11,199
python 3. the example shown on the left

18585
13:09:08,879 --> 13:09:13,915
has been written in ginger and is very

18586
13:09:11,199 --> 13:09:16,319
similar to the yaml syntax so if you're

18587
13:09:13,915 --> 13:09:18,559
familiar with yaml this might be better

18588
13:09:16,319 --> 13:09:20,639
for you the example on the right has

18589
13:09:18,559 --> 13:09:23,360
been written in python and is pretty

18590
13:09:20,639 --> 13:09:25,360
amazing as you can take advantage of

18591
13:09:23,360 --> 13:09:27,436
programmatically generating parts of

18592
13:09:25,360 --> 13:09:30,000
your templates if you are familiar with

18593
13:09:27,436 --> 13:09:32,639
python this might be a better format for

18594
13:09:30,000 --> 13:09:35,519
you now one of the advantages of using

18595
13:09:32,639 --> 13:09:38,159
templates is the ability to create and

18596
13:09:35,519 --> 13:09:40,479
define custom template properties

18597
13:09:38,160 --> 13:09:43,276
template properties are arbitrary

18598
13:09:40,480 --> 13:09:46,400
variables that you define in template

18599
13:09:43,275 --> 13:09:48,879
files any configuration file or template

18600
13:09:46,400 --> 13:09:51,436
file that uses the template in question

18601
13:09:48,879 --> 13:09:53,680
can provide a value for the template

18602
13:09:51,436 --> 13:09:56,160
property without changing the template

18603
13:09:53,680 --> 13:09:58,319
directly this lets you abstract the

18604
13:09:56,160 --> 13:10:01,116
property so that you can change the

18605
13:09:58,319 --> 13:10:03,756
property's value for each unique

18606
13:10:01,116 --> 13:10:06,240
configuration without updating the

18607
13:10:03,756 --> 13:10:08,880
underlying template and just as a note

18608
13:10:06,239 --> 13:10:11,360
deployment manager creates predefined

18609
13:10:08,879 --> 13:10:14,000
environment variables that you can use

18610
13:10:11,360 --> 13:10:17,116
in your deployment in this example the

18611
13:10:14,000 --> 13:10:19,436
project variable will use the project id

18612
13:10:17,116 --> 13:10:21,840
for this specific project and so

18613
13:10:19,436 --> 13:10:24,080
combining all these components together

18614
13:10:21,839 --> 13:10:26,955
will give you a deployment and so a

18615
13:10:24,080 --> 13:10:29,596
deployment is a collection of resources

18616
13:10:26,955 --> 13:10:31,595
that are deployed and managed together

18617
13:10:29,595 --> 13:10:34,879
using a configuration you can then

18618
13:10:31,595 --> 13:10:37,756
deploy update or delete this deployment

18619
13:10:34,879 --> 13:10:40,399
by merely changing some code or at the

18620
13:10:37,756 --> 13:10:43,360
click of a button now when you deploy

18621
13:10:40,400 --> 13:10:45,840
you provide a valid configuration in the

18622
13:10:43,360 --> 13:10:47,680
request to create the deployment a

18623
13:10:45,839 --> 13:10:50,319
deployment can contain a number of

18624
13:10:47,680 --> 13:10:52,239
resources across a number of google

18625
13:10:50,319 --> 13:10:55,116
cloud services when you create a

18626
13:10:52,239 --> 13:10:57,756
deployment deployment manager creates

18627
13:10:55,116 --> 13:11:00,080
all of the described resources to deploy

18628
13:10:57,756 --> 13:11:02,319
a configuration it must be done through

18629
13:11:00,080 --> 13:11:04,240
the command line and cannot be done

18630
13:11:02,319 --> 13:11:06,955
through the console you can simply use

18631
13:11:04,239 --> 13:11:08,955
the syntax shown here and a deployment

18632
13:11:06,955 --> 13:11:11,275
will be instantiated from the

18633
13:11:08,955 --> 13:11:13,756
configuration file that you have entered

18634
13:11:11,275 --> 13:11:16,559
where bow tie deploy is the name of the

18635
13:11:13,756 --> 13:11:19,436
deployment and the file after the dash

18636
13:11:16,559 --> 13:11:22,399
dash config is your configuration file

18637
13:11:19,436 --> 13:11:25,200
google cloud also offers pre-defined

18638
13:11:22,400 --> 13:11:27,916
templates that you can use to deploy

18639
13:11:25,199 --> 13:11:30,239
from the gcp marketplace and can be

18640
13:11:27,915 --> 13:11:33,115
found right in the console of deployment

18641
13:11:30,239 --> 13:11:35,915
manager this way all the configuration

18642
13:11:33,116 --> 13:11:38,000
and template creation is handled for you

18643
13:11:35,915 --> 13:11:40,639
and you just deploy the solution through

18644
13:11:38,000 --> 13:11:43,040
the console now after you've created a

18645
13:11:40,639 --> 13:11:45,360
deployment you can update it whenever

18646
13:11:43,040 --> 13:11:47,915
you need to you can update a deployment

18647
13:11:45,360 --> 13:11:50,559
by adding or removing resources from a

18648
13:11:47,915 --> 13:11:52,799
deployment or updating the properties of

18649
13:11:50,559 --> 13:11:55,115
existing resources in a deployment a

18650
13:11:52,800 --> 13:11:57,276
single update can contain any

18651
13:11:55,116 --> 13:11:59,116
combination of these changes so you can

18652
13:11:57,275 --> 13:12:02,400
make changes to the properties of

18653
13:11:59,116 --> 13:12:04,639
existing resources and add new resources

18654
13:12:02,400 --> 13:12:07,040
in the same request you update your

18655
13:12:04,639 --> 13:12:09,436
deployment by first making changes to

18656
13:12:07,040 --> 13:12:11,595
your configuration file or you can

18657
13:12:09,436 --> 13:12:13,680
create a configuration file with the

18658
13:12:11,595 --> 13:12:15,915
changes you want you will then have the

18659
13:12:13,680 --> 13:12:18,400
option to pick the policies to use for

18660
13:12:15,915 --> 13:12:21,199
your updates or you can use the default

18661
13:12:18,400 --> 13:12:23,680
policies and finally you then make the

18662
13:12:21,199 --> 13:12:26,079
update request to deployment manager and

18663
13:12:23,680 --> 13:12:28,319
so once you've launched your deployment

18664
13:12:26,080 --> 13:12:31,200
each deployment has a corresponding

18665
13:12:28,319 --> 13:12:33,839
manifest as the example shown here a

18666
13:12:31,199 --> 13:12:36,000
manifest is a read-only property that

18667
13:12:33,839 --> 13:12:39,039
describes all the resources in your

18668
13:12:36,000 --> 13:12:41,436
deployment and is automatically created

18669
13:12:39,040 --> 13:12:43,915
with each new deployment manifests

18670
13:12:41,436 --> 13:12:46,720
cannot be modified after they have been

18671
13:12:43,915 --> 13:12:49,915
created as well it's not the same as a

18672
13:12:46,720 --> 13:12:52,080
configuration file but is created based

18673
13:12:49,915 --> 13:12:55,040
on the configuration file and so when

18674
13:12:52,080 --> 13:12:57,436
you delete a deployment all resources

18675
13:12:55,040 --> 13:12:59,756
that are part of the deployment are also

18676
13:12:57,436 --> 13:13:01,756
deleted if you want to delete specific

18677
13:12:59,756 --> 13:13:04,400
resources from your deployment and keep

18678
13:13:01,756 --> 13:13:06,955
the rest delete those resources from

18679
13:13:04,400 --> 13:13:08,400
your configuration file and update the

18680
13:13:06,955 --> 13:13:10,720
deployment instead

18681
13:13:08,400 --> 13:13:12,880
and so as you can see here deployment

18682
13:13:10,720 --> 13:13:16,080
manager gives you a slew of different

18683
13:13:12,879 --> 13:13:20,000
options to deploy update or delete

18684
13:13:16,080 --> 13:13:23,116
resources simultaneously in google cloud

18685
13:13:20,000 --> 13:13:25,519
now like most services in gcp there are

18686
13:13:23,116 --> 13:13:27,116
always some best practices to follow

18687
13:13:25,519 --> 13:13:29,435
note that there are many more best

18688
13:13:27,116 --> 13:13:32,000
practices to add to this and can be

18689
13:13:29,436 --> 13:13:34,160
found in the documentation which i will

18690
13:13:32,000 --> 13:13:36,400
be providing the link to in the lesson

18691
13:13:34,160 --> 13:13:38,640
text but i did want to point out some

18692
13:13:36,400 --> 13:13:40,720
important ones to remember so the first

18693
13:13:38,639 --> 13:13:43,040
one i wanted to bring up is to break

18694
13:13:40,720 --> 13:13:45,756
your configurations up into logical

18695
13:13:43,040 --> 13:13:48,400
units so for example you should create

18696
13:13:45,756 --> 13:13:51,360
separate configurations for networking

18697
13:13:48,400 --> 13:13:54,639
services security services and compute

18698
13:13:51,360 --> 13:13:56,955
services so this way each team will be

18699
13:13:54,639 --> 13:13:59,436
able to easily take care of their own

18700
13:13:56,955 --> 13:14:02,080
domain without having to sift through a

18701
13:13:59,436 --> 13:14:04,239
massive template containing the code to

18702
13:14:02,080 --> 13:14:07,116
the entire environment another best

18703
13:14:04,239 --> 13:14:09,756
practice to follow is to use references

18704
13:14:07,116 --> 13:14:12,319
and references should be used for values

18705
13:14:09,756 --> 13:14:15,916
that are not defined until a resource is

18706
13:14:12,319 --> 13:14:19,040
created such as resources self-link ip

18707
13:14:15,915 --> 13:14:21,680
address or system generated id without

18708
13:14:19,040 --> 13:14:24,400
references deployment manager creates

18709
13:14:21,680 --> 13:14:27,360
all resources in parallel so there's no

18710
13:14:24,400 --> 13:14:29,756
guarantee that dependent resources are

18711
13:14:27,360 --> 13:14:32,480
created in the correct order using

18712
13:14:29,756 --> 13:14:35,200
references would enforce the order in

18713
13:14:32,480 --> 13:14:37,840
which resources are created the next one

18714
13:14:35,199 --> 13:14:39,915
is to preview your deployments using the

18715
13:14:37,839 --> 13:14:42,479
preview flag so you should always

18716
13:14:39,915 --> 13:14:44,399
preview your deployments to assess how

18717
13:14:42,480 --> 13:14:46,956
making an update will affect your

18718
13:14:44,400 --> 13:14:49,275
deployment deployment manager does not

18719
13:14:46,955 --> 13:14:52,319
actually deploy resources when you

18720
13:14:49,275 --> 13:14:54,879
preview a configuration but runs a mock

18721
13:14:52,319 --> 13:14:57,199
deployment of those resources instead

18722
13:14:54,879 --> 13:14:59,755
this gives you the opportunity to see

18723
13:14:57,199 --> 13:15:01,595
the changes to your deployment before

18724
13:14:59,756 --> 13:15:03,680
committing to it you also want to

18725
13:15:01,595 --> 13:15:06,000
consider automating the creation of

18726
13:15:03,680 --> 13:15:08,400
projects as well as automating the

18727
13:15:06,000 --> 13:15:10,720
creation of resources contained within

18728
13:15:08,400 --> 13:15:14,000
the projects and this enables you to

18729
13:15:10,720 --> 13:15:16,480
adopt an infrastructure as code approach

18730
13:15:14,000 --> 13:15:19,199
for project provisioning this will allow

18731
13:15:16,480 --> 13:15:21,680
you to provide a series of predefined

18732
13:15:19,199 --> 13:15:23,915
project environments that can be quickly

18733
13:15:21,680 --> 13:15:26,000
and easily provisioned it will also

18734
13:15:23,915 --> 13:15:28,319
allow you to use version control to

18735
13:15:26,000 --> 13:15:31,199
manage your base project configuration

18736
13:15:28,319 --> 13:15:33,839
and it will also allow you to deploy

18737
13:15:31,199 --> 13:15:36,639
reproducible and consistent project

18738
13:15:33,839 --> 13:15:39,039
configurations and lastly using a

18739
13:15:36,639 --> 13:15:42,080
version control system as part of the

18740
13:15:39,040 --> 13:15:44,800
development process for your deployments

18741
13:15:42,080 --> 13:15:47,360
is a great best practice to follow as it

18742
13:15:44,800 --> 13:15:49,916
allows you to fall back to a previous

18743
13:15:47,360 --> 13:15:53,040
known good configuration it provides an

18744
13:15:49,915 --> 13:15:55,040
audit trail for changes as well it uses

18745
13:15:53,040 --> 13:15:57,275
the configuration as part of a

18746
13:15:55,040 --> 13:15:59,116
continuous deployment system now as

18747
13:15:57,275 --> 13:16:01,275
you've seen here in this lesson

18748
13:15:59,116 --> 13:16:03,916
deployment manager can be a powerful

18749
13:16:01,275 --> 13:16:06,400
tool in your tool belt when it comes to

18750
13:16:03,915 --> 13:16:08,955
implementing infrastructure as code and

18751
13:16:06,400 --> 13:16:11,436
it has endless possibilities that you

18752
13:16:08,955 --> 13:16:13,360
can explore on your own it can also

18753
13:16:11,436 --> 13:16:16,319
provide a massive push

18754
13:16:13,360 --> 13:16:19,116
towards devops practices and head down

18755
13:16:16,319 --> 13:16:21,275
the path of continuous automation

18756
13:16:19,116 --> 13:16:23,680
through continuous integration

18757
13:16:21,275 --> 13:16:25,839
continuous delivery and continuous

18758
13:16:23,680 --> 13:16:27,595
deployment and so that's pretty much all

18759
13:16:25,839 --> 13:16:29,435
i wanted to cover when it comes to

18760
13:16:27,595 --> 13:16:31,519
deployment manager and so whenever

18761
13:16:29,436 --> 13:16:33,436
you're ready join me in the next one

18762
13:16:31,519 --> 13:16:36,159
where we will go hands-on in a

18763
13:16:33,436 --> 13:16:38,080
demonstration to deploy a configuration

18764
13:16:36,160 --> 13:16:39,840
in deployment manager so you can now

18765
13:16:38,080 --> 13:16:41,360
mark this lesson as complete and

18766
13:16:39,839 --> 13:16:42,419
whenever you're ready join me in the

18767
13:16:41,360 --> 13:16:46,319
console

18768
13:16:42,419 --> 13:16:48,955
[Music]

18769
13:16:46,319 --> 13:16:50,800
welcome back in this demonstration we're

18770
13:16:48,955 --> 13:16:53,595
gonna go hands-on with deployment

18771
13:16:50,800 --> 13:16:55,596
manager and deploy a small web server

18772
13:16:53,595 --> 13:16:58,159
we're gonna first use the google cloud

18773
13:16:55,595 --> 13:17:00,720
editor to copy in our code and we're

18774
13:16:58,160 --> 13:17:02,800
gonna then do a dry run and then finally

18775
13:17:00,720 --> 13:17:04,559
deploy our code we're gonna then do a

18776
13:17:02,800 --> 13:17:07,200
walkthrough of deployment manager in the

18777
13:17:04,559 --> 13:17:09,360
console and go through the manifest as

18778
13:17:07,199 --> 13:17:11,435
well as some of the other features we're

18779
13:17:09,360 --> 13:17:13,915
then going to verify all the deployed

18780
13:17:11,436 --> 13:17:16,239
resources and we get to do an easy

18781
13:17:13,915 --> 13:17:18,559
cleanup in the end by hitting the delete

18782
13:17:16,239 --> 13:17:20,799
button and taking care of removing any

18783
13:17:18,559 --> 13:17:22,955
resources that were created so there's

18784
13:17:20,800 --> 13:17:25,596
quite a bit to go through here and so

18785
13:17:22,955 --> 13:17:27,915
with that being said let's dive in and

18786
13:17:25,595 --> 13:17:31,915
so as you can see here i am logged in as

18787
13:17:27,915 --> 13:17:34,079
tonybowties gmail.com in the project of

18788
13:17:31,915 --> 13:17:36,319
bowtie inc now since we're going to be

18789
13:17:34,080 --> 13:17:38,480
doing most of our work in code the first

18790
13:17:36,319 --> 13:17:40,400
thing that we want to do is go to the

18791
13:17:38,480 --> 13:17:42,560
google cloud editor so i'm going to go

18792
13:17:40,400 --> 13:17:44,160
up here to the top and open up cloud

18793
13:17:42,559 --> 13:17:46,159
shell and i'm going to then click on the

18794
13:17:44,160 --> 13:17:48,400
button open editor i'm going to make

18795
13:17:46,160 --> 13:17:50,320
this full screen for better viewing and

18796
13:17:48,400 --> 13:17:52,560
so in order to get the terminal in the

18797
13:17:50,319 --> 13:17:54,800
same viewing pane as the editor i'm

18798
13:17:52,559 --> 13:17:57,040
going to simply go up to the top menu

18799
13:17:54,800 --> 13:17:59,436
and click on terminal and select new

18800
13:17:57,040 --> 13:18:01,840
terminal now for better viewing and this

18801
13:17:59,436 --> 13:18:04,480
is totally optional for you i'm going to

18802
13:18:01,839 --> 13:18:06,000
change the color theme into a dark mode

18803
13:18:04,480 --> 13:18:08,880
and so i'm going to go up to the menu

18804
13:18:06,000 --> 13:18:10,800
click on file go down to settings and go

18805
13:18:08,879 --> 13:18:13,595
over to color theme and i'm going to

18806
13:18:10,800 --> 13:18:15,596
select dark visual studio and for those

18807
13:18:13,595 --> 13:18:18,319
of you who are working in visual studio

18808
13:18:15,595 --> 13:18:20,319
code this may look very familiar to you

18809
13:18:18,319 --> 13:18:23,595
and i'm also going to increase the font

18810
13:18:20,319 --> 13:18:25,756
size by again going back up to file over

18811
13:18:23,595 --> 13:18:28,319
to settings and then over to open

18812
13:18:25,756 --> 13:18:30,559
preferences here under workspace and

18813
13:18:28,319 --> 13:18:32,400
then scroll down to terminal

18814
13:18:30,559 --> 13:18:34,559
and if you scroll down to integrated

18815
13:18:32,400 --> 13:18:37,040
font size i'm going to adjust the font

18816
13:18:34,559 --> 13:18:39,040
size to 20 for better viewing and my

18817
13:18:37,040 --> 13:18:40,879
cloud shell font size is a little bit

18818
13:18:39,040 --> 13:18:42,955
easier to see and so once you've done

18819
13:18:40,879 --> 13:18:45,435
that you can then close the preferences

18820
13:18:42,955 --> 13:18:48,080
tab and we're now ready to create files

18821
13:18:45,436 --> 13:18:50,480
in our editor okay so next up i want to

18822
13:18:48,080 --> 13:18:52,080
create a folder for all my files to live

18823
13:18:50,480 --> 13:18:54,240
in so i'm going to go up to the menu

18824
13:18:52,080 --> 13:18:55,916
here i'm going to select on file and

18825
13:18:54,239 --> 13:18:58,955
select new folder and i'm going to

18826
13:18:55,915 --> 13:19:01,519
rename this folder as templates and hit

18827
13:18:58,955 --> 13:19:03,360
ok and so now that we have the folder

18828
13:19:01,519 --> 13:19:05,595
that all of our files are going to live

18829
13:19:03,360 --> 13:19:08,720
in the next step is to open up the

18830
13:19:05,595 --> 13:19:11,115
github repository in your text editor

18831
13:19:08,720 --> 13:19:13,436
and have your files ready to copy over

18832
13:19:11,116 --> 13:19:15,756
and so just as a note for those who are

18833
13:19:13,436 --> 13:19:17,596
fluent in how to use git

18834
13:19:15,756 --> 13:19:20,080
you can use this new feature in the

18835
13:19:17,595 --> 13:19:22,319
cloud shell editor to clone the course

18836
13:19:20,080 --> 13:19:24,319
repo without having to recreate the

18837
13:19:22,319 --> 13:19:25,839
files so i'm going to go over my text

18838
13:19:24,319 --> 13:19:28,080
editor and make sure that you've

18839
13:19:25,839 --> 13:19:30,559
recently done a git pull we're going to

18840
13:19:28,080 --> 13:19:32,560
open up the files under compute engine

18841
13:19:30,559 --> 13:19:35,519
deployment manager and you'll see

18842
13:19:32,559 --> 13:19:37,519
templates with a set of three files and

18843
13:19:35,519 --> 13:19:38,955
i've already conveniently opened them up

18844
13:19:37,519 --> 13:19:41,435
i'm going to go up to bow tie

18845
13:19:38,955 --> 13:19:43,595
deploy.yaml and this is going to be the

18846
13:19:41,436 --> 13:19:45,840
configuration file that i'm going to be

18847
13:19:43,595 --> 13:19:47,839
copying over and once i finish copying

18848
13:19:45,839 --> 13:19:50,159
all these files over i'll be going

18849
13:19:47,839 --> 13:19:52,239
through this in a little bit of detail

18850
13:19:50,160 --> 13:19:54,000
just so you can understand the format of

18851
13:19:52,239 --> 13:19:55,756
this configuration and so i'm going to

18852
13:19:54,000 --> 13:19:58,239
select all of this i'm going to copy

18853
13:19:55,756 --> 13:20:01,360
this head back on over to the editor and

18854
13:19:58,239 --> 13:20:04,239
here i'm going to select file new file

18855
13:20:01,360 --> 13:20:08,000
so i'm going to rename this as bow tie

18856
13:20:04,239 --> 13:20:10,639
dash deploy dot yaml hit okay and i'm

18857
13:20:08,000 --> 13:20:12,955
going to paste in my code and so this

18858
13:20:10,639 --> 13:20:15,839
configuration file is showing that i'm

18859
13:20:12,955 --> 13:20:18,799
going to be importing two templates by

18860
13:20:15,839 --> 13:20:20,595
the name of bowtie.webserver.jinja

18861
13:20:18,800 --> 13:20:22,400
as well as

18862
13:20:20,595 --> 13:20:24,399
bowtie.network.jinja so i'm going to

18863
13:20:22,400 --> 13:20:26,400
have a template for my web server and a

18864
13:20:24,400 --> 13:20:29,040
template for the network and under

18865
13:20:26,400 --> 13:20:31,520
resources as you can see this code here

18866
13:20:29,040 --> 13:20:33,756
will create my bow tie dash web server

18867
13:20:31,519 --> 13:20:36,239
the type is going to be the template the

18868
13:20:33,756 --> 13:20:38,800
properties will have the zone the

18869
13:20:36,239 --> 13:20:41,275
machine type as well as a reference for

18870
13:20:38,800 --> 13:20:44,319
the network as well underneath the

18871
13:20:41,275 --> 13:20:46,955
bowtie web server is the bowtie network

18872
13:20:44,319 --> 13:20:49,199
and again this is pulling from type

18873
13:20:46,955 --> 13:20:51,915
bowtie.network.jinja

18874
13:20:49,199 --> 13:20:54,000
so this is a another template file and

18875
13:20:51,915 --> 13:20:56,319
under the properties we have the region

18876
13:20:54,000 --> 13:20:59,116
of us east one and so we're going to

18877
13:20:56,319 --> 13:21:01,519
copy over these two templates bowtie web

18878
13:20:59,116 --> 13:21:03,680
server and bowtie network as we need

18879
13:21:01,519 --> 13:21:05,519
both of these templates in order to

18880
13:21:03,680 --> 13:21:07,360
complete this deployment and so i'm

18881
13:21:05,519 --> 13:21:09,435
going to go ahead and do that now head

18882
13:21:07,360 --> 13:21:11,520
back on over to my code editor i'm going

18883
13:21:09,436 --> 13:21:13,840
to go to bowtie web server i'm going to

18884
13:21:11,519 --> 13:21:15,680
copy everything here back to my editor

18885
13:21:13,839 --> 13:21:17,359
and i'm going to create the new file

18886
13:21:15,680 --> 13:21:19,680
called bowtie

18887
13:21:17,360 --> 13:21:22,160
web server it's going to be dot jinja

18888
13:21:19,680 --> 13:21:23,756
hit enter i'm going to paste the code in

18889
13:21:22,160 --> 13:21:25,756
and just to do a quick run through of

18890
13:21:23,756 --> 13:21:28,559
the template the instance name is going

18891
13:21:25,756 --> 13:21:30,800
to be bow tie dash website the type is

18892
13:21:28,559 --> 13:21:32,799
compute.v1.instance

18893
13:21:30,800 --> 13:21:35,040
and as you can see here we are using a

18894
13:21:32,800 --> 13:21:37,436
bunch of different properties here under

18895
13:21:35,040 --> 13:21:39,360
zone we have property zone which is

18896
13:21:37,436 --> 13:21:42,000
going to reference back to the yaml

18897
13:21:39,360 --> 13:21:44,559
template here under zone you will see us

18898
13:21:42,000 --> 13:21:46,400
east 1b and so this way if i have to

18899
13:21:44,559 --> 13:21:48,479
create another web server

18900
13:21:46,400 --> 13:21:50,955
i can enter whatever zone i like here in

18901
13:21:48,480 --> 13:21:53,276
the configuration file and leave the bow

18902
13:21:50,955 --> 13:21:55,756
tie dash web server template just the

18903
13:21:53,275 --> 13:21:57,839
way it is under machine type i have

18904
13:21:55,756 --> 13:22:00,319
variables set for both the zone and

18905
13:21:57,839 --> 13:22:02,799
machine type under disks i'm going to

18906
13:22:00,319 --> 13:22:04,639
have the device name as an environment

18907
13:22:02,800 --> 13:22:07,040
variable and it's going to be a

18908
13:22:04,639 --> 13:22:09,680
persistent disk and the source image is

18909
13:22:07,040 --> 13:22:12,000
going to be debian9 i also put in some

18910
13:22:09,680 --> 13:22:14,800
metadata here that will bring up the web

18911
13:22:12,000 --> 13:22:17,360
server and lastly i have a network tag

18912
13:22:14,800 --> 13:22:19,916
of http server as well as the

18913
13:22:17,360 --> 13:22:22,400
configuration for the network interface

18914
13:22:19,915 --> 13:22:25,199
the network referring to bowtie dash

18915
13:22:22,400 --> 13:22:27,040
network and a sub network called public

18916
13:22:25,199 --> 13:22:30,319
which i will be showing to you in just a

18917
13:22:27,040 --> 13:22:32,720
moment and as well the access configs of

18918
13:22:30,319 --> 13:22:35,116
the type one to one nat and this will

18919
13:22:32,720 --> 13:22:36,639
give the instance a public ip address

18920
13:22:35,116 --> 13:22:38,800
and so now that we've gone through that

18921
13:22:36,639 --> 13:22:40,955
template we need to create one last

18922
13:22:38,800 --> 13:22:42,639
template which is the bowtie dash

18923
13:22:40,955 --> 13:22:44,879
network so i'm going to head back on

18924
13:22:42,639 --> 13:22:48,159
over to my code editor and open up

18925
13:22:44,879 --> 13:22:50,079
bowtie network select the code copy it

18926
13:22:48,160 --> 13:22:53,360
back over to cloud editor and i'm going

18927
13:22:50,080 --> 13:22:56,639
to create a new file call this bowtie

18928
13:22:53,360 --> 13:22:58,480
network dot jinja hit enter paste in my

18929
13:22:56,639 --> 13:23:00,400
code and to quickly walk you through

18930
13:22:58,480 --> 13:23:02,640
this we're going to be creating a new

18931
13:23:00,400 --> 13:23:04,560
custom network called bow tie dash

18932
13:23:02,639 --> 13:23:06,879
network the type is going to be

18933
13:23:04,559 --> 13:23:10,079
compute.v1.network

18934
13:23:06,879 --> 13:23:12,479
as the vpc uses the compute engine api

18935
13:23:10,080 --> 13:23:15,040
it's going to be a custom network so the

18936
13:23:12,480 --> 13:23:16,956
value of the auto create sub networks is

18937
13:23:15,040 --> 13:23:19,360
going to be false the name is going to

18938
13:23:16,955 --> 13:23:22,159
be public here we have the custom

18939
13:23:19,360 --> 13:23:24,400
ipcider range and you can also use this

18940
13:23:22,160 --> 13:23:26,956
as a variable but for this demo i

18941
13:23:24,400 --> 13:23:29,275
decided to just leave it under network i

18942
13:23:26,955 --> 13:23:31,595
have a reference to the bowtie network

18943
13:23:29,275 --> 13:23:33,680
the value for private google access is

18944
13:23:31,595 --> 13:23:36,079
false and the region variable is

18945
13:23:33,680 --> 13:23:38,800
fulfilled through the configuration file

18946
13:23:36,080 --> 13:23:42,080
moving right along i have two firewall

18947
13:23:38,800 --> 13:23:44,639
rules here one for ssh access and the

18948
13:23:42,080 --> 13:23:47,520
other for web server access one opening

18949
13:23:44,639 --> 13:23:50,000
up port 22 to the world as well as port

18950
13:23:47,519 --> 13:23:53,435
80. as well the web server access

18951
13:23:50,000 --> 13:23:55,839
firewall rule has a target tag of http

18952
13:23:53,436 --> 13:23:58,800
server referencing back to the network

18953
13:23:55,839 --> 13:24:00,879
tag of the bowtie web server instance

18954
13:23:58,800 --> 13:24:02,880
okay and so now we've finished creating

18955
13:24:00,879 --> 13:24:04,955
the configuration file along with the

18956
13:24:02,879 --> 13:24:08,159
templates so i'm going to head back on

18957
13:24:04,955 --> 13:24:10,080
up to the menu click on file and select

18958
13:24:08,160 --> 13:24:12,480
save all and since we've finished

18959
13:24:10,080 --> 13:24:15,596
creating all of our files the next thing

18960
13:24:12,480 --> 13:24:17,916
to do is to execute a mock deploy using

18961
13:24:15,595 --> 13:24:19,915
the bowtie deploy configuration but

18962
13:24:17,915 --> 13:24:22,559
first i know that we haven't used

18963
13:24:19,915 --> 13:24:25,435
deployment manager before and so i need

18964
13:24:22,559 --> 13:24:27,275
to go in and turn on the api and so i'm

18965
13:24:25,436 --> 13:24:29,436
just going to go up here to the top to

18966
13:24:27,275 --> 13:24:31,756
the search bar and i'm going to type in

18967
13:24:29,436 --> 13:24:34,160
deployment and you should see deployment

18968
13:24:31,756 --> 13:24:36,480
manager as the first result and bring

18969
13:24:34,160 --> 13:24:38,720
this down a little bit and as expected

18970
13:24:36,480 --> 13:24:40,560
the deployment manager api has not been

18971
13:24:38,720 --> 13:24:42,880
enabled yet so i'm going to click on

18972
13:24:40,559 --> 13:24:44,479
enable and after a few moments we should

18973
13:24:42,879 --> 13:24:46,879
be good to go

18974
13:24:44,480 --> 13:24:48,480
okay and as you can see here deployment

18975
13:24:46,879 --> 13:24:49,915
manager is pretty empty

18976
13:24:48,480 --> 13:24:51,840
as most of it is done through the

18977
13:24:49,915 --> 13:24:54,479
command line but if you're looking to

18978
13:24:51,839 --> 13:24:56,399
deploy a marketplace solution you can do

18979
13:24:54,480 --> 13:24:58,319
that right here at the top and this will

18980
13:24:56,400 --> 13:25:00,880
bring you right to the marketplace and

18981
13:24:58,319 --> 13:25:03,199
will allow you to deploy from a large

18982
13:25:00,879 --> 13:25:05,040
selection of pre-configured templates

18983
13:25:03,199 --> 13:25:06,799
but i don't want to do that and so i'm

18984
13:25:05,040 --> 13:25:08,239
just going to bring this up a little bit

18985
13:25:06,800 --> 13:25:10,400
and i'm going to head on over to the

18986
13:25:08,239 --> 13:25:12,400
terminal i'm going to run an ls i'm

18987
13:25:10,400 --> 13:25:14,000
going to run the command ls and you

18988
13:25:12,400 --> 13:25:16,160
should be able to see the templates

18989
13:25:14,000 --> 13:25:18,800
folder i'm going to change my directory

18990
13:25:16,160 --> 13:25:21,116
into the templates folder do another ls

18991
13:25:18,800 --> 13:25:22,880
and here are all my files and so before

18992
13:25:21,116 --> 13:25:25,116
we do a mock deploy of this

18993
13:25:22,879 --> 13:25:27,360
configuration we want to make sure that

18994
13:25:25,116 --> 13:25:29,520
we're deploying to the correct project i

18995
13:25:27,360 --> 13:25:32,319
can see here that i am currently in bow

18996
13:25:29,519 --> 13:25:34,079
tie inc but if you are ever unsure about

18997
13:25:32,319 --> 13:25:35,915
the project that you're in you can

18998
13:25:34,080 --> 13:25:38,240
always run the gcloud config list

18999
13:25:35,915 --> 13:25:40,399
command in order to confirm so i'm going

19000
13:25:38,239 --> 13:25:43,436
to quickly clear my screen and i'm going

19001
13:25:40,400 --> 13:25:45,040
to run the command gcloud config list

19002
13:25:43,436 --> 13:25:48,000
it's going to prompt me to authorize

19003
13:25:45,040 --> 13:25:50,639
this api call and i'm going to authorize

19004
13:25:48,000 --> 13:25:53,519
and as expected my project is set to

19005
13:25:50,639 --> 13:25:54,955
deploy in project bowtie inc and so now

19006
13:25:53,519 --> 13:25:57,115
that i've verified it i'm going to

19007
13:25:54,955 --> 13:25:59,756
quickly clear my screen again and so i'm

19008
13:25:57,116 --> 13:26:02,720
going to paste in my command gcloud

19009
13:25:59,756 --> 13:26:06,160
deployment dash manager deployments

19010
13:26:02,720 --> 13:26:07,916
create bowtie deploy which is the name

19011
13:26:06,160 --> 13:26:11,040
of the deployment along with the

19012
13:26:07,915 --> 13:26:12,955
configuration file flag dash dash config

19013
13:26:11,040 --> 13:26:15,000
and then the name of the configuration

19014
13:26:12,955 --> 13:26:17,595
file which is bowtie

19015
13:26:15,000 --> 13:26:20,080
deploy.yaml and the preview flag as

19016
13:26:17,595 --> 13:26:22,479
we're only doing a mock deploy and so if

19017
13:26:20,080 --> 13:26:24,955
there are any errors i'll be able to see

19018
13:26:22,480 --> 13:26:26,880
this before i actually deploy all the

19019
13:26:24,955 --> 13:26:29,116
resources so i'm going to go ahead and

19020
13:26:26,879 --> 13:26:31,595
hit enter and in just a minute we'll

19021
13:26:29,116 --> 13:26:33,520
find out exactly what happens

19022
13:26:31,595 --> 13:26:35,680
and as you can see here the mock

19023
13:26:33,519 --> 13:26:38,639
deployment was a success and there are

19024
13:26:35,680 --> 13:26:40,720
no errors and if i do a quick refresh up

19025
13:26:38,639 --> 13:26:42,800
here in the console i'll be able to see

19026
13:26:40,720 --> 13:26:45,116
my deployment which i can drill down

19027
13:26:42,800 --> 13:26:47,596
into and here i will see my manifest

19028
13:26:45,116 --> 13:26:50,160
file with my manifest name and i can

19029
13:26:47,595 --> 13:26:53,040
view the config as well as my templates

19030
13:26:50,160 --> 13:26:55,596
that it imported the layout as well as

19031
13:26:53,040 --> 13:26:58,319
the expanded config so if i click on

19032
13:26:55,595 --> 13:27:00,639
view of the config it'll show me here in

19033
13:26:58,319 --> 13:27:03,595
the right hand panel exactly what this

19034
13:27:00,639 --> 13:27:05,915
deployment has used for the config and i

19035
13:27:03,595 --> 13:27:08,000
can do the same thing with my template

19036
13:27:05,915 --> 13:27:10,000
files so i'm going to open up my network

19037
13:27:08,000 --> 13:27:12,480
template and i can quickly go through

19038
13:27:10,000 --> 13:27:14,559
that if i'd like as well i also have the

19039
13:27:12,480 --> 13:27:16,640
option to download it and if i really

19040
13:27:14,559 --> 13:27:19,360
want to get granular i can go over here

19041
13:27:16,639 --> 13:27:21,360
to the left hand pane i can select on vm

19042
13:27:19,360 --> 13:27:23,680
instance and it'll show me all the

19043
13:27:21,360 --> 13:27:25,915
resource properties everything from the

19044
13:27:23,680 --> 13:27:28,955
disks to the machine type to the

19045
13:27:25,915 --> 13:27:31,519
metadata the network interfaces the zone

19046
13:27:28,955 --> 13:27:33,680
that it's in and the network tag same

19047
13:27:31,519 --> 13:27:35,519
thing if i go over here to the network

19048
13:27:33,680 --> 13:27:37,680
and again because this is a custom

19049
13:27:35,519 --> 13:27:40,319
network the value for the autocreate

19050
13:27:37,680 --> 13:27:42,400
subnetworks is false i can check on the

19051
13:27:40,319 --> 13:27:44,800
public sub network as well as the

19052
13:27:42,400 --> 13:27:47,116
firewall rules and so because this is a

19053
13:27:44,800 --> 13:27:49,520
preview it has not actually deployed

19054
13:27:47,116 --> 13:27:52,080
anything now taking a look at compute

19055
13:27:49,519 --> 13:27:53,755
engine instances in a new tab you can

19056
13:27:52,080 --> 13:27:56,240
see here that i have no instances

19057
13:27:53,756 --> 13:27:58,400
deployed and so the same goes for any of

19058
13:27:56,239 --> 13:28:00,639
the other resources and so what we want

19059
13:27:58,400 --> 13:28:02,955
to do now is we want to deploy this

19060
13:28:00,639 --> 13:28:05,116
deployment and we can do that one of two

19061
13:28:02,955 --> 13:28:07,275
ways we can simply click on the button

19062
13:28:05,116 --> 13:28:09,200
here that says deploy or we can run the

19063
13:28:07,275 --> 13:28:10,799
command in the command line and so i'm

19064
13:28:09,199 --> 13:28:12,639
looking to show you how to do it in the

19065
13:28:10,800 --> 13:28:14,720
command line so i'm going to move down

19066
13:28:12,639 --> 13:28:16,479
to the command line i'm going to quickly

19067
13:28:14,720 --> 13:28:18,400
clear my screen

19068
13:28:16,480 --> 13:28:20,720
i'm going to paste in the code which is

19069
13:28:18,400 --> 13:28:24,319
gcloud deployment dash manager

19070
13:28:20,720 --> 13:28:27,116
deployments update bowtie deploy now

19071
13:28:24,319 --> 13:28:29,116
you're probably wondering why update and

19072
13:28:27,116 --> 13:28:31,680
this is because the configuration has

19073
13:28:29,116 --> 13:28:34,000
been deployed even though it's a preview

19074
13:28:31,680 --> 13:28:36,400
deployment manager still sees it as a

19075
13:28:34,000 --> 13:28:38,955
deployment and has created what google

19076
13:28:36,400 --> 13:28:41,200
cloud calls a shell and so by using

19077
13:28:38,955 --> 13:28:44,400
update you can fully deploy the

19078
13:28:41,199 --> 13:28:46,799
configuration using your last preview to

19079
13:28:44,400 --> 13:28:49,596
perform that update and this will deploy

19080
13:28:46,800 --> 13:28:51,840
your resources exactly how you see it in

19081
13:28:49,595 --> 13:28:54,639
the manifest and so anytime i make an

19082
13:28:51,839 --> 13:28:56,879
adjustment to either the configuration

19083
13:28:54,639 --> 13:28:59,040
or the templates i can simply run the

19084
13:28:56,879 --> 13:29:00,955
update command instead of doing the

19085
13:28:59,040 --> 13:29:02,720
whole deployment again so i want to get

19086
13:29:00,955 --> 13:29:04,400
this deployed now and so i'm going to

19087
13:29:02,720 --> 13:29:06,160
hit enter

19088
13:29:04,400 --> 13:29:09,116
and i'll be back in a minute once it's

19089
13:29:06,160 --> 13:29:11,436
deployed all the resources and success

19090
13:29:09,116 --> 13:29:14,000
my deployment is successful and as you

19091
13:29:11,436 --> 13:29:16,720
can see here there are no errors and all

19092
13:29:14,000 --> 13:29:18,319
the resources are in a completed state

19093
13:29:16,720 --> 13:29:20,559
so i'm going to select my bow tie

19094
13:29:18,319 --> 13:29:23,360
website in my manifest and i'll have

19095
13:29:20,559 --> 13:29:25,275
access to the resource with a link up

19096
13:29:23,360 --> 13:29:28,480
here at the top that will bring me to

19097
13:29:25,275 --> 13:29:31,360
the instance as well i can ssh into the

19098
13:29:28,480 --> 13:29:33,276
instance and i have all the same options

19099
13:29:31,360 --> 13:29:35,595
that i have in the compute engine

19100
13:29:33,275 --> 13:29:38,239
console and so in order to verify that

19101
13:29:35,595 --> 13:29:40,399
all my resources have been deployed i'm

19102
13:29:38,239 --> 13:29:42,799
going to go back over to the tab that i

19103
13:29:40,400 --> 13:29:44,955
already have open and as you can see my

19104
13:29:42,800 --> 13:29:46,639
instance has been deployed and i want to

19105
13:29:44,955 --> 13:29:48,239
check to see if my network has been

19106
13:29:46,639 --> 13:29:50,400
deployed so i'm going to go up to the

19107
13:29:48,239 --> 13:29:53,115
navigation menu and i'm going to head on

19108
13:29:50,400 --> 13:29:55,436
down to vpc network and as you can see

19109
13:29:53,116 --> 13:29:57,596
here bowtie network has been deployed

19110
13:29:55,436 --> 13:29:59,596
with its two corresponding firewall

19111
13:29:57,595 --> 13:30:01,519
rules i'm going to drill down into

19112
13:29:59,595 --> 13:30:03,839
bowtie network and check out the

19113
13:30:01,519 --> 13:30:07,115
firewall rules and as you can see here

19114
13:30:03,839 --> 13:30:09,435
ssh access and web server access have

19115
13:30:07,116 --> 13:30:11,680
been created with its corresponding

19116
13:30:09,436 --> 13:30:13,436
protocols and ports and so now that i

19117
13:30:11,680 --> 13:30:15,595
know that all my resources have been

19118
13:30:13,436 --> 13:30:18,319
deployed i want to head back on over to

19119
13:30:15,595 --> 13:30:20,319
compute engine to see if my instance has

19120
13:30:18,319 --> 13:30:23,519
been configured properly so i'm going to

19121
13:30:20,319 --> 13:30:26,720
click on ssh to see if i can ssh into

19122
13:30:23,519 --> 13:30:28,719
the instance and success with ssh so i

19123
13:30:26,720 --> 13:30:30,880
know that this is working properly and

19124
13:30:28,720 --> 13:30:32,955
so i'm going to close this tab down and

19125
13:30:30,879 --> 13:30:35,199
i also want to see whether or not my web

19126
13:30:32,955 --> 13:30:37,519
server has been configured properly with

19127
13:30:35,199 --> 13:30:40,000
the metadata that i provided it and so i

19128
13:30:37,519 --> 13:30:43,115
can directly open up the webpage by

19129
13:30:40,000 --> 13:30:45,595
simply clicking on this link and success

19130
13:30:43,116 --> 13:30:48,080
my you look dapper today why thank you

19131
13:30:45,595 --> 13:30:50,319
tony bowtie and so as you can see the

19132
13:30:48,080 --> 13:30:52,880
web server has been configured properly

19133
13:30:50,319 --> 13:30:54,879
using the metadata that i provided so i

19134
13:30:52,879 --> 13:30:57,040
wanted to congratulate you on making it

19135
13:30:54,879 --> 13:30:59,360
to the end of this demo and hope it has

19136
13:30:57,040 --> 13:31:01,840
been extremely useful and gave you an

19137
13:30:59,360 --> 13:31:04,559
understanding of how infrastructure is

19138
13:31:01,839 --> 13:31:06,955
code is used in google cloud using their

19139
13:31:04,559 --> 13:31:09,435
native tools i hope this also triggered

19140
13:31:06,955 --> 13:31:11,275
some possible use cases for you that

19141
13:31:09,436 --> 13:31:14,000
will allow you to automate more

19142
13:31:11,275 --> 13:31:16,319
resources and configurations in your

19143
13:31:14,000 --> 13:31:19,436
environment and allow you to start

19144
13:31:16,319 --> 13:31:22,080
innovating on fantastic new ways for

19145
13:31:19,436 --> 13:31:24,400
cicd for those of you who are familiar

19146
13:31:22,080 --> 13:31:26,400
with infrastructure as code this may

19147
13:31:24,400 --> 13:31:29,116
have been a refresher but will give you

19148
13:31:26,400 --> 13:31:31,275
some insight for questions on the exam

19149
13:31:29,116 --> 13:31:33,520
that cover deployment manager and just

19150
13:31:31,275 --> 13:31:35,199
as a quick note for those of you who are

19151
13:31:33,519 --> 13:31:37,595
looking to learn more about

19152
13:31:35,199 --> 13:31:40,079
infrastructure as code i have put a few

19153
13:31:37,595 --> 13:31:42,720
links in the lesson text going into

19154
13:31:40,080 --> 13:31:44,639
depth on deployment manager and another

19155
13:31:42,720 --> 13:31:47,436
tool that google recommends called

19156
13:31:44,639 --> 13:31:49,360
terraform and so now before you go we

19157
13:31:47,436 --> 13:31:52,000
want to clean up all the resources that

19158
13:31:49,360 --> 13:31:54,239
we've deployed to reduce any incurred

19159
13:31:52,000 --> 13:31:56,720
costs and because deployment manager

19160
13:31:54,239 --> 13:31:58,879
makes it easy we can do it in one simple

19161
13:31:56,720 --> 13:32:01,360
step so i'm going to head back on over

19162
13:31:58,879 --> 13:32:03,360
to my open tab where i have my console

19163
13:32:01,360 --> 13:32:05,840
open to deployment manager and i'm going

19164
13:32:03,360 --> 13:32:08,000
to head on over to the delete button and

19165
13:32:05,839 --> 13:32:10,559
simply click on delete now deployment

19166
13:32:08,000 --> 13:32:13,040
manager gives me the option of deleting

19167
13:32:10,559 --> 13:32:15,275
all the resources it created or simply

19168
13:32:13,040 --> 13:32:17,595
deleting the manifest but keeping the

19169
13:32:15,275 --> 13:32:20,720
resources untouched and so you want to

19170
13:32:17,595 --> 13:32:23,360
select delete bowtie deploy with all of

19171
13:32:20,720 --> 13:32:25,756
its resources and simply click on delete

19172
13:32:23,360 --> 13:32:27,756
all and this will initiate the teardown

19173
13:32:25,756 --> 13:32:30,160
of all the resources that have been

19174
13:32:27,756 --> 13:32:32,239
deployed from the bowtie deploy

19175
13:32:30,160 --> 13:32:34,320
configuration and this will take a few

19176
13:32:32,239 --> 13:32:37,040
minutes to tear down but if you ever

19177
13:32:34,319 --> 13:32:39,519
have a larger configuration to deploy

19178
13:32:37,040 --> 13:32:42,559
just as a note it may take a little bit

19179
13:32:39,519 --> 13:32:45,199
longer to both deploy and to tear down

19180
13:32:42,559 --> 13:32:47,915
and so just as a recap you've created a

19181
13:32:45,199 --> 13:32:50,399
configuration file and two templates in

19182
13:32:47,915 --> 13:32:52,479
the cloud shell editor you then deployed

19183
13:32:50,400 --> 13:32:54,720
your configuration using deployment

19184
13:32:52,480 --> 13:32:57,276
manager through the command line in

19185
13:32:54,720 --> 13:32:59,756
cloud shell you then verified each

19186
13:32:57,275 --> 13:33:02,479
individual resource that was deployed

19187
13:32:59,756 --> 13:33:05,436
and verified the configuration of each

19188
13:33:02,480 --> 13:33:07,596
resource congratulations again on a job

19189
13:33:05,436 --> 13:33:09,916
well done and so that's pretty much all

19190
13:33:07,595 --> 13:33:12,159
i wanted to cover in this demo when it

19191
13:33:09,915 --> 13:33:14,399
comes to deploying resources using

19192
13:33:12,160 --> 13:33:16,720
deployment manager so you can now mark

19193
13:33:14,400 --> 13:33:17,590
this as complete and let's move on to

19194
13:33:16,720 --> 13:33:21,520
the next one

19195
13:33:17,589 --> 13:33:24,079
[Music]

19196
13:33:21,519 --> 13:33:26,159
welcome back and in this lesson we're

19197
13:33:24,080 --> 13:33:27,840
going to learn about google cloud load

19198
13:33:26,160 --> 13:33:30,000
balancing and how it's used to

19199
13:33:27,839 --> 13:33:32,000
distribute traffic within the google

19200
13:33:30,000 --> 13:33:34,800
cloud platform google cloud load

19201
13:33:32,000 --> 13:33:38,000
balancing is essential when using it

19202
13:33:34,800 --> 13:33:40,560
with instance groups kubernetes clusters

19203
13:33:38,000 --> 13:33:43,360
and is pretty much the defacto when it

19204
13:33:40,559 --> 13:33:46,000
comes to balancing traffic coming in as

19205
13:33:43,360 --> 13:33:47,595
well as within your gcp environment

19206
13:33:46,000 --> 13:33:49,839
knowing the differences between the

19207
13:33:47,595 --> 13:33:53,040
types of load balancers and which one to

19208
13:33:49,839 --> 13:33:55,595
use for specific scenarios is crucial

19209
13:33:53,040 --> 13:33:57,756
for the exam as you will be tested on it

19210
13:33:55,595 --> 13:34:00,639
and so there's a lot to cover here so

19211
13:33:57,756 --> 13:34:02,720
with that being said let's dive in now i

19212
13:34:00,639 --> 13:34:05,360
wanted to start off with some basics

19213
13:34:02,720 --> 13:34:07,436
with regards to what is low balancing

19214
13:34:05,360 --> 13:34:10,559
and so when it comes to the low balancer

19215
13:34:07,436 --> 13:34:13,040
itself a low balancer distributes user

19216
13:34:10,559 --> 13:34:15,199
traffic across multiple instances of

19217
13:34:13,040 --> 13:34:17,520
your application so by spreading the

19218
13:34:15,199 --> 13:34:20,000
load you reduce the risk of your

19219
13:34:17,519 --> 13:34:22,559
applications experiencing performance

19220
13:34:20,000 --> 13:34:25,519
issues a load balancer is a single point

19221
13:34:22,559 --> 13:34:28,720
of entry with either one or multiple

19222
13:34:25,519 --> 13:34:31,595
back ends and within gcp these back ends

19223
13:34:28,720 --> 13:34:34,559
could consist of either instance groups

19224
13:34:31,595 --> 13:34:36,639
or negs and i'll be getting into any g's

19225
13:34:34,559 --> 13:34:40,000
in just a little bit low balancers on

19226
13:34:36,639 --> 13:34:43,436
gcp are fully distributed and software

19227
13:34:40,000 --> 13:34:46,160
defined so there is no actual hardware

19228
13:34:43,436 --> 13:34:49,520
load balancer involved in low balancing

19229
13:34:46,160 --> 13:34:51,436
on gcp it is completely software defined

19230
13:34:49,519 --> 13:34:54,399
and so there's no need to worry about

19231
13:34:51,436 --> 13:34:56,560
any hardware any pre-warming time as

19232
13:34:54,400 --> 13:34:58,560
this is all done through software now

19233
13:34:56,559 --> 13:35:01,435
depending on which low balancer you

19234
13:34:58,559 --> 13:35:04,319
choose google cloud gives you the option

19235
13:35:01,436 --> 13:35:06,720
of having either a global load balancer

19236
13:35:04,319 --> 13:35:09,595
or a regional load balancer the load

19237
13:35:06,720 --> 13:35:12,319
balancers are meant to serve content as

19238
13:35:09,595 --> 13:35:14,879
close as possible to the users so that

19239
13:35:12,319 --> 13:35:17,360
they don't experience increased latency

19240
13:35:14,879 --> 13:35:19,915
and gives the users a better experience

19241
13:35:17,360 --> 13:35:22,160
as well as reducing latency on your

19242
13:35:19,915 --> 13:35:25,115
applications when dealing with low

19243
13:35:22,160 --> 13:35:27,680
balancers in between services google

19244
13:35:25,116 --> 13:35:30,319
cloud also offers auto scaling with

19245
13:35:27,680 --> 13:35:32,319
health checks in their load balancers to

19246
13:35:30,319 --> 13:35:35,040
make sure that your traffic is always

19247
13:35:32,319 --> 13:35:37,680
routed to healthy instances and by using

19248
13:35:35,040 --> 13:35:40,319
auto scaling able to scale up the amount

19249
13:35:37,680 --> 13:35:43,275
of instances you need in order to handle

19250
13:35:40,319 --> 13:35:45,275
the load automatically now as there are

19251
13:35:43,275 --> 13:35:47,915
many different low balancers to choose

19252
13:35:45,275 --> 13:35:50,479
from it helps to know what specific

19253
13:35:47,915 --> 13:35:52,559
aspects you're looking for and how you

19254
13:35:50,480 --> 13:35:55,200
want your traffic distributed and so

19255
13:35:52,559 --> 13:35:57,360
google has broken them down for us into

19256
13:35:55,199 --> 13:36:00,319
these three categories the first

19257
13:35:57,360 --> 13:36:02,639
category is global versus regional

19258
13:36:00,319 --> 13:36:05,436
global load balancing is great for when

19259
13:36:02,639 --> 13:36:06,955
your back ends are distributed across

19260
13:36:05,436 --> 13:36:09,520
multiple regions

19261
13:36:06,955 --> 13:36:11,595
and your users need access to the same

19262
13:36:09,519 --> 13:36:14,399
applications and content

19263
13:36:11,595 --> 13:36:16,879
using a single anycast ip address

19264
13:36:14,400 --> 13:36:19,436
as well when you're looking for ipv6

19265
13:36:16,879 --> 13:36:21,360
termination global load balancing will

19266
13:36:19,436 --> 13:36:23,436
take care of that now when it comes to

19267
13:36:21,360 --> 13:36:25,756
regional load balancing this is if

19268
13:36:23,436 --> 13:36:28,480
you're looking at serving your back ends

19269
13:36:25,756 --> 13:36:31,360
in a single region and handling only

19270
13:36:28,480 --> 13:36:33,916
ipv4 traffic now once you've determined

19271
13:36:31,360 --> 13:36:35,915
whether or not you need global versus

19272
13:36:33,915 --> 13:36:39,275
regional low balancing the second

19273
13:36:35,915 --> 13:36:41,755
category to dive into is external versus

19274
13:36:39,275 --> 13:36:44,159
internal external load balancers are

19275
13:36:41,756 --> 13:36:46,800
designed to distribute traffic coming

19276
13:36:44,160 --> 13:36:49,520
into your network from the internet

19277
13:36:46,800 --> 13:36:51,840
and internal load balancers are designed

19278
13:36:49,519 --> 13:36:54,559
to distribute traffic within your

19279
13:36:51,839 --> 13:36:56,639
network and finally the last category

19280
13:36:54,559 --> 13:36:59,199
that will help you decide on what type

19281
13:36:56,639 --> 13:37:02,159
of load balancer you need is the traffic

19282
13:36:59,199 --> 13:37:07,839
type and shown here are all the traffic

19283
13:37:02,160 --> 13:37:09,276
types that cover http https tcp and udp

19284
13:37:07,839 --> 13:37:11,039
and so now that we've covered the

19285
13:37:09,275 --> 13:37:13,756
different types of load balancing that's

19286
13:37:11,040 --> 13:37:16,080
available on google cloud i wanted to

19287
13:37:13,756 --> 13:37:18,639
dive into some more depth on the low

19288
13:37:16,080 --> 13:37:20,400
balancers themselves here you can see

19289
13:37:18,639 --> 13:37:22,639
that there are five load balancers

19290
13:37:20,400 --> 13:37:25,360
available and i will be going through

19291
13:37:22,639 --> 13:37:28,319
each one of these in detail now before

19292
13:37:25,360 --> 13:37:30,720
diving into the low balancers themselves

19293
13:37:28,319 --> 13:37:32,159
i wanted to introduce you to a concept

19294
13:37:30,720 --> 13:37:35,040
using gcp

19295
13:37:32,160 --> 13:37:37,436
for all load balancers called back end

19296
13:37:35,040 --> 13:37:40,239
services how a low balancer knows

19297
13:37:37,436 --> 13:37:42,880
exactly what to do is defined by a

19298
13:37:40,239 --> 13:37:45,436
backend service and this is how cloud

19299
13:37:42,879 --> 13:37:47,199
load balancing knows how to distribute

19300
13:37:45,436 --> 13:37:50,319
the traffic the backend service

19301
13:37:47,199 --> 13:37:52,479
configuration contains a set of values

19302
13:37:50,319 --> 13:37:54,879
such as the protocol used to connect to

19303
13:37:52,480 --> 13:37:57,040
back ends various distribution in

19304
13:37:54,879 --> 13:38:00,000
session settings health checks and

19305
13:37:57,040 --> 13:38:02,639
timeouts these settings provide fine

19306
13:38:00,000 --> 13:38:05,915
grain control over how your load

19307
13:38:02,639 --> 13:38:08,955
balancer behaves an external http or

19308
13:38:05,915 --> 13:38:11,040
https load balancer must have at least

19309
13:38:08,955 --> 13:38:13,680
one backend service and can have

19310
13:38:11,040 --> 13:38:16,000
multiple backend services the back ends

19311
13:38:13,680 --> 13:38:18,480
of a backend service can be either

19312
13:38:16,000 --> 13:38:21,680
instance groups or network endpoint

19313
13:38:18,480 --> 13:38:24,000
groups also known as negs but not a

19314
13:38:21,680 --> 13:38:27,360
combination of both and so just as a

19315
13:38:24,000 --> 13:38:29,595
note you'll hear me refer to negs over

19316
13:38:27,360 --> 13:38:32,879
the course of this lesson and so a

19317
13:38:29,595 --> 13:38:35,839
network endpoint group also known as neg

19318
13:38:32,879 --> 13:38:38,319
is a configuration object that specifies

19319
13:38:35,839 --> 13:38:41,115
a group of back-end endpoints or

19320
13:38:38,319 --> 13:38:44,080
services and a common use case for this

19321
13:38:41,116 --> 13:38:46,639
configuration is deploying services into

19322
13:38:44,080 --> 13:38:48,880
containers now moving on to the values

19323
13:38:46,639 --> 13:38:51,680
themselves i wanted to first start with

19324
13:38:48,879 --> 13:38:54,639
health checks and google cloud uses the

19325
13:38:51,680 --> 13:38:57,595
overall health state of each back end to

19326
13:38:54,639 --> 13:39:00,159
determine its eligibility for receiving

19327
13:38:57,595 --> 13:39:02,239
new requests or connections back ends

19328
13:39:00,160 --> 13:39:04,320
that respond successfully for the

19329
13:39:02,239 --> 13:39:06,400
configured number of times are

19330
13:39:04,319 --> 13:39:08,879
considered healthy back-ends that fail

19331
13:39:06,400 --> 13:39:11,916
to respond successfully for a separate

19332
13:39:08,879 --> 13:39:13,519
number of times are considered unhealthy

19333
13:39:11,915 --> 13:39:15,915
and when a back-end is considered

19334
13:39:13,519 --> 13:39:18,399
unhealthy traffic will not be routed to

19335
13:39:15,915 --> 13:39:21,435
it next up is session affinity and

19336
13:39:18,400 --> 13:39:24,160
session affinity sends all requests from

19337
13:39:21,436 --> 13:39:26,319
the same client to the same back end if

19338
13:39:24,160 --> 13:39:29,200
the back end is healthy and it has

19339
13:39:26,319 --> 13:39:31,199
capacity service timeout is the next

19340
13:39:29,199 --> 13:39:33,275
value and this is the amount of time

19341
13:39:31,199 --> 13:39:36,000
that the load balancer waits for a

19342
13:39:33,275 --> 13:39:39,275
backend to return a full response to a

19343
13:39:36,000 --> 13:39:41,275
request next up is traffic distribution

19344
13:39:39,275 --> 13:39:44,000
and this comprises of three different

19345
13:39:41,275 --> 13:39:46,159
values the first one is a balancing mode

19346
13:39:44,000 --> 13:39:48,400
and this defines how the load balancer

19347
13:39:46,160 --> 13:39:51,040
measures back-end readiness for the new

19348
13:39:48,400 --> 13:39:53,436
requests or connections the second one

19349
13:39:51,040 --> 13:39:55,915
is target capacity and this defines a

19350
13:39:53,436 --> 13:39:58,720
target maximum number of connections a

19351
13:39:55,915 --> 13:40:01,680
target maximum rate or target maximum

19352
13:39:58,720 --> 13:40:04,720
cpu utilization and the third value for

19353
13:40:01,680 --> 13:40:06,720
traffic distribution is capacity scalar

19354
13:40:04,720 --> 13:40:09,436
and this adjusts overall available

19355
13:40:06,720 --> 13:40:12,080
capacity without modifying the target

19356
13:40:09,436 --> 13:40:15,040
capacity and the last value for back-end

19357
13:40:12,080 --> 13:40:17,520
services are back-ends and a back-end is

19358
13:40:15,040 --> 13:40:19,360
a group of endpoints that receive

19359
13:40:17,519 --> 13:40:21,359
traffic from a google cloud load

19360
13:40:19,360 --> 13:40:23,199
balancer and there are several types of

19361
13:40:21,360 --> 13:40:25,595
back-ends but the one that we are

19362
13:40:23,199 --> 13:40:28,479
concentrating on for this section and

19363
13:40:25,595 --> 13:40:30,720
for the exam is the instance group now

19364
13:40:28,480 --> 13:40:32,956
backend services are not critical to

19365
13:40:30,720 --> 13:40:35,520
know for the exam but i wanted to

19366
13:40:32,955 --> 13:40:37,595
introduce you to this concept to add a

19367
13:40:35,519 --> 13:40:39,435
bit more context for when you are

19368
13:40:37,595 --> 13:40:40,559
creating low balancers in any

19369
13:40:39,436 --> 13:40:42,319
environment

19370
13:40:40,559 --> 13:40:44,639
and will help you understand other

19371
13:40:42,319 --> 13:40:46,955
concepts in this lesson and so this is

19372
13:40:44,639 --> 13:40:48,955
the end of part one of this lesson it

19373
13:40:46,955 --> 13:40:50,720
was getting a bit long so i decided to

19374
13:40:48,955 --> 13:40:53,275
break it up this would be a great

19375
13:40:50,720 --> 13:40:56,160
opportunity for you to get up and have a

19376
13:40:53,275 --> 13:40:58,319
stretch get yourself a coffee or tea and

19377
13:40:56,160 --> 13:41:00,080
whenever you're ready join me in part

19378
13:40:58,319 --> 13:41:02,639
two where we will be starting

19379
13:41:00,080 --> 13:41:04,560
immediately from the end of part one so

19380
13:41:02,639 --> 13:41:08,519
you can now complete this video and i

19381
13:41:04,559 --> 13:41:08,519
will see you in part two

19382
13:41:10,000 --> 13:41:14,800
this is part two of the cloud load

19383
13:41:12,319 --> 13:41:17,519
balancers lesson and we'll be starting

19384
13:41:14,800 --> 13:41:20,240
exactly where we left off in part one so

19385
13:41:17,519 --> 13:41:22,719
with that being said let's dive in now

19386
13:41:20,239 --> 13:41:24,639
before jumping right into the first load

19387
13:41:22,720 --> 13:41:28,319
balancer that i wanted to introduce

19388
13:41:24,639 --> 13:41:30,159
which is http and https low balancer

19389
13:41:28,319 --> 13:41:32,319
there's a couple of different concepts

19390
13:41:30,160 --> 13:41:36,320
that i wanted to introduce and these are

19391
13:41:32,319 --> 13:41:38,955
the methods of how an http and https

19392
13:41:36,319 --> 13:41:41,040
load balancer distributes traffic using

19393
13:41:38,955 --> 13:41:43,436
forwarding rules and these are cross

19394
13:41:41,040 --> 13:41:45,436
region low balancing and content based

19395
13:41:43,436 --> 13:41:48,000
load balancing now touching on cross

19396
13:41:45,436 --> 13:41:52,160
region load balancing when you configure

19397
13:41:48,000 --> 13:41:55,116
an external http or https load balancer

19398
13:41:52,160 --> 13:41:57,596
in premium tier it uses a global

19399
13:41:55,116 --> 13:42:00,955
external ip address and can

19400
13:41:57,595 --> 13:42:03,756
intelligently route requests from users

19401
13:42:00,955 --> 13:42:07,360
to the closest backend instance group or

19402
13:42:03,756 --> 13:42:09,275
neg based on proximity for example if

19403
13:42:07,360 --> 13:42:12,080
you set up instance groups in north

19404
13:42:09,275 --> 13:42:14,559
america and europe and attach them to a

19405
13:42:12,080 --> 13:42:16,560
low balancers back-end service user

19406
13:42:14,559 --> 13:42:19,275
requests around the world are

19407
13:42:16,559 --> 13:42:21,595
automatically sent to the vms closest to

19408
13:42:19,275 --> 13:42:24,159
the users assuming that the vms pass

19409
13:42:21,595 --> 13:42:26,955
health checks and have enough capacity

19410
13:42:24,160 --> 13:42:28,800
if the closest vms are all unhealthy or

19411
13:42:26,955 --> 13:42:31,360
if the closest instance group is at

19412
13:42:28,800 --> 13:42:33,840
capacity and another instance group is

19413
13:42:31,360 --> 13:42:36,559
not at capacity the load balancer

19414
13:42:33,839 --> 13:42:39,039
automatically sends requests to the next

19415
13:42:36,559 --> 13:42:41,915
closest region that has available

19416
13:42:39,040 --> 13:42:44,160
capacity and so here in this diagram a

19417
13:42:41,915 --> 13:42:47,040
user in switzerland hits the low

19418
13:42:44,160 --> 13:42:49,200
balancer by going to bowtieinc.co and

19419
13:42:47,040 --> 13:42:51,915
because there are vms that are able to

19420
13:42:49,199 --> 13:42:54,239
serve that traffic in europe west 6

19421
13:42:51,915 --> 13:42:56,239
traffic is routed to that region and so

19422
13:42:54,239 --> 13:43:00,799
now getting into content based load

19423
13:42:56,239 --> 13:43:03,680
balancing http and https low balancing

19424
13:43:00,800 --> 13:43:06,639
supports content based load balancing

19425
13:43:03,680 --> 13:43:09,595
using url maps to select a backend

19426
13:43:06,639 --> 13:43:12,800
service based on the requested host name

19427
13:43:09,595 --> 13:43:16,159
request path or both for example you can

19428
13:43:12,800 --> 13:43:18,560
use a set of instance groups or negs to

19429
13:43:16,160 --> 13:43:21,436
handle your video content and another

19430
13:43:18,559 --> 13:43:24,319
set to handle static as well as another

19431
13:43:21,436 --> 13:43:28,000
set to handle any images you can also

19432
13:43:24,319 --> 13:43:30,319
use http or https low balancing with

19433
13:43:28,000 --> 13:43:32,480
cloud storage buckets and then after you

19434
13:43:30,319 --> 13:43:34,800
have your load balancer set up you can

19435
13:43:32,480 --> 13:43:38,319
add cloud storage buckets to it now

19436
13:43:34,800 --> 13:43:42,080
moving right along when it comes to http

19437
13:43:38,319 --> 13:43:45,595
and https load balancer this is a global

19438
13:43:42,080 --> 13:43:47,840
proxy based layer 7 low balancer which

19439
13:43:45,595 --> 13:43:50,000
is at the application layer and so just

19440
13:43:47,839 --> 13:43:52,799
as a note here with all the other low

19441
13:43:50,000 --> 13:43:57,199
balancers that are available in gcp the

19442
13:43:52,800 --> 13:43:59,680
http and https low balancer is the only

19443
13:43:57,199 --> 13:44:02,799
layer 7 load balancer all the other low

19444
13:43:59,680 --> 13:44:04,955
balancers in gcp are layer 4 and will

19445
13:44:02,800 --> 13:44:07,360
work at the network layer and so this

19446
13:44:04,955 --> 13:44:10,559
low balancer enables you to serve your

19447
13:44:07,360 --> 13:44:13,756
applications worldwide behind a single

19448
13:44:10,559 --> 13:44:17,040
external unicast ip address external

19449
13:44:13,756 --> 13:44:21,520
http and https load balancing

19450
13:44:17,040 --> 13:44:24,559
distributes http and https traffic to

19451
13:44:21,519 --> 13:44:28,479
back ends hosted on compute engine and

19452
13:44:24,559 --> 13:44:31,360
gke external http and https load

19453
13:44:28,480 --> 13:44:34,240
balancing is implemented on google front

19454
13:44:31,360 --> 13:44:37,436
ends or gfes as shown here in the

19455
13:44:34,239 --> 13:44:39,595
diagram gfes are distributed globally

19456
13:44:37,436 --> 13:44:42,160
and operate together using google's

19457
13:44:39,595 --> 13:44:45,595
global network and control plane in the

19458
13:44:42,160 --> 13:44:48,080
premium tier gfes offer cross-regional

19459
13:44:45,595 --> 13:44:50,399
low balancing directing traffic to the

19460
13:44:48,080 --> 13:44:54,880
closest healthy backend that has

19461
13:44:50,400 --> 13:44:57,436
capacity and terminating http and https

19462
13:44:54,879 --> 13:45:00,000
traffic as close as possible to your

19463
13:44:57,436 --> 13:45:02,480
users with the standard tier the load

19464
13:45:00,000 --> 13:45:04,955
balancing is handled regionally and this

19465
13:45:02,480 --> 13:45:07,680
load balancer is available to be used

19466
13:45:04,955 --> 13:45:11,275
both externally and internally that

19467
13:45:07,680 --> 13:45:13,915
makes this load balancer global external

19468
13:45:11,275 --> 13:45:17,915
and internal this load balancer also

19469
13:45:13,915 --> 13:45:20,955
gives support for https and ssl which

19470
13:45:17,915 --> 13:45:22,799
covers tls for encryption in transit as

19471
13:45:20,955 --> 13:45:26,879
well this load balancer accepts all

19472
13:45:22,800 --> 13:45:30,560
traffic whether it is ipv4 or ipv6

19473
13:45:26,879 --> 13:45:33,115
traffic and just know that ipv6 traffic

19474
13:45:30,559 --> 13:45:36,319
will terminate at the low balancer and

19475
13:45:33,116 --> 13:45:37,916
then it will forward traffic as ipv4 so

19476
13:45:36,319 --> 13:45:40,239
it doesn't really matter which type of

19477
13:45:37,915 --> 13:45:42,559
traffic you're sending the load balancer

19478
13:45:40,239 --> 13:45:45,360
will still send the traffic to the back

19479
13:45:42,559 --> 13:45:48,720
end using ipv4 this traffic is

19480
13:45:45,360 --> 13:45:50,955
distributed by location or by content as

19481
13:45:48,720 --> 13:45:53,680
shown in the previous diagram forwarding

19482
13:45:50,955 --> 13:45:56,479
rules are in place to distribute defined

19483
13:45:53,680 --> 13:45:59,116
targets to each target pool for the

19484
13:45:56,480 --> 13:46:01,840
instance groups again defined targets

19485
13:45:59,116 --> 13:46:04,160
could be content based and therefore as

19486
13:46:01,839 --> 13:46:06,955
shown in the previous diagram video

19487
13:46:04,160 --> 13:46:08,720
content could go to one target whereas

19488
13:46:06,955 --> 13:46:11,519
static content could go to another

19489
13:46:08,720 --> 13:46:14,080
target url maps direct your requests

19490
13:46:11,519 --> 13:46:15,839
based on rules so you can create a bunch

19491
13:46:14,080 --> 13:46:17,916
of rules depending on what type of

19492
13:46:15,839 --> 13:46:20,799
traffic you want to direct and put them

19493
13:46:17,915 --> 13:46:23,915
in maps for requests ssl certificates

19494
13:46:20,800 --> 13:46:26,639
are needed for https and these can be

19495
13:46:23,915 --> 13:46:28,719
either google managed or self-managed

19496
13:46:26,639 --> 13:46:33,839
and so just as a quick note here the

19497
13:46:28,720 --> 13:46:37,436
ports used for http are on 80 and 8080

19498
13:46:33,839 --> 13:46:40,799
as well on https the port that is used

19499
13:46:37,436 --> 13:46:45,116
is port 443 now moving into the next low

19500
13:46:40,800 --> 13:46:47,596
balancer is ssl proxy an ssl proxy low

19501
13:46:45,116 --> 13:46:50,880
balancing is a reverse proxy load

19502
13:46:47,595 --> 13:46:53,275
balancer that distributes ssl traffic

19503
13:46:50,879 --> 13:46:56,000
coming from the internet to your vm

19504
13:46:53,275 --> 13:46:59,360
instances when using ssl proxy load

19505
13:46:56,000 --> 13:47:02,080
balancing for your ssl traffic user ssl

19506
13:46:59,360 --> 13:47:05,040
connections are terminated at the low

19507
13:47:02,080 --> 13:47:08,000
balancing layer and then proxied to the

19508
13:47:05,040 --> 13:47:11,756
closest available backend instances by

19509
13:47:08,000 --> 13:47:14,800
either using ssl or tcp with the premium

19510
13:47:11,756 --> 13:47:17,200
tier ssl proxy low balancing can be

19511
13:47:14,800 --> 13:47:20,160
configured as a global load balancing

19512
13:47:17,199 --> 13:47:22,719
service with the standard tier the ssl

19513
13:47:20,160 --> 13:47:25,360
proxy load balancer handles low

19514
13:47:22,720 --> 13:47:28,239
balancing regionally this load balancer

19515
13:47:25,360 --> 13:47:31,360
also distributes traffic by location

19516
13:47:28,239 --> 13:47:34,400
only ssl proxy low balancing lets you

19517
13:47:31,360 --> 13:47:37,680
use a single ip address for all users

19518
13:47:34,400 --> 13:47:39,596
worldwide and is a layer 4 load balancer

19519
13:47:37,680 --> 13:47:42,955
which works on the network layer this

19520
13:47:39,595 --> 13:47:45,199
load balancer shows support for tcp with

19521
13:47:42,955 --> 13:47:48,000
ssl offload and this is something

19522
13:47:45,199 --> 13:47:51,275
specific to remember for the exam this

19523
13:47:48,000 --> 13:47:54,000
is not like the http or https load

19524
13:47:51,275 --> 13:47:56,479
balancer where we can use specific rules

19525
13:47:54,000 --> 13:47:59,680
or specific configurations in order to

19526
13:47:56,480 --> 13:48:04,319
direct traffic ssl proxy low balancer

19527
13:47:59,680 --> 13:48:06,955
supports both ipv4 and ipv6 but again it

19528
13:48:04,319 --> 13:48:09,519
does terminate at the load balancer and

19529
13:48:06,955 --> 13:48:12,639
forwards the traffic to the back end as

19530
13:48:09,519 --> 13:48:15,519
ipv4 traffic and forwarding rules are in

19531
13:48:12,639 --> 13:48:18,400
place to distribute each defined target

19532
13:48:15,519 --> 13:48:20,559
to its proper target pool and encryption

19533
13:48:18,400 --> 13:48:23,840
is supported by configuring back-end

19534
13:48:20,559 --> 13:48:26,879
services to accept all the traffic over

19535
13:48:23,839 --> 13:48:30,079
ssl now just as a note it can also be

19536
13:48:26,879 --> 13:48:33,839
used for other protocols that use ssl

19537
13:48:30,080 --> 13:48:36,240
such as web sockets and imap over ssl

19538
13:48:33,839 --> 13:48:38,319
and carry a number of open ports to

19539
13:48:36,239 --> 13:48:42,000
support them moving on to the next load

19540
13:48:38,319 --> 13:48:44,800
balancer is tcp proxy now the tcp proxy

19541
13:48:42,000 --> 13:48:48,000
load balancer is a reverse proxy load

19542
13:48:44,800 --> 13:48:50,240
balancer that distributes tcp traffic

19543
13:48:48,000 --> 13:48:52,800
coming from the internet to your vm

19544
13:48:50,239 --> 13:48:55,915
instances when using tcp proxy load

19545
13:48:52,800 --> 13:48:58,560
balancing traffic coming over a tcp

19546
13:48:55,915 --> 13:49:00,639
connection is terminated at the load

19547
13:48:58,559 --> 13:49:04,000
balancing layer and then forwarded to

19548
13:49:00,639 --> 13:49:06,955
the closest available backend using tcp

19549
13:49:04,000 --> 13:49:08,955
or ssl so this is where the low balancer

19550
13:49:06,955 --> 13:49:11,360
will determine which instances are at

19551
13:49:08,955 --> 13:49:14,080
capacity and send them to those

19552
13:49:11,360 --> 13:49:17,275
instances that are not like ssl proxy

19553
13:49:14,080 --> 13:49:20,560
load balancing tcp proxy load balancing

19554
13:49:17,275 --> 13:49:23,360
lets you use a single ip address for all

19555
13:49:20,559 --> 13:49:26,159
users worldwide the tcp proxy load

19556
13:49:23,360 --> 13:49:27,840
balancer automatically routes traffic to

19557
13:49:26,160 --> 13:49:30,720
the back ends that are closest to the

19558
13:49:27,839 --> 13:49:33,755
user this is a layer 4 load balancer and

19559
13:49:30,720 --> 13:49:36,559
again can serve traffic both globally

19560
13:49:33,756 --> 13:49:39,595
and externally tcp proxy distributes

19561
13:49:36,559 --> 13:49:42,720
traffic by location only and is intended

19562
13:49:39,595 --> 13:49:44,399
for specifically non-http traffic

19563
13:49:42,720 --> 13:49:46,720
although you can decide if you want to

19564
13:49:44,400 --> 13:49:49,200
use ssl between the proxy and your back

19565
13:49:46,720 --> 13:49:51,436
end and you can do this by selecting a

19566
13:49:49,199 --> 13:49:54,559
certificate on the back end again this

19567
13:49:51,436 --> 13:49:58,239
type of load balancer supports ipv4 and

19568
13:49:54,559 --> 13:50:00,479
ipv6 traffic and ipv6 traffic will

19569
13:49:58,239 --> 13:50:03,275
terminate at the low balancer and

19570
13:50:00,480 --> 13:50:07,276
forwards that traffic to the back end as

19571
13:50:03,275 --> 13:50:10,639
ipv4 traffic now tcp proxy low balancing

19572
13:50:07,275 --> 13:50:14,000
is intended for tcp traffic and supports

19573
13:50:10,639 --> 13:50:16,639
many well-known ports such as port 25

19574
13:50:14,000 --> 13:50:19,756
for simple mail transfer protocol or

19575
13:50:16,639 --> 13:50:22,879
smtp next up we have the network load

19576
13:50:19,756 --> 13:50:25,520
balancer now the tcp udp network load

19577
13:50:22,879 --> 13:50:27,435
balancer is a regional pass-through load

19578
13:50:25,519 --> 13:50:31,115
balancer a network load balancer

19579
13:50:27,436 --> 13:50:33,520
distributes tcp or udp traffic among

19580
13:50:31,116 --> 13:50:36,000
instances in the same region network

19581
13:50:33,519 --> 13:50:38,239
load balancers are not proxies and

19582
13:50:36,000 --> 13:50:41,519
therefore responses from the back end

19583
13:50:38,239 --> 13:50:43,680
vms go directly to the clients

19584
13:50:41,519 --> 13:50:46,159
not back through the load balancer the

19585
13:50:43,680 --> 13:50:48,639
term known for this is direct server

19586
13:50:46,160 --> 13:50:51,520
return as shown here in the diagram this

19587
13:50:48,639 --> 13:50:54,639
is a layer 4 regional load balancer and

19588
13:50:51,519 --> 13:50:57,199
an external load balancer as well that

19589
13:50:54,639 --> 13:51:01,199
can serve to regional locations it

19590
13:50:57,199 --> 13:51:05,275
supports either tcp or udp but not both

19591
13:51:01,199 --> 13:51:07,915
although it can low balance udp tcp and

19592
13:51:05,275 --> 13:51:12,000
ssl traffic on the ports that are not

19593
13:51:07,915 --> 13:51:14,955
supported by the tcp proxy and ssl proxy

19594
13:51:12,000 --> 13:51:17,040
ssl traffic can still be decrypted by

19595
13:51:14,955 --> 13:51:19,199
your back end instead of the load

19596
13:51:17,040 --> 13:51:22,160
balancer itself traffic is also

19597
13:51:19,199 --> 13:51:25,115
distributed by incoming protocol data

19598
13:51:22,160 --> 13:51:28,320
this being protocols scheme and scope

19599
13:51:25,116 --> 13:51:30,560
there is no tls offloading or proxying

19600
13:51:28,319 --> 13:51:33,275
and forwarding rules are in place to

19601
13:51:30,559 --> 13:51:36,955
distribute and define targets to their

19602
13:51:33,275 --> 13:51:39,680
target pools and this is for tcp and udp

19603
13:51:36,955 --> 13:51:42,159
only now with other protocols they use

19604
13:51:39,680 --> 13:51:44,955
target instances as opposed to instance

19605
13:51:42,160 --> 13:51:47,040
groups lastly a network load balancer

19606
13:51:44,955 --> 13:51:50,239
can also only support

19607
13:51:47,040 --> 13:51:52,239
self-managed ssl certificates as opposed

19608
13:51:50,239 --> 13:51:54,559
to the google managed certificates as

19609
13:51:52,239 --> 13:51:57,436
well and so the last low balancer to

19610
13:51:54,559 --> 13:52:01,199
introduce is the internal load balancer

19611
13:51:57,436 --> 13:52:04,639
now an internal tcp or udp load balancer

19612
13:52:01,199 --> 13:52:07,275
is a layer 4 regional load balancer that

19613
13:52:04,639 --> 13:52:10,400
enables you to distribute traffic behind

19614
13:52:07,275 --> 13:52:13,756
an internal load balancing ip address

19615
13:52:10,400 --> 13:52:17,360
that is accessible only to your internal

19616
13:52:13,756 --> 13:52:20,319
vm instances internal tcp and udp load

19617
13:52:17,360 --> 13:52:22,800
balancing distributes traffic among vm

19618
13:52:20,319 --> 13:52:26,319
instances in the same region this load

19619
13:52:22,800 --> 13:52:28,800
balancer supports tcp or udp traffic but

19620
13:52:26,319 --> 13:52:30,800
not both and as i said before this type

19621
13:52:28,800 --> 13:52:34,880
of load balancer is used to balance

19622
13:52:30,800 --> 13:52:37,040
traffic within gcp across instances this

19623
13:52:34,879 --> 13:52:39,519
low balancer cannot be used for

19624
13:52:37,040 --> 13:52:42,239
balancing internet traffic as it is

19625
13:52:39,519 --> 13:52:44,639
internal only traffic is automatically

19626
13:52:42,239 --> 13:52:47,199
sent to the back end as it does not

19627
13:52:44,639 --> 13:52:49,436
terminate client connections and for

19628
13:52:47,199 --> 13:52:52,159
forwarding rules this load balancer

19629
13:52:49,436 --> 13:52:54,955
follows specific specifications where

19630
13:52:52,160 --> 13:52:58,480
you need to specify at least one and up

19631
13:52:54,955 --> 13:53:01,595
to five ports by number as well you must

19632
13:52:58,480 --> 13:53:04,080
specify all to forward traffic to all

19633
13:53:01,595 --> 13:53:08,079
ports now again like the network load

19634
13:53:04,080 --> 13:53:09,916
balancer you can use either tcp or udp

19635
13:53:08,080 --> 13:53:12,639
and so that's pretty much all i had to

19636
13:53:09,915 --> 13:53:14,955
cover with this lesson on low balancing

19637
13:53:12,639 --> 13:53:16,559
please remember that for the exam you

19638
13:53:14,955 --> 13:53:18,000
will need to know the differences

19639
13:53:16,559 --> 13:53:20,159
between them all

19640
13:53:18,000 --> 13:53:22,480
in my experience there are a few

19641
13:53:20,160 --> 13:53:24,880
questions that come up on the exam where

19642
13:53:22,480 --> 13:53:27,916
you will need to know what low balancer

19643
13:53:24,879 --> 13:53:30,399
to use and so a good idea might be to

19644
13:53:27,915 --> 13:53:32,879
dive into the console and have a look at

19645
13:53:30,400 --> 13:53:35,200
the options as well as going back

19646
13:53:32,879 --> 13:53:37,680
through this lesson as a refresher to

19647
13:53:35,199 --> 13:53:40,239
understand each use case this is also a

19648
13:53:37,680 --> 13:53:42,800
crucial component in any environment

19649
13:53:40,239 --> 13:53:45,360
that is used especially when serving

19650
13:53:42,800 --> 13:53:48,000
applications to the internet for any

19651
13:53:45,360 --> 13:53:49,915
three-tier web application or kubernetes

19652
13:53:48,000 --> 13:53:52,319
cluster and so that pretty much sums up

19653
13:53:49,915 --> 13:53:54,559
this lesson on low balancing so you can

19654
13:53:52,319 --> 13:53:58,680
now mark this lesson as complete and

19655
13:53:54,559 --> 13:53:58,680
let's move on to the next one

19656
13:54:00,319 --> 13:54:05,360
welcome back in this lesson i will be

19657
13:54:02,955 --> 13:54:07,839
going into depth on instance groups

19658
13:54:05,360 --> 13:54:10,080
along with instance templates instance

19659
13:54:07,839 --> 13:54:12,639
groups are a great way to set up a group

19660
13:54:10,080 --> 13:54:15,520
of identical servers used in conjunction

19661
13:54:12,639 --> 13:54:17,436
with instance groups instance templates

19662
13:54:15,519 --> 13:54:19,595
handles the instance properties to

19663
13:54:17,436 --> 13:54:22,239
deploy the instance groups into your

19664
13:54:19,595 --> 13:54:25,519
environment this lesson will dive into

19665
13:54:22,239 --> 13:54:27,915
the details of the features use cases

19666
13:54:25,519 --> 13:54:30,639
and how instance groups and instance

19667
13:54:27,915 --> 13:54:32,799
templates work together to create a

19668
13:54:30,639 --> 13:54:34,720
highly scalable and performing

19669
13:54:32,800 --> 13:54:37,436
environment now there's a lot to cover

19670
13:54:34,720 --> 13:54:40,000
here so with that being said let's dive

19671
13:54:37,436 --> 13:54:42,955
in now an instance group is a collection

19672
13:54:40,000 --> 13:54:45,680
of vm instances that you can manage as a

19673
13:54:42,955 --> 13:54:48,879
single entity compute engine offers two

19674
13:54:45,680 --> 13:54:52,559
kinds of vm instance groups managed and

19675
13:54:48,879 --> 13:54:55,360
unmanaged manage instance groups or migs

19676
13:54:52,559 --> 13:54:58,000
let you operate applications on multiple

19677
13:54:55,360 --> 13:55:01,040
identical vms you can make your workload

19678
13:54:58,000 --> 13:55:04,160
scalable and highly available by taking

19679
13:55:01,040 --> 13:55:07,275
advantage of automated mig services like

19680
13:55:04,160 --> 13:55:10,160
auto scaling auto healing regional and

19681
13:55:07,275 --> 13:55:11,915
zonal deployments and automatic updating

19682
13:55:10,160 --> 13:55:14,000
and i'll be getting into these services

19683
13:55:11,915 --> 13:55:16,479
in just a sec now when it comes to

19684
13:55:14,000 --> 13:55:19,436
unmanaged instance groups they also let

19685
13:55:16,480 --> 13:55:21,116
you low balance across a fleet of vms

19686
13:55:19,436 --> 13:55:23,275
but this is something that you need to

19687
13:55:21,116 --> 13:55:25,680
manage and i'll be going deeper into

19688
13:55:23,275 --> 13:55:28,000
unmanaged instance groups a bit later

19689
13:55:25,680 --> 13:55:30,480
right now i wanted to take some time to

19690
13:55:28,000 --> 13:55:33,040
go through the features and use cases of

19691
13:55:30,480 --> 13:55:36,640
migs in a bit more detail for some more

19692
13:55:33,040 --> 13:55:39,756
context starting off with its use cases

19693
13:55:36,639 --> 13:55:42,559
now migs are great for stateless serving

19694
13:55:39,756 --> 13:55:45,520
workloads such as website front ends web

19695
13:55:42,559 --> 13:55:48,079
servers and website applications as the

19696
13:55:45,519 --> 13:55:51,359
application does not preserve its state

19697
13:55:48,080 --> 13:55:53,916
and saves no data to persistent storage

19698
13:55:51,360 --> 13:55:56,559
all user and session data stays with the

19699
13:55:53,915 --> 13:55:58,955
client and makes scaling up and down

19700
13:55:56,559 --> 13:56:01,680
quick and easy migs are also great for

19701
13:55:58,955 --> 13:56:04,080
stateless batch workloads and these are

19702
13:56:01,680 --> 13:56:06,639
high performance or high throughput

19703
13:56:04,080 --> 13:56:09,436
compute workloads such as image

19704
13:56:06,639 --> 13:56:11,915
processing from a queue and lastly you

19705
13:56:09,436 --> 13:56:14,400
can build highly available stateful

19706
13:56:11,915 --> 13:56:16,799
workloads using stateful managed

19707
13:56:14,400 --> 13:56:19,596
instance groups or stateful migs

19708
13:56:16,800 --> 13:56:22,560
stateful workloads include applications

19709
13:56:19,595 --> 13:56:24,000
with stateful data or configuration such

19710
13:56:22,559 --> 13:56:26,799
as databases

19711
13:56:24,000 --> 13:56:29,199
legacy monolith type applications and

19712
13:56:26,800 --> 13:56:31,596
long running batch computations with

19713
13:56:29,199 --> 13:56:33,115
checkpointing you can improve uptime and

19714
13:56:31,595 --> 13:56:35,435
resiliency of these types of

19715
13:56:33,116 --> 13:56:37,756
applications with auto healing

19716
13:56:35,436 --> 13:56:40,239
controlled updates and multi-zone

19717
13:56:37,756 --> 13:56:42,800
deployments while preserving each

19718
13:56:40,239 --> 13:56:45,360
instance's unique state including

19719
13:56:42,800 --> 13:56:47,520
instance names persistent disks and

19720
13:56:45,360 --> 13:56:50,000
metadata now that i've covered the type

19721
13:56:47,519 --> 13:56:52,079
of workloads that are used with migs i

19722
13:56:50,000 --> 13:56:54,400
wanted to dive into the features

19723
13:56:52,080 --> 13:56:56,720
starting with auto healing

19724
13:56:54,400 --> 13:56:59,040
now when it comes to auto healing

19725
13:56:56,720 --> 13:57:01,916
managed instance groups maintain high

19726
13:56:59,040 --> 13:57:04,559
availability of your applications by

19727
13:57:01,915 --> 13:57:07,040
proactively keeping your instances in a

19728
13:57:04,559 --> 13:57:09,360
running state a mig automatically

19729
13:57:07,040 --> 13:57:12,080
recreates an instance that is not

19730
13:57:09,360 --> 13:57:14,319
running and managed instance groups also

19731
13:57:12,080 --> 13:57:16,400
take care of application-based auto

19732
13:57:14,319 --> 13:57:18,955
healing and this improves application

19733
13:57:16,400 --> 13:57:22,000
availability by relying on a health

19734
13:57:18,955 --> 13:57:24,639
check that detects things like freezing

19735
13:57:22,000 --> 13:57:26,480
crashing or overloading if a health

19736
13:57:24,639 --> 13:57:29,360
check determines that an application has

19737
13:57:26,480 --> 13:57:32,560
failed on a vm the mig auto healer

19738
13:57:29,360 --> 13:57:34,319
automatically recreates that vm instance

19739
13:57:32,559 --> 13:57:36,639
the health check used to monitor the

19740
13:57:34,319 --> 13:57:38,879
migs are similar to the health checks

19741
13:57:36,639 --> 13:57:41,360
used for low balancing with a few little

19742
13:57:38,879 --> 13:57:43,595
differences low balancing health checks

19743
13:57:41,360 --> 13:57:46,080
help direct traffic away from

19744
13:57:43,595 --> 13:57:48,399
unresponsive instances and towards

19745
13:57:46,080 --> 13:57:50,880
healthy ones these health checks cannot

19746
13:57:48,400 --> 13:57:53,840
recreate instances whereas mig health

19747
13:57:50,879 --> 13:57:57,115
checks proactively signal to delete and

19748
13:57:53,839 --> 13:57:59,275
recreate instances that become unhealthy

19749
13:57:57,116 --> 13:58:01,756
moving on to managed instance groups

19750
13:57:59,275 --> 13:58:03,839
regional or multi-zone feature now you

19751
13:58:01,756 --> 13:58:05,916
have the option of creating regional

19752
13:58:03,839 --> 13:58:07,915
migs or zonal migs

19753
13:58:05,915 --> 13:58:10,719
regional migs provide higher

19754
13:58:07,915 --> 13:58:13,595
availability compared to zonal migs

19755
13:58:10,720 --> 13:58:16,400
because the instances in a regional mig

19756
13:58:13,595 --> 13:58:18,799
are spread across multiple zones in a

19757
13:58:16,400 --> 13:58:21,840
single region google recommends regional

19758
13:58:18,800 --> 13:58:24,800
migs over zonal migs as you can manage

19759
13:58:21,839 --> 13:58:28,159
twice as many migs as zonal migs so you

19760
13:58:24,800 --> 13:58:29,756
can manage 2 000 migs instead of 1000

19761
13:58:28,160 --> 13:58:32,480
you can also spread your application

19762
13:58:29,756 --> 13:58:35,040
load across multiple zones instead of a

19763
13:58:32,480 --> 13:58:37,436
single zone or managing multiple zonal

19764
13:58:35,040 --> 13:58:40,080
migs across different zones and this

19765
13:58:37,436 --> 13:58:42,639
protects against zonal failures and

19766
13:58:40,080 --> 13:58:44,880
unforeseen scenarios where an entire

19767
13:58:42,639 --> 13:58:47,116
group of instances in a single zone

19768
13:58:44,879 --> 13:58:50,000
malfunctions in the case of a zonal

19769
13:58:47,116 --> 13:58:52,800
failure or if a group of instances in a

19770
13:58:50,000 --> 13:58:55,360
zone stops responding a regional mig

19771
13:58:52,800 --> 13:58:57,596
continues supporting your instances by

19772
13:58:55,360 --> 13:59:00,319
continuing to serve traffic to the

19773
13:58:57,595 --> 13:59:02,639
instances in the remaining zones now

19774
13:59:00,319 --> 13:59:05,360
cloud low balancing can use instance

19775
13:59:02,639 --> 13:59:08,239
groups to serve traffic so you can add

19776
13:59:05,360 --> 13:59:10,955
instance groups to a target pool or to a

19777
13:59:08,239 --> 13:59:12,879
back end an instance group is a type of

19778
13:59:10,955 --> 13:59:15,436
back end and the instances in the

19779
13:59:12,879 --> 13:59:18,000
instance group respond to traffic from

19780
13:59:15,436 --> 13:59:21,116
the load balancer the back end service

19781
13:59:18,000 --> 13:59:23,360
in turn knows which instances it can use

19782
13:59:21,116 --> 13:59:25,200
and how much traffic they can handle and

19783
13:59:23,360 --> 13:59:27,520
how much traffic they are currently

19784
13:59:25,199 --> 13:59:29,680
handling in addition the back-end

19785
13:59:27,519 --> 13:59:32,000
service monitors health checking and

19786
13:59:29,680 --> 13:59:34,160
does not send new connections to

19787
13:59:32,000 --> 13:59:36,639
unhealthy instances now when your

19788
13:59:34,160 --> 13:59:39,916
applications require additional compute

19789
13:59:36,639 --> 13:59:42,720
resources migs support auto scaling that

19790
13:59:39,915 --> 13:59:45,839
dynamically add or remove instances from

19791
13:59:42,720 --> 13:59:48,319
the mig in response to an increase or

19792
13:59:45,839 --> 13:59:50,319
decrease in load you can turn on auto

19793
13:59:48,319 --> 13:59:53,436
scaling and configure an auto scaling

19794
13:59:50,319 --> 13:59:55,915
policy to specify how you want the group

19795
13:59:53,436 --> 13:59:58,560
to scale not only will auto scaling

19796
13:59:55,915 --> 14:00:01,680
scale up to meet the load demands but

19797
13:59:58,559 --> 14:00:04,799
will also shrink and remove instances as

19798
14:00:01,680 --> 14:00:07,436
the load decreases to reduce your costs

19799
14:00:04,800 --> 14:00:10,560
auto scaling policies include scaling

19800
14:00:07,436 --> 14:00:13,360
based on cpu utilization load balancing

19801
14:00:10,559 --> 14:00:15,915
capacity and cloud monitoring metrics

19802
14:00:13,360 --> 14:00:18,955
and so when it comes to auto updating

19803
14:00:15,915 --> 14:00:21,435
you can easily and safely deploy new

19804
14:00:18,955 --> 14:00:24,000
versions of software to instances in a

19805
14:00:21,436 --> 14:00:25,756
mig the rollout of an update happens

19806
14:00:24,000 --> 14:00:28,160
automatically based on your

19807
14:00:25,756 --> 14:00:30,800
specifications you can also control the

19808
14:00:28,160 --> 14:00:32,956
speed and scope of the deployments in

19809
14:00:30,800 --> 14:00:35,756
order to minimize disruptions to your

19810
14:00:32,955 --> 14:00:38,080
application you can optionally perform

19811
14:00:35,756 --> 14:00:40,639
rolling updates as well as partial

19812
14:00:38,080 --> 14:00:42,720
rollouts for canary testing and for

19813
14:00:40,639 --> 14:00:45,519
those who don't know rolling updates

19814
14:00:42,720 --> 14:00:48,319
allow updates to take place with zero

19815
14:00:45,519 --> 14:00:51,115
downtime by incrementally updating

19816
14:00:48,319 --> 14:00:53,756
instances with new ones as well canary

19817
14:00:51,116 --> 14:00:56,400
testing is a way to reduce risk and

19818
14:00:53,756 --> 14:00:59,275
validate new software by releasing

19819
14:00:56,400 --> 14:01:01,680
software to a small percentage of users

19820
14:00:59,275 --> 14:01:04,319
with canary testing you can deliver to

19821
14:01:01,680 --> 14:01:06,559
certain groups of users at a time and

19822
14:01:04,319 --> 14:01:09,199
this is also referred to as stage

19823
14:01:06,559 --> 14:01:11,435
rollouts and this is a best practice in

19824
14:01:09,199 --> 14:01:13,039
devops and software development now

19825
14:01:11,436 --> 14:01:15,756
there are a few more things that i

19826
14:01:13,040 --> 14:01:18,160
wanted to point out that relate to migs

19827
14:01:15,756 --> 14:01:20,955
you can reduce the cost of your workload

19828
14:01:18,160 --> 14:01:22,640
by using preemptable vm instances in

19829
14:01:20,955 --> 14:01:24,879
your instance group and when they are

19830
14:01:22,639 --> 14:01:27,756
deleted auto healing will bring the

19831
14:01:24,879 --> 14:01:29,915
instances back when preemptable capacity

19832
14:01:27,756 --> 14:01:32,319
becomes available again you can also

19833
14:01:29,915 --> 14:01:34,479
deploy containers to instances in

19834
14:01:32,319 --> 14:01:36,319
managed instance groups when you specify

19835
14:01:34,480 --> 14:01:38,640
a container image in an instance

19836
14:01:36,319 --> 14:01:41,519
template and is used to create a mig

19837
14:01:38,639 --> 14:01:44,559
each vm is created with the container

19838
14:01:41,519 --> 14:01:47,039
optimized os that includes docker and

19839
14:01:44,559 --> 14:01:49,680
your container starts automatically on

19840
14:01:47,040 --> 14:01:52,319
each vm in the group and finally when

19841
14:01:49,680 --> 14:01:54,559
creating migs you must define the vpc

19842
14:01:52,319 --> 14:01:56,639
network that it will reside in although

19843
14:01:54,559 --> 14:01:58,720
when you don't define the network google

19844
14:01:56,639 --> 14:02:01,680
cloud will attempt to use the default

19845
14:01:58,720 --> 14:02:03,436
network now moving on into unmanaged

19846
14:02:01,680 --> 14:02:05,840
instance groups for just a minute

19847
14:02:03,436 --> 14:02:08,080
unmanaged instance groups can contain

19848
14:02:05,839 --> 14:02:11,519
heterogeneous instances and these are

19849
14:02:08,080 --> 14:02:14,160
instances that are of mixed sizes of cpu

19850
14:02:11,519 --> 14:02:16,559
ram as well as instance types and you

19851
14:02:14,160 --> 14:02:18,880
can add and remove these instances from

19852
14:02:16,559 --> 14:02:21,275
the group whenever you choose there's a

19853
14:02:18,879 --> 14:02:23,435
major downside to this though unmanaged

19854
14:02:21,275 --> 14:02:26,159
instance groups do not offer auto

19855
14:02:23,436 --> 14:02:29,596
scaling auto healing rolling update

19856
14:02:26,160 --> 14:02:31,680
support multi-zone support or the use of

19857
14:02:29,595 --> 14:02:34,399
instance templates and are not a good

19858
14:02:31,680 --> 14:02:36,879
fit for deploying highly available and

19859
14:02:34,400 --> 14:02:39,360
scalable workloads you should only use

19860
14:02:36,879 --> 14:02:42,479
unmanaged instance groups if you need to

19861
14:02:39,360 --> 14:02:45,436
apply load balancing to groups of these

19862
14:02:42,480 --> 14:02:47,756
mixed types of instances or if you need

19863
14:02:45,436 --> 14:02:50,080
to manage the instances yourself so

19864
14:02:47,756 --> 14:02:52,639
unmanaged instance groups are designed

19865
14:02:50,080 --> 14:02:55,040
for very special use cases where you

19866
14:02:52,639 --> 14:02:57,360
will need to mix instance types in

19867
14:02:55,040 --> 14:02:59,595
almost all cases you will be using

19868
14:02:57,360 --> 14:03:02,480
managed instance groups as they were

19869
14:02:59,595 --> 14:03:04,399
intended to capture the benefits of all

19870
14:03:02,480 --> 14:03:06,720
the features they have to offer

19871
14:03:04,400 --> 14:03:08,880
now in order to launch an instance group

19872
14:03:06,720 --> 14:03:11,360
into any environment you will need

19873
14:03:08,879 --> 14:03:14,079
another resource to do this and this is

19874
14:03:11,360 --> 14:03:16,319
where instance templates come into play

19875
14:03:14,080 --> 14:03:19,916
an instance template is a resource that

19876
14:03:16,319 --> 14:03:22,080
you can use to create vm instances and

19877
14:03:19,915 --> 14:03:24,955
managed instance groups instance

19878
14:03:22,080 --> 14:03:28,000
templates define the machine type boot

19879
14:03:24,955 --> 14:03:30,720
disk image or container image as well as

19880
14:03:28,000 --> 14:03:32,800
labels and other instance properties you

19881
14:03:30,720 --> 14:03:35,840
can then use an instance template to

19882
14:03:32,800 --> 14:03:38,639
create a mig or vm instance instance

19883
14:03:35,839 --> 14:03:41,115
templates are an easy way to save a vm

19884
14:03:38,639 --> 14:03:44,239
instances configuration so you can use

19885
14:03:41,116 --> 14:03:46,400
it later to recreate vms or groups of

19886
14:03:44,239 --> 14:03:48,799
vms an instance template

19887
14:03:46,400 --> 14:03:51,436
is a global resource that is not bound

19888
14:03:48,800 --> 14:03:54,240
to a zone or region although you can

19889
14:03:51,436 --> 14:03:56,955
restrict a template to a zone by calling

19890
14:03:54,239 --> 14:03:58,799
out specific zonal resources now there

19891
14:03:56,955 --> 14:04:01,275
is something to note for when you are

19892
14:03:58,800 --> 14:04:04,160
ever using migs if you want to create a

19893
14:04:01,275 --> 14:04:07,040
group of identical instances you must

19894
14:04:04,160 --> 14:04:08,956
use an instance template to create a mig

19895
14:04:07,040 --> 14:04:11,200
and is something you should always keep

19896
14:04:08,955 --> 14:04:13,595
in the front of mind when using migs

19897
14:04:11,199 --> 14:04:16,479
these two resources both instance

19898
14:04:13,595 --> 14:04:18,559
templates and managed instance groups go

19899
14:04:16,480 --> 14:04:20,800
hand in hand now some other things to

19900
14:04:18,559 --> 14:04:23,199
note is that instance templates are

19901
14:04:20,800 --> 14:04:26,000
designed to create instances with

19902
14:04:23,199 --> 14:04:28,559
identical configurations so you cannot

19903
14:04:26,000 --> 14:04:30,400
update an existing instance template or

19904
14:04:28,559 --> 14:04:32,559
change an instance template after you

19905
14:04:30,400 --> 14:04:34,000
create it if you need to make changes to

19906
14:04:32,559 --> 14:04:36,079
the configuration

19907
14:04:34,000 --> 14:04:38,559
create a new instance template you can

19908
14:04:36,080 --> 14:04:40,720
create a template based on an existing

19909
14:04:38,559 --> 14:04:43,519
instance template or based on an

19910
14:04:40,720 --> 14:04:45,595
existing instance to use an existing vm

19911
14:04:43,519 --> 14:04:48,719
to make a template you can save the

19912
14:04:45,595 --> 14:04:52,000
configuration using the gcloud command

19913
14:04:48,720 --> 14:04:54,319
gcloud instance dash templates create or

19914
14:04:52,000 --> 14:04:56,800
to use the console you can simply go to

19915
14:04:54,319 --> 14:04:58,720
the instance templates page click on the

19916
14:04:56,800 --> 14:05:00,956
template that you want to update and

19917
14:04:58,720 --> 14:05:02,955
click on create similar the last thing

19918
14:05:00,955 --> 14:05:06,639
that i wanted to point out is that you

19919
14:05:02,955 --> 14:05:08,879
can use custom or public images in your

19920
14:05:06,639 --> 14:05:11,360
instance templates and so that's pretty

19921
14:05:08,879 --> 14:05:13,915
much all i had to cover when it comes to

19922
14:05:11,360 --> 14:05:15,915
instance groups and instance templates

19923
14:05:13,915 --> 14:05:17,839
managed instance groups are great for

19924
14:05:15,915 --> 14:05:20,479
when you're looking at high availability

19925
14:05:17,839 --> 14:05:22,479
as a priority and letting migs do all

19926
14:05:20,480 --> 14:05:24,319
the work of keeping your environment up

19927
14:05:22,480 --> 14:05:26,240
and running and so you can now mark this

19928
14:05:24,319 --> 14:05:28,720
lesson as complete and whenever you're

19929
14:05:26,239 --> 14:05:31,040
ready join me in the next one where we

19930
14:05:28,720 --> 14:05:33,756
go hands-on with instance groups

19931
14:05:31,040 --> 14:05:36,840
instance templates and load balancers in

19932
14:05:33,756 --> 14:05:36,840
a demo

19933
14:05:38,559 --> 14:05:43,199
welcome back in this demo we're going to

19934
14:05:41,199 --> 14:05:45,595
put everything that we've learned

19935
14:05:43,199 --> 14:05:47,680
together in a hands-on demo called

19936
14:05:45,595 --> 14:05:49,756
managing bow ties we're going to create

19937
14:05:47,680 --> 14:05:51,595
an instance template and next we're

19938
14:05:49,756 --> 14:05:53,520
going to use it to create an instance

19939
14:05:51,595 --> 14:05:56,159
group we're then going to create a low

19940
14:05:53,519 --> 14:05:58,159
balancer with a new back end and create

19941
14:05:56,160 --> 14:06:00,400
some health checks along the way we're

19942
14:05:58,160 --> 14:06:02,720
then going to verify that all instances

19943
14:06:00,400 --> 14:06:05,680
are working by browsing to the load

19944
14:06:02,720 --> 14:06:07,680
balancer ip and verifying the website

19945
14:06:05,680 --> 14:06:10,400
application we're then going to stress

19946
14:06:07,680 --> 14:06:12,879
test one of the instances to simulate a

19947
14:06:10,400 --> 14:06:14,560
scale out using auto scaling and then

19948
14:06:12,879 --> 14:06:16,639
we're going to simulate scaling the

19949
14:06:14,559 --> 14:06:19,435
instance group back in now there's quite

19950
14:06:16,639 --> 14:06:22,479
a bit to do here so with that being said

19951
14:06:19,436 --> 14:06:26,000
let's dive in so here i am logged in as

19952
14:06:22,480 --> 14:06:28,000
tony bowties at gmail.com under project

19953
14:06:26,000 --> 14:06:29,756
bowtie inc and so the first thing that

19954
14:06:28,000 --> 14:06:32,319
you want to do is you want to make sure

19955
14:06:29,756 --> 14:06:34,559
that you have a default vpc network

19956
14:06:32,319 --> 14:06:35,756
already created and so just to double

19957
14:06:34,559 --> 14:06:38,639
check i'm going to go over to the

19958
14:06:35,756 --> 14:06:41,436
navigation menu i'm going to scroll down

19959
14:06:38,639 --> 14:06:44,319
to vpc network

19960
14:06:41,436 --> 14:06:45,756
and yes i do have a default vpc network

19961
14:06:44,319 --> 14:06:48,159
so i'm going to go ahead and start

19962
14:06:45,756 --> 14:06:49,840
creating my resources and so now what i

19963
14:06:48,160 --> 14:06:51,916
want to do is i want to create my

19964
14:06:49,839 --> 14:06:53,435
instance template and so in order to do

19965
14:06:51,915 --> 14:06:55,680
that i'm going to go back up to the

19966
14:06:53,436 --> 14:06:58,319
navigation menu i'm going to go down to

19967
14:06:55,680 --> 14:07:00,400
compute engine and go up to instance

19968
14:06:58,319 --> 14:07:02,639
templates as you can see i currently

19969
14:07:00,400 --> 14:07:04,480
have no instance templates and yours

19970
14:07:02,639 --> 14:07:06,559
should look the same and so you can go

19971
14:07:04,480 --> 14:07:08,956
ahead and click on create instance

19972
14:07:06,559 --> 14:07:11,040
template and so just as a note there are

19973
14:07:08,955 --> 14:07:13,360
no monthly costs associated with

19974
14:07:11,040 --> 14:07:15,200
instance templates but this estimate

19975
14:07:13,360 --> 14:07:17,680
here on the right is to show you the

19976
14:07:15,199 --> 14:07:19,915
cost of each instance you will be

19977
14:07:17,680 --> 14:07:21,915
creating with this template okay so

19978
14:07:19,915 --> 14:07:23,915
getting right into it i'm going to name

19979
14:07:21,915 --> 14:07:26,079
this instance template

19980
14:07:23,915 --> 14:07:28,239
bowtie template and since we're spinning

19981
14:07:26,080 --> 14:07:30,880
up a lot of vms you want to be conscious

19982
14:07:28,239 --> 14:07:32,479
on costs and so under series you're

19983
14:07:30,879 --> 14:07:34,639
going to click on the drop down and

19984
14:07:32,480 --> 14:07:37,116
you're going to select n1 and under

19985
14:07:34,639 --> 14:07:39,436
machine type you're going to select f1

19986
14:07:37,116 --> 14:07:41,680
micro and this is the smallest instance

19987
14:07:39,436 --> 14:07:43,680
type as well as the cheapest within

19988
14:07:41,680 --> 14:07:45,680
google cloud you can go ahead and scroll

19989
14:07:43,680 --> 14:07:47,840
down right to the bottom here under

19990
14:07:45,680 --> 14:07:50,559
firewall you want to check off allow

19991
14:07:47,839 --> 14:07:52,955
http traffic next you want to select

19992
14:07:50,559 --> 14:07:55,115
management security disks networking and

19993
14:07:52,955 --> 14:07:57,519
sold tenancy you scroll down a little

19994
14:07:55,116 --> 14:07:59,680
bit and under startup script you're

19995
14:07:57,519 --> 14:08:02,319
going to paste in the script that's

19996
14:07:59,680 --> 14:08:04,955
available in the repo and you will find

19997
14:08:02,319 --> 14:08:06,955
a link to this script and the repo in

19998
14:08:04,955 --> 14:08:09,040
the lesson text and so you can leave all

19999
14:08:06,955 --> 14:08:10,955
the other options as its default and

20000
14:08:09,040 --> 14:08:12,955
simply click on create it's going to

20001
14:08:10,955 --> 14:08:14,955
take a couple minutes here okay and the

20002
14:08:12,955 --> 14:08:17,116
instance template is ready and so the

20003
14:08:14,955 --> 14:08:19,116
next step that you want to do is create

20004
14:08:17,116 --> 14:08:21,200
an instance group and as i said in a

20005
14:08:19,116 --> 14:08:23,116
previous lesson in order to create an

20006
14:08:21,199 --> 14:08:25,360
instance group you need an instance

20007
14:08:23,116 --> 14:08:27,596
template hence why we made the instance

20008
14:08:25,360 --> 14:08:29,840
template first okay and our instance

20009
14:08:27,595 --> 14:08:31,115
template has been created and so now

20010
14:08:29,839 --> 14:08:33,199
that you've created your instance

20011
14:08:31,116 --> 14:08:35,200
template you can head on over to

20012
14:08:33,199 --> 14:08:37,595
instance groups here in the left hand

20013
14:08:35,199 --> 14:08:39,680
menu and as expected there are no

20014
14:08:37,595 --> 14:08:41,435
instance groups and so you can go ahead

20015
14:08:39,680 --> 14:08:43,360
and click on the big blue button and

20016
14:08:41,436 --> 14:08:45,275
create an instance group you're going to

20017
14:08:43,360 --> 14:08:47,756
make sure that new managed instance

20018
14:08:45,275 --> 14:08:49,756
group stateless is selected and here you

20019
14:08:47,756 --> 14:08:52,239
have the option of choosing a stateful

20020
14:08:49,756 --> 14:08:53,680
instance group as well as an unmanaged

20021
14:08:52,239 --> 14:08:55,756
instance group and so we're going to

20022
14:08:53,680 --> 14:08:57,595
keep things stateless and so for the

20023
14:08:55,756 --> 14:09:00,080
name of the instance group you can

20024
14:08:57,595 --> 14:09:01,915
simply call this bowtie group i'm going

20025
14:09:00,080 --> 14:09:04,240
to use the same name in the description

20026
14:09:01,915 --> 14:09:06,639
and under location you want to check off

20027
14:09:04,239 --> 14:09:09,199
multiple zones in under region you want

20028
14:09:06,639 --> 14:09:11,680
to select us east one and if you click

20029
14:09:09,199 --> 14:09:13,755
on configure zones you can see here that

20030
14:09:11,680 --> 14:09:16,080
you can select all the different zones

20031
14:09:13,756 --> 14:09:18,160
that's available in that region that you

20032
14:09:16,080 --> 14:09:19,756
choose to have your instances in and so

20033
14:09:18,160 --> 14:09:21,596
i'm going to keep it under all three

20034
14:09:19,756 --> 14:09:24,000
zones i'm going to scroll down here a

20035
14:09:21,595 --> 14:09:26,079
little bit and under instance template

20036
14:09:24,000 --> 14:09:28,080
you should see bow tie template you can

20037
14:09:26,080 --> 14:09:30,560
select that you can scroll down a little

20038
14:09:28,080 --> 14:09:32,880
bit more and here under minimum number

20039
14:09:30,559 --> 14:09:35,115
of instances you want to set the minimum

20040
14:09:32,879 --> 14:09:37,519
number of instances to 3 and under

20041
14:09:35,116 --> 14:09:39,916
maximum number of instances you want to

20042
14:09:37,519 --> 14:09:42,000
set that to 6 and so this is going to be

20043
14:09:39,915 --> 14:09:44,399
double the amount of the minimum number

20044
14:09:42,000 --> 14:09:46,879
of instances so when you're scaled out

20045
14:09:44,400 --> 14:09:49,040
you should have a maximum of 6 instances

20046
14:09:46,879 --> 14:09:51,275
and when you're scaled in or you have

20047
14:09:49,040 --> 14:09:53,275
very low traffic you should only have

20048
14:09:51,275 --> 14:09:55,839
three instances so you can scroll down

20049
14:09:53,275 --> 14:09:57,595
some more and under auto healing you

20050
14:09:55,839 --> 14:09:59,275
want to select the health check and

20051
14:09:57,595 --> 14:10:01,839
you're going to go ahead and create a

20052
14:09:59,275 --> 14:10:04,479
new health check under name you can call

20053
14:10:01,839 --> 14:10:06,319
this healthy bow ties i'm going to use

20054
14:10:04,480 --> 14:10:08,240
the same for the description and i'm

20055
14:10:06,319 --> 14:10:10,000
going to leave the rest as its default

20056
14:10:08,239 --> 14:10:11,756
and go down and click on save and

20057
14:10:10,000 --> 14:10:13,756
continue i'm going to scroll down some

20058
14:10:11,756 --> 14:10:16,639
more and i'm going to leave the rest as

20059
14:10:13,756 --> 14:10:18,239
is and simply click on create and it's

20060
14:10:16,639 --> 14:10:19,915
going to take a couple minutes here and

20061
14:10:18,239 --> 14:10:22,239
so i'm going to pause the video and i'll

20062
14:10:19,915 --> 14:10:24,399
be back in a flash okay and my instance

20063
14:10:22,239 --> 14:10:26,239
group has been created and so to get a

20064
14:10:24,400 --> 14:10:28,560
better look at it i'm going to click on

20065
14:10:26,239 --> 14:10:30,799
bow tie group and i can see here that

20066
14:10:28,559 --> 14:10:33,360
three instances have been created if i

20067
14:10:30,800 --> 14:10:35,680
go up to vm instances you can see here

20068
14:10:33,360 --> 14:10:38,080
that i have three instances but under

20069
14:10:35,680 --> 14:10:40,559
instance groups because i have health

20070
14:10:38,080 --> 14:10:42,720
check enabled it shows that my instances

20071
14:10:40,559 --> 14:10:44,799
are unhealthy and this is because i

20072
14:10:42,720 --> 14:10:46,880
still need to create a firewall rule

20073
14:10:44,800 --> 14:10:49,596
that will allow google's health check

20074
14:10:46,879 --> 14:10:51,275
probes to reach my vm instances and so

20075
14:10:49,595 --> 14:10:53,275
you're going to go ahead and create that

20076
14:10:51,275 --> 14:10:55,275
firewall rule so you can bring the

20077
14:10:53,275 --> 14:10:57,275
health check status up to healthy so i'm

20078
14:10:55,275 --> 14:11:00,239
going to go over to the navigation menu

20079
14:10:57,275 --> 14:11:03,040
and scroll down to vpc network and go

20080
14:11:00,239 --> 14:11:05,199
over to firewall here under firewall as

20081
14:11:03,040 --> 14:11:07,520
expected you have the default firewall

20082
14:11:05,199 --> 14:11:09,115
rules from the default created vpc

20083
14:11:07,519 --> 14:11:11,115
network and so i'm going to go up to

20084
14:11:09,116 --> 14:11:13,916
create firewall and you can name this

20085
14:11:11,116 --> 14:11:14,955
firewall rule allow health check i'm

20086
14:11:13,915 --> 14:11:16,559
going to use the same for the

20087
14:11:14,955 --> 14:11:18,955
description i'm going to scroll down

20088
14:11:16,559 --> 14:11:20,720
here a little bit and under targets i'm

20089
14:11:18,955 --> 14:11:22,879
going to select all instances in the

20090
14:11:20,720 --> 14:11:25,680
network source filter i'm going to leave

20091
14:11:22,879 --> 14:11:28,000
as i p ranges and so here under source i

20092
14:11:25,680 --> 14:11:30,080
p ranges i want to enter in the ip

20093
14:11:28,000 --> 14:11:32,080
addresses for the google cloud health

20094
14:11:30,080 --> 14:11:34,240
check probes and you can find these in

20095
14:11:32,080 --> 14:11:36,480
the documentation and i will also be

20096
14:11:34,239 --> 14:11:38,720
supplying them in the instructions and

20097
14:11:36,480 --> 14:11:40,720
there are two sets of ip addresses that

20098
14:11:38,720 --> 14:11:43,200
need to be entered and just as a note

20099
14:11:40,720 --> 14:11:45,040
you don't need to know this for the exam

20100
14:11:43,199 --> 14:11:47,275
but it's always a good to know if you're

20101
14:11:45,040 --> 14:11:48,800
ever adding health checks to any of your

20102
14:11:47,275 --> 14:11:50,879
instances i'm going to scroll down a

20103
14:11:48,800 --> 14:11:53,276
little bit to protocols and ports and

20104
14:11:50,879 --> 14:11:55,275
under tcp i'm going to check it off and

20105
14:11:53,275 --> 14:11:57,275
put in port 80. that's pretty much all

20106
14:11:55,275 --> 14:11:59,436
you have to do here so whenever you

20107
14:11:57,275 --> 14:12:01,915
entered all that information in you can

20108
14:11:59,436 --> 14:12:04,160
simply click on create and so now i have

20109
14:12:01,915 --> 14:12:06,239
a firewall rule that will allow health

20110
14:12:04,160 --> 14:12:09,200
checks to be done and so it may take a

20111
14:12:06,239 --> 14:12:11,915
minute or two but if i head back on over

20112
14:12:09,199 --> 14:12:14,399
to my compute engine instances and go

20113
14:12:11,915 --> 14:12:16,159
over to my instance groups

20114
14:12:14,400 --> 14:12:18,080
i'll be able to see that all my

20115
14:12:16,160 --> 14:12:19,916
instances are now healthy and so

20116
14:12:18,080 --> 14:12:22,080
whenever you're creating instance groups

20117
14:12:19,915 --> 14:12:24,639
and you're applying health checks this

20118
14:12:22,080 --> 14:12:26,955
firewall rule is necessary so please be

20119
14:12:24,639 --> 14:12:29,116
aware okay so now that we've created our

20120
14:12:26,955 --> 14:12:31,595
instance templates we've created our

20121
14:12:29,116 --> 14:12:34,240
instance groups and we created a

20122
14:12:31,595 --> 14:12:36,319
firewall rule in order to satisfy health

20123
14:12:34,239 --> 14:12:38,559
checks we can now move on to the next

20124
14:12:36,319 --> 14:12:39,839
step which is creating the load balancer

20125
14:12:38,559 --> 14:12:42,079
so i'm going to go back up to the

20126
14:12:39,839 --> 14:12:44,639
navigation menu and i'm going to scroll

20127
14:12:42,080 --> 14:12:47,040
down to network services and over to

20128
14:12:44,639 --> 14:12:49,040
load balancing and as expected there are

20129
14:12:47,040 --> 14:12:50,639
no load balancers created and so

20130
14:12:49,040 --> 14:12:52,800
whenever you're ready you can click on

20131
14:12:50,639 --> 14:12:55,040
the big blue button and create a new low

20132
14:12:52,800 --> 14:12:58,956
balancer here you have the option of

20133
14:12:55,040 --> 14:13:02,319
creating an http or https load balancer

20134
14:12:58,955 --> 14:13:04,479
along with a tcp load balancer or a udp

20135
14:13:02,319 --> 14:13:07,116
load balancer and because we're serving

20136
14:13:04,480 --> 14:13:09,916
external traffic on port 80 we're going

20137
14:13:07,116 --> 14:13:11,840
to use the http load balancer so you can

20138
14:13:09,915 --> 14:13:13,755
click on start configuration and i'm

20139
14:13:11,839 --> 14:13:16,159
being prompted to decide between

20140
14:13:13,756 --> 14:13:17,756
internet facing or internal only and

20141
14:13:16,160 --> 14:13:19,756
you're going to be accepting traffic

20142
14:13:17,756 --> 14:13:21,756
from the internet to your load bouncer

20143
14:13:19,756 --> 14:13:23,916
so make sure that from internet to my

20144
14:13:21,756 --> 14:13:25,840
vms is checked off and simply click

20145
14:13:23,915 --> 14:13:28,159
continue and so next you will be

20146
14:13:25,839 --> 14:13:30,319
prompted with a page with a bunch of

20147
14:13:28,160 --> 14:13:32,240
configurations that you can enter and so

20148
14:13:30,319 --> 14:13:34,400
we'll get to that in just a second but

20149
14:13:32,239 --> 14:13:36,079
first we need to name our load balancer

20150
14:13:34,400 --> 14:13:39,275
and so i'm going to call this

20151
14:13:36,080 --> 14:13:41,436
bowtie dash lb for low balancer and so

20152
14:13:39,275 --> 14:13:43,519
next step for your load balancer is you

20153
14:13:41,436 --> 14:13:45,916
need to configure a back end so you can

20154
14:13:43,519 --> 14:13:48,000
click on back end configuration and here

20155
14:13:45,915 --> 14:13:50,879
you have the option of selecting from

20156
14:13:48,000 --> 14:13:52,080
back-end services or back-end buckets so

20157
14:13:50,879 --> 14:13:54,479
you're going to go ahead and click on

20158
14:13:52,080 --> 14:13:56,955
back-end services and create a back-end

20159
14:13:54,480 --> 14:13:59,276
service and here you will be prompted

20160
14:13:56,955 --> 14:14:01,275
with a bunch of fields to fill out in

20161
14:13:59,275 --> 14:14:02,639
order to create your back-end service

20162
14:14:01,275 --> 14:14:05,115
and you can go ahead and name the

20163
14:14:02,639 --> 14:14:07,199
backend service as bowtie backend

20164
14:14:05,116 --> 14:14:09,040
service back-end type is going to be

20165
14:14:07,199 --> 14:14:12,159
instance group and you can leave the

20166
14:14:09,040 --> 14:14:14,559
protocol named port and timeout as is as

20167
14:14:12,160 --> 14:14:16,720
we're going to be using http under

20168
14:14:14,559 --> 14:14:18,799
instance group in new back-end if you

20169
14:14:16,720 --> 14:14:21,436
select the drop-down you should see your

20170
14:14:18,800 --> 14:14:22,720
available bow tie group instance group

20171
14:14:21,436 --> 14:14:24,720
select that

20172
14:14:22,720 --> 14:14:27,275
scroll down a little bit and under port

20173
14:14:24,720 --> 14:14:28,720
numbers you can enter in port 80 and you

20174
14:14:27,275 --> 14:14:31,436
can leave all the other options as

20175
14:14:28,720 --> 14:14:33,275
default and simply click on done and so

20176
14:14:31,436 --> 14:14:36,239
if you're ever interested you can always

20177
14:14:33,275 --> 14:14:38,319
add a cache using cloud cdn now i know

20178
14:14:36,239 --> 14:14:40,479
we haven't gone through cloud cdn in

20179
14:14:38,319 --> 14:14:42,800
this course but just know that this is

20180
14:14:40,480 --> 14:14:45,436
google's content delivery network and it

20181
14:14:42,800 --> 14:14:48,080
uses google's global edge network to

20182
14:14:45,436 --> 14:14:50,000
serve content closer to users and this

20183
14:14:48,080 --> 14:14:52,639
accelerates your websites and your

20184
14:14:50,000 --> 14:14:55,360
applications and delivers a better user

20185
14:14:52,639 --> 14:14:57,595
experience for your user okay and moving

20186
14:14:55,360 --> 14:14:59,915
on here under health check if i click on

20187
14:14:57,595 --> 14:15:02,159
the drop down you should see healthy bow

20188
14:14:59,915 --> 14:15:04,639
ties you can select that for your health

20189
14:15:02,160 --> 14:15:07,200
check and so just as a note here under

20190
14:15:04,639 --> 14:15:09,040
advanced configurations you can set your

20191
14:15:07,199 --> 14:15:11,680
session affinity your connection

20192
14:15:09,040 --> 14:15:13,680
draining timeout as well as request and

20193
14:15:11,680 --> 14:15:15,595
response headers and so we don't need

20194
14:15:13,680 --> 14:15:17,360
any of that for this demo and so i'm

20195
14:15:15,595 --> 14:15:19,040
going to go ahead and collapse this and

20196
14:15:17,360 --> 14:15:21,520
once you've finished filling in all the

20197
14:15:19,040 --> 14:15:23,520
fields you can simply click on create

20198
14:15:21,519 --> 14:15:26,159
okay and so you should now have your

20199
14:15:23,519 --> 14:15:28,239
back end configuration and your host and

20200
14:15:26,160 --> 14:15:29,756
path rules configured and so the only

20201
14:15:28,239 --> 14:15:31,519
thing that's left to configure is the

20202
14:15:29,756 --> 14:15:33,756
front end so you can go up and click on

20203
14:15:31,519 --> 14:15:36,399
front-end configuration and you can name

20204
14:15:33,756 --> 14:15:39,200
your front-end bowtie front-end service

20205
14:15:36,400 --> 14:15:41,040
gonna keep the protocols http and here

20206
14:15:39,199 --> 14:15:43,680
is where you would select the network

20207
14:15:41,040 --> 14:15:45,756
service tier choosing either premium or

20208
14:15:43,680 --> 14:15:48,239
standard and if you remember in the load

20209
14:15:45,756 --> 14:15:50,639
balancing lesson in order to use this as

20210
14:15:48,239 --> 14:15:52,400
a global load balancer i need to use a

20211
14:15:50,639 --> 14:15:55,436
premium tier okay and we're going to

20212
14:15:52,400 --> 14:15:57,596
keep this as ipv4 with an ephemeral ip

20213
14:15:55,436 --> 14:15:59,275
address on port 80 so once you've

20214
14:15:57,595 --> 14:16:01,360
finished configuring the front end you

20215
14:15:59,275 --> 14:16:03,360
can simply click on done and you can go

20216
14:16:01,360 --> 14:16:05,520
and click on review and finalize and

20217
14:16:03,360 --> 14:16:07,680
this will give you a summary on your

20218
14:16:05,519 --> 14:16:09,680
configuration and so i'm happy with the

20219
14:16:07,680 --> 14:16:11,519
way everything's configured and if you

20220
14:16:09,680 --> 14:16:14,080
are as well you can simply click on

20221
14:16:11,519 --> 14:16:16,239
create and this may take a minute or two

20222
14:16:14,080 --> 14:16:18,080
but it will create your low balancer

20223
14:16:16,239 --> 14:16:19,680
along with your back end and your front

20224
14:16:18,080 --> 14:16:21,756
end so again i'm going to pause the

20225
14:16:19,680 --> 14:16:23,680
video here for just a minute and i'll be

20226
14:16:21,756 --> 14:16:25,360
back before you can say cat in the hat

20227
14:16:23,680 --> 14:16:27,199
okay and my load balancer has been

20228
14:16:25,360 --> 14:16:29,116
created and to get a little bit more

20229
14:16:27,199 --> 14:16:31,519
details i'm going to drill down into it

20230
14:16:29,116 --> 14:16:34,240
and i can see here the details of my

20231
14:16:31,519 --> 14:16:36,239
load balancer along with my monitoring

20232
14:16:34,239 --> 14:16:38,239
and any caching but i don't have any

20233
14:16:36,239 --> 14:16:40,799
caching enabled and therefore nothing is

20234
14:16:38,239 --> 14:16:42,955
showing so going back to the details i

20235
14:16:40,800 --> 14:16:45,276
can see here that i have a new ip

20236
14:16:42,955 --> 14:16:47,199
address for my load balancer and i'll be

20237
14:16:45,275 --> 14:16:48,720
getting into that in just a minute i'm

20238
14:16:47,199 --> 14:16:50,955
going to go back here and i'm going to

20239
14:16:48,720 --> 14:16:53,360
check out my back ends click on bow tie

20240
14:16:50,955 --> 14:16:55,595
back end service and here i can see the

20241
14:16:53,360 --> 14:16:57,756
requests per second as well as my

20242
14:16:55,595 --> 14:17:00,000
configuration and if you do see this

20243
14:16:57,756 --> 14:17:02,239
caution symbol here showing that some of

20244
14:17:00,000 --> 14:17:04,800
your instances are unhealthy it's only

20245
14:17:02,239 --> 14:17:06,955
because the low balancer needs time to

20246
14:17:04,800 --> 14:17:09,276
do a full health check on all the

20247
14:17:06,955 --> 14:17:11,436
instances in the instance group and so

20248
14:17:09,275 --> 14:17:13,595
this will take some time okay and so i'm

20249
14:17:11,436 --> 14:17:15,520
going to go back over and check out my

20250
14:17:13,595 --> 14:17:17,595
front end and there's nothing to drill

20251
14:17:15,519 --> 14:17:20,399
down into with the front end service but

20252
14:17:17,595 --> 14:17:21,519
it does show me my scope the address the

20253
14:17:20,400 --> 14:17:24,400
protocol

20254
14:17:21,519 --> 14:17:26,399
network tier and the low balancer itself

20255
14:17:24,400 --> 14:17:28,720
so this is the end of part one of this

20256
14:17:26,400 --> 14:17:30,800
demo it was getting a bit long so i

20257
14:17:28,720 --> 14:17:33,595
decided to break it up this would be a

20258
14:17:30,800 --> 14:17:36,400
great opportunity for you to get up have

20259
14:17:33,595 --> 14:17:38,639
a stretch get yourself a coffee or tea

20260
14:17:36,400 --> 14:17:40,955
and whenever you're ready part two will

20261
14:17:38,639 --> 14:17:43,040
be starting immediately from the end of

20262
14:17:40,955 --> 14:17:47,839
part one so you can now mark this as

20263
14:17:43,040 --> 14:17:47,840
complete and i'll see you in part two

20264
14:17:49,360 --> 14:17:53,680
this is part two of the managing bow

20265
14:17:51,360 --> 14:17:56,480
ties demo and we will be starting

20266
14:17:53,680 --> 14:17:58,955
exactly where we left off in part one so

20267
14:17:56,480 --> 14:18:00,800
with that being said let's dive in and

20268
14:17:58,955 --> 14:18:02,955
so before you move forward you want to

20269
14:18:00,800 --> 14:18:05,360
make sure that all your instances are

20270
14:18:02,955 --> 14:18:08,000
considered healthy by your load balancer

20271
14:18:05,360 --> 14:18:09,915
and as i can see here all my instances

20272
14:18:08,000 --> 14:18:12,319
in my instance group are considered

20273
14:18:09,915 --> 14:18:14,639
healthy by the load balancer and so just

20274
14:18:12,319 --> 14:18:17,116
to verify this i'm going to go ahead and

20275
14:18:14,639 --> 14:18:19,436
copy the i p address and you can open up

20276
14:18:17,116 --> 14:18:20,955
a new tab in your browser and simply

20277
14:18:19,436 --> 14:18:23,840
paste it in

20278
14:18:20,955 --> 14:18:26,559
and success as you can see here managing

20279
14:18:23,839 --> 14:18:28,639
the production of many bow ties can be

20280
14:18:26,559 --> 14:18:31,595
automated but managing the wearer of

20281
14:18:28,639 --> 14:18:33,915
them definitely cannot another fine

20282
14:18:31,595 --> 14:18:36,399
message from the people at bow tie inc

20283
14:18:33,915 --> 14:18:38,955
now although this is a simple web page i

20284
14:18:36,400 --> 14:18:41,040
used a couple variables just to show you

20285
14:18:38,955 --> 14:18:42,879
the low balancing that happens in the

20286
14:18:41,040 --> 14:18:45,595
background and traffic will be load

20287
14:18:42,879 --> 14:18:47,519
balanced in between all of the instances

20288
14:18:45,595 --> 14:18:49,756
in the instance group so if you click on

20289
14:18:47,519 --> 14:18:52,159
refresh then you should see the machine

20290
14:18:49,756 --> 14:18:54,400
name and the data center change so every

20291
14:18:52,160 --> 14:18:56,640
time i click refresh the traffic will be

20292
14:18:54,400 --> 14:18:58,400
routed to a different instance in a

20293
14:18:56,639 --> 14:19:01,519
different zone and so a simple

20294
14:18:58,400 --> 14:19:03,680
simulation on how traffic is low balance

20295
14:19:01,519 --> 14:19:05,915
between the different instances in their

20296
14:19:03,680 --> 14:19:07,915
different zones okay so now that we've

20297
14:19:05,915 --> 14:19:09,915
verified the website application i'm

20298
14:19:07,915 --> 14:19:12,399
going to close down this tab and so now

20299
14:19:09,915 --> 14:19:14,399
that we've created our instance template

20300
14:19:12,400 --> 14:19:16,639
we've created our instance group and

20301
14:19:14,400 --> 14:19:18,880
we've created our low balancer with the

20302
14:19:16,639 --> 14:19:20,479
back end and front end service and it

20303
14:19:18,879 --> 14:19:22,239
looks like everything seems to be

20304
14:19:20,480 --> 14:19:25,200
working together nicely we're going to

20305
14:19:22,239 --> 14:19:27,360
go ahead and simulate a scale out using

20306
14:19:25,199 --> 14:19:29,680
auto scaling and so in order to simulate

20307
14:19:27,360 --> 14:19:31,520
this we're going to do a stress test on

20308
14:19:29,680 --> 14:19:34,160
one of the instances so i'm going to

20309
14:19:31,519 --> 14:19:36,479
head back on over to the navigation menu

20310
14:19:34,160 --> 14:19:38,560
scroll down to compute engine and here

20311
14:19:36,480 --> 14:19:40,720
you can ssh into any one of these

20312
14:19:38,559 --> 14:19:42,159
instances and run the stress test from

20313
14:19:40,720 --> 14:19:44,239
there so i'm going to pick here the one

20314
14:19:42,160 --> 14:19:46,320
at the top and so whenever you're logged

20315
14:19:44,239 --> 14:19:48,559
in you can simply paste in the command

20316
14:19:46,319 --> 14:19:50,559
that i've included in the instructions

20317
14:19:48,559 --> 14:19:52,955
that will run the stress test and so

20318
14:19:50,559 --> 14:19:55,435
this is a stress test application called

20319
14:19:52,955 --> 14:19:57,915
stress that was included in the startup

20320
14:19:55,436 --> 14:20:00,480
script and this again will put stress on

20321
14:19:57,915 --> 14:20:02,955
the server itself and trigger a scale

20322
14:20:00,480 --> 14:20:05,200
out to handle the load and it'll do this

20323
14:20:02,955 --> 14:20:07,275
for 30 seconds so you can go ahead and

20324
14:20:05,199 --> 14:20:09,839
hit enter and head back over to the

20325
14:20:07,275 --> 14:20:11,680
console and in about a minute or two you

20326
14:20:09,839 --> 14:20:14,159
should see some new instances that will

20327
14:20:11,680 --> 14:20:16,480
be created by your instance group in

20328
14:20:14,160 --> 14:20:18,560
order to handle the load okay and after

20329
14:20:16,480 --> 14:20:20,800
about a couple minutes it's showing here

20330
14:20:18,559 --> 14:20:22,720
that instances are being created and it

20331
14:20:20,800 --> 14:20:25,040
will be scaling out to the maximum

20332
14:20:22,720 --> 14:20:27,116
amount of instances that i've set it to

20333
14:20:25,040 --> 14:20:28,160
which is six i'm going to drill down

20334
14:20:27,116 --> 14:20:30,560
into this

20335
14:20:28,160 --> 14:20:32,880
and yes a scale out is happening and

20336
14:20:30,559 --> 14:20:34,559
some new instances are being created to

20337
14:20:32,879 --> 14:20:36,479
handle the load so i'm going to give it

20338
14:20:34,559 --> 14:20:38,319
just a minute here okay and as you can

20339
14:20:36,480 --> 14:20:40,319
see here all the instances have been

20340
14:20:38,319 --> 14:20:42,000
created they've been added to the

20341
14:20:40,319 --> 14:20:44,239
instance group and all of them are

20342
14:20:42,000 --> 14:20:46,319
marked as healthy and so just to verify

20343
14:20:44,239 --> 14:20:48,720
that all the instances are working i'm

20344
14:20:46,319 --> 14:20:50,400
going to go ahead and open up a new tab

20345
14:20:48,720 --> 14:20:52,880
i'm going to plug in the ip address on

20346
14:20:50,400 --> 14:20:55,680
my load balancer and i'm going to simply

20347
14:20:52,879 --> 14:20:57,680
cycle through all these instances to

20348
14:20:55,680 --> 14:21:00,559
make sure that all them are working and

20349
14:20:57,680 --> 14:21:02,800
it looks like i have no issues and so

20350
14:21:00,559 --> 14:21:05,435
now that you've simulated a scale out i

20351
14:21:02,800 --> 14:21:06,956
wanted to go ahead and run a scale in

20352
14:21:05,436 --> 14:21:10,000
and so i'm first going to close up these

20353
14:21:06,955 --> 14:21:12,720
tabs now with regards to scaling there

20354
14:21:10,000 --> 14:21:15,116
is a 10 minute stabilization period that

20355
14:21:12,720 --> 14:21:17,840
cannot be adjusted for scaling and this

20356
14:21:15,116 --> 14:21:19,756
is a built-in feature into google cloud

20357
14:21:17,839 --> 14:21:21,755
now because i respect your time as a

20358
14:21:19,756 --> 14:21:24,319
student i'm going to show you a work

20359
14:21:21,756 --> 14:21:26,955
around to trigger a scale in sooner

20360
14:21:24,319 --> 14:21:29,199
strictly for this demo and i also wanted

20361
14:21:26,955 --> 14:21:31,915
to caution that this should never be

20362
14:21:29,199 --> 14:21:34,079
done in a production or production-like

20363
14:21:31,915 --> 14:21:36,559
environment you should always wait for

20364
14:21:34,080 --> 14:21:39,840
the scaling to happen on its own and

20365
14:21:36,559 --> 14:21:42,319
never force it this method is being used

20366
14:21:39,839 --> 14:21:44,079
strictly for learning purposes to save

20367
14:21:42,319 --> 14:21:46,239
you some time and so i'm going to go

20368
14:21:44,080 --> 14:21:48,480
ahead to the top menu and click on

20369
14:21:46,239 --> 14:21:50,479
rolling restart and replace and this

20370
14:21:48,480 --> 14:21:52,956
will bring up a new page where you will

20371
14:21:50,480 --> 14:21:55,756
have the option to either restart or

20372
14:21:52,955 --> 14:21:58,239
replace any instances in your instance

20373
14:21:55,756 --> 14:22:00,000
group and so for your purposes under

20374
14:21:58,239 --> 14:22:02,000
operation make sure that you have

20375
14:22:00,000 --> 14:22:04,400
restart checked off and this will

20376
14:22:02,000 --> 14:22:06,239
restart all of your instances and only

20377
14:22:04,400 --> 14:22:08,000
bring up the ones that are needed so i'm

20378
14:22:06,239 --> 14:22:09,360
going to go ahead and click on restart

20379
14:22:08,000 --> 14:22:11,199
i'm going to go back to my instance

20380
14:22:09,360 --> 14:22:13,116
group console and i'm just going to give

20381
14:22:11,199 --> 14:22:15,519
this a few minutes to cook and i'll be

20382
14:22:13,116 --> 14:22:17,520
right back in a flash okay so it looks

20383
14:22:15,519 --> 14:22:19,519
like the instance group has scaled in

20384
14:22:17,519 --> 14:22:22,319
and we are now down left to three

20385
14:22:19,519 --> 14:22:24,399
instances the minimum that we configured

20386
14:22:22,319 --> 14:22:27,116
for our instance group and so that

20387
14:22:24,400 --> 14:22:29,520
pretty much covers the managing bow ties

20388
14:22:27,116 --> 14:22:32,080
demo so i wanted to congratulate you on

20389
14:22:29,519 --> 14:22:34,639
making it through this demo and i hope

20390
14:22:32,080 --> 14:22:36,720
that this has been extremely useful in

20391
14:22:34,639 --> 14:22:38,955
excelling your knowledge on managing

20392
14:22:36,720 --> 14:22:41,595
instance templates managed instance

20393
14:22:38,955 --> 14:22:44,080
groups and creating load balancers with

20394
14:22:41,595 --> 14:22:46,479
back-end and front-end services now this

20395
14:22:44,080 --> 14:22:48,560
was a jam-packed demo and there was a

20396
14:22:46,480 --> 14:22:51,360
lot to pack in with everything you've

20397
14:22:48,559 --> 14:22:54,159
learned from the last few lessons and so

20398
14:22:51,360 --> 14:22:55,915
just as a recap you created an instance

20399
14:22:54,160 --> 14:22:58,080
template with your startup script you

20400
14:22:55,915 --> 14:23:00,319
then created a new instance group with a

20401
14:22:58,080 --> 14:23:02,720
health check to go with it configuring

20402
14:23:00,319 --> 14:23:05,040
auto scaling for a minimum of three

20403
14:23:02,720 --> 14:23:07,275
instances you then created a firewall

20404
14:23:05,040 --> 14:23:09,680
rule so that the health check probes

20405
14:23:07,275 --> 14:23:12,079
were able to connect to the application

20406
14:23:09,680 --> 14:23:14,639
and you then created a load balancer

20407
14:23:12,080 --> 14:23:16,639
with its back end and front-end service

20408
14:23:14,639 --> 14:23:19,040
and verified that the website

20409
14:23:16,639 --> 14:23:21,519
application was indeed up and running

20410
14:23:19,040 --> 14:23:23,436
you then ran a stress test to allow a

20411
14:23:21,519 --> 14:23:25,595
simulation of a scale out of your

20412
14:23:23,436 --> 14:23:28,080
instance group and then simulated a

20413
14:23:25,595 --> 14:23:30,559
scale in of your instance group great

20414
14:23:28,080 --> 14:23:32,400
job and so now that we've completed this

20415
14:23:30,559 --> 14:23:35,360
demo you want to make sure that you're

20416
14:23:32,400 --> 14:23:37,360
not accumulating any unnecessary costs

20417
14:23:35,360 --> 14:23:39,436
and so i'm going to go ahead and walk

20418
14:23:37,360 --> 14:23:41,756
you through the breakdown of deleting

20419
14:23:39,436 --> 14:23:43,275
all these resources so first you're

20420
14:23:41,756 --> 14:23:45,520
going to go ahead and delete the load

20421
14:23:43,275 --> 14:23:48,799
balancer go back up to the navigation

20422
14:23:45,519 --> 14:23:50,719
menu and scroll down to network services

20423
14:23:48,800 --> 14:23:52,480
and go over to load balancing so i'm

20424
14:23:50,720 --> 14:23:54,955
going to go ahead and check off bow tie

20425
14:23:52,480 --> 14:23:56,640
lb and simply go up to the top and click

20426
14:23:54,955 --> 14:23:58,799
on delete it's going to ask me if i'm

20427
14:23:56,639 --> 14:24:01,199
sure i want to do this i'm also going to

20428
14:23:58,800 --> 14:24:03,680
select bow tie back end service and i

20429
14:24:01,199 --> 14:24:05,839
can delete my load balancer and my back

20430
14:24:03,680 --> 14:24:07,680
end service all at once i'm going to go

20431
14:24:05,839 --> 14:24:10,239
ahead and delete load balancer and the

20432
14:24:07,680 --> 14:24:12,000
selected resources

20433
14:24:10,239 --> 14:24:14,400
and this should clear up within a few

20434
14:24:12,000 --> 14:24:16,400
seconds okay and our load balancer has

20435
14:24:14,400 --> 14:24:18,080
been deleted i'm going to just go up

20436
14:24:16,400 --> 14:24:20,400
here to the back end make sure

20437
14:24:18,080 --> 14:24:22,720
everything's good yeah we're all clean

20438
14:24:20,400 --> 14:24:24,800
same thing with front end and so now you

20439
14:24:22,720 --> 14:24:26,400
can move on to instance groups so i'm

20440
14:24:24,800 --> 14:24:29,276
going to head back up to the navigation

20441
14:24:26,400 --> 14:24:31,275
menu go down a compute engine and go up

20442
14:24:29,275 --> 14:24:33,275
to instance groups and here you can just

20443
14:24:31,275 --> 14:24:35,040
simply check off bow tie group and

20444
14:24:33,275 --> 14:24:36,159
simply click on delete

20445
14:24:35,040 --> 14:24:37,915
you're going to be prompted with a

20446
14:24:36,160 --> 14:24:40,080
notification to make sure you want to

20447
14:24:37,915 --> 14:24:42,000
delete bow tie group yes i want to

20448
14:24:40,080 --> 14:24:44,080
delete and again this should take about

20449
14:24:42,000 --> 14:24:46,319
a minute okay it actually took a couple

20450
14:24:44,080 --> 14:24:48,080
minutes but my instance group has been

20451
14:24:46,319 --> 14:24:50,319
deleted and so now i'm going to go over

20452
14:24:48,080 --> 14:24:52,639
to instance templates and i'm going to

20453
14:24:50,319 --> 14:24:55,040
delete my template and check off bow tie

20454
14:24:52,639 --> 14:24:56,319
template and simply click delete you're

20455
14:24:55,040 --> 14:24:58,080
going to get a prompt to make sure you

20456
14:24:56,319 --> 14:25:00,559
want to delete your instance template

20457
14:24:58,080 --> 14:25:03,040
yes you want to delete

20458
14:25:00,559 --> 14:25:05,115
and success you've now deleted all your

20459
14:25:03,040 --> 14:25:07,116
resources although there is one more

20460
14:25:05,116 --> 14:25:09,040
resource that you will not be billed for

20461
14:25:07,116 --> 14:25:11,116
but since we're cleaning everything up

20462
14:25:09,040 --> 14:25:12,879
we might as well clean that up as well

20463
14:25:11,116 --> 14:25:14,880
and this is the firewall rule that we

20464
14:25:12,879 --> 14:25:18,879
created and go over to the navigation

20465
14:25:14,879 --> 14:25:20,479
menu and scroll down to vpc network

20466
14:25:18,879 --> 14:25:22,719
i'm going to go to firewall here on the

20467
14:25:20,480 --> 14:25:24,400
left hand menu and here i'm going to

20468
14:25:22,720 --> 14:25:27,520
check off the allow health check

20469
14:25:24,400 --> 14:25:28,955
firewall rule and simply click on delete

20470
14:25:27,519 --> 14:25:31,199
i'm going to get a prompt to make sure

20471
14:25:28,955 --> 14:25:33,915
that i want to delete it yes you want to

20472
14:25:31,199 --> 14:25:36,159
delete i'm going to quickly hit refresh

20473
14:25:33,915 --> 14:25:38,239
and yes we've deleted it and so this

20474
14:25:36,160 --> 14:25:40,320
concludes the end of this demo so you

20475
14:25:38,239 --> 14:25:43,839
can now mark this as complete and i'll

20476
14:25:40,319 --> 14:25:43,839
see you in the next one

20477
14:25:45,680 --> 14:25:50,559
welcome back in this next section we

20478
14:25:48,400 --> 14:25:53,360
will be focusing on google cloud's

20479
14:25:50,559 --> 14:25:56,079
premier container orchestration service

20480
14:25:53,360 --> 14:25:58,559
called kubernetes but before we can dive

20481
14:25:56,080 --> 14:26:00,720
right into kubernetes and the benefits

20482
14:25:58,559 --> 14:26:03,040
that it gives to containers you'll need

20483
14:26:00,720 --> 14:26:06,160
an understanding as to what containers

20484
14:26:03,040 --> 14:26:08,639
are and what value containers provide in

20485
14:26:06,160 --> 14:26:10,560
this lesson i will be covering the

20486
14:26:08,639 --> 14:26:13,595
difference between virtual machines and

20487
14:26:10,559 --> 14:26:16,000
containers what containers are how they

20488
14:26:13,595 --> 14:26:18,799
work and the value proposition they

20489
14:26:16,000 --> 14:26:19,915
bring so with that being said let's dive

20490
14:26:18,800 --> 14:26:22,080
in

20491
14:26:19,915 --> 14:26:24,639
now for those of you who didn't know

20492
14:26:22,080 --> 14:26:26,720
container technology gets its name from

20493
14:26:24,639 --> 14:26:29,040
the shipping industry products get

20494
14:26:26,720 --> 14:26:31,595
placed into standardized shipping

20495
14:26:29,040 --> 14:26:33,520
containers which are designed to fit

20496
14:26:31,595 --> 14:26:36,159
into the ship that accommodates the

20497
14:26:33,519 --> 14:26:40,000
container's standard size instead of

20498
14:26:36,160 --> 14:26:42,480
having various sizes of packaging now by

20499
14:26:40,000 --> 14:26:45,199
standardizing this process and keeping

20500
14:26:42,480 --> 14:26:48,160
the items together the container can be

20501
14:26:45,199 --> 14:26:51,360
moved as a unit and it costs less to do

20502
14:26:48,160 --> 14:26:54,720
it this way as well the standardization

20503
14:26:51,360 --> 14:26:57,199
allows for consistency when packing and

20504
14:26:54,720 --> 14:27:00,720
moving the containers placing them on

20505
14:26:57,199 --> 14:27:03,115
ships and docks as well as storage no

20506
14:27:00,720 --> 14:27:06,160
matter where the container is it always

20507
14:27:03,116 --> 14:27:08,720
stays the same size and the contents

20508
14:27:06,160 --> 14:27:10,800
stay isolated from all the other

20509
14:27:08,720 --> 14:27:12,800
containers that they are stacked with

20510
14:27:10,800 --> 14:27:15,840
and so now before we get into the

20511
14:27:12,800 --> 14:27:18,560
details of containers i wanted to cover

20512
14:27:15,839 --> 14:27:21,679
how we got here and why

20513
14:27:18,559 --> 14:27:23,595
so a great way to discuss containers is

20514
14:27:21,680 --> 14:27:25,840
through their comparison to virtual

20515
14:27:23,595 --> 14:27:29,040
machines now as we discussed in a

20516
14:27:25,839 --> 14:27:31,275
previous lesson when it comes to vms the

20517
14:27:29,040 --> 14:27:33,915
systems are virtualized through a

20518
14:27:31,275 --> 14:27:36,239
hypervisor that sits on top of the

20519
14:27:33,915 --> 14:27:39,435
underlying host infrastructure the

20520
14:27:36,239 --> 14:27:42,319
underlying hardware is virtualized so

20521
14:27:39,436 --> 14:27:45,840
that multiple operating system instances

20522
14:27:42,319 --> 14:27:49,275
can run on the hardware each vm runs its

20523
14:27:45,839 --> 14:27:52,319
own operating system and has access to

20524
14:27:49,275 --> 14:27:55,360
virtualized resources representing the

20525
14:27:52,319 --> 14:27:59,116
underlying hardware due to this process

20526
14:27:55,360 --> 14:28:03,275
vms come with the cost of large overhead

20527
14:27:59,116 --> 14:28:06,480
in cpu memory and disk as well can be

20528
14:28:03,275 --> 14:28:08,720
very large due to the fact that each vm

20529
14:28:06,480 --> 14:28:11,916
needs its own individual operating

20530
14:28:08,720 --> 14:28:15,275
system there also lacks standardization

20531
14:28:11,915 --> 14:28:18,079
between each vm making them unique due

20532
14:28:15,275 --> 14:28:20,955
to the os configuration the software

20533
14:28:18,080 --> 14:28:24,160
installed and the software libraries

20534
14:28:20,955 --> 14:28:27,040
thus not making it very portable to be

20535
14:28:24,160 --> 14:28:29,276
able to run in any environment now when

20536
14:28:27,040 --> 14:28:31,680
dealing with containers things are run

20537
14:28:29,275 --> 14:28:33,756
very differently the underlying host

20538
14:28:31,680 --> 14:28:36,319
infrastructure is still there but

20539
14:28:33,756 --> 14:28:38,680
instead of just using a hypervisor and

20540
14:28:36,319 --> 14:28:40,879
abstracting the underlying hardware

20541
14:28:38,680 --> 14:28:43,519
containerization takes it one step

20542
14:28:40,879 --> 14:28:44,399
further and abstracts the operating

20543
14:28:43,519 --> 14:28:45,275
system

20544
14:28:44,400 --> 14:28:47,916
thus

20545
14:28:45,275 --> 14:28:51,040
leaving the application with all of its

20546
14:28:47,915 --> 14:28:53,915
dependencies in a neatly packaged

20547
14:28:51,040 --> 14:28:56,239
standardized container this is done by

20548
14:28:53,915 --> 14:28:58,399
installing the operating system on top

20549
14:28:56,239 --> 14:29:00,559
of the host infrastructure

20550
14:28:58,400 --> 14:29:02,880
and then a separate layer on top of the

20551
14:29:00,559 --> 14:29:05,275
host operating system called the

20552
14:29:02,879 --> 14:29:07,360
container engine now instead of having

20553
14:29:05,275 --> 14:29:09,839
their own operating system the

20554
14:29:07,360 --> 14:29:12,400
containers share the operating system

20555
14:29:09,839 --> 14:29:14,639
kernel with other containers

20556
14:29:12,400 --> 14:29:17,200
while operating independently

20557
14:29:14,639 --> 14:29:19,436
running just the application code and

20558
14:29:17,199 --> 14:29:22,239
the dependencies needed to run that

20559
14:29:19,436 --> 14:29:25,596
application this allows each container

20560
14:29:22,239 --> 14:29:28,400
to consume very little memory or disk

20561
14:29:25,595 --> 14:29:31,275
making containers very lightweight

20562
14:29:28,400 --> 14:29:33,916
efficient and portable containerized

20563
14:29:31,275 --> 14:29:36,559
applications can start in seconds and

20564
14:29:33,915 --> 14:29:39,519
many more instances of the application

20565
14:29:36,559 --> 14:29:42,559
can fit onto the machine compared to a

20566
14:29:39,519 --> 14:29:44,879
vm environment this container can now be

20567
14:29:42,559 --> 14:29:47,915
brought over to other environments

20568
14:29:44,879 --> 14:29:50,079
running docker and able to run without

20569
14:29:47,915 --> 14:29:52,479
having the worries of running into

20570
14:29:50,080 --> 14:29:54,160
issues of compatibility now although

20571
14:29:52,480 --> 14:29:56,000
there are a few different container

20572
14:29:54,160 --> 14:29:59,116
engines out there the one that has

20573
14:29:56,000 --> 14:30:01,116
received the most popularity is docker

20574
14:29:59,116 --> 14:30:03,596
and this is the engine that we will be

20575
14:30:01,116 --> 14:30:06,240
referring to for the remainder of this

20576
14:30:03,595 --> 14:30:09,040
course now a docker image is a

20577
14:30:06,239 --> 14:30:11,595
collection or stack of layers that are

20578
14:30:09,040 --> 14:30:14,160
created from sequential instructions on

20579
14:30:11,595 --> 14:30:17,595
a docker file so each line in the

20580
14:30:14,160 --> 14:30:20,640
dockerfile is run line by line and a

20581
14:30:17,595 --> 14:30:23,595
unique read-only layer is written to the

20582
14:30:20,639 --> 14:30:25,756
image what makes docker images unique is

20583
14:30:23,595 --> 14:30:28,319
that each time you add another

20584
14:30:25,756 --> 14:30:30,800
instruction in the docker file a new

20585
14:30:28,319 --> 14:30:33,199
layer is created now going through a

20586
14:30:30,800 --> 14:30:35,756
practical example here shown on the

20587
14:30:33,199 --> 14:30:38,955
right is a docker file and we will be

20588
14:30:35,756 --> 14:30:41,595
able to map each line of code to a layer

20589
14:30:38,955 --> 14:30:43,519
shown on the docker image on the left

20590
14:30:41,595 --> 14:30:45,915
the line marked from

20591
14:30:43,519 --> 14:30:48,639
shows the base image that the image will

20592
14:30:45,915 --> 14:30:52,479
be using the example shown here shows

20593
14:30:48,639 --> 14:30:55,756
that the ubuntu image version 12.04

20594
14:30:52,480 --> 14:30:59,116
will be used next the run instruction is

20595
14:30:55,756 --> 14:31:02,160
used which will perform a general update

20596
14:30:59,116 --> 14:31:04,840
install apache 2 and output a message to

20597
14:31:02,160 --> 14:31:07,596
be displayed that is written to the

20598
14:31:04,839 --> 14:31:09,435
index.html file next up is the working

20599
14:31:07,595 --> 14:31:12,079
directories and these are the

20600
14:31:09,436 --> 14:31:14,639
environment variables set by using an

20601
14:31:12,080 --> 14:31:17,436
env instruction and this will help run

20602
14:31:14,639 --> 14:31:19,915
the apache runtime next layer is the

20603
14:31:17,436 --> 14:31:23,520
expose instruction and this is used to

20604
14:31:19,915 --> 14:31:26,239
expose the container's port on 8080 and

20605
14:31:23,519 --> 14:31:29,275
lastly the command layer is an

20606
14:31:26,239 --> 14:31:32,079
instruction that is executing the apache

20607
14:31:29,275 --> 14:31:34,479
web server from its executable path and

20608
14:31:32,080 --> 14:31:36,800
so this is a great example of how a

20609
14:31:34,480 --> 14:31:39,596
docker file is broken down from each

20610
14:31:36,800 --> 14:31:42,240
line to create the layers of this image

20611
14:31:39,595 --> 14:31:45,595
and so just as a note here each docker

20612
14:31:42,239 --> 14:31:48,400
image starts with a base image as well

20613
14:31:45,595 --> 14:31:51,199
each line in a docker file creates a new

20614
14:31:48,400 --> 14:31:54,239
layer that is added to the image and

20615
14:31:51,199 --> 14:31:56,719
finally all the layers in a docker image

20616
14:31:54,239 --> 14:31:59,040
are read only and cannot be changed

20617
14:31:56,720 --> 14:32:00,480
unless the docker file is adjusted to

20618
14:31:59,040 --> 14:32:03,520
reflect that change

20619
14:32:00,480 --> 14:32:06,319
so now how do we get from a docker image

20620
14:32:03,519 --> 14:32:09,359
to a container well a running docker

20621
14:32:06,319 --> 14:32:12,319
container is actually an instantiation

20622
14:32:09,360 --> 14:32:15,040
of an image so containers using the same

20623
14:32:12,319 --> 14:32:17,436
image are identical to each other in

20624
14:32:15,040 --> 14:32:20,400
terms of their application code and

20625
14:32:17,436 --> 14:32:23,040
runtime dependencies so i could use the

20626
14:32:20,400 --> 14:32:26,080
same image for multiple copies of the

20627
14:32:23,040 --> 14:32:28,319
same container that have different tasks

20628
14:32:26,080 --> 14:32:29,200
what makes each individual container

20629
14:32:28,319 --> 14:32:32,400
different

20630
14:32:29,199 --> 14:32:35,199
is that running containers include a

20631
14:32:32,400 --> 14:32:38,160
writable layer on top of the read-only

20632
14:32:35,199 --> 14:32:41,435
content runtime changes including any

20633
14:32:38,160 --> 14:32:43,840
rights and updates to data and files are

20634
14:32:41,436 --> 14:32:46,955
saved in this read write layer so in

20635
14:32:43,839 --> 14:32:49,595
this example when using the command

20636
14:32:46,955 --> 14:32:52,000
docker run fashionista a docker

20637
14:32:49,595 --> 14:32:54,955
container will be instantiated from the

20638
14:32:52,000 --> 14:32:57,756
docker image and a read write layer is

20639
14:32:54,955 --> 14:33:00,479
always added on top of the read-only

20640
14:32:57,756 --> 14:33:02,880
layers when a container is created

20641
14:33:00,480 --> 14:33:05,116
writing any necessary files that's

20642
14:33:02,879 --> 14:33:08,000
needed for the application and so just

20643
14:33:05,116 --> 14:33:10,880
as a note here docker containers are

20644
14:33:08,000 --> 14:33:13,756
always created from docker images and

20645
14:33:10,879 --> 14:33:15,915
containers can use the same image yet

20646
14:33:13,756 --> 14:33:18,639
will always have a different read write

20647
14:33:15,915 --> 14:33:21,435
layer no matter the amount of containers

20648
14:33:18,639 --> 14:33:23,360
running on a given host so now when your

20649
14:33:21,436 --> 14:33:25,596
containers have been created you need a

20650
14:33:23,360 --> 14:33:28,400
place to store them and so this is where

20651
14:33:25,595 --> 14:33:31,435
a container registry comes into play now

20652
14:33:28,400 --> 14:33:33,680
a container registry is a single place

20653
14:33:31,436 --> 14:33:35,916
for you to store and manage docker

20654
14:33:33,680 --> 14:33:38,400
images now when you create your docker

20655
14:33:35,915 --> 14:33:40,479
file and then build your image

20656
14:33:38,400 --> 14:33:43,520
you want to store that image in a

20657
14:33:40,480 --> 14:33:46,560
central image repository whether it be a

20658
14:33:43,519 --> 14:33:49,435
private one or a public one a popular

20659
14:33:46,559 --> 14:33:52,159
public container registry is docker hub

20660
14:33:49,436 --> 14:33:54,639
and this is a common registry where many

20661
14:33:52,160 --> 14:33:57,436
open source images can be found

20662
14:33:54,639 --> 14:34:00,400
including those used for the base layer

20663
14:33:57,436 --> 14:34:02,720
images like the ubuntu example that i

20664
14:34:00,400 --> 14:34:05,200
showed you earlier and so once you have

20665
14:34:02,720 --> 14:34:06,796
your containers in a container registry

20666
14:34:05,199 --> 14:34:08,879
you need to be able to run these

20667
14:34:06,796 --> 14:34:11,360
containers so in order to run these

20668
14:34:08,879 --> 14:34:14,239
containers you need docker hosts and

20669
14:34:11,360 --> 14:34:16,480
these can consist of any machine running

20670
14:34:14,239 --> 14:34:17,595
the docker engine and this could be your

20671
14:34:16,480 --> 14:34:20,400
laptop

20672
14:34:17,595 --> 14:34:22,720
server or you can run them in provided

20673
14:34:20,400 --> 14:34:25,040
hosted cloud environments now this may

20674
14:34:22,720 --> 14:34:27,436
have been a refresher for some but for

20675
14:34:25,040 --> 14:34:29,275
those of you who are new to containers i

20676
14:34:27,436 --> 14:34:32,400
hope this has given you a lot more

20677
14:34:29,275 --> 14:34:35,040
clarity on what containers are what they

20678
14:34:32,400 --> 14:34:37,040
do and the value that they bring to any

20679
14:34:35,040 --> 14:34:39,200
environment and so that's pretty much

20680
14:34:37,040 --> 14:34:42,000
all i wanted to cover on this short

20681
14:34:39,199 --> 14:34:43,519
lesson of an introduction to containers

20682
14:34:42,000 --> 14:34:45,839
so you can now mark this lesson as

20683
14:34:43,519 --> 14:34:48,839
complete and let's move on to the next

20684
14:34:45,839 --> 14:34:48,839
one

20685
14:34:50,559 --> 14:34:55,360
welcome back so now that you've gotten

20686
14:34:52,796 --> 14:34:57,520
familiar with what containers are and

20687
14:34:55,360 --> 14:34:59,915
how they work i wanted to dive into

20688
14:34:57,519 --> 14:35:02,559
google cloud's platform as a service

20689
14:34:59,915 --> 14:35:05,360
offering for containers called google

20690
14:35:02,559 --> 14:35:08,239
kubernetes engine also known as short as

20691
14:35:05,360 --> 14:35:10,720
gke now although the exam goes into a

20692
14:35:08,239 --> 14:35:13,595
more operational perspective with

20693
14:35:10,720 --> 14:35:16,000
regards to gke knowing the foundation of

20694
14:35:13,595 --> 14:35:18,720
kubernetes and the different topics of

20695
14:35:16,000 --> 14:35:20,879
kubernetes is a must in order to

20696
14:35:18,720 --> 14:35:24,080
understand the abstractions that take

20697
14:35:20,879 --> 14:35:26,319
place with gke from regular kubernetes

20698
14:35:24,080 --> 14:35:29,200
in this lesson i will be getting into

20699
14:35:26,319 --> 14:35:30,639
key topics with regards to kubernetes

20700
14:35:29,199 --> 14:35:31,915
and we'll be touching on the

20701
14:35:30,639 --> 14:35:34,000
architecture

20702
14:35:31,915 --> 14:35:36,955
components and how they all work

20703
14:35:34,000 --> 14:35:39,436
together to achieve the desired state

20704
14:35:36,955 --> 14:35:41,595
for your containerized workloads now

20705
14:35:39,436 --> 14:35:45,275
there's a lot to get into so with that

20706
14:35:41,595 --> 14:35:48,639
being said let's dive in now before i

20707
14:35:45,275 --> 14:35:51,756
can get into gke i need to set the stage

20708
14:35:48,639 --> 14:35:54,559
on explaining what kubernetes is put

20709
14:35:51,756 --> 14:35:57,360
simply kubernetes is an orchestration

20710
14:35:54,559 --> 14:36:00,479
platform for containers which was

20711
14:35:57,360 --> 14:36:04,319
invented by google and eventually open

20712
14:36:00,480 --> 14:36:06,480
source it is now maintained by the cncf

20713
14:36:04,319 --> 14:36:09,275
short for the cloud native computing

20714
14:36:06,480 --> 14:36:11,596
foundation and has achieved incredible

20715
14:36:09,275 --> 14:36:15,115
widespread adoption kubernetes provides

20716
14:36:11,595 --> 14:36:18,239
a platform to automate schedule and run

20717
14:36:15,116 --> 14:36:19,916
containers on clusters of physical or

20718
14:36:18,239 --> 14:36:22,559
virtual machines

20719
14:36:19,915 --> 14:36:25,040
thus eliminating many of the manual

20720
14:36:22,559 --> 14:36:27,435
processes involved in deploying and

20721
14:36:25,040 --> 14:36:29,680
scaling containerized applications

20722
14:36:27,436 --> 14:36:32,080
kubernetes manages the containers that

20723
14:36:29,680 --> 14:36:35,595
run the applications and ensure that

20724
14:36:32,080 --> 14:36:37,596
there is no downtime in a way that you

20725
14:36:35,595 --> 14:36:40,319
the user can define

20726
14:36:37,595 --> 14:36:42,319
for example if you define that when a

20727
14:36:40,319 --> 14:36:44,559
container goes down and another

20728
14:36:42,319 --> 14:36:46,400
container needs to start kubernetes

20729
14:36:44,559 --> 14:36:49,275
would take care of that for you

20730
14:36:46,400 --> 14:36:51,520
automatically and seamlessly kubernetes

20731
14:36:49,275 --> 14:36:54,479
provides you with the framework to run

20732
14:36:51,519 --> 14:36:56,879
distributed systems resiliently it takes

20733
14:36:54,480 --> 14:36:59,520
care of scaling and failover for your

20734
14:36:56,879 --> 14:37:01,040
application provides deployment patterns

20735
14:36:59,519 --> 14:37:04,399
and allows you to manage your

20736
14:37:01,040 --> 14:37:07,275
applications with tons of flexibility

20737
14:37:04,400 --> 14:37:09,680
reliability and power it works with a

20738
14:37:07,275 --> 14:37:11,839
range of container tools including

20739
14:37:09,680 --> 14:37:14,639
docker now although this adoption was

20740
14:37:11,839 --> 14:37:17,755
widespread it did come with its various

20741
14:37:14,639 --> 14:37:21,360
challenges this included scaling at cd

20742
14:37:17,756 --> 14:37:22,480
load balancing availability auto scaling

20743
14:37:21,360 --> 14:37:24,955
networking

20744
14:37:22,480 --> 14:37:26,319
rollback on faulty deployments and so

20745
14:37:24,955 --> 14:37:29,116
much more

20746
14:37:26,319 --> 14:37:31,915
so now google cloud has since developed

20747
14:37:29,116 --> 14:37:34,400
a managed offering for kubernetes

20748
14:37:31,915 --> 14:37:37,360
providing a managed environment for

20749
14:37:34,400 --> 14:37:40,160
deploying managing and scaling your

20750
14:37:37,360 --> 14:37:42,720
containerized applications using google

20751
14:37:40,160 --> 14:37:45,680
infrastructure the gke environment

20752
14:37:42,720 --> 14:37:48,239
consists of compute engine instances

20753
14:37:45,680 --> 14:37:50,559
grouped together to form a cluster and

20754
14:37:48,239 --> 14:37:52,879
it provides all the same benefits as

20755
14:37:50,559 --> 14:37:55,519
on-premises kubernetes yet has

20756
14:37:52,879 --> 14:37:57,839
abstracted the complexity of having to

20757
14:37:55,519 --> 14:38:00,719
worry about the hardware and to top it

20758
14:37:57,839 --> 14:38:03,115
off it has the benefits of advanced

20759
14:38:00,720 --> 14:38:04,480
cluster management features that google

20760
14:38:03,116 --> 14:38:07,040
cloud provides

20761
14:38:04,480 --> 14:38:09,360
with things like cloud load balancing

20762
14:38:07,040 --> 14:38:12,000
and being able to spread traffic amongst

20763
14:38:09,360 --> 14:38:14,000
clusters and nodes node pools to

20764
14:38:12,000 --> 14:38:16,319
designate subnets of nodes within a

20765
14:38:14,000 --> 14:38:18,559
cluster for additional flexibility

20766
14:38:16,319 --> 14:38:21,116
automatic scaling of your cluster's node

20767
14:38:18,559 --> 14:38:23,595
instance count and automatic upgrades

20768
14:38:21,116 --> 14:38:25,596
for your clusters node software it also

20769
14:38:23,595 --> 14:38:28,639
allows you to maintain node health and

20770
14:38:25,595 --> 14:38:31,040
availability with node auto repair and

20771
14:38:28,639 --> 14:38:33,839
takes care of logging and monitoring

20772
14:38:31,040 --> 14:38:36,319
with google cloud's operation suite for

20773
14:38:33,839 --> 14:38:39,839
visibility into your cluster so as you

20774
14:38:36,319 --> 14:38:42,400
can see here gke holds a lot of benefits

20775
14:38:39,839 --> 14:38:44,719
when it comes to running kubernetes in

20776
14:38:42,400 --> 14:38:47,275
google cloud so i wanted to take a

20777
14:38:44,720 --> 14:38:50,160
moment now to dive into the cluster

20778
14:38:47,275 --> 14:38:52,559
architecture and help familiarize you

20779
14:38:50,160 --> 14:38:55,916
with all the components involved in a

20780
14:38:52,559 --> 14:38:58,079
cluster so a cluster is the foundation

20781
14:38:55,915 --> 14:39:00,639
of google kubernetes engine and

20782
14:38:58,080 --> 14:39:02,240
kubernetes as a whole the kubernetes

20783
14:39:00,639 --> 14:39:05,116
objects that represent your

20784
14:39:02,239 --> 14:39:08,079
containerized applications all run on

20785
14:39:05,116 --> 14:39:11,276
top of the cluster in gke a cluster

20786
14:39:08,080 --> 14:39:13,520
consists of at least one control plane

20787
14:39:11,275 --> 14:39:15,839
and multiple worker machines called

20788
14:39:13,519 --> 14:39:18,795
nodes the control plane and node

20789
14:39:15,839 --> 14:39:21,275
machines run the kubernetes cluster the

20790
14:39:18,796 --> 14:39:23,680
control plane is responsible to

20791
14:39:21,275 --> 14:39:26,479
coordinate the entire cluster and this

20792
14:39:23,680 --> 14:39:28,955
can include scheduling workloads like

20793
14:39:26,480 --> 14:39:31,596
containerized applications and managing

20794
14:39:28,955 --> 14:39:34,319
the workload's life cycle scaling and

20795
14:39:31,595 --> 14:39:36,955
upgrades the control plane also manages

20796
14:39:34,319 --> 14:39:39,519
network and storage resources for those

20797
14:39:36,955 --> 14:39:41,595
workloads and most importantly it

20798
14:39:39,519 --> 14:39:44,879
manages the state of the cluster and

20799
14:39:41,595 --> 14:39:47,040
make sure it is at the desired state now

20800
14:39:44,879 --> 14:39:49,275
the nodes are the worker machines that

20801
14:39:47,040 --> 14:39:51,680
run your containerized applications and

20802
14:39:49,275 --> 14:39:55,199
other workloads the nodes are compute

20803
14:39:51,680 --> 14:39:57,840
engine vm instances that gke creates on

20804
14:39:55,199 --> 14:40:00,319
your behalf when you create a cluster

20805
14:39:57,839 --> 14:40:03,275
each node is managed from the control

20806
14:40:00,319 --> 14:40:06,559
plane which receives updates on each

20807
14:40:03,275 --> 14:40:09,199
node's self-reported status a node also

20808
14:40:06,559 --> 14:40:11,275
runs the services necessary to support

20809
14:40:09,199 --> 14:40:13,519
the docker containers that make up your

20810
14:40:11,275 --> 14:40:16,400
cluster's workloads these include the

20811
14:40:13,519 --> 14:40:18,795
docker runtime and the kubernetes node

20812
14:40:16,400 --> 14:40:21,360
agent known as the cubelet which

20813
14:40:18,796 --> 14:40:23,916
communicates with the control plane and

20814
14:40:21,360 --> 14:40:27,840
is responsible for starting and running

20815
14:40:23,915 --> 14:40:30,479
docker containers scheduled on that node

20816
14:40:27,839 --> 14:40:32,559
now diving deeper into the architecture

20817
14:40:30,480 --> 14:40:34,560
there are components within the control

20818
14:40:32,559 --> 14:40:36,720
plane and nodes that you should

20819
14:40:34,559 --> 14:40:39,199
familiarize yourself with as these

20820
14:40:36,720 --> 14:40:41,436
components are what ties the cluster

20821
14:40:39,199 --> 14:40:44,239
together and helps manage the

20822
14:40:41,436 --> 14:40:46,400
orchestration as well as the state now

20823
14:40:44,239 --> 14:40:48,559
the control plane is the unified

20824
14:40:46,400 --> 14:40:51,596
endpoint for your cluster the control

20825
14:40:48,559 --> 14:40:54,479
plane's components make global decisions

20826
14:40:51,595 --> 14:40:56,795
about the cluster for example scheduling

20827
14:40:54,480 --> 14:40:59,200
as well as detecting and responding to

20828
14:40:56,796 --> 14:41:02,560
cluster events all interactions with the

20829
14:40:59,199 --> 14:41:05,275
cluster are done via kubernetes api

20830
14:41:02,559 --> 14:41:08,559
calls and the control plane runs the

20831
14:41:05,275 --> 14:41:10,879
kubernetes api server process to handle

20832
14:41:08,559 --> 14:41:16,319
those requests you can make kubernetes

20833
14:41:10,879 --> 14:41:18,879
api calls directly via http or grpc or

20834
14:41:16,319 --> 14:41:20,879
can also be done indirectly by running

20835
14:41:18,879 --> 14:41:24,559
commands from the kubernetes command

20836
14:41:20,879 --> 14:41:26,795
line client called cubectl and of course

20837
14:41:24,559 --> 14:41:30,159
you can interact with the ui in the

20838
14:41:26,796 --> 14:41:33,040
cloud console the api server process is

20839
14:41:30,160 --> 14:41:35,680
the hub for all communications for the

20840
14:41:33,040 --> 14:41:38,400
cluster moving on to the next component

20841
14:41:35,680 --> 14:41:41,199
is cube scheduler the cube scheduler is

20842
14:41:38,400 --> 14:41:44,560
a component that discovers and assigns

20843
14:41:41,199 --> 14:41:47,360
newly created pods to a node for them to

20844
14:41:44,559 --> 14:41:49,680
run on so any new pods that are created

20845
14:41:47,360 --> 14:41:52,796
will automatically be assigned to its

20846
14:41:49,680 --> 14:41:54,796
appropriate node by the cube scheduler

20847
14:41:52,796 --> 14:41:57,596
taking into consideration any

20848
14:41:54,796 --> 14:42:00,000
constraints that are in place next up is

20849
14:41:57,595 --> 14:42:02,319
the cube controller manager and this is

20850
14:42:00,000 --> 14:42:05,116
the component that runs controller

20851
14:42:02,319 --> 14:42:07,680
processes and is responsible for things

20852
14:42:05,116 --> 14:42:08,720
like noticing and responding when nodes

20853
14:42:07,680 --> 14:42:11,199
go down

20854
14:42:08,720 --> 14:42:13,840
maintaining the correct number of pods

20855
14:42:11,199 --> 14:42:16,795
populating the services and pods as well

20856
14:42:13,839 --> 14:42:20,000
as creating default accounts and api

20857
14:42:16,796 --> 14:42:22,480
access tokens for new namespaces it is

20858
14:42:20,000 --> 14:42:25,040
these controllers that will basically

20859
14:42:22,480 --> 14:42:27,276
look to make changes to the cluster when

20860
14:42:25,040 --> 14:42:29,520
the current state does not meet the

20861
14:42:27,275 --> 14:42:32,000
desired state now when it comes to the

20862
14:42:29,519 --> 14:42:35,115
cloud controller manager this is what

20863
14:42:32,000 --> 14:42:37,595
embeds cloud-specific control logic the

20864
14:42:35,116 --> 14:42:40,160
cloud controller manager lets you link

20865
14:42:37,595 --> 14:42:41,199
your cluster into any cloud providers

20866
14:42:40,160 --> 14:42:43,756
api

20867
14:42:41,199 --> 14:42:47,039
and separates out the components that

20868
14:42:43,756 --> 14:42:48,955
interact with that cloud platform from

20869
14:42:47,040 --> 14:42:51,436
components that just interact with your

20870
14:42:48,955 --> 14:42:54,319
cluster the cloud controller manager

20871
14:42:51,436 --> 14:42:56,796
only runs controllers that are specific

20872
14:42:54,319 --> 14:43:00,400
to your cloud provider in this case

20873
14:42:56,796 --> 14:43:02,796
google cloud and lastly we have fcd and

20874
14:43:00,400 --> 14:43:05,520
this component is responsible to store

20875
14:43:02,796 --> 14:43:07,840
the state of the cluster at cd is a

20876
14:43:05,519 --> 14:43:11,039
consistent and highly available key

20877
14:43:07,839 --> 14:43:13,199
value store that only interacts with the

20878
14:43:11,040 --> 14:43:16,080
api server it saves all the

20879
14:43:13,199 --> 14:43:18,399
configuration data along with what nodes

20880
14:43:16,080 --> 14:43:20,560
are part of the cluster and what pods

20881
14:43:18,400 --> 14:43:22,796
they are running so now the control

20882
14:43:20,559 --> 14:43:25,275
plane needs a way to interact with the

20883
14:43:22,796 --> 14:43:27,916
nodes of the cluster thus the nodes

20884
14:43:25,275 --> 14:43:31,040
having components themselves for this

20885
14:43:27,915 --> 14:43:33,275
communication to occur this component is

20886
14:43:31,040 --> 14:43:35,756
called a cubelet and this is an agent

20887
14:43:33,275 --> 14:43:38,159
that runs on each node in the cluster

20888
14:43:35,756 --> 14:43:40,480
that communicates with the control plane

20889
14:43:38,160 --> 14:43:43,436
it is responsible for starting and

20890
14:43:40,480 --> 14:43:46,560
running docker containers scheduled on

20891
14:43:43,436 --> 14:43:49,116
that node it takes a set of pod specs

20892
14:43:46,559 --> 14:43:51,199
that are provided to it and ensures that

20893
14:43:49,116 --> 14:43:53,596
the containers described in those pod

20894
14:43:51,199 --> 14:43:55,915
specs are running and healthy and i will

20895
14:43:53,595 --> 14:43:58,639
be diving into pod specs in a later

20896
14:43:55,915 --> 14:44:00,955
lesson next up is cube proxy and this is

20897
14:43:58,639 --> 14:44:03,595
the component that maintains network

20898
14:44:00,955 --> 14:44:06,795
connectivity to the pods in a cluster

20899
14:44:03,595 --> 14:44:09,360
and lastly the container runtime is the

20900
14:44:06,796 --> 14:44:12,000
software that is responsible for running

20901
14:44:09,360 --> 14:44:15,680
containers kubernetes supports container

20902
14:44:12,000 --> 14:44:17,680
runtimes like docker and container d and

20903
14:44:15,680 --> 14:44:20,400
so these are the main components in a

20904
14:44:17,680 --> 14:44:23,199
cluster covering the control plane and

20905
14:44:20,400 --> 14:44:26,000
nodes with regards to communication

20906
14:44:23,199 --> 14:44:28,319
within the cluster now before i end this

20907
14:44:26,000 --> 14:44:30,559
lesson there is one more topic i wanted

20908
14:44:28,319 --> 14:44:33,436
to touch on with regards to the

20909
14:44:30,559 --> 14:44:36,079
architecture of a gke cluster and that

20910
14:44:33,436 --> 14:44:39,360
is the abstraction that happens and what

20911
14:44:36,080 --> 14:44:42,955
exactly does gke manage with regards to

20912
14:44:39,360 --> 14:44:45,756
kubernetes well gke manages all the

20913
14:44:42,955 --> 14:44:49,040
control plane components the endpoint

20914
14:44:45,756 --> 14:44:52,160
exposes the kubernetes api server that

20915
14:44:49,040 --> 14:44:54,400
cubectl uses to communicate with your

20916
14:44:52,160 --> 14:44:57,360
cluster control plane the endpoint

20917
14:44:54,400 --> 14:45:00,080
exposes the kubernetes api server that

20918
14:44:57,360 --> 14:45:02,955
cubectl uses to communicate with your

20919
14:45:00,080 --> 14:45:06,240
cluster control plane the endpoint ip is

20920
14:45:02,955 --> 14:45:08,080
displayed in cloud console and this ip

20921
14:45:06,239 --> 14:45:10,955
will allow you to interact with the

20922
14:45:08,080 --> 14:45:14,240
cluster when you run the command gcloud

20923
14:45:10,955 --> 14:45:16,000
container clusters get dash credentials

20924
14:45:14,239 --> 14:45:18,879
you see that the command gets the

20925
14:45:16,000 --> 14:45:22,080
cluster endpoint as part of updating

20926
14:45:18,879 --> 14:45:25,040
cubeconfig an ip address for the cluster

20927
14:45:22,080 --> 14:45:27,276
is then exposed to interact with and is

20928
14:45:25,040 --> 14:45:29,680
responsible for provisioning and

20929
14:45:27,275 --> 14:45:32,639
managing all the infrastructure that is

20930
14:45:29,680 --> 14:45:35,199
needed for the control plane gke also

20931
14:45:32,639 --> 14:45:37,595
automates the kubernetes nodes by

20932
14:45:35,199 --> 14:45:40,239
launching them as compute engine vms

20933
14:45:37,595 --> 14:45:42,879
under the hood but still allows the user

20934
14:45:40,239 --> 14:45:45,519
to change the machine type and access

20935
14:45:42,879 --> 14:45:47,915
upgrade options by default google

20936
14:45:45,519 --> 14:45:50,559
kubernetes engine clusters and node

20937
14:45:47,915 --> 14:45:52,795
pools are upgraded automatically by

20938
14:45:50,559 --> 14:45:55,839
google but you can also control when

20939
14:45:52,796 --> 14:45:57,680
auto upgrades can and cannot occur by

20940
14:45:55,839 --> 14:46:00,479
configuring maintenance windows and

20941
14:45:57,680 --> 14:46:02,720
exclusions and just as a note a clusters

20942
14:46:00,480 --> 14:46:05,276
control plane and nodes do not

20943
14:46:02,720 --> 14:46:07,520
necessarily run the same version at all

20944
14:46:05,275 --> 14:46:09,915
times and i will be digging more into

20945
14:46:07,519 --> 14:46:12,239
that in a later lesson and so i know

20946
14:46:09,915 --> 14:46:15,115
this is a lot of theory to take in but

20947
14:46:12,239 --> 14:46:18,000
is as i said before a necessity to

20948
14:46:15,116 --> 14:46:20,400
understanding kubernetes and gke and as

20949
14:46:18,000 --> 14:46:23,275
we go further along into kubernetes and

20950
14:46:20,400 --> 14:46:25,756
get into demos i promise that this will

20951
14:46:23,275 --> 14:46:27,436
start to make a lot more sense and you

20952
14:46:25,756 --> 14:46:30,319
will start becoming more comfortable

20953
14:46:27,436 --> 14:46:33,360
with gke and the underlying components

20954
14:46:30,319 --> 14:46:35,519
of kubernetes knowing kubernetes is a

20955
14:46:33,360 --> 14:46:38,160
must when working in any cloud

20956
14:46:35,519 --> 14:46:40,639
environment as it is a popular and

20957
14:46:38,160 --> 14:46:43,840
growing technology that is not slowing

20958
14:46:40,639 --> 14:46:46,479
down so knowing gke will put you in a

20959
14:46:43,839 --> 14:46:49,915
really good position for your career as

20960
14:46:46,480 --> 14:46:52,480
an engineer in google cloud as well will

20961
14:46:49,915 --> 14:46:54,839
give you a leg up on diving into other

20962
14:46:52,480 --> 14:46:57,116
cloud vendors implementation of

20963
14:46:54,839 --> 14:46:59,039
kubernetes and so that's pretty much all

20964
14:46:57,116 --> 14:47:02,000
i wanted to cover when it comes to

20965
14:46:59,040 --> 14:47:03,520
google kubernetes engine and kubernetes

20966
14:47:02,000 --> 14:47:05,839
so you can now mark this lesson as

20967
14:47:03,519 --> 14:47:08,839
complete and let's move on to the next

20968
14:47:05,839 --> 14:47:08,839
one

20969
14:47:10,400 --> 14:47:15,520
welcome back in this lesson i will be

20970
14:47:13,116 --> 14:47:18,796
covering cluster and node management in

20971
14:47:15,519 --> 14:47:21,839
gke as it refers to choosing different

20972
14:47:18,796 --> 14:47:22,880
cluster types for your workloads cluster

20973
14:47:21,839 --> 14:47:25,915
versions

20974
14:47:22,879 --> 14:47:28,159
node pools as well as upgrades and the

20975
14:47:25,915 --> 14:47:30,000
many different options to choose from it

20976
14:47:28,160 --> 14:47:31,916
is good to familiarize yourself with

20977
14:47:30,000 --> 14:47:34,239
these options as they may be the

20978
14:47:31,915 --> 14:47:36,559
deciding factor of having to keep your

20979
14:47:34,239 --> 14:47:38,559
workloads highly available and your

20980
14:47:36,559 --> 14:47:40,955
tolerance to risk within your

20981
14:47:38,559 --> 14:47:43,595
environment so with that being said

20982
14:47:40,955 --> 14:47:46,000
let's dive in now in the last lesson we

20983
14:47:43,595 --> 14:47:48,720
touched on nodes and how they are the

20984
14:47:46,000 --> 14:47:51,040
workers for the kubernetes cluster so

20985
14:47:48,720 --> 14:47:53,200
now that you are familiar with nodes i

20986
14:47:51,040 --> 14:47:56,319
wanted to touch on a concept that builds

20987
14:47:53,199 --> 14:47:58,639
on it called node pools now a node pool

20988
14:47:56,319 --> 14:48:01,436
is a group of nodes within a cluster

20989
14:47:58,639 --> 14:48:04,000
that all have the same configuration and

20990
14:48:01,436 --> 14:48:06,560
using node config specification to

20991
14:48:04,000 --> 14:48:09,436
achieve this a node pool can also

20992
14:48:06,559 --> 14:48:11,839
contain one or multiple nodes when you

20993
14:48:09,436 --> 14:48:14,480
first create a cluster the number and

20994
14:48:11,839 --> 14:48:17,359
type of nodes that you specify becomes

20995
14:48:14,480 --> 14:48:20,319
the default node pool as shown here in

20996
14:48:17,360 --> 14:48:23,116
the diagram then you can add additional

20997
14:48:20,319 --> 14:48:25,756
custom node pools of different sizes and

20998
14:48:23,116 --> 14:48:28,480
types to your cluster all nodes in any

20999
14:48:25,756 --> 14:48:31,275
given node pool are identical to one

21000
14:48:28,480 --> 14:48:33,756
another now custom node pools are really

21001
14:48:31,275 --> 14:48:36,720
useful when you need to schedule pods

21002
14:48:33,756 --> 14:48:39,680
that require more resources than others

21003
14:48:36,720 --> 14:48:41,756
such as more memory more disk space or

21004
14:48:39,680 --> 14:48:44,879
even different machine types you can

21005
14:48:41,756 --> 14:48:47,360
create upgrade and delete node pools

21006
14:48:44,879 --> 14:48:50,079
individually without affecting the whole

21007
14:48:47,360 --> 14:48:53,360
cluster and just as a note you cannot

21008
14:48:50,080 --> 14:48:56,240
configure a single node in any node pool

21009
14:48:53,360 --> 14:48:59,040
any configuration changes affect all

21010
14:48:56,239 --> 14:49:01,839
nodes in the node pool and by default

21011
14:48:59,040 --> 14:49:04,400
all new node pools run the latest stable

21012
14:49:01,839 --> 14:49:07,519
version of kubernetes existing node

21013
14:49:04,400 --> 14:49:10,160
pools can be manually upgraded or

21014
14:49:07,519 --> 14:49:12,479
automatically upgraded you can also run

21015
14:49:10,160 --> 14:49:14,720
multiple kubernetes node versions on

21016
14:49:12,480 --> 14:49:17,276
each node pool in your cluster update

21017
14:49:14,720 --> 14:49:19,680
each node pool independently and target

21018
14:49:17,275 --> 14:49:22,879
different node pools for specific

21019
14:49:19,680 --> 14:49:25,199
deployments in that node now with gke

21020
14:49:22,879 --> 14:49:27,595
you can create a cluster tailored to

21021
14:49:25,199 --> 14:49:30,239
your availability requirements and your

21022
14:49:27,595 --> 14:49:33,199
budget the types of available clusters

21023
14:49:30,239 --> 14:49:36,479
include zonal both single zone or

21024
14:49:33,199 --> 14:49:39,275
multi-zonal and regional zonal clusters

21025
14:49:36,480 --> 14:49:41,200
have a single control plane in a single

21026
14:49:39,275 --> 14:49:43,680
zone depending on what kind of

21027
14:49:41,199 --> 14:49:46,795
availability you want you can distribute

21028
14:49:43,680 --> 14:49:49,840
your nodes for your zonal cluster in a

21029
14:49:46,796 --> 14:49:52,080
single zone or in multiple zones now

21030
14:49:49,839 --> 14:49:55,199
when you decide to deploy a single zone

21031
14:49:52,080 --> 14:49:57,756
cluster it again has a single control

21032
14:49:55,199 --> 14:50:01,275
plane running in one zone this control

21033
14:49:57,756 --> 14:50:03,916
plane manages workloads on nodes running

21034
14:50:01,275 --> 14:50:06,879
in the same zone a multi-zonal cluster

21035
14:50:03,915 --> 14:50:09,360
on the other hand has a single replica

21036
14:50:06,879 --> 14:50:12,399
of the control plane running in a single

21037
14:50:09,360 --> 14:50:14,879
zone and has nodes running in multiple

21038
14:50:12,400 --> 14:50:16,480
zones during an upgrade of the cluster

21039
14:50:14,879 --> 14:50:18,159
or an outage of the zone where the

21040
14:50:16,480 --> 14:50:22,080
control plane runs

21041
14:50:18,160 --> 14:50:24,880
workloads still run however the cluster

21042
14:50:22,080 --> 14:50:27,520
its nodes and its workloads cannot be

21043
14:50:24,879 --> 14:50:30,159
configured until the control plane is

21044
14:50:27,519 --> 14:50:32,955
available multi-zonal clusters are

21045
14:50:30,160 --> 14:50:35,756
designed to balance availability and

21046
14:50:32,955 --> 14:50:38,319
cost for consistent workloads and just

21047
14:50:35,756 --> 14:50:41,200
as a note the same number of nodes will

21048
14:50:38,319 --> 14:50:43,915
be deployed to each selected zone and

21049
14:50:41,199 --> 14:50:46,319
may cost you more than budgeted so

21050
14:50:43,915 --> 14:50:47,839
please be aware and of course when

21051
14:50:46,319 --> 14:50:50,400
you're looking to achieve high

21052
14:50:47,839 --> 14:50:52,879
availability for your cluster regional

21053
14:50:50,400 --> 14:50:55,596
clusters are always the way to go a

21054
14:50:52,879 --> 14:50:57,915
regional cluster has multiple replicas

21055
14:50:55,595 --> 14:51:00,955
of the control plane running in multiple

21056
14:50:57,915 --> 14:51:03,595
zones within a given region nodes also

21057
14:51:00,955 --> 14:51:06,080
run in each zone where a replica of the

21058
14:51:03,595 --> 14:51:08,399
control plane runs because a regional

21059
14:51:06,080 --> 14:51:11,200
cluster replicates the control plane and

21060
14:51:08,400 --> 14:51:14,796
nodes it consumes more compute engine

21061
14:51:11,199 --> 14:51:17,199
resources than a similar single zone or

21062
14:51:14,796 --> 14:51:19,596
multi-zonal cluster the same number of

21063
14:51:17,199 --> 14:51:22,479
nodes will be deployed to each selected

21064
14:51:19,595 --> 14:51:25,595
zone and the default when selecting

21065
14:51:22,480 --> 14:51:27,116
regional clusters is three zones now if

21066
14:51:25,595 --> 14:51:29,519
you're dealing with more sensitive

21067
14:51:27,116 --> 14:51:32,319
workloads that require more strict

21068
14:51:29,519 --> 14:51:35,199
guidelines private clusters give you the

21069
14:51:32,319 --> 14:51:37,839
ability to isolate nodes from having

21070
14:51:35,199 --> 14:51:40,399
inbound and outbound connectivity to the

21071
14:51:37,839 --> 14:51:43,115
public internet this isolation is

21072
14:51:40,400 --> 14:51:45,596
achieved as the nodes have internal ip

21073
14:51:43,116 --> 14:51:47,520
addresses only if you want to provide

21074
14:51:45,595 --> 14:51:50,639
outbound internet access for certain

21075
14:51:47,519 --> 14:51:53,435
private nodes you can use cloudnat or

21076
14:51:50,639 --> 14:51:55,275
manage your own nat gateway by default

21077
14:51:53,436 --> 14:51:57,840
private google access is enabled in

21078
14:51:55,275 --> 14:52:00,559
private clusters and their workloads

21079
14:51:57,839 --> 14:52:03,519
with limited outbound access to google

21080
14:52:00,559 --> 14:52:06,319
cloud apis and services over google's

21081
14:52:03,519 --> 14:52:09,435
private network in private clusters the

21082
14:52:06,319 --> 14:52:12,879
control plane's vpc network is connected

21083
14:52:09,436 --> 14:52:15,360
to your clusters vpc network with vpc

21084
14:52:12,879 --> 14:52:17,519
network peering your vpc network

21085
14:52:15,360 --> 14:52:20,080
contains the cluster nodes and a

21086
14:52:17,519 --> 14:52:22,239
separate google cloud vpc network

21087
14:52:20,080 --> 14:52:24,639
contains your cluster's control plane

21088
14:52:22,239 --> 14:52:27,199
the control plane's vpc network is

21089
14:52:24,639 --> 14:52:29,756
located in a project controlled by

21090
14:52:27,199 --> 14:52:33,115
google traffic between nodes and the

21091
14:52:29,756 --> 14:52:35,916
control plane is routed entirely using

21092
14:52:33,116 --> 14:52:38,400
internal ip addresses the control plane

21093
14:52:35,915 --> 14:52:41,040
for a private cluster has a private

21094
14:52:38,400 --> 14:52:42,955
endpoint in addition to a public

21095
14:52:41,040 --> 14:52:45,915
endpoint the control plane for a

21096
14:52:42,955 --> 14:52:48,239
non-private cluster only has a public

21097
14:52:45,915 --> 14:52:50,479
endpoint the private endpoint is an

21098
14:52:48,239 --> 14:52:53,519
internal ip address in the control

21099
14:52:50,480 --> 14:52:55,916
plane's vpc network the public endpoint

21100
14:52:53,519 --> 14:52:58,559
is the external ip address of the

21101
14:52:55,915 --> 14:53:01,115
control plane and you can control access

21102
14:52:58,559 --> 14:53:04,319
to this endpoint using authorized

21103
14:53:01,116 --> 14:53:06,400
networks or you can disable access to

21104
14:53:04,319 --> 14:53:08,639
the public endpoint as shown here in the

21105
14:53:06,400 --> 14:53:11,200
diagram you can disable the public

21106
14:53:08,639 --> 14:53:14,159
endpoint and connect to your network

21107
14:53:11,199 --> 14:53:17,199
using an internal ip address using cloud

21108
14:53:14,160 --> 14:53:20,240
interconnect or cloud vpn and you always

21109
14:53:17,199 --> 14:53:22,879
have the option of enabling or disabling

21110
14:53:20,239 --> 14:53:24,955
this public endpoint now when you create

21111
14:53:22,879 --> 14:53:27,755
a cluster you can choose the cluster

21112
14:53:24,955 --> 14:53:30,479
specific kubernetes version or you can

21113
14:53:27,756 --> 14:53:33,116
mix the versions for flexibility on

21114
14:53:30,480 --> 14:53:36,080
features either way it is always

21115
14:53:33,116 --> 14:53:38,480
recommended that you enable auto upgrade

21116
14:53:36,080 --> 14:53:40,955
for the cluster and its nodes now when

21117
14:53:38,480 --> 14:53:42,956
you have auto upgrade enabled you are

21118
14:53:40,955 --> 14:53:45,275
given the choice to choose from what are

21119
14:53:42,955 --> 14:53:47,275
called release channels when you enroll

21120
14:53:45,275 --> 14:53:49,595
a new cluster in a release channel

21121
14:53:47,275 --> 14:53:52,159
google automatically manages the version

21122
14:53:49,595 --> 14:53:54,479
and upgrade cadence for the cluster and

21123
14:53:52,160 --> 14:53:56,796
its node pools all channels offer

21124
14:53:54,480 --> 14:53:59,276
supported releases of gke and are

21125
14:53:56,796 --> 14:54:01,116
considered in general availability you

21126
14:53:59,275 --> 14:54:03,199
can choose from three different release

21127
14:54:01,116 --> 14:54:05,360
channels for automatic management of

21128
14:54:03,199 --> 14:54:07,915
your cluster's version and upgrade

21129
14:54:05,360 --> 14:54:11,040
cadence as shown here the available

21130
14:54:07,915 --> 14:54:13,199
release channels are rapid regular and

21131
14:54:11,040 --> 14:54:15,040
stable release channels the rapid

21132
14:54:13,199 --> 14:54:18,079
release channel gets the latest

21133
14:54:15,040 --> 14:54:20,955
kubernetes release as early as possible

21134
14:54:18,080 --> 14:54:22,880
and be able to use new gka features the

21135
14:54:20,955 --> 14:54:25,275
moment that they go into general

21136
14:54:22,879 --> 14:54:28,000
availability with the regular release

21137
14:54:25,275 --> 14:54:30,879
channel you have access to gke and

21138
14:54:28,000 --> 14:54:33,360
kubernetes features reasonably soon

21139
14:54:30,879 --> 14:54:35,680
after they are released but on a version

21140
14:54:33,360 --> 14:54:37,840
that has been qualified two to three

21141
14:54:35,680 --> 14:54:40,480
months after releasing in the rapid

21142
14:54:37,839 --> 14:54:43,039
release channel and finally we have the

21143
14:54:40,480 --> 14:54:45,916
stable release channel where stability

21144
14:54:43,040 --> 14:54:48,400
is prioritized over new functionality

21145
14:54:45,915 --> 14:54:50,955
changes and new versions in this channel

21146
14:54:48,400 --> 14:54:53,360
are rolled out last after being

21147
14:54:50,955 --> 14:54:55,519
validated two to three months in the

21148
14:54:53,360 --> 14:54:57,436
regular release channel and so if you're

21149
14:54:55,519 --> 14:54:59,915
looking for more direct management of

21150
14:54:57,436 --> 14:55:02,080
your cluster's version choose a static

21151
14:54:59,915 --> 14:55:05,199
version when you enroll a cluster in a

21152
14:55:02,080 --> 14:55:07,436
release channel that cluster is upgraded

21153
14:55:05,199 --> 14:55:09,755
automatically when a new version is

21154
14:55:07,436 --> 14:55:12,080
available in that channel now if you do

21155
14:55:09,756 --> 14:55:14,639
not use a release channel or choose a

21156
14:55:12,080 --> 14:55:17,436
cluster version the current default

21157
14:55:14,639 --> 14:55:20,400
version is use the default version is

21158
14:55:17,436 --> 14:55:23,040
selected based on usage and real world

21159
14:55:20,400 --> 14:55:25,116
performance and is changed regularly

21160
14:55:23,040 --> 14:55:26,319
while the default version is the most

21161
14:55:25,116 --> 14:55:29,276
mature one

21162
14:55:26,319 --> 14:55:32,159
other versions being made available are

21163
14:55:29,275 --> 14:55:34,479
generally available versions that pass

21164
14:55:32,160 --> 14:55:36,640
internal testing and qualification

21165
14:55:34,480 --> 14:55:38,956
changes to the default version are

21166
14:55:36,639 --> 14:55:41,040
announced in a release note now if you

21167
14:55:38,955 --> 14:55:43,680
know that you need to use a specific

21168
14:55:41,040 --> 14:55:46,400
supported version of kubernetes for a

21169
14:55:43,680 --> 14:55:48,639
given workload you can specify it when

21170
14:55:46,400 --> 14:55:50,560
creating the cluster if you do not need

21171
14:55:48,639 --> 14:55:53,436
to control the specific patch version

21172
14:55:50,559 --> 14:55:55,756
you use consider enrolling your cluster

21173
14:55:53,436 --> 14:55:57,916
in a release channel instead of managing

21174
14:55:55,756 --> 14:56:00,796
its version directly now when it comes

21175
14:55:57,915 --> 14:56:03,519
to upgrading the cluster please be aware

21176
14:56:00,796 --> 14:56:06,480
that control plane and nodes do not

21177
14:56:03,519 --> 14:56:08,879
always run the same version at all times

21178
14:56:06,480 --> 14:56:11,756
as well a control plane is always

21179
14:56:08,879 --> 14:56:14,479
upgraded before its nodes when it comes

21180
14:56:11,756 --> 14:56:17,275
to zonal clusters you cannot launch or

21181
14:56:14,480 --> 14:56:19,756
edit workloads during that upgrade and

21182
14:56:17,275 --> 14:56:22,879
with regional clusters each control

21183
14:56:19,756 --> 14:56:25,436
plane is upgraded one by one as well

21184
14:56:22,879 --> 14:56:28,159
with control planes auto upgrade is

21185
14:56:25,436 --> 14:56:30,796
enabled by default and this is google

21186
14:56:28,160 --> 14:56:33,840
cloud's best practice now again if you

21187
14:56:30,796 --> 14:56:36,160
choose you can do a manual upgrade but

21188
14:56:33,839 --> 14:56:39,359
you cannot upgrade the control plane

21189
14:56:36,160 --> 14:56:42,080
more than one minor version at a time so

21190
14:56:39,360 --> 14:56:44,400
please be aware as well with any cluster

21191
14:56:42,080 --> 14:56:47,116
upgrades maintenance windows and

21192
14:56:44,400 --> 14:56:49,275
exclusions are available and so this way

21193
14:56:47,116 --> 14:56:52,560
you can choose the best times for your

21194
14:56:49,275 --> 14:56:55,436
upgrades and so like cluster upgrades by

21195
14:56:52,559 --> 14:56:57,839
default a clusters nodes have auto

21196
14:56:55,436 --> 14:57:00,480
upgrade enabled and it is recommended

21197
14:56:57,839 --> 14:57:03,115
that you do not disable it again this is

21198
14:57:00,480 --> 14:57:05,680
best practice by google cloud and again

21199
14:57:03,116 --> 14:57:07,916
like the cluster upgrades a manual

21200
14:57:05,680 --> 14:57:10,400
upgrade is available and maintenance

21201
14:57:07,915 --> 14:57:13,040
windows and exclusions are available for

21202
14:57:10,400 --> 14:57:15,840
all of these upgrades now when a no pool

21203
14:57:13,040 --> 14:57:16,720
is upgraded gke upgrades one node at a

21204
14:57:15,839 --> 14:57:19,679
time

21205
14:57:16,720 --> 14:57:22,480
while a node is being upgraded gke stops

21206
14:57:19,680 --> 14:57:25,199
scheduling new pods onto it and attempts

21207
14:57:22,480 --> 14:57:27,756
to schedule its running pods onto other

21208
14:57:25,199 --> 14:57:30,559
nodes the node is then recreated at the

21209
14:57:27,756 --> 14:57:33,116
new version but using the same name as

21210
14:57:30,559 --> 14:57:35,915
before this is similar to other events

21211
14:57:33,116 --> 14:57:38,639
that recreate the node such as enabling

21212
14:57:35,915 --> 14:57:41,040
or disabling a feature on the node pool

21213
14:57:38,639 --> 14:57:43,519
and the upgrade is only complete when

21214
14:57:41,040 --> 14:57:46,239
all nodes have been recreated and the

21215
14:57:43,519 --> 14:57:48,559
cluster is in the desired state when a

21216
14:57:46,239 --> 14:57:51,436
newly upgraded node registers with the

21217
14:57:48,559 --> 14:57:54,159
control plane gke marks the node as

21218
14:57:51,436 --> 14:57:56,639
schedulable upgrading a no pool may

21219
14:57:54,160 --> 14:57:58,956
disrupt workloads running in that pool

21220
14:57:56,639 --> 14:58:01,680
and so in order to avoid this you can

21221
14:57:58,955 --> 14:58:04,239
create a new node pool with the desired

21222
14:58:01,680 --> 14:58:06,879
version and migrate the workload then

21223
14:58:04,239 --> 14:58:09,915
after migration you can delete the old

21224
14:58:06,879 --> 14:58:12,639
node pool now surge upgrades let you

21225
14:58:09,915 --> 14:58:15,115
control the number of nodes gke can

21226
14:58:12,639 --> 14:58:16,796
upgrade at a time and control how

21227
14:58:15,116 --> 14:58:19,200
disruptive upgrades are to your

21228
14:58:16,796 --> 14:58:22,240
workloads you can change how many nodes

21229
14:58:19,199 --> 14:58:24,955
gke attempts to upgrade at once by

21230
14:58:22,239 --> 14:58:27,595
changing the surge upgrade parameters on

21231
14:58:24,955 --> 14:58:29,519
a no pool surge upgrades reduce

21232
14:58:27,595 --> 14:58:31,839
disruption to your workloads during

21233
14:58:29,519 --> 14:58:34,239
cluster maintenance and also allow you

21234
14:58:31,839 --> 14:58:37,435
to control the number of nodes upgraded

21235
14:58:34,239 --> 14:58:40,159
in parallel surge upgrades also work

21236
14:58:37,436 --> 14:58:42,720
with the cluster auto scaler to prevent

21237
14:58:40,160 --> 14:58:45,200
changes to nodes that are being upgraded

21238
14:58:42,720 --> 14:58:48,319
now surge upgrade behavior is determined

21239
14:58:45,199 --> 14:58:50,399
by two settings max surge upgrade and

21240
14:58:48,319 --> 14:58:52,955
max unavailable upgrade

21241
14:58:50,400 --> 14:58:55,200
now with max surge upgrade this is the

21242
14:58:52,955 --> 14:58:58,159
number of additional nodes that can be

21243
14:58:55,199 --> 14:59:01,115
added to the no pool during an upgrade

21244
14:58:58,160 --> 14:59:03,640
increasing max surge upgrade raises the

21245
14:59:01,116 --> 14:59:05,840
number of nodes that can be upgraded

21246
14:59:03,639 --> 14:59:08,479
simultaneously and when it comes to the

21247
14:59:05,839 --> 14:59:10,359
max unavailable upgrade this is the

21248
14:59:08,480 --> 14:59:13,116
number of nodes that can be

21249
14:59:10,360 --> 14:59:15,840
simultaneously unavailable during an

21250
14:59:13,116 --> 14:59:18,400
upgrade increasing max unavailable

21251
14:59:15,839 --> 14:59:21,199
upgrade raises the number of nodes that

21252
14:59:18,400 --> 14:59:23,916
can be upgraded in parallel so with max

21253
14:59:21,199 --> 14:59:26,479
surge upgrade the higher the number the

21254
14:59:23,915 --> 14:59:28,639
more parallel upgrades which will end up

21255
14:59:26,480 --> 14:59:30,640
costing you more money with max

21256
14:59:28,639 --> 14:59:33,360
unavailable upgrade the higher the

21257
14:59:30,639 --> 14:59:35,519
number the more disruptive it is and so

21258
14:59:33,360 --> 14:59:39,040
the more risk you are taking and so

21259
14:59:35,519 --> 14:59:42,239
during upgrades gke brings down at most

21260
14:59:39,040 --> 14:59:44,955
the sum of the max surge upgrade added

21261
14:59:42,239 --> 14:59:47,115
with the max unavailable upgrade so as

21262
14:59:44,955 --> 14:59:49,199
you can see here there are a slew of

21263
14:59:47,116 --> 14:59:51,756
options when it comes to deciding on the

21264
14:59:49,199 --> 14:59:54,239
type of cluster you want as well as the

21265
14:59:51,756 --> 14:59:56,480
type of upgrades that are available

21266
14:59:54,239 --> 14:59:58,720
along with when you want them to occur

21267
14:59:56,480 --> 15:00:00,240
and so your deciding factor in the end

21268
14:59:58,720 --> 15:00:02,880
will be the workload that you are

21269
15:00:00,239 --> 15:00:05,275
running and your risk tolerance and this

21270
15:00:02,879 --> 15:00:07,595
will play a big factor in keeping up

21271
15:00:05,275 --> 15:00:10,159
time for your cluster as well as saving

21272
15:00:07,595 --> 15:00:12,399
money in any type of environment and so

21273
15:00:10,160 --> 15:00:14,956
that's pretty much all i wanted to cover

21274
15:00:12,400 --> 15:00:16,720
when it comes to gke cluster and node

21275
15:00:14,955 --> 15:00:18,955
management so you can now mark this

21276
15:00:16,720 --> 15:00:19,940
lesson as complete and let's move on to

21277
15:00:18,955 --> 15:00:23,839
the next one

21278
15:00:19,940 --> 15:00:26,400
[Music]

21279
15:00:23,839 --> 15:00:29,039
welcome back and in this lesson i will

21280
15:00:26,400 --> 15:00:32,880
be diving into some more theory within

21281
15:00:29,040 --> 15:00:36,000
kubernetes and gke this time touching on

21282
15:00:32,879 --> 15:00:38,399
objects and how objects are managed pods

21283
15:00:36,000 --> 15:00:40,639
are only one type of object but there

21284
15:00:38,400 --> 15:00:43,200
are many other parts that are involved

21285
15:00:40,639 --> 15:00:45,116
in the management of these objects and

21286
15:00:43,199 --> 15:00:46,795
this is what this lesson is set out to

21287
15:00:45,116 --> 15:00:49,596
teach you now there's quite a bit to

21288
15:00:46,796 --> 15:00:50,956
cover here so with that being said let's

21289
15:00:49,595 --> 15:00:53,360
dive in

21290
15:00:50,955 --> 15:00:56,239
now kubernetes objects are persistent

21291
15:00:53,360 --> 15:00:59,040
entities in kubernetes kubernetes uses

21292
15:00:56,239 --> 15:01:01,839
these entities to represent the state of

21293
15:00:59,040 --> 15:01:03,840
your cluster for example it can describe

21294
15:01:01,839 --> 15:01:05,915
things like what containerized

21295
15:01:03,839 --> 15:01:08,719
applications are running and on which

21296
15:01:05,915 --> 15:01:11,115
nodes and what resources are available

21297
15:01:08,720 --> 15:01:14,080
to those applications a kubernetes

21298
15:01:11,116 --> 15:01:16,400
object is a record of intent once you

21299
15:01:14,080 --> 15:01:18,955
create the object kubernetes will

21300
15:01:16,400 --> 15:01:21,596
constantly work to ensure that object

21301
15:01:18,955 --> 15:01:24,080
exists by creating an object you're

21302
15:01:21,595 --> 15:01:26,000
effectively telling kubernetes what you

21303
15:01:24,080 --> 15:01:28,796
want your cluster's workload to look

21304
15:01:26,000 --> 15:01:30,720
like and this is your cluster's desired

21305
15:01:28,796 --> 15:01:33,276
state and you've heard me speak about

21306
15:01:30,720 --> 15:01:35,756
this many times before and this is what

21307
15:01:33,275 --> 15:01:38,559
i was referring to now almost every

21308
15:01:35,756 --> 15:01:41,275
kubernetes object includes two nested

21309
15:01:38,559 --> 15:01:44,000
object fields that govern the object's

21310
15:01:41,275 --> 15:01:46,720
configuration the object spec and the

21311
15:01:44,000 --> 15:01:48,796
object's status for objects that have a

21312
15:01:46,720 --> 15:01:50,720
spec you have to set this when you

21313
15:01:48,796 --> 15:01:53,360
create the object providing a

21314
15:01:50,720 --> 15:01:56,000
description of the characteristics you

21315
15:01:53,360 --> 15:01:59,116
want the resource to have its desired

21316
15:01:56,000 --> 15:02:02,239
state the status describes the current

21317
15:01:59,116 --> 15:02:04,796
state of the object supplied and updated

21318
15:02:02,239 --> 15:02:08,000
by kubernetes and its components the

21319
15:02:04,796 --> 15:02:11,040
kubernetes control plane continually and

21320
15:02:08,000 --> 15:02:13,680
actively manages every object's actual

21321
15:02:11,040 --> 15:02:16,639
state to match the desired state you

21322
15:02:13,680 --> 15:02:19,275
supplied now each object in your cluster

21323
15:02:16,639 --> 15:02:22,159
has a name that is unique for that type

21324
15:02:19,275 --> 15:02:25,115
of resource every kubernetes object also

21325
15:02:22,160 --> 15:02:28,240
has a uid that is unique across your

21326
15:02:25,116 --> 15:02:31,276
whole cluster only one object of a given

21327
15:02:28,239 --> 15:02:33,839
kind can have a given name at a time

21328
15:02:31,275 --> 15:02:36,479
however if you delete the object you can

21329
15:02:33,839 --> 15:02:38,795
make a new object with that same name

21330
15:02:36,480 --> 15:02:41,680
every object created over the whole

21331
15:02:38,796 --> 15:02:45,436
lifetime of a kubernetes cluster has a

21332
15:02:41,680 --> 15:02:48,639
distinct uid these distinct uids are

21333
15:02:45,436 --> 15:02:50,955
also known as uuids which we discussed

21334
15:02:48,639 --> 15:02:53,756
earlier on in the course now when

21335
15:02:50,955 --> 15:02:56,479
creating updating or deleting objects in

21336
15:02:53,756 --> 15:02:58,720
kubernetes this is done through the use

21337
15:02:56,480 --> 15:03:01,680
of a manifest file where you would

21338
15:02:58,720 --> 15:03:04,000
specify the desired state of an object

21339
15:03:01,680 --> 15:03:06,559
that kubernetes will maintain when you

21340
15:03:04,000 --> 15:03:09,915
apply the manifest each configuration

21341
15:03:06,559 --> 15:03:12,000
file can contain multiple manifests and

21342
15:03:09,915 --> 15:03:15,275
is common practice to do so when

21343
15:03:12,000 --> 15:03:18,955
possible a manifest file is defined in

21344
15:03:15,275 --> 15:03:21,680
the form of a yaml file or a json file

21345
15:03:18,955 --> 15:03:24,639
and it is recommended to use yaml now in

21346
15:03:21,680 --> 15:03:26,796
each yaml file for the kubernetes object

21347
15:03:24,639 --> 15:03:29,915
that you want to create there are some

21348
15:03:26,796 --> 15:03:32,956
required values that need to be set the

21349
15:03:29,915 --> 15:03:35,680
first one is the api version and this

21350
15:03:32,955 --> 15:03:38,639
defines which version of the kubernetes

21351
15:03:35,680 --> 15:03:41,360
api you're using to create this object

21352
15:03:38,639 --> 15:03:44,319
the kind described in this example as a

21353
15:03:41,360 --> 15:03:47,595
pod is the kind of object you want to

21354
15:03:44,319 --> 15:03:50,319
create next up is the metadata and this

21355
15:03:47,595 --> 15:03:53,435
is the data that helps uniquely identify

21356
15:03:50,319 --> 15:03:56,955
the object including a string name

21357
15:03:53,436 --> 15:03:59,916
a uid and an optional namespace and the

21358
15:03:56,955 --> 15:04:02,319
last required value is the spec

21359
15:03:59,915 --> 15:04:05,040
and this is what state you desire for

21360
15:04:02,319 --> 15:04:07,595
the object and the spec in this example

21361
15:04:05,040 --> 15:04:10,239
is a container by the name of bow tie

21362
15:04:07,595 --> 15:04:12,955
dash web server and is to be built with

21363
15:04:10,239 --> 15:04:15,115
the latest nginx web server image as

21364
15:04:12,955 --> 15:04:17,915
well as having port 80 open on the

21365
15:04:15,116 --> 15:04:20,880
container now when it comes to objects

21366
15:04:17,915 --> 15:04:23,839
pods are the smallest most basic

21367
15:04:20,879 --> 15:04:26,000
deployable objects in kubernetes a pod

21368
15:04:23,839 --> 15:04:28,479
represents a single instance of a

21369
15:04:26,000 --> 15:04:31,360
running process in your cluster pods

21370
15:04:28,480 --> 15:04:34,080
contain one or more containers such as

21371
15:04:31,360 --> 15:04:36,480
docker containers and when a pod runs

21372
15:04:34,080 --> 15:04:39,680
multiple containers the containers are

21373
15:04:36,480 --> 15:04:42,880
managed as a single entity and share the

21374
15:04:39,680 --> 15:04:46,000
pods resources which also includes

21375
15:04:42,879 --> 15:04:49,199
shared networking and shared storage for

21376
15:04:46,000 --> 15:04:51,839
their containers generally one pod is

21377
15:04:49,199 --> 15:04:54,159
meant to run a single instance of an

21378
15:04:51,839 --> 15:04:56,879
application on your cluster which is

21379
15:04:54,160 --> 15:04:59,520
self-contained and isolated

21380
15:04:56,879 --> 15:05:01,595
now although a pod is meant to run a

21381
15:04:59,519 --> 15:05:02,795
single instance of your application on

21382
15:05:01,595 --> 15:05:05,360
your cluster

21383
15:05:02,796 --> 15:05:08,560
it is not recommended to create

21384
15:05:05,360 --> 15:05:11,840
individual pods directly instead you

21385
15:05:08,559 --> 15:05:14,879
generally create a set of identical pods

21386
15:05:11,839 --> 15:05:17,915
called replicas to run your application

21387
15:05:14,879 --> 15:05:20,399
a set of replicated pods are created and

21388
15:05:17,915 --> 15:05:22,795
managed by a controller such as a

21389
15:05:20,400 --> 15:05:25,040
deployment controllers manage the life

21390
15:05:22,796 --> 15:05:27,680
cycle of their pods as well as

21391
15:05:25,040 --> 15:05:30,080
performing horizontal scaling changing

21392
15:05:27,680 --> 15:05:32,239
the number of pods is necessary now

21393
15:05:30,080 --> 15:05:35,756
although you might occasionally interact

21394
15:05:32,239 --> 15:05:38,000
with pods directly to debug troubleshoot

21395
15:05:35,756 --> 15:05:41,116
or inspect them it's recommended that

21396
15:05:38,000 --> 15:05:43,680
you use a controller to manage your pods

21397
15:05:41,116 --> 15:05:46,240
and so once your pods are created they

21398
15:05:43,680 --> 15:05:48,559
are then run on nodes in your cluster

21399
15:05:46,239 --> 15:05:50,879
which we discussed earlier the pod will

21400
15:05:48,559 --> 15:05:53,595
then remain on its node until its

21401
15:05:50,879 --> 15:05:55,839
process is complete the pot is deleted

21402
15:05:53,595 --> 15:05:58,955
the pod is evicted from the node due to

21403
15:05:55,839 --> 15:06:01,595
lack of resources or the node fails if a

21404
15:05:58,955 --> 15:06:04,239
node fails pods on the node are

21405
15:06:01,595 --> 15:06:06,955
automatically scheduled for deletion now

21406
15:06:04,239 --> 15:06:09,915
a single gke cluster should be able to

21407
15:06:06,955 --> 15:06:12,159
satisfy the needs of multiple users or

21408
15:06:09,915 --> 15:06:15,680
groups of users and kubernetes

21409
15:06:12,160 --> 15:06:18,160
namespaces help different projects teams

21410
15:06:15,680 --> 15:06:20,796
or customers to share a kubernetes

21411
15:06:18,160 --> 15:06:23,276
cluster you can think of a namespace as

21412
15:06:20,796 --> 15:06:25,360
a virtual cluster inside of your

21413
15:06:23,275 --> 15:06:28,319
kubernetes cluster and you can have

21414
15:06:25,360 --> 15:06:30,559
multiple namespaces logically isolated

21415
15:06:28,319 --> 15:06:32,879
from each other they can help you and

21416
15:06:30,559 --> 15:06:34,795
your teams with organization and

21417
15:06:32,879 --> 15:06:37,275
security now you can name your

21418
15:06:34,796 --> 15:06:39,756
namespaces whatever you'd like but

21419
15:06:37,275 --> 15:06:42,479
kubernetes starts with four initial

21420
15:06:39,756 --> 15:06:45,116
namespaces the first one is the default

21421
15:06:42,480 --> 15:06:46,956
namespace and this is for objects with

21422
15:06:45,116 --> 15:06:49,040
no other namespace

21423
15:06:46,955 --> 15:06:52,000
so when creating new objects without a

21424
15:06:49,040 --> 15:06:54,559
namespace your object will automatically

21425
15:06:52,000 --> 15:06:57,199
be assigned to this namespace cube dash

21426
15:06:54,559 --> 15:06:59,595
system is the next one and these are for

21427
15:06:57,199 --> 15:07:03,115
objects created by kubernetes

21428
15:06:59,595 --> 15:07:05,915
cube-public is created automatically and

21429
15:07:03,116 --> 15:07:08,955
is readable by all users but is mostly

21430
15:07:05,915 --> 15:07:11,519
reserved for cluster usage in case that

21431
15:07:08,955 --> 15:07:13,756
some resources should be visible and

21432
15:07:11,519 --> 15:07:16,879
readable publicly throughout the whole

21433
15:07:13,756 --> 15:07:19,360
cluster and finally cube node lease is

21434
15:07:16,879 --> 15:07:22,479
the namespace for the lease objects

21435
15:07:19,360 --> 15:07:24,796
associated with each node which improves

21436
15:07:22,480 --> 15:07:27,916
the performance of the node heartbeats

21437
15:07:24,796 --> 15:07:30,560
as the cluster scales and so like most

21438
15:07:27,915 --> 15:07:33,199
resources in google cloud labels are key

21439
15:07:30,559 --> 15:07:36,000
value pairs that help you organize your

21440
15:07:33,199 --> 15:07:38,239
resources in this case kubernetes

21441
15:07:36,000 --> 15:07:40,955
objects labels can be attached to

21442
15:07:38,239 --> 15:07:43,915
objects at creation time and can be

21443
15:07:40,955 --> 15:07:46,639
added or modified at any time each

21444
15:07:43,915 --> 15:07:49,360
object can have a set of key value

21445
15:07:46,639 --> 15:07:52,559
labels defined and each key must be

21446
15:07:49,360 --> 15:07:55,436
unique for a given object and labels can

21447
15:07:52,559 --> 15:07:57,756
be found under metadata in your manifest

21448
15:07:55,436 --> 15:08:00,720
file and so the one thing to remember

21449
15:07:57,756 --> 15:08:03,040
about pods is that they are ephemeral

21450
15:08:00,720 --> 15:08:05,200
they are not designed to run forever and

21451
15:08:03,040 --> 15:08:07,915
when a pod is terminated it cannot be

21452
15:08:05,199 --> 15:08:10,719
brought back in general pods do not

21453
15:08:07,915 --> 15:08:14,559
disappear until they are deleted by a

21454
15:08:10,720 --> 15:08:17,436
user or by a controller pods do not heal

21455
15:08:14,559 --> 15:08:19,756
or repair themselves for example if a

21456
15:08:17,436 --> 15:08:23,040
pod is scheduled on a node which later

21457
15:08:19,756 --> 15:08:25,040
fails the pod is deleted as well if a

21458
15:08:23,040 --> 15:08:27,840
pod is evicted from a node for any

21459
15:08:25,040 --> 15:08:30,400
reason the pod does not replace itself

21460
15:08:27,839 --> 15:08:33,359
and so here is a diagram of a pod life

21461
15:08:30,400 --> 15:08:35,680
cycle that shows the different phases of

21462
15:08:33,360 --> 15:08:38,319
its running time to give you some better

21463
15:08:35,680 --> 15:08:40,559
clarity of its ephemeral nature when

21464
15:08:38,319 --> 15:08:43,360
first creating the pod the pod will

21465
15:08:40,559 --> 15:08:46,159
start impending and this is the pod's

21466
15:08:43,360 --> 15:08:49,040
initial phase and is waiting for one or

21467
15:08:46,160 --> 15:08:51,680
more of the containers to be set up and

21468
15:08:49,040 --> 15:08:54,639
made ready to run this includes the time

21469
15:08:51,680 --> 15:08:57,116
a pod spends waiting to be scheduled as

21470
15:08:54,639 --> 15:08:59,595
well as the time spent downloading

21471
15:08:57,116 --> 15:09:02,160
container images over the network once

21472
15:08:59,595 --> 15:09:04,559
the pod has completed the pending phase

21473
15:09:02,160 --> 15:09:06,880
it is moved on to be scheduled and once

21474
15:09:04,559 --> 15:09:08,955
it is scheduled it will move into the

21475
15:09:06,879 --> 15:09:11,199
running phase and this is the phase

21476
15:09:08,955 --> 15:09:13,275
where the pod has been bound to a node

21477
15:09:11,199 --> 15:09:16,159
and all of the containers have been

21478
15:09:13,275 --> 15:09:19,040
created the running phase has at least

21479
15:09:16,160 --> 15:09:22,160
one container in the pod running or is

21480
15:09:19,040 --> 15:09:24,720
in the process of starting or restarting

21481
15:09:22,160 --> 15:09:27,436
and once the workload is complete the

21482
15:09:24,720 --> 15:09:29,275
pod will move into the succeeded phase

21483
15:09:27,436 --> 15:09:32,400
and this is where all the containers in

21484
15:09:29,275 --> 15:09:34,795
the pod have terminated in success and

21485
15:09:32,400 --> 15:09:36,639
will not be restarted now if all the

21486
15:09:34,796 --> 15:09:39,200
containers in the pod have not

21487
15:09:36,639 --> 15:09:41,519
terminated successfully the pod will

21488
15:09:39,199 --> 15:09:43,519
move into a failed phase and this is

21489
15:09:41,519 --> 15:09:46,479
where all the containers in the pod have

21490
15:09:43,519 --> 15:09:48,795
terminated and at least one container

21491
15:09:46,480 --> 15:09:50,640
has terminated in failure now there's

21492
15:09:48,796 --> 15:09:52,796
one more phase in the pod life cycle

21493
15:09:50,639 --> 15:09:55,436
that i wanted to bring up which is the

21494
15:09:52,796 --> 15:09:57,916
unknown phase and this is the state of

21495
15:09:55,436 --> 15:10:00,639
the pod that could not be obtained this

21496
15:09:57,915 --> 15:10:03,040
phase typically occurs due to an error

21497
15:10:00,639 --> 15:10:05,680
in communicating with the node where the

21498
15:10:03,040 --> 15:10:09,040
pod should be running so now when you're

21499
15:10:05,680 --> 15:10:12,160
creating pods using a deployment is a

21500
15:10:09,040 --> 15:10:14,480
common way to do this a deployment runs

21501
15:10:12,160 --> 15:10:17,596
multiple replicas of your application

21502
15:10:14,480 --> 15:10:20,319
and automatically replaces any instances

21503
15:10:17,595 --> 15:10:23,275
that fail or become unresponsive

21504
15:10:20,319 --> 15:10:25,680
deployments help ensure that one or more

21505
15:10:23,275 --> 15:10:28,319
instances of your application are

21506
15:10:25,680 --> 15:10:31,199
available to serve user requests

21507
15:10:28,319 --> 15:10:34,159
deployments use a pod template which

21508
15:10:31,199 --> 15:10:37,360
contains a specification for its pods

21509
15:10:34,160 --> 15:10:39,840
the pod specification determines how

21510
15:10:37,360 --> 15:10:42,080
each pod should look like for instance

21511
15:10:39,839 --> 15:10:44,719
what applications should run inside its

21512
15:10:42,080 --> 15:10:47,840
containers which volumes the pods should

21513
15:10:44,720 --> 15:10:50,639
mount its labels and more and so when a

21514
15:10:47,839 --> 15:10:53,519
deployments pod template is changed new

21515
15:10:50,639 --> 15:10:55,915
pods are automatically created one at a

21516
15:10:53,519 --> 15:10:58,319
time now i wanted to quickly bring up

21517
15:10:55,915 --> 15:11:00,639
replica sets for just a moment you'll

21518
15:10:58,319 --> 15:11:03,436
hear about replica sets and i wanted to

21519
15:11:00,639 --> 15:11:06,479
make sure that i covered it replica sets

21520
15:11:03,436 --> 15:11:09,360
ensures that a specified number of pod

21521
15:11:06,480 --> 15:11:12,319
replicas are running at any given time

21522
15:11:09,360 --> 15:11:15,595
however a deployment is a higher level

21523
15:11:12,319 --> 15:11:18,796
concept that manages replica sets and

21524
15:11:15,595 --> 15:11:22,079
provides updates to pods along with

21525
15:11:18,796 --> 15:11:25,520
other features and so using deployments

21526
15:11:22,080 --> 15:11:27,840
is recommended over using replica sets

21527
15:11:25,519 --> 15:11:30,719
unless your workload requires it and i

21528
15:11:27,839 --> 15:11:33,275
will be including a link to replica sets

21529
15:11:30,720 --> 15:11:36,319
in the lesson text so speaking of

21530
15:11:33,275 --> 15:11:39,519
workloads in kubernetes workloads are

21531
15:11:36,319 --> 15:11:42,480
objects that set deployment rules four

21532
15:11:39,519 --> 15:11:44,879
pods based on these rules kubernetes

21533
15:11:42,480 --> 15:11:47,360
performs the deployment and updates the

21534
15:11:44,879 --> 15:11:50,319
workload with the current state of the

21535
15:11:47,360 --> 15:11:53,680
application workloads let you define the

21536
15:11:50,319 --> 15:11:56,559
rules for application scheduling scaling

21537
15:11:53,680 --> 15:11:59,680
and upgrading now deployments which we

21538
15:11:56,559 --> 15:12:02,399
just discussed is a type of workload and

21539
15:11:59,680 --> 15:12:04,796
as we've seen a deployment runs multiple

21540
15:12:02,400 --> 15:12:07,680
replicas of your application and

21541
15:12:04,796 --> 15:12:10,480
automatically replaces any instances

21542
15:12:07,680 --> 15:12:12,639
that fail or become unresponsive

21543
15:12:10,480 --> 15:12:15,360
deployments are best used

21544
15:12:12,639 --> 15:12:17,839
for stateless applications another type

21545
15:12:15,360 --> 15:12:20,639
of workload is stateful sets and in

21546
15:12:17,839 --> 15:12:22,399
contrast to deployments these are great

21547
15:12:20,639 --> 15:12:25,915
for when your application needs to

21548
15:12:22,400 --> 15:12:29,116
maintain its identity and store data so

21549
15:12:25,915 --> 15:12:31,755
basically any application that requires

21550
15:12:29,116 --> 15:12:34,240
some sort of persistent storage daemon

21551
15:12:31,756 --> 15:12:36,559
sets is another common workload that

21552
15:12:34,239 --> 15:12:38,955
ensures every node in the cluster runs a

21553
15:12:36,559 --> 15:12:41,519
copy of that pod and this is for use

21554
15:12:38,955 --> 15:12:44,479
cases where you're collecting logs or

21555
15:12:41,519 --> 15:12:46,479
monitoring node performance now jobs is

21556
15:12:44,480 --> 15:12:49,520
a workload that launches one or more

21557
15:12:46,480 --> 15:12:52,000
pods and ensures that a specified number

21558
15:12:49,519 --> 15:12:54,955
of them successfully terminate jobs are

21559
15:12:52,000 --> 15:12:57,519
best used to run a finite task to

21560
15:12:54,955 --> 15:13:00,319
completion as opposed to managing an

21561
15:12:57,519 --> 15:13:03,519
ongoing desired application state and

21562
15:13:00,319 --> 15:13:06,239
cron jobs are similar to jobs however

21563
15:13:03,519 --> 15:13:08,479
cron jobs runs to completion on a

21564
15:13:06,239 --> 15:13:10,400
cron-based schedule and so the last

21565
15:13:08,480 --> 15:13:13,040
workload that i wanted to cover are

21566
15:13:10,400 --> 15:13:15,596
config maps and these store general

21567
15:13:13,040 --> 15:13:18,559
configuration information and so after

21568
15:13:15,595 --> 15:13:20,795
you upload a config map any workload can

21569
15:13:18,559 --> 15:13:23,680
reference it as either an environment

21570
15:13:20,796 --> 15:13:26,639
variable or a volume mount and so just

21571
15:13:23,680 --> 15:13:28,720
as a note config maps are not meant to

21572
15:13:26,639 --> 15:13:31,680
store sensitive data if you're planning

21573
15:13:28,720 --> 15:13:34,000
to do this please use secrets now i know

21574
15:13:31,680 --> 15:13:36,160
this lesson has been extremely heavy in

21575
15:13:34,000 --> 15:13:38,080
theory but these are fundamental

21576
15:13:36,160 --> 15:13:41,200
concepts to know when dealing with

21577
15:13:38,080 --> 15:13:43,680
kubernetes and gke as well as the

21578
15:13:41,199 --> 15:13:46,319
objects that it supports so i recommend

21579
15:13:43,680 --> 15:13:48,559
that if you need to go back and review

21580
15:13:46,319 --> 15:13:50,796
this lesson if things aren't making

21581
15:13:48,559 --> 15:13:54,159
sense so that you can better understand

21582
15:13:50,796 --> 15:13:56,560
it as these concepts all tie in together

21583
15:13:54,160 --> 15:13:58,880
and will come up in the exam and so

21584
15:13:56,559 --> 15:14:01,595
that's pretty much all i wanted to cover

21585
15:13:58,879 --> 15:14:04,479
in this lesson on pods and object

21586
15:14:01,595 --> 15:14:06,399
management within gke so you can now

21587
15:14:04,480 --> 15:14:08,540
mark this lesson as complete

21588
15:14:06,400 --> 15:14:12,480
and let's move on to the next one

21589
15:14:08,540 --> 15:14:14,796
[Music]

21590
15:14:12,480 --> 15:14:16,720
welcome back and in this lesson i'm

21591
15:14:14,796 --> 15:14:19,116
going to be diving into kubernetes

21592
15:14:16,720 --> 15:14:21,200
services now services are a major

21593
15:14:19,116 --> 15:14:23,756
networking component when it comes to

21594
15:14:21,199 --> 15:14:26,159
working in kubernetes and can play a

21595
15:14:23,756 --> 15:14:28,319
major factor when it comes to deciding

21596
15:14:26,160 --> 15:14:31,200
on how you want to route your traffic

21597
15:14:28,319 --> 15:14:34,080
within your kubernetes cluster as well

21598
15:14:31,199 --> 15:14:36,719
in my experience services show up on the

21599
15:14:34,080 --> 15:14:39,436
exam and so an understanding of how they

21600
15:14:36,720 --> 15:14:41,520
work and the different types to use are

21601
15:14:39,436 --> 15:14:44,480
essential to understanding the big

21602
15:14:41,519 --> 15:14:47,359
picture of kubernetes this lesson will

21603
15:14:44,480 --> 15:14:49,360
cover an overview on what services are

21604
15:14:47,360 --> 15:14:51,520
what they do and the different types

21605
15:14:49,360 --> 15:14:54,000
that are available along with their use

21606
15:14:51,519 --> 15:14:56,795
cases now there's a lot to cover here so

21607
15:14:54,000 --> 15:14:59,360
with that being said let's dive in now

21608
15:14:56,796 --> 15:15:02,160
as i had discussed earlier kubernetes

21609
15:14:59,360 --> 15:15:04,559
pods are ephemeral pods are created and

21610
15:15:02,160 --> 15:15:07,040
destroyed to match the state of your

21611
15:15:04,559 --> 15:15:09,595
cluster so these resources are never

21612
15:15:07,040 --> 15:15:12,239
permanent a perfect example of this is

21613
15:15:09,595 --> 15:15:15,275
by using a deployment object so you can

21614
15:15:12,239 --> 15:15:16,795
create and destroy pods dynamically now

21615
15:15:15,275 --> 15:15:19,839
when it comes to networking in

21616
15:15:16,796 --> 15:15:22,720
kubernetes each pod gets its own ip

21617
15:15:19,839 --> 15:15:25,359
address however in a deployment a pod

21618
15:15:22,720 --> 15:15:28,080
that is running once destroyed will be

21619
15:15:25,360 --> 15:15:30,720
recreated with a new ip address and

21620
15:15:28,080 --> 15:15:33,680
there is no real way to keep track of

21621
15:15:30,720 --> 15:15:36,160
these i p addresses for communication as

21622
15:15:33,680 --> 15:15:39,199
they change very frequently and this is

21623
15:15:36,160 --> 15:15:41,520
where services come into play now a

21624
15:15:39,199 --> 15:15:44,159
service is an abstraction in the sense

21625
15:15:41,519 --> 15:15:46,000
that it is not a process that listens on

21626
15:15:44,160 --> 15:15:48,720
some network interface

21627
15:15:46,000 --> 15:15:51,595
a service can be defined as a logical

21628
15:15:48,720 --> 15:15:54,400
set of pods an abstraction on top of the

21629
15:15:51,595 --> 15:15:57,756
pod which provides a single persistent

21630
15:15:54,400 --> 15:16:00,160
ip address and dns name by which pods

21631
15:15:57,756 --> 15:16:02,480
can be accessed it allows for routing

21632
15:16:00,160 --> 15:16:05,756
external traffic into your kubernetes

21633
15:16:02,480 --> 15:16:08,640
cluster and used inside your cluster for

21634
15:16:05,756 --> 15:16:10,955
more intelligent routing with services

21635
15:16:08,639 --> 15:16:13,595
it is also very easy to manage load

21636
15:16:10,955 --> 15:16:16,479
balancing configuration for traffic

21637
15:16:13,595 --> 15:16:19,435
between replicas it helps pods scale

21638
15:16:16,480 --> 15:16:22,000
quickly and easily as the service will

21639
15:16:19,436 --> 15:16:25,116
automatically handle the recreation of

21640
15:16:22,000 --> 15:16:27,680
pods and their new ip addresses the main

21641
15:16:25,116 --> 15:16:31,200
goal of services in kubernetes is to

21642
15:16:27,680 --> 15:16:33,360
provide persistent access to its pods

21643
15:16:31,199 --> 15:16:34,795
without the necessity to look for a

21644
15:16:33,360 --> 15:16:37,915
pod's ip

21645
15:16:34,796 --> 15:16:41,436
each time when the pod is recreated and

21646
15:16:37,915 --> 15:16:44,399
again services also allow for external

21647
15:16:41,436 --> 15:16:46,796
access from users to the applications

21648
15:16:44,400 --> 15:16:49,275
inside the cluster without having to

21649
15:16:46,796 --> 15:16:52,480
know the ip address of the individual

21650
15:16:49,275 --> 15:16:54,639
pod in order to reach that application

21651
15:16:52,480 --> 15:16:56,480
now in order for a service to route

21652
15:16:54,639 --> 15:16:58,319
traffic to the correct pod in the

21653
15:16:56,480 --> 15:17:00,480
cluster there are some fields in the

21654
15:16:58,319 --> 15:17:02,720
manifest file that will help determine

21655
15:17:00,480 --> 15:17:05,520
the end points on where traffic should

21656
15:17:02,720 --> 15:17:08,000
be routed shown here on the right is the

21657
15:17:05,519 --> 15:17:10,795
deployment manifest for reference and on

21658
15:17:08,000 --> 15:17:13,519
the left is the services manifest now as

21659
15:17:10,796 --> 15:17:16,240
you can see here in the service manifest

21660
15:17:13,519 --> 15:17:19,275
on the left the kind is clearly defined

21661
15:17:16,239 --> 15:17:21,680
as service under metadata is the name of

21662
15:17:19,275 --> 15:17:24,479
the service and this will be the dns

21663
15:17:21,680 --> 15:17:26,796
name of the service when it is created

21664
15:17:24,480 --> 15:17:29,436
so when it comes to the spec there is a

21665
15:17:26,796 --> 15:17:32,080
field here called a selector and this is

21666
15:17:29,436 --> 15:17:34,400
what defines what pods should be

21667
15:17:32,080 --> 15:17:37,116
included in the service and it is the

21668
15:17:34,400 --> 15:17:39,436
labels under the selector that define

21669
15:17:37,116 --> 15:17:41,596
which pods and labels are what we

21670
15:17:39,436 --> 15:17:44,720
discussed in the last lesson as

21671
15:17:41,595 --> 15:17:46,955
arbitrary key value pairs so any pod

21672
15:17:44,720 --> 15:17:49,840
with these matching labels is what will

21673
15:17:46,955 --> 15:17:52,159
be added to the service as shown here in

21674
15:17:49,839 --> 15:17:54,639
the deployment file this workload will

21675
15:17:52,160 --> 15:17:56,956
be a part of the service and its labels

21676
15:17:54,639 --> 15:18:00,159
match that of the selector in the

21677
15:17:56,955 --> 15:18:02,639
services file for type this is the type

21678
15:18:00,160 --> 15:18:06,640
of service that you will want to use in

21679
15:18:02,639 --> 15:18:08,955
this example type cluster ip is used but

21680
15:18:06,639 --> 15:18:11,040
depending on the use case you have a few

21681
15:18:08,955 --> 15:18:13,040
different ones to choose from now at the

21682
15:18:11,040 --> 15:18:15,360
bottom here is a list of port

21683
15:18:13,040 --> 15:18:17,595
configurations protocol being the

21684
15:18:15,360 --> 15:18:19,680
network protocol to use with the port

21685
15:18:17,595 --> 15:18:22,795
port being the port that incoming

21686
15:18:19,680 --> 15:18:25,436
traffic goes to and finally the target

21687
15:18:22,796 --> 15:18:27,436
port which is the port on the pod that

21688
15:18:25,436 --> 15:18:29,520
traffic should be sent to and this will

21689
15:18:27,436 --> 15:18:32,000
make more sense as we go through the

21690
15:18:29,519 --> 15:18:34,319
upcoming diagrams so touching on

21691
15:18:32,000 --> 15:18:36,639
selectors and labels for a moment

21692
15:18:34,319 --> 15:18:38,796
kubernetes has a very unique way of

21693
15:18:36,639 --> 15:18:42,159
routing traffic and when it comes to

21694
15:18:38,796 --> 15:18:45,276
services it's not any different services

21695
15:18:42,160 --> 15:18:47,596
select pods based on their labels now

21696
15:18:45,275 --> 15:18:50,319
when a selector request is made to the

21697
15:18:47,595 --> 15:18:52,955
service it selects all pods in the

21698
15:18:50,319 --> 15:18:55,116
cluster matching the key value pair

21699
15:18:52,955 --> 15:18:57,519
under the selector it chooses one of the

21700
15:18:55,116 --> 15:18:59,916
pods if there are more than one with the

21701
15:18:57,519 --> 15:19:02,399
same key value pair and forwards the

21702
15:18:59,915 --> 15:19:04,319
network request to it and so here in

21703
15:19:02,400 --> 15:19:07,116
this example you can see that the

21704
15:19:04,319 --> 15:19:10,400
selector specified for the service has a

21705
15:19:07,116 --> 15:19:13,596
key value pair of app inventory you can

21706
15:19:10,400 --> 15:19:16,560
see the pod on node 1 on the left holds

21707
15:19:13,595 --> 15:19:18,479
the label of app inventory as well which

21708
15:19:16,559 --> 15:19:21,040
matches the key value pair of the

21709
15:19:18,480 --> 15:19:23,116
selector and so traffic will get routed

21710
15:19:21,040 --> 15:19:25,840
to that pod because of it if you look at

21711
15:19:23,116 --> 15:19:28,240
the label for the pod in node 2 on the

21712
15:19:25,839 --> 15:19:30,795
right the label does not match that of

21713
15:19:28,239 --> 15:19:33,519
the selector and so it will not route

21714
15:19:30,796 --> 15:19:35,596
traffic to that pod and so to sum it up

21715
15:19:33,519 --> 15:19:38,559
the label on the pod matching the

21716
15:19:35,595 --> 15:19:41,275
selector in the service determines where

21717
15:19:38,559 --> 15:19:43,519
the network request will get routed to

21718
15:19:41,275 --> 15:19:45,199
and so now i will be going through the

21719
15:19:43,519 --> 15:19:48,159
many different service types that are

21720
15:19:45,199 --> 15:19:52,000
available for routing network traffic

21721
15:19:48,160 --> 15:19:55,116
within gke starting with cluster ip

21722
15:19:52,000 --> 15:19:57,275
now a cluster ip service is the default

21723
15:19:55,116 --> 15:19:59,756
kubernetes service it gives you a

21724
15:19:57,275 --> 15:20:02,400
service inside your cluster that other

21725
15:19:59,756 --> 15:20:04,639
apps inside your cluster can access the

21726
15:20:02,400 --> 15:20:06,955
service is not exposed outside the

21727
15:20:04,639 --> 15:20:09,595
cluster but can be addressed from within

21728
15:20:06,955 --> 15:20:12,559
the cluster when you create a service of

21729
15:20:09,595 --> 15:20:15,519
type cluster ip kubernetes creates a

21730
15:20:12,559 --> 15:20:18,079
stable ip address that is accessible

21731
15:20:15,519 --> 15:20:21,039
from nodes in the cluster clients in the

21732
15:20:18,080 --> 15:20:23,916
cluster call the service by using the

21733
15:20:21,040 --> 15:20:26,160
cluster ip address and the port value

21734
15:20:23,915 --> 15:20:28,319
specified in the port field of the

21735
15:20:26,160 --> 15:20:31,116
service manifest the request is

21736
15:20:28,319 --> 15:20:33,680
forwarded to one of the member pods on

21737
15:20:31,116 --> 15:20:37,200
the port specified in the target port

21738
15:20:33,680 --> 15:20:39,756
field and just as a note this ip address

21739
15:20:37,199 --> 15:20:42,479
is stable for the lifetime of the

21740
15:20:39,756 --> 15:20:47,160
service so for this example a client

21741
15:20:42,480 --> 15:20:47,160
calls the service at 10.176

21742
15:20:48,720 --> 15:20:55,116
on tcp port 80. the request is forwarded

21743
15:20:52,400 --> 15:20:58,000
to one of the member pods on tcp port

21744
15:20:55,116 --> 15:21:01,200
80. note that the member pod must have a

21745
15:20:58,000 --> 15:21:03,360
container that is listening on tcp port

21746
15:21:01,199 --> 15:21:05,839
80. if there is no container listening

21747
15:21:03,360 --> 15:21:08,879
on port 80 clients will see a message

21748
15:21:05,839 --> 15:21:11,115
like fail to connect or this site can't

21749
15:21:08,879 --> 15:21:13,435
be reached think of the case when you

21750
15:21:11,116 --> 15:21:16,000
have a dns record that you don't want to

21751
15:21:13,436 --> 15:21:18,720
change and you want the name to resolve

21752
15:21:16,000 --> 15:21:20,480
to the same ip address or you merely

21753
15:21:18,720 --> 15:21:23,520
want a static ip address for your

21754
15:21:20,480 --> 15:21:26,400
workload this would be a great use case

21755
15:21:23,519 --> 15:21:27,915
for the use of the cluster ip service

21756
15:21:26,400 --> 15:21:30,480
now although the service is not

21757
15:21:27,915 --> 15:21:31,755
accessible by network requests outside

21758
15:21:30,480 --> 15:21:33,916
of the cluster

21759
15:21:31,756 --> 15:21:35,595
if you need to connect to the service

21760
15:21:33,915 --> 15:21:39,040
you can still connect to it with the

21761
15:21:35,595 --> 15:21:41,839
cloud sdk or cloud shell by using the

21762
15:21:39,040 --> 15:21:43,840
exposed ip address of the cluster and so

21763
15:21:41,839 --> 15:21:46,239
i wanted to take a moment to show you

21764
15:21:43,839 --> 15:21:48,159
what a cluster ip manifest actually

21765
15:21:46,239 --> 15:21:51,115
looks like and i will be going through

21766
15:21:48,160 --> 15:21:53,276
the manifest for each service type for

21767
15:21:51,116 --> 15:21:55,436
you to familiarize yourself with we

21768
15:21:53,275 --> 15:21:57,839
first have the name of the service which

21769
15:21:55,436 --> 15:22:00,000
is cluster ip dash service

21770
15:21:57,839 --> 15:22:02,719
we then have the label used for the

21771
15:22:00,000 --> 15:22:05,040
selector which is the key value pair of

21772
15:22:02,720 --> 15:22:08,160
app inventory and then we have the

21773
15:22:05,040 --> 15:22:10,559
service type which is cluster ip and we

21774
15:22:08,160 --> 15:22:13,360
have the port number exposed internally

21775
15:22:10,559 --> 15:22:16,000
in the cluster which is port 80 along

21776
15:22:13,360 --> 15:22:18,955
with the target port that containers are

21777
15:22:16,000 --> 15:22:21,519
listening on which again is port 80. and

21778
15:22:18,955 --> 15:22:22,559
so the next service type we have is node

21779
15:22:21,519 --> 15:22:24,719
port

21780
15:22:22,559 --> 15:22:28,079
so when you create a service of type

21781
15:22:24,720 --> 15:22:30,955
node port you specify a node port value

21782
15:22:28,080 --> 15:22:33,596
the node port is a static port and is

21783
15:22:30,955 --> 15:22:36,839
chosen from a pre-configured range

21784
15:22:33,595 --> 15:22:38,479
between 30 000 and 32

21785
15:22:36,839 --> 15:22:40,479
760

21786
15:22:38,480 --> 15:22:43,200
you can specify your own value within

21787
15:22:40,480 --> 15:22:45,680
this range but please note that any

21788
15:22:43,199 --> 15:22:48,719
value outside of this range will not be

21789
15:22:45,680 --> 15:22:51,436
accepted by kubernetes as well if you do

21790
15:22:48,720 --> 15:22:54,080
not choose a value a random value within

21791
15:22:51,436 --> 15:22:55,840
the range specified will be assigned

21792
15:22:54,080 --> 15:22:58,080
once this port range has been assigned

21793
15:22:55,839 --> 15:23:01,359
to the service then the service is

21794
15:22:58,080 --> 15:23:04,480
accessible by using the ip address of

21795
15:23:01,360 --> 15:23:07,840
any node along with the no port value

21796
15:23:04,480 --> 15:23:10,160
the service is then exposed on a port on

21797
15:23:07,839 --> 15:23:12,639
every node in the cluster the service

21798
15:23:10,160 --> 15:23:15,200
can then be accessed externally at the

21799
15:23:12,639 --> 15:23:17,680
node ip along with the node port when

21800
15:23:15,199 --> 15:23:19,755
using node port services you must make

21801
15:23:17,680 --> 15:23:22,400
sure that the selected port is not

21802
15:23:19,756 --> 15:23:24,720
already open on your nodes and so just

21803
15:23:22,400 --> 15:23:27,840
as a note the no port type is an

21804
15:23:24,720 --> 15:23:31,200
extension of the cluster i p type so a

21805
15:23:27,839 --> 15:23:34,000
service of type node port naturally has

21806
15:23:31,199 --> 15:23:36,719
a cluster i p address and so this method

21807
15:23:34,000 --> 15:23:40,000
isn't very secure as it opens up each

21808
15:23:36,720 --> 15:23:42,400
node to external entry as well this

21809
15:23:40,000 --> 15:23:44,955
method relies on knowing the ip

21810
15:23:42,400 --> 15:23:47,116
addresses of the nodes which could

21811
15:23:44,955 --> 15:23:49,915
change at any time and so going through

21812
15:23:47,116 --> 15:23:51,520
the manifest of type node port service

21813
15:23:49,915 --> 15:23:54,239
we start off with the name of the

21814
15:23:51,519 --> 15:23:56,795
service which is node port dash service

21815
15:23:54,239 --> 15:24:00,159
the label used for the selector which

21816
15:23:56,796 --> 15:24:02,720
uses the key value pair of app inventory

21817
15:24:00,160 --> 15:24:05,040
the type which is node port and notice

21818
15:24:02,720 --> 15:24:07,360
the case sensitivity here which you will

21819
15:24:05,040 --> 15:24:09,756
find in most service types along with

21820
15:24:07,360 --> 15:24:12,796
the port number exposed internally in

21821
15:24:09,756 --> 15:24:14,319
the cluster which is port 80 and again

21822
15:24:12,796 --> 15:24:16,880
the port that the containers are

21823
15:24:14,319 --> 15:24:19,595
listening on which is the target port

21824
15:24:16,879 --> 15:24:22,159
which is port 80 as well and lastly and

21825
15:24:19,595 --> 15:24:24,795
most importantly we have the no port

21826
15:24:22,160 --> 15:24:27,480
value which is marked as you saw in the

21827
15:24:24,796 --> 15:24:30,720
diagram earlier as port

21828
15:24:27,480 --> 15:24:33,360
32002 the next service type we have up

21829
15:24:30,720 --> 15:24:35,756
is low balancer and this service is

21830
15:24:33,360 --> 15:24:38,400
exposed as a load balancer in the

21831
15:24:35,756 --> 15:24:41,360
cluster low balancer services will

21832
15:24:38,400 --> 15:24:43,756
create an internal kubernetes service

21833
15:24:41,360 --> 15:24:46,000
that is connected to a cloud provider's

21834
15:24:43,756 --> 15:24:49,040
load balancer and in this case google

21835
15:24:46,000 --> 15:24:52,319
cloud this will create a static publicly

21836
15:24:49,040 --> 15:24:54,796
addressable ip address and a dns name

21837
15:24:52,319 --> 15:24:57,519
that can be used to access your cluster

21838
15:24:54,796 --> 15:25:00,400
from an external source the low balancer

21839
15:24:57,519 --> 15:25:02,955
type is an extension of the no port type

21840
15:25:00,400 --> 15:25:05,680
so a service of type load balancer

21841
15:25:02,955 --> 15:25:08,159
naturally has a cluster ip address if

21842
15:25:05,680 --> 15:25:10,639
you want to directly expose a service

21843
15:25:08,160 --> 15:25:12,400
this is the default method all traffic

21844
15:25:10,639 --> 15:25:14,796
on the port you specify

21845
15:25:12,400 --> 15:25:17,360
will be forwarded to the service there

21846
15:25:14,796 --> 15:25:19,360
is no filtering or routing and it means

21847
15:25:17,360 --> 15:25:24,796
you can send many different types of

21848
15:25:19,360 --> 15:25:27,680
traffic to it like http https tcp or udp

21849
15:25:24,796 --> 15:25:30,000
and more the downside here is that for

21850
15:25:27,680 --> 15:25:32,879
each service you expose with a low

21851
15:25:30,000 --> 15:25:35,040
balancer you pay for that load balancer

21852
15:25:32,879 --> 15:25:37,595
and so you can really rack up your bill

21853
15:25:35,040 --> 15:25:40,480
if you're using multiple load balancers

21854
15:25:37,595 --> 15:25:42,639
and shown here is the manifest for type

21855
15:25:40,480 --> 15:25:45,436
load balancer it shows the name of the

21856
15:25:42,639 --> 15:25:47,756
service load balancer dash service the

21857
15:25:45,436 --> 15:25:49,916
label which is used for the selector

21858
15:25:47,756 --> 15:25:51,116
which is the key value pair of app

21859
15:25:49,915 --> 15:25:54,000
inventory

21860
15:25:51,116 --> 15:25:56,480
the service type which is low balancer

21861
15:25:54,000 --> 15:25:59,436
again notice the case sensitivity along

21862
15:25:56,480 --> 15:26:01,916
with the port and the target port which

21863
15:25:59,436 --> 15:26:03,916
are both port 80. and so this is the end

21864
15:26:01,915 --> 15:26:06,159
of part one of this lesson it was

21865
15:26:03,915 --> 15:26:08,639
getting a bit long so i decided to break

21866
15:26:06,160 --> 15:26:10,956
it up this would be a great opportunity

21867
15:26:08,639 --> 15:26:13,116
for you to get up and have a stretch get

21868
15:26:10,955 --> 15:26:15,595
yourself a coffee or tea and whenever

21869
15:26:13,116 --> 15:26:18,240
you're ready part two will be starting

21870
15:26:15,595 --> 15:26:20,319
immediately from the end of part one so

21871
15:26:18,239 --> 15:26:21,849
go ahead and mark this as complete and

21872
15:26:20,319 --> 15:26:25,756
i'll see you in the next one

21873
15:26:21,849 --> 15:26:28,159
[Music]

21874
15:26:25,756 --> 15:26:30,480
welcome back this is part two of the

21875
15:26:28,160 --> 15:26:32,320
kubernetes services lesson and we're

21876
15:26:30,480 --> 15:26:34,720
going to continue immediately from the

21877
15:26:32,319 --> 15:26:36,879
end of part one so whenever you're ready

21878
15:26:34,720 --> 15:26:39,680
let's dive in and so the next service

21879
15:26:36,879 --> 15:26:42,079
type we have is multiport services

21880
15:26:39,680 --> 15:26:45,116
now for some services there is the need

21881
15:26:42,080 --> 15:26:46,796
to expose more than one port kubernetes

21882
15:26:45,116 --> 15:26:49,436
lets you configure multiple port

21883
15:26:46,796 --> 15:26:52,000
definitions on a service object so when

21884
15:26:49,436 --> 15:26:54,560
using multiple ports for a service you

21885
15:26:52,000 --> 15:26:56,879
must give all your ports names and if

21886
15:26:54,559 --> 15:26:59,756
you have multiple service ports these

21887
15:26:56,879 --> 15:27:04,915
names must be unique in this example if

21888
15:26:59,756 --> 15:27:04,916
a client calls the service at 10.176.1

21889
15:27:05,756 --> 15:27:12,720
on tcp port 80 the request is forwarded

21890
15:27:09,116 --> 15:27:15,596
to a member pod on tcp port 80 on either

21891
15:27:12,720 --> 15:27:19,955
node 1 or node 2. but if a client calls

21892
15:27:15,595 --> 15:27:19,955
the service at 10.176.133.7

21893
15:27:20,879 --> 15:27:28,559
on tcp port 9752 the request is

21894
15:27:24,639 --> 15:27:31,915
forwarded to the pod on tcp port 9752

21895
15:27:28,559 --> 15:27:34,479
that resides on node 1. each member pod

21896
15:27:31,915 --> 15:27:37,595
must have a container listening on tcp

21897
15:27:34,480 --> 15:27:40,480
port 80 and a container listening on tcp

21898
15:27:37,595 --> 15:27:43,115
port 9752 this could be a single

21899
15:27:40,480 --> 15:27:45,520
container with two threads or two

21900
15:27:43,116 --> 15:27:48,639
containers running in the same pod and

21901
15:27:45,519 --> 15:27:50,955
of course as shown here is a manifest

21902
15:27:48,639 --> 15:27:52,796
showing the multi-port services

21903
15:27:50,955 --> 15:27:55,519
the name of the service

21904
15:27:52,796 --> 15:27:57,916
the label used for the selector

21905
15:27:55,519 --> 15:27:59,915
as well as the service type the port

21906
15:27:57,915 --> 15:28:02,795
node exposed internally for each

21907
15:27:59,915 --> 15:28:05,199
separate workload as well as the port

21908
15:28:02,796 --> 15:28:07,360
that containers are listening on for

21909
15:28:05,199 --> 15:28:11,199
each workload as well and as you saw

21910
15:28:07,360 --> 15:28:15,040
before nginx was using target port 80

21911
15:28:11,199 --> 15:28:18,000
where appy was using port 9752 moving on

21912
15:28:15,040 --> 15:28:20,720
to another service type is external name

21913
15:28:18,000 --> 15:28:23,199
now a service of type external name

21914
15:28:20,720 --> 15:28:26,400
provides an internal alias for an

21915
15:28:23,199 --> 15:28:29,435
external dns name internal clients make

21916
15:28:26,400 --> 15:28:31,596
requests using the internal dns name and

21917
15:28:29,436 --> 15:28:34,160
the requests are redirected to the

21918
15:28:31,595 --> 15:28:36,795
external name when you create a service

21919
15:28:34,160 --> 15:28:39,436
kubernetes creates a dns name that

21920
15:28:36,796 --> 15:28:42,480
internal clients can use to call the

21921
15:28:39,436 --> 15:28:45,596
service in this example the internal dns

21922
15:28:42,480 --> 15:28:47,680
name is bowtie.sql when an internal

21923
15:28:45,595 --> 15:28:51,115
client makes a request to the internal

21924
15:28:47,680 --> 15:28:54,879
dns name of bowtie.sql the request gets

21925
15:28:51,116 --> 15:28:57,840
redirected to bowtie.sql2

21926
15:28:54,879 --> 15:28:59,915
dot bow tie inc dot private the external

21927
15:28:57,839 --> 15:29:02,239
name service type is a bit different

21928
15:28:59,915 --> 15:29:05,360
than other service types as it's not

21929
15:29:02,239 --> 15:29:08,479
associated with a set of pods or an ip

21930
15:29:05,360 --> 15:29:11,680
address it is a mapping from an internal

21931
15:29:08,480 --> 15:29:14,956
dns name to an external dns name this

21932
15:29:11,680 --> 15:29:17,840
service does a simple cname redirection

21933
15:29:14,955 --> 15:29:20,319
and is a great use case for any external

21934
15:29:17,839 --> 15:29:22,955
service that resides outside of your

21935
15:29:20,319 --> 15:29:26,480
cluster and again here is a view of a

21936
15:29:22,955 --> 15:29:29,199
manifest for type external name here

21937
15:29:26,480 --> 15:29:32,000
showing the internal dns name along with

21938
15:29:29,199 --> 15:29:34,399
the external dns name redirect and

21939
15:29:32,000 --> 15:29:36,559
moving on to the last service type we

21940
15:29:34,400 --> 15:29:38,796
have the headless service type now

21941
15:29:36,559 --> 15:29:41,680
sometimes you don't need or want low

21942
15:29:38,796 --> 15:29:43,436
balancing and a single service ip in

21943
15:29:41,680 --> 15:29:46,000
this case you can create headless

21944
15:29:43,436 --> 15:29:48,480
services by specifying none as the

21945
15:29:46,000 --> 15:29:51,116
service type in the manifest file this

21946
15:29:48,480 --> 15:29:53,520
option also allows you to choose other

21947
15:29:51,116 --> 15:29:56,319
service discovery mechanisms without

21948
15:29:53,519 --> 15:29:58,275
being tied to kubernetes implementation

21949
15:29:56,319 --> 15:30:00,319
applications can still use a

21950
15:29:58,275 --> 15:30:02,879
self-registration pattern with this

21951
15:30:00,319 --> 15:30:04,879
service and so a great use case for this

21952
15:30:02,879 --> 15:30:07,435
is when you don't need any low balancing

21953
15:30:04,879 --> 15:30:10,639
or routing you only need the service to

21954
15:30:07,436 --> 15:30:13,520
patch the request to the back end pod no

21955
15:30:10,639 --> 15:30:16,080
ips needed headless service is typically

21956
15:30:13,519 --> 15:30:18,639
used with stateful sets where the name

21957
15:30:16,080 --> 15:30:20,880
of the pods are fixed this is useful in

21958
15:30:18,639 --> 15:30:23,519
situations like when you're setting up a

21959
15:30:20,879 --> 15:30:26,000
mysql cluster where you need to know the

21960
15:30:23,519 --> 15:30:29,039
name of the master and so here is a

21961
15:30:26,000 --> 15:30:32,000
manifest for the headless service again

21962
15:30:29,040 --> 15:30:34,559
the service type is marked as none and

21963
15:30:32,000 --> 15:30:36,879
so to sum it up kubernetes services

21964
15:30:34,559 --> 15:30:39,115
provides the interfaces through which

21965
15:30:36,879 --> 15:30:41,275
pods can communicate with each other

21966
15:30:39,116 --> 15:30:44,480
they also act as the main gateway for

21967
15:30:41,275 --> 15:30:46,319
your application services use selectors

21968
15:30:44,480 --> 15:30:49,116
to identify which pods they should

21969
15:30:46,319 --> 15:30:51,199
control they expose an ip address and a

21970
15:30:49,116 --> 15:30:53,276
port that is not necessarily the same

21971
15:30:51,199 --> 15:30:57,039
port at which the pod is listening and

21972
15:30:53,275 --> 15:30:59,115
services can expose more than one port

21973
15:30:57,040 --> 15:31:02,955
and can also route traffic to other

21974
15:30:59,116 --> 15:31:05,520
services external ip addresses or dns

21975
15:31:02,955 --> 15:31:08,239
names services make it really easy to

21976
15:31:05,519 --> 15:31:10,719
create network services in kubernetes

21977
15:31:08,239 --> 15:31:13,115
each service can be backed with as many

21978
15:31:10,720 --> 15:31:15,680
pods as needed without having to make

21979
15:31:13,116 --> 15:31:18,000
your code aware of how each service is

21980
15:31:15,680 --> 15:31:20,796
backed also please note that there are

21981
15:31:18,000 --> 15:31:22,720
many other features and use cases within

21982
15:31:20,796 --> 15:31:24,796
the services that have been mentioned

21983
15:31:22,720 --> 15:31:27,116
that i've not brought up i will also

21984
15:31:24,796 --> 15:31:29,436
include some links in the lesson text

21985
15:31:27,116 --> 15:31:32,319
for those who are interested in diving

21986
15:31:29,436 --> 15:31:34,319
deeper into services this lesson was to

21987
15:31:32,319 --> 15:31:36,720
merely summarize the different service

21988
15:31:34,319 --> 15:31:38,796
types and knowing these service types

21989
15:31:36,720 --> 15:31:41,520
will put you in a great position on the

21990
15:31:38,796 --> 15:31:44,796
exam for any questions that cover

21991
15:31:41,519 --> 15:31:46,795
services within gke now i know this has

21992
15:31:44,796 --> 15:31:49,360
been another lesson that's been

21993
15:31:46,796 --> 15:31:52,000
extremely heavy in theory and has been a

21994
15:31:49,360 --> 15:31:55,275
tremendous amount to take in but not to

21995
15:31:52,000 --> 15:31:57,519
worry next up is a demo that will put

21996
15:31:55,275 --> 15:31:59,915
all this theory into practice and we'll

21997
15:31:57,519 --> 15:32:01,519
be going ahead and building a cluster

21998
15:31:59,915 --> 15:32:04,319
along with touching on much of the

21999
15:32:01,519 --> 15:32:06,399
components discussed within the past few

22000
15:32:04,319 --> 15:32:08,319
lessons and so that's pretty much all i

22001
15:32:06,400 --> 15:32:10,639
wanted to cover when it comes to

22002
15:32:08,319 --> 15:32:12,480
kubernetes service types so you can now

22003
15:32:10,639 --> 15:32:14,159
mark this lesson as complete and

22004
15:32:12,480 --> 15:32:15,030
whenever you're ready join me in the

22005
15:32:14,160 --> 15:32:19,116
console

22006
15:32:15,029 --> 15:32:20,400
[Music]

22007
15:32:19,116 --> 15:32:22,720
welcome back

22008
15:32:20,400 --> 15:32:24,880
in this lesson i'll be going over

22009
15:32:22,720 --> 15:32:28,559
ingress for gke

22010
15:32:24,879 --> 15:32:32,319
an object within gke that defines rules

22011
15:32:28,559 --> 15:32:35,040
for routing traffic to specific services

22012
15:32:32,319 --> 15:32:36,559
ingress is a well-known topic that comes

22013
15:32:35,040 --> 15:32:39,436
up in the exam

22014
15:32:36,559 --> 15:32:42,879
as well as being a common resource that

22015
15:32:39,436 --> 15:32:45,360
is used in many gke clusters that you

22016
15:32:42,879 --> 15:32:46,795
will see in most environments

22017
15:32:45,360 --> 15:32:49,680
something that you will get very

22018
15:32:46,796 --> 15:32:52,080
familiar with while diving deeper into

22019
15:32:49,680 --> 15:32:55,116
more complex environments

22020
15:32:52,080 --> 15:32:58,000
so whenever you're ready let's dive in

22021
15:32:55,116 --> 15:33:03,116
now in gke an ingress object defines

22022
15:32:58,000 --> 15:33:06,400
rules for routing http and https traffic

22023
15:33:03,116 --> 15:33:10,080
to applications running in a cluster

22024
15:33:06,400 --> 15:33:12,480
an ingress object is associated with one

22025
15:33:10,080 --> 15:33:14,955
or more service objects

22026
15:33:12,480 --> 15:33:16,240
each of which is associated with a set

22027
15:33:14,955 --> 15:33:18,559
of pods

22028
15:33:16,239 --> 15:33:21,115
when you create an ingress object the

22029
15:33:18,559 --> 15:33:23,199
gke ingress controller

22030
15:33:21,116 --> 15:33:27,276
creates a google cloud

22031
15:33:23,199 --> 15:33:29,115
http or https load balancer and

22032
15:33:27,275 --> 15:33:32,079
configures it according to the

22033
15:33:29,116 --> 15:33:34,400
information in the ingress and its

22034
15:33:32,080 --> 15:33:37,360
associated services

22035
15:33:34,400 --> 15:33:39,680
gke ingress is a built-in

22036
15:33:37,360 --> 15:33:42,000
and managed ingress controller

22037
15:33:39,680 --> 15:33:46,080
this controller implements ingress

22038
15:33:42,000 --> 15:33:51,199
resources as google cloud load balancers

22039
15:33:46,080 --> 15:33:54,480
for http and https workloads in gke

22040
15:33:51,199 --> 15:33:57,595
also the load balancer is given a stable

22041
15:33:54,480 --> 15:34:00,956
ip address that you can associate with a

22042
15:33:57,595 --> 15:34:05,595
domain name each external http

22043
15:34:00,955 --> 15:34:09,915
and https load balancer or internal http

22044
15:34:05,595 --> 15:34:10,720
or https load balancer uses a single url

22045
15:34:09,915 --> 15:34:13,680
map

22046
15:34:10,720 --> 15:34:14,880
which references one or more back-end

22047
15:34:13,680 --> 15:34:18,080
services

22048
15:34:14,879 --> 15:34:21,199
one back-end service corresponds to each

22049
15:34:18,080 --> 15:34:23,360
service referenced by the ingress in

22050
15:34:21,199 --> 15:34:26,559
this example assume that you have

22051
15:34:23,360 --> 15:34:29,840
associated the load balancers ip address

22052
15:34:26,559 --> 15:34:31,360
with the domain name bowtieinc.co

22053
15:34:29,839 --> 15:34:33,039
when a client sends a request to

22054
15:34:31,360 --> 15:34:36,000
bowtieinc.co

22055
15:34:33,040 --> 15:34:39,116
the request is routed to a kubernetes

22056
15:34:36,000 --> 15:34:40,720
service named products on port 80. and

22057
15:34:39,116 --> 15:34:42,480
when a client sends a request to

22058
15:34:40,720 --> 15:34:45,275
bowtieinc.co

22059
15:34:42,480 --> 15:34:48,480
forward slash discontinued the request

22060
15:34:45,275 --> 15:34:52,879
is routed to a kubernetes service named

22061
15:34:48,480 --> 15:34:55,116
discontinued on port 21337

22062
15:34:52,879 --> 15:34:58,795
ingress is probably the most powerful

22063
15:34:55,116 --> 15:35:00,796
way to expose your services but can also

22064
15:34:58,796 --> 15:35:03,916
be very complex

22065
15:35:00,796 --> 15:35:06,000
as there are also many types of ingress

22066
15:35:03,915 --> 15:35:08,239
controllers to choose from

22067
15:35:06,000 --> 15:35:09,519
along with plugins for ingress

22068
15:35:08,239 --> 15:35:12,079
controllers

22069
15:35:09,519 --> 15:35:15,199
ingress is the most useful and cost

22070
15:35:12,080 --> 15:35:18,080
effective if you want to expose

22071
15:35:15,199 --> 15:35:19,039
multiple services under the same ip

22072
15:35:18,080 --> 15:35:20,796
address

22073
15:35:19,040 --> 15:35:23,840
as you only pay

22074
15:35:20,796 --> 15:35:26,796
for one load balancer if you are using

22075
15:35:23,839 --> 15:35:30,000
the native gcp integration

22076
15:35:26,796 --> 15:35:32,240
and comes with a slew of features

22077
15:35:30,000 --> 15:35:34,879
and so shown here is the ingress

22078
15:35:32,239 --> 15:35:37,199
manifest which is a bit different from

22079
15:35:34,879 --> 15:35:40,319
the other manifest that you've seen

22080
15:35:37,199 --> 15:35:43,115
as it holds rules for different paths

22081
15:35:40,319 --> 15:35:46,639
explain in the previous diagram in the

22082
15:35:43,116 --> 15:35:47,596
manifest shown here one path directs all

22083
15:35:46,639 --> 15:35:50,159
traffic

22084
15:35:47,595 --> 15:35:53,115
to the product's service name

22085
15:35:50,160 --> 15:35:55,840
while the other path redirects traffic

22086
15:35:53,116 --> 15:35:58,639
from discontinued to the back end

22087
15:35:55,839 --> 15:36:00,719
service name of discontinued

22088
15:35:58,639 --> 15:36:03,199
and note that each of these service

22089
15:36:00,720 --> 15:36:04,400
names have their own independent

22090
15:36:03,199 --> 15:36:07,199
manifest

22091
15:36:04,400 --> 15:36:09,436
as it is needed to create the service

22092
15:36:07,199 --> 15:36:10,719
and are referenced within the ingress

22093
15:36:09,436 --> 15:36:13,596
manifest

22094
15:36:10,720 --> 15:36:16,720
so the more rules you have for different

22095
15:36:13,595 --> 15:36:17,915
paths or ports the more services you

22096
15:36:16,720 --> 15:36:20,160
will need

22097
15:36:17,915 --> 15:36:23,275
now i wanted to touch on network

22098
15:36:20,160 --> 15:36:24,560
endpoint groups or any g's for short for

22099
15:36:23,275 --> 15:36:27,756
just a second

22100
15:36:24,559 --> 15:36:30,795
now this is a configuration object that

22101
15:36:27,756 --> 15:36:32,480
specifies a group of back-end endpoints

22102
15:36:30,796 --> 15:36:34,240
or services

22103
15:36:32,480 --> 15:36:37,040
negs are useful

22104
15:36:34,239 --> 15:36:40,319
for container native load balancing

22105
15:36:37,040 --> 15:36:43,360
where each container can be represented

22106
15:36:40,319 --> 15:36:46,955
as an endpoint to the load balancer the

22107
15:36:43,360 --> 15:36:50,160
negs are used to track pod endpoints

22108
15:36:46,955 --> 15:36:52,955
dynamically so the google low balancer

22109
15:36:50,160 --> 15:36:54,080
can route traffic to its appropriate

22110
15:36:52,955 --> 15:36:56,720
back ends

22111
15:36:54,080 --> 15:37:00,080
so traffic is low balanced from the load

22112
15:36:56,720 --> 15:37:04,000
balancer directly to the pod ip

22113
15:37:00,080 --> 15:37:06,080
as opposed to traversing the vm ip and

22114
15:37:04,000 --> 15:37:07,199
coupe proxy networking in these

22115
15:37:06,080 --> 15:37:10,639
conditions

22116
15:37:07,199 --> 15:37:12,955
services will be annotated automatically

22117
15:37:10,639 --> 15:37:16,559
indicating that a neg

22118
15:37:12,955 --> 15:37:19,436
should be created to mirror the pod ips

22119
15:37:16,559 --> 15:37:22,399
within the service the neg is what

22120
15:37:19,436 --> 15:37:25,200
allows compute engine load balancers to

22121
15:37:22,400 --> 15:37:28,160
communicate directly with pods the

22122
15:37:25,199 --> 15:37:31,199
diagram shown here is the ingress to

22123
15:37:28,160 --> 15:37:34,000
compute engine resource mappings of the

22124
15:37:31,199 --> 15:37:36,239
manifest that you saw earlier where the

22125
15:37:34,000 --> 15:37:39,436
gke ingress controller

22126
15:37:36,239 --> 15:37:42,000
deploys and manages compute engine low

22127
15:37:39,436 --> 15:37:43,840
balancer resources based on the

22128
15:37:42,000 --> 15:37:46,319
ingressed resources

22129
15:37:43,839 --> 15:37:48,559
that are deployed in the cluster

22130
15:37:46,319 --> 15:37:51,436
now touching on health checks for just a

22131
15:37:48,559 --> 15:37:54,079
minute if there are no specified health

22132
15:37:51,436 --> 15:37:55,116
check parameters for a corresponding

22133
15:37:54,080 --> 15:37:57,360
service

22134
15:37:55,116 --> 15:37:58,560
using a back-end custom resource

22135
15:37:57,360 --> 15:38:01,680
definition

22136
15:37:58,559 --> 15:38:04,795
a set of default and inferred parameters

22137
15:38:01,680 --> 15:38:07,680
are used health check parameters for a

22138
15:38:04,796 --> 15:38:11,040
back-end service should be explicitly

22139
15:38:07,680 --> 15:38:13,199
defined by creating a back-end config

22140
15:38:11,040 --> 15:38:15,040
custom resource definition for the

22141
15:38:13,199 --> 15:38:16,795
service and this should be done if

22142
15:38:15,040 --> 15:38:19,040
you're using anthos

22143
15:38:16,796 --> 15:38:22,080
a backend config custom resource

22144
15:38:19,040 --> 15:38:24,160
definition should also be used if you

22145
15:38:22,080 --> 15:38:27,916
have more than one container in the

22146
15:38:24,160 --> 15:38:30,796
serving pods as well if you need control

22147
15:38:27,915 --> 15:38:33,199
over the port that's used for the low

22148
15:38:30,796 --> 15:38:35,596
balancers health checks now you can

22149
15:38:33,199 --> 15:38:37,199
specify the backend services health

22150
15:38:35,595 --> 15:38:39,915
check parameters

22151
15:38:37,199 --> 15:38:42,319
using the health check parameter of a

22152
15:38:39,915 --> 15:38:44,319
back-end config custom resource

22153
15:38:42,319 --> 15:38:46,159
definition referenced by the

22154
15:38:44,319 --> 15:38:48,559
corresponding service

22155
15:38:46,160 --> 15:38:49,756
this gives you more flexibility and

22156
15:38:48,559 --> 15:38:52,955
control

22157
15:38:49,756 --> 15:38:58,160
over health checks for a google cloud

22158
15:38:52,955 --> 15:39:02,559
external http or https load balancer or

22159
15:38:58,160 --> 15:39:04,720
internal http or https load balancer

22160
15:39:02,559 --> 15:39:07,360
created by an ingress

22161
15:39:04,720 --> 15:39:09,840
and lastly i wanted to touch on ssl

22162
15:39:07,360 --> 15:39:14,160
certificates and there are three ways to

22163
15:39:09,839 --> 15:39:17,755
provide ssl certificates to an http or

22164
15:39:14,160 --> 15:39:19,840
https load balancer the first way is

22165
15:39:17,756 --> 15:39:22,559
google managed certificates

22166
15:39:19,839 --> 15:39:23,679
and these are provisioned deployed

22167
15:39:22,559 --> 15:39:26,879
renewed

22168
15:39:23,680 --> 15:39:27,840
and managed for your domains and just as

22169
15:39:26,879 --> 15:39:30,559
a note

22170
15:39:27,839 --> 15:39:33,199
managed certificates do not support

22171
15:39:30,559 --> 15:39:36,000
wildcard domains the second way to

22172
15:39:33,199 --> 15:39:38,000
provide ssl certificates is through

22173
15:39:36,000 --> 15:39:40,480
self-managed certificates that are

22174
15:39:38,000 --> 15:39:43,199
shared with google cloud you can

22175
15:39:40,480 --> 15:39:46,240
provision your own ssl certificate

22176
15:39:43,199 --> 15:39:48,639
and create a certificate resource

22177
15:39:46,239 --> 15:39:51,680
in your google cloud project you can

22178
15:39:48,639 --> 15:39:55,436
then list the certificate resource in an

22179
15:39:51,680 --> 15:39:59,915
annotation on an ingress to create an

22180
15:39:55,436 --> 15:40:02,239
http or https load balancer that uses

22181
15:39:59,915 --> 15:40:04,955
the certificate and the last way to

22182
15:40:02,239 --> 15:40:07,595
provide ssl certificates is through

22183
15:40:04,955 --> 15:40:10,559
self-managed certificates as secret

22184
15:40:07,595 --> 15:40:13,680
resources so you can provision your own

22185
15:40:10,559 --> 15:40:16,955
ssl certificate and create a secret to

22186
15:40:13,680 --> 15:40:20,400
hold it you can then refer to the secret

22187
15:40:16,955 --> 15:40:24,720
as an ingress specification to create an

22188
15:40:20,400 --> 15:40:27,520
http or https load balancer that uses

22189
15:40:24,720 --> 15:40:30,480
this certificate and just as a note you

22190
15:40:27,519 --> 15:40:33,115
can specify multiple certificates in an

22191
15:40:30,480 --> 15:40:36,080
ingress manifest the load balancer

22192
15:40:33,116 --> 15:40:37,520
chooses a certificate if the common name

22193
15:40:36,080 --> 15:40:39,360
in the certificate

22194
15:40:37,519 --> 15:40:42,000
matches the host name

22195
15:40:39,360 --> 15:40:43,360
used in the request and so that pretty

22196
15:40:42,000 --> 15:40:46,559
much covers

22197
15:40:43,360 --> 15:40:49,040
all the main topics in this short lesson

22198
15:40:46,559 --> 15:40:50,720
on ingress for gke

22199
15:40:49,040 --> 15:40:51,756
so you can now mark this lesson as

22200
15:40:50,720 --> 15:40:53,830
complete

22201
15:40:51,756 --> 15:40:57,840
and let's move on to the next one

22202
15:40:53,830 --> 15:40:59,116
[Music]

22203
15:40:57,839 --> 15:41:02,479
welcome back

22204
15:40:59,116 --> 15:41:06,160
in this lesson i'll be going over gke

22205
15:41:02,480 --> 15:41:08,560
storage options now kubernetes currently

22206
15:41:06,160 --> 15:41:09,596
offers a slew of different storage

22207
15:41:08,559 --> 15:41:12,479
options

22208
15:41:09,595 --> 15:41:15,519
and is only enhanced by the added

22209
15:41:12,480 --> 15:41:18,319
features available in google cloud for

22210
15:41:15,519 --> 15:41:21,199
gke we'll also be getting into the

22211
15:41:18,319 --> 15:41:23,756
different abstractions that kubernetes

22212
15:41:21,199 --> 15:41:26,000
offers to manage storage

22213
15:41:23,756 --> 15:41:27,595
and how they can be used for different

22214
15:41:26,000 --> 15:41:29,756
types of workloads

22215
15:41:27,595 --> 15:41:32,955
now there's quite a bit to go over here

22216
15:41:29,756 --> 15:41:35,595
so with that being said let's dive in

22217
15:41:32,955 --> 15:41:38,879
now as i stated before there are several

22218
15:41:35,595 --> 15:41:40,479
storage options for applications running

22219
15:41:38,879 --> 15:41:43,519
on gke

22220
15:41:40,480 --> 15:41:45,200
the choices vary in terms of flexibility

22221
15:41:43,519 --> 15:41:47,915
and ease of use

22222
15:41:45,199 --> 15:41:50,399
google cloud offers several storage

22223
15:41:47,915 --> 15:41:52,159
options that can be used for your

22224
15:41:50,400 --> 15:41:54,160
specific workload

22225
15:41:52,160 --> 15:41:56,480
kubernetes also provides storage

22226
15:41:54,160 --> 15:41:59,276
abstractions which i will be getting

22227
15:41:56,480 --> 15:42:02,160
into in just a bit the easiest storage

22228
15:41:59,275 --> 15:42:04,479
options are google cloud's managed

22229
15:42:02,160 --> 15:42:06,880
storage products if you need to connect

22230
15:42:04,480 --> 15:42:08,000
a database to your cluster you can

22231
15:42:06,879 --> 15:42:11,199
consider

22232
15:42:08,000 --> 15:42:13,199
using cloud sql datastore or cloud

22233
15:42:11,199 --> 15:42:15,839
spanner and when it comes to object

22234
15:42:13,199 --> 15:42:18,559
storage cloud storage would be an

22235
15:42:15,839 --> 15:42:20,955
excellent option to fill the gap file

22236
15:42:18,559 --> 15:42:22,879
store is a great option for when your

22237
15:42:20,955 --> 15:42:25,680
application requires

22238
15:42:22,879 --> 15:42:28,479
managed network attached storage and if

22239
15:42:25,680 --> 15:42:31,040
your application requires block storage

22240
15:42:28,480 --> 15:42:32,000
the best option is to use persistent

22241
15:42:31,040 --> 15:42:34,720
disks

22242
15:42:32,000 --> 15:42:36,559
and can be provisioned manually or

22243
15:42:34,720 --> 15:42:39,520
provisioned dynamically through

22244
15:42:36,559 --> 15:42:42,479
kubernetes now i wanted to first start

22245
15:42:39,519 --> 15:42:44,479
off with kubernetes storage abstractions

22246
15:42:42,480 --> 15:42:47,040
but in order to understand kubernetes

22247
15:42:44,480 --> 15:42:50,240
storage abstractions i wanted to take a

22248
15:42:47,040 --> 15:42:52,879
moment to explain how storage is mounted

22249
15:42:50,239 --> 15:42:54,879
in the concept of docker now docker has

22250
15:42:52,879 --> 15:42:57,115
a concept of volumes

22251
15:42:54,879 --> 15:42:59,360
though it is somewhat looser and less

22252
15:42:57,116 --> 15:43:02,796
managed than kubernetes

22253
15:42:59,360 --> 15:43:04,955
a docker volume is a directory on disk

22254
15:43:02,796 --> 15:43:07,596
or in another container

22255
15:43:04,955 --> 15:43:10,080
docker provides volume drivers but the

22256
15:43:07,595 --> 15:43:13,040
functionality is somewhat limited a

22257
15:43:10,080 --> 15:43:15,360
docker container has a writable layer

22258
15:43:13,040 --> 15:43:16,559
and this is where the data is stored by

22259
15:43:15,360 --> 15:43:19,840
default

22260
15:43:16,559 --> 15:43:22,479
making the data ephemeral and so data is

22261
15:43:19,839 --> 15:43:25,039
not persisted when the container is

22262
15:43:22,480 --> 15:43:28,319
removed so storing data inside a

22263
15:43:25,040 --> 15:43:30,879
container is not always recommended now

22264
15:43:28,319 --> 15:43:33,839
there are three ways to mount data

22265
15:43:30,879 --> 15:43:36,955
inside a docker container the first way

22266
15:43:33,839 --> 15:43:39,679
is a docker volume and sits inside the

22267
15:43:36,955 --> 15:43:42,879
docker area within the host's file

22268
15:43:39,680 --> 15:43:44,080
system and can be shared amongst other

22269
15:43:42,879 --> 15:43:46,719
containers

22270
15:43:44,080 --> 15:43:49,040
this volume is a docker object and is

22271
15:43:46,720 --> 15:43:51,840
decoupled from the container

22272
15:43:49,040 --> 15:43:54,160
they can be attached and shared across

22273
15:43:51,839 --> 15:43:56,955
multiple containers as well bind

22274
15:43:54,160 --> 15:43:59,520
mounting is the second way to mount data

22275
15:43:56,955 --> 15:44:00,795
and is coming directly from the host's

22276
15:43:59,519 --> 15:44:03,275
file system

22277
15:44:00,796 --> 15:44:05,116
bind mounts are great for local

22278
15:44:03,275 --> 15:44:08,319
application development

22279
15:44:05,116 --> 15:44:10,639
yet cannot be shared across containers

22280
15:44:08,319 --> 15:44:12,559
and the last way to mount data is by

22281
15:44:10,639 --> 15:44:15,199
using temp-fs

22282
15:44:12,559 --> 15:44:17,680
and is stored in the host's memory this

22283
15:44:15,199 --> 15:44:20,719
way is great for ephemeral data and

22284
15:44:17,680 --> 15:44:23,915
increases performance as it no longer

22285
15:44:20,720 --> 15:44:27,040
lies in the container's writable layer

22286
15:44:23,915 --> 15:44:29,839
now with kubernetes storage abstractions

22287
15:44:27,040 --> 15:44:32,559
file system and block based storage are

22288
15:44:29,839 --> 15:44:35,275
provided to your pods but are different

22289
15:44:32,559 --> 15:44:38,000
than docker in nature volumes are the

22290
15:44:35,275 --> 15:44:41,199
basic storage unit in kubernetes that

22291
15:44:38,000 --> 15:44:43,595
decouples the storage from the container

22292
15:44:41,199 --> 15:44:46,239
and tie it to the pod and not the

22293
15:44:43,595 --> 15:44:49,915
container like in docker a regular

22294
15:44:46,239 --> 15:44:53,115
volume simply called volume is basically

22295
15:44:49,915 --> 15:44:55,755
a directory that the containers in a pod

22296
15:44:53,116 --> 15:44:58,639
have access to the particular volume

22297
15:44:55,756 --> 15:44:59,595
type used is what will determine its

22298
15:44:58,639 --> 15:45:01,915
purpose

22299
15:44:59,595 --> 15:45:03,595
some volume types are backed by

22300
15:45:01,915 --> 15:45:05,115
ephemeral storage

22301
15:45:03,595 --> 15:45:08,720
like empty dir

22302
15:45:05,116 --> 15:45:11,840
config map and secrets and these volumes

22303
15:45:08,720 --> 15:45:12,880
do not persist after the pod ceases to

22304
15:45:11,839 --> 15:45:16,159
exist

22305
15:45:12,879 --> 15:45:17,435
volumes are useful for caching temporary

22306
15:45:16,160 --> 15:45:19,916
information

22307
15:45:17,436 --> 15:45:23,116
sharing files between containers

22308
15:45:19,915 --> 15:45:26,559
or to load data into a pod other volume

22309
15:45:23,116 --> 15:45:29,520
types are backed by durable storage and

22310
15:45:26,559 --> 15:45:32,319
persist beyond the lifetime of a pod

22311
15:45:29,519 --> 15:45:35,359
like persistent volumes and persistent

22312
15:45:32,319 --> 15:45:37,040
volume claims a persistent volume is a

22313
15:45:35,360 --> 15:45:40,319
cluster resource

22314
15:45:37,040 --> 15:45:42,319
that pods can use for durable storage a

22315
15:45:40,319 --> 15:45:45,199
persistent volume claim

22316
15:45:42,319 --> 15:45:46,879
can be used to dynamically provision a

22317
15:45:45,199 --> 15:45:49,595
persistent volume

22318
15:45:46,879 --> 15:45:52,639
backed by persistent disks persistent

22319
15:45:49,595 --> 15:45:56,000
volume claims can also be used to

22320
15:45:52,639 --> 15:45:57,680
provision other types of backing storage

22321
15:45:56,000 --> 15:45:59,680
like nfs

22322
15:45:57,680 --> 15:46:02,639
and i will be getting more into

22323
15:45:59,680 --> 15:46:05,040
persistent volumes and persistent volume

22324
15:46:02,639 --> 15:46:08,720
claims in just a bit

22325
15:46:05,040 --> 15:46:11,360
now as you saw in docker on disk files

22326
15:46:08,720 --> 15:46:14,080
in a container are the simplest place

22327
15:46:11,360 --> 15:46:16,160
for an application to write data but

22328
15:46:14,080 --> 15:46:20,000
files are lost when the container

22329
15:46:16,160 --> 15:46:22,956
crashes or stops for any other reason

22330
15:46:20,000 --> 15:46:26,239
as well as being unaccessible to other

22331
15:46:22,955 --> 15:46:29,915
containers running in the same pod in

22332
15:46:26,239 --> 15:46:33,436
kubernetes the volume source declared in

22333
15:46:29,915 --> 15:46:35,519
the pod specification determines how the

22334
15:46:33,436 --> 15:46:37,596
directory is created

22335
15:46:35,519 --> 15:46:40,399
the storage medium used

22336
15:46:37,595 --> 15:46:44,079
and the directory's initial contents

22337
15:46:40,400 --> 15:46:46,639
a pod specifies what volumes it contains

22338
15:46:44,080 --> 15:46:49,436
and the path where containers mount the

22339
15:46:46,639 --> 15:46:52,159
volume ephemeral volume types

22340
15:46:49,436 --> 15:46:55,360
live the same amount of time as the pods

22341
15:46:52,160 --> 15:46:58,320
they are connected to these volumes are

22342
15:46:55,360 --> 15:47:01,595
created when the pod is created and

22343
15:46:58,319 --> 15:47:04,639
persist through container restarts only

22344
15:47:01,595 --> 15:47:07,680
when the pod terminates or is deleted

22345
15:47:04,639 --> 15:47:11,116
are the volumes terminated as well other

22346
15:47:07,680 --> 15:47:14,480
volume types are interfaces to durable

22347
15:47:11,116 --> 15:47:17,520
storage that exist independently of a

22348
15:47:14,480 --> 15:47:20,720
pod like ephemeral volumes data in a

22349
15:47:17,519 --> 15:47:23,680
volume backed by durable storage

22350
15:47:20,720 --> 15:47:26,880
is preserved when the pod is removed

22351
15:47:23,680 --> 15:47:30,480
the volume is merely unmounted and the

22352
15:47:26,879 --> 15:47:32,879
data can be handed off to another pod

22353
15:47:30,480 --> 15:47:34,240
now volumes differ in their storage

22354
15:47:32,879 --> 15:47:36,719
implementation

22355
15:47:34,239 --> 15:47:39,275
and their initial contents you can

22356
15:47:36,720 --> 15:47:40,720
choose the volume source that best fits

22357
15:47:39,275 --> 15:47:42,479
your use case

22358
15:47:40,720 --> 15:47:43,916
and i will be going over some common

22359
15:47:42,480 --> 15:47:46,319
volume sources

22360
15:47:43,915 --> 15:47:49,839
that are used and you will see

22361
15:47:46,319 --> 15:47:52,400
in many gke implementations the first

22362
15:47:49,839 --> 15:47:53,359
volume that i want to bring up is empty

22363
15:47:52,400 --> 15:47:56,319
dir

22364
15:47:53,360 --> 15:47:59,199
now an empty dir volume provides an

22365
15:47:56,319 --> 15:48:02,319
empty directory that containers in the

22366
15:47:59,199 --> 15:48:05,360
pod can read and write from when the pod

22367
15:48:02,319 --> 15:48:08,319
is removed from a node for any reason

22368
15:48:05,360 --> 15:48:11,840
the data in the empty dir is deleted

22369
15:48:08,319 --> 15:48:14,639
forever an empty dir volume is stored on

22370
15:48:11,839 --> 15:48:16,559
whatever medium is backing the node

22371
15:48:14,639 --> 15:48:19,595
which might be a disk

22372
15:48:16,559 --> 15:48:22,559
ssd or network storage

22373
15:48:19,595 --> 15:48:26,079
empty der volumes are useful for scratch

22374
15:48:22,559 --> 15:48:28,159
space and sharing data between multiple

22375
15:48:26,080 --> 15:48:30,000
containers in a pod

22376
15:48:28,160 --> 15:48:32,400
the next type of volume that i wanted to

22377
15:48:30,000 --> 15:48:34,879
go over is config map

22378
15:48:32,400 --> 15:48:37,756
and config map is a resource that

22379
15:48:34,879 --> 15:48:39,755
provides a way to inject configuration

22380
15:48:37,756 --> 15:48:42,955
data into pods

22381
15:48:39,756 --> 15:48:45,840
the data stored in a config map object

22382
15:48:42,955 --> 15:48:47,199
can be referenced in a volume of type

22383
15:48:45,839 --> 15:48:50,159
config map

22384
15:48:47,199 --> 15:48:53,115
and then consumed through files running

22385
15:48:50,160 --> 15:48:55,756
in a pod the next volume type is secret

22386
15:48:53,116 --> 15:48:59,116
and a secret volume is used to make

22387
15:48:55,756 --> 15:49:01,756
sensitive data such as passwords oauth

22388
15:48:59,116 --> 15:49:04,080
tokens and ssh keys

22389
15:49:01,756 --> 15:49:06,955
available to applications

22390
15:49:04,080 --> 15:49:10,319
the data stored in a secret object can

22391
15:49:06,955 --> 15:49:13,360
be referenced in a volume of type secret

22392
15:49:10,319 --> 15:49:14,400
and then consumed through files running

22393
15:49:13,360 --> 15:49:17,520
in a pod

22394
15:49:14,400 --> 15:49:20,319
next volume type is downward api and

22395
15:49:17,519 --> 15:49:22,719
this volume makes downward api data

22396
15:49:20,319 --> 15:49:25,595
available to applications

22397
15:49:22,720 --> 15:49:28,796
so this data includes information

22398
15:49:25,595 --> 15:49:30,955
about the pod and container in which an

22399
15:49:28,796 --> 15:49:33,840
application is running in

22400
15:49:30,955 --> 15:49:37,199
an example of this would be to expose

22401
15:49:33,839 --> 15:49:40,319
information about the pods namespace and

22402
15:49:37,199 --> 15:49:42,879
ip address to applications and the last

22403
15:49:40,319 --> 15:49:45,680
volume type that i wanted to touch on is

22404
15:49:42,879 --> 15:49:48,719
persistent volume claim now a persistent

22405
15:49:45,680 --> 15:49:51,436
volume claim volume can be used to

22406
15:49:48,720 --> 15:49:54,955
provision durable storage so that they

22407
15:49:51,436 --> 15:49:56,880
can be used by applications a pod uses a

22408
15:49:54,955 --> 15:49:59,595
persistent volume claim

22409
15:49:56,879 --> 15:50:02,159
to mount a volume that is backed by this

22410
15:49:59,595 --> 15:50:05,115
durable storage and so now that i've

22411
15:50:02,160 --> 15:50:08,320
covered volumes i wanted to go into a

22412
15:50:05,116 --> 15:50:11,040
bit of detail about persistent volumes

22413
15:50:08,319 --> 15:50:14,319
persistent volume resources are used to

22414
15:50:11,040 --> 15:50:17,116
manage durable storage in a cluster in

22415
15:50:14,319 --> 15:50:20,159
gke a persistent volume

22416
15:50:17,116 --> 15:50:22,880
is typically backed by a persistent disk

22417
15:50:20,160 --> 15:50:26,240
or file store can be used as an nfs

22418
15:50:22,879 --> 15:50:28,719
solution unlike volumes the persistent

22419
15:50:26,239 --> 15:50:31,199
volume life cycle is managed by

22420
15:50:28,720 --> 15:50:32,319
kubernetes and can be dynamically

22421
15:50:31,199 --> 15:50:35,435
provisioned

22422
15:50:32,319 --> 15:50:38,000
without the need to manually create and

22423
15:50:35,436 --> 15:50:41,360
delete the backing storage persistent

22424
15:50:38,000 --> 15:50:44,480
volume resources are cluster resources

22425
15:50:41,360 --> 15:50:46,955
that exist independently of pods and

22426
15:50:44,480 --> 15:50:50,240
continue to persist as the cluster

22427
15:50:46,955 --> 15:50:53,040
changes and as pods are deleted and

22428
15:50:50,239 --> 15:50:55,839
recreated moving on to persistent volume

22429
15:50:53,040 --> 15:50:57,200
claims this is a request for

22430
15:50:55,839 --> 15:50:59,915
and claim to

22431
15:50:57,199 --> 15:51:03,039
a persistent volume resource persistent

22432
15:50:59,915 --> 15:51:04,079
volume claim objects request a specific

22433
15:51:03,040 --> 15:51:07,360
size

22434
15:51:04,080 --> 15:51:09,680
access mode and storage class for the

22435
15:51:07,360 --> 15:51:12,319
persistent volume if an existing

22436
15:51:09,680 --> 15:51:15,116
persistent volume can satisfy the

22437
15:51:12,319 --> 15:51:18,319
request or can be provisioned the

22438
15:51:15,116 --> 15:51:21,116
persistent volume claim is bound to that

22439
15:51:18,319 --> 15:51:22,879
persistent volume and just as a note

22440
15:51:21,116 --> 15:51:25,360
pods use claims

22441
15:51:22,879 --> 15:51:28,559
as volumes the cluster inspects the

22442
15:51:25,360 --> 15:51:31,275
claim to find the bound volume and

22443
15:51:28,559 --> 15:51:33,915
mounts that volume for the pod

22444
15:51:31,275 --> 15:51:36,795
now i wanted to take a moment to go over

22445
15:51:33,915 --> 15:51:39,915
storage classes and how they apply to

22446
15:51:36,796 --> 15:51:42,480
the overall storage in gke

22447
15:51:39,915 --> 15:51:45,360
now these volume implementations

22448
15:51:42,480 --> 15:51:47,360
such as gce persistent disk are

22449
15:51:45,360 --> 15:51:48,559
configured through storage class

22450
15:51:47,360 --> 15:51:50,955
resources

22451
15:51:48,559 --> 15:51:53,680
gke creates a default storage class for

22452
15:51:50,955 --> 15:51:57,436
you which uses the standard persistent

22453
15:51:53,680 --> 15:52:00,080
disk type of ext4 as shown here the

22454
15:51:57,436 --> 15:52:03,520
default storage class is used when a

22455
15:52:00,080 --> 15:52:05,520
persistent volume claim doesn't specify

22456
15:52:03,519 --> 15:52:08,639
a storage class name

22457
15:52:05,519 --> 15:52:11,115
and can also be replaced with one of

22458
15:52:08,639 --> 15:52:14,239
your choosing you can even create your

22459
15:52:11,116 --> 15:52:16,400
own storage class resources to describe

22460
15:52:14,239 --> 15:52:19,199
different classes of storage

22461
15:52:16,400 --> 15:52:20,560
and is helpful when using windows node

22462
15:52:19,199 --> 15:52:23,435
pools

22463
15:52:20,559 --> 15:52:26,479
now as i stated before persistent volume

22464
15:52:23,436 --> 15:52:28,720
claims can automatically provision

22465
15:52:26,480 --> 15:52:30,560
persistent disks for you

22466
15:52:28,720 --> 15:52:32,160
when you create this persistent volume

22467
15:52:30,559 --> 15:52:35,115
claim object

22468
15:52:32,160 --> 15:52:38,160
kubernetes dynamically creates a

22469
15:52:35,116 --> 15:52:41,200
corresponding persistent volume object

22470
15:52:38,160 --> 15:52:43,116
due to the gke default storage class

22471
15:52:41,199 --> 15:52:46,639
this persistent volume

22472
15:52:43,116 --> 15:52:49,276
is backed by a new empty compute engine

22473
15:52:46,639 --> 15:52:52,720
persistent disk you use this disk in a

22474
15:52:49,275 --> 15:52:55,199
pod by using the claim as a volume when

22475
15:52:52,720 --> 15:52:57,360
you delete a claim the corresponding

22476
15:52:55,199 --> 15:53:00,719
persistent volume object and the

22477
15:52:57,360 --> 15:53:03,840
provision compute engine persistent disk

22478
15:53:00,720 --> 15:53:06,720
are also deleted now to prevent deletion

22479
15:53:03,839 --> 15:53:08,879
you can set the reclaim policy of the

22480
15:53:06,720 --> 15:53:12,480
persistent disk resource

22481
15:53:08,879 --> 15:53:14,719
or its storage class resource to retain

22482
15:53:12,480 --> 15:53:17,360
now deployments as shown here in this

22483
15:53:14,720 --> 15:53:18,796
diagram are designed for stateless

22484
15:53:17,360 --> 15:53:21,595
applications

22485
15:53:18,796 --> 15:53:24,160
so all replicas of a deployment

22486
15:53:21,595 --> 15:53:26,720
share the same persistent volume claim

22487
15:53:24,160 --> 15:53:29,840
which is why stateful sets are the

22488
15:53:26,720 --> 15:53:31,200
recommended method of deploying stateful

22489
15:53:29,839 --> 15:53:34,879
applications

22490
15:53:31,199 --> 15:53:37,435
that require a unique volume per replica

22491
15:53:34,879 --> 15:53:39,275
by using stateful sets with persistent

22492
15:53:37,436 --> 15:53:42,400
volume claim templates

22493
15:53:39,275 --> 15:53:44,079
you can have applications that can scale

22494
15:53:42,400 --> 15:53:47,275
up automatically

22495
15:53:44,080 --> 15:53:50,639
with unique persistent volume claims

22496
15:53:47,275 --> 15:53:53,199
associated to each replica pod

22497
15:53:50,639 --> 15:53:55,839
now lastly i wanted to touch on some

22498
15:53:53,199 --> 15:53:59,039
topics that will determine the storage

22499
15:53:55,839 --> 15:54:02,000
access that is available for any gke

22500
15:53:59,040 --> 15:54:04,796
cluster in your environment now i first

22501
15:54:02,000 --> 15:54:06,639
wanted to start off with access modes

22502
15:54:04,796 --> 15:54:09,520
and there are three supported modes for

22503
15:54:06,639 --> 15:54:12,559
your persistent disks that allow read

22504
15:54:09,519 --> 15:54:15,199
write access and are listed here read

22505
15:54:12,559 --> 15:54:18,720
write once is where the volume can be

22506
15:54:15,199 --> 15:54:21,360
mounted as read write by a single node

22507
15:54:18,720 --> 15:54:25,040
read only many is where the volume can

22508
15:54:21,360 --> 15:54:28,239
be mounted as a read only by many nodes

22509
15:54:25,040 --> 15:54:31,436
and lastly read write many is where the

22510
15:54:28,239 --> 15:54:34,079
volume can be mounted as read write by

22511
15:54:31,436 --> 15:54:36,955
many nodes and just as a note

22512
15:54:34,080 --> 15:54:39,596
read write once is the most common use

22513
15:54:36,955 --> 15:54:42,639
case for persistent disks

22514
15:54:39,595 --> 15:54:45,595
and works as the default access mode for

22515
15:54:42,639 --> 15:54:48,479
most applications next i wanted to touch

22516
15:54:45,595 --> 15:54:51,435
on the type of persistent disks that are

22517
15:54:48,480 --> 15:54:54,640
available and the benefits and caveats

22518
15:54:51,436 --> 15:54:57,916
of access for each now going through the

22519
15:54:54,639 --> 15:55:00,400
persistent disks lesson of this course

22520
15:54:57,915 --> 15:55:03,275
you probably know by now about the

22521
15:55:00,400 --> 15:55:06,720
available persistent disks when it comes

22522
15:55:03,275 --> 15:55:09,595
to zonal versus regional availability

22523
15:55:06,720 --> 15:55:12,239
and so this may be a refresher for some

22524
15:55:09,595 --> 15:55:14,955
now going into regional persistent disks

22525
15:55:12,239 --> 15:55:18,319
these are multi-zonal resources that

22526
15:55:14,955 --> 15:55:21,756
replicate data between two zones in the

22527
15:55:18,319 --> 15:55:24,720
same region and can be used similarly to

22528
15:55:21,756 --> 15:55:27,680
zonal persistent disks in the event of a

22529
15:55:24,720 --> 15:55:30,955
zonal outage kubernetes can fail over

22530
15:55:27,680 --> 15:55:34,400
workloads using the volume to the other

22531
15:55:30,955 --> 15:55:37,116
zone regional persistent disks are great

22532
15:55:34,400 --> 15:55:40,480
for highly available solutions for

22533
15:55:37,116 --> 15:55:42,000
stateful workloads on gke now zonal

22534
15:55:40,480 --> 15:55:44,000
persistent disks

22535
15:55:42,000 --> 15:55:47,199
are zonal resources

22536
15:55:44,000 --> 15:55:51,360
and so unless a zone is specified

22537
15:55:47,199 --> 15:55:54,319
gke assigns the disk to a single zone

22538
15:55:51,360 --> 15:55:56,720
and chooses the zone at random once a

22539
15:55:54,319 --> 15:55:59,839
persistent disk is provisioned

22540
15:55:56,720 --> 15:56:03,200
any pods referencing the disk are

22541
15:55:59,839 --> 15:56:04,719
scheduled to the same zone as the disk

22542
15:56:03,199 --> 15:56:07,915
and just as a note

22543
15:56:04,720 --> 15:56:11,520
using anti-affinity on zones

22544
15:56:07,915 --> 15:56:13,275
allows stateful set pods to be spread

22545
15:56:11,519 --> 15:56:15,839
across zones

22546
15:56:13,275 --> 15:56:18,000
along with the corresponding disks and

22547
15:56:15,839 --> 15:56:20,159
the last point that i wanted to cover

22548
15:56:18,000 --> 15:56:21,199
when it comes to persistent volume

22549
15:56:20,160 --> 15:56:23,436
access

22550
15:56:21,199 --> 15:56:26,239
is the speed of access

22551
15:56:23,436 --> 15:56:29,200
now as stated in an earlier lesson the

22552
15:56:26,239 --> 15:56:33,199
size of persistent disks determine the

22553
15:56:29,199 --> 15:56:35,755
iops and throughput of the disk gke

22554
15:56:33,199 --> 15:56:39,039
typically uses persistent disks

22555
15:56:35,756 --> 15:56:40,955
as boot disks and to back kubernetes

22556
15:56:39,040 --> 15:56:44,080
persistent volumes

22557
15:56:40,955 --> 15:56:45,436
so whenever possible use larger and

22558
15:56:44,080 --> 15:56:48,720
fewer disks

22559
15:56:45,436 --> 15:56:50,880
to achieve higher iops and throughput

22560
15:56:48,720 --> 15:56:53,040
and so that pretty much covers

22561
15:56:50,879 --> 15:56:56,639
everything that i wanted to go over

22562
15:56:53,040 --> 15:56:58,239
in this lesson on gke storage options

22563
15:56:56,639 --> 15:56:59,275
so you can now mark this lesson as

22564
15:56:58,239 --> 15:57:01,500
complete

22565
15:56:59,275 --> 15:57:05,436
and let's move on to the next one

22566
15:57:01,500 --> 15:57:08,319
[Music]

22567
15:57:05,436 --> 15:57:10,880
welcome back in these next few demos i'm

22568
15:57:08,319 --> 15:57:13,040
going to be doing a complete walkthrough

22569
15:57:10,879 --> 15:57:15,595
and putting all the theory we learned

22570
15:57:13,040 --> 15:57:18,480
into practice through building and

22571
15:57:15,595 --> 15:57:21,040
interacting with gke clusters and you'll

22572
15:57:18,480 --> 15:57:22,956
be building and deploying your own

22573
15:57:21,040 --> 15:57:26,480
containerized application on this

22574
15:57:22,955 --> 15:57:28,559
cluster called box of bowties so in this

22575
15:57:26,480 --> 15:57:31,840
demo we're going to be setting up our

22576
15:57:28,559 --> 15:57:33,756
own gke cluster in the console along

22577
15:57:31,839 --> 15:57:35,839
with going through all the options that

22578
15:57:33,756 --> 15:57:38,000
are available when deploying it we're

22579
15:57:35,839 --> 15:57:40,879
also going to use the command line to

22580
15:57:38,000 --> 15:57:43,116
configure the cubectl command line tool

22581
15:57:40,879 --> 15:57:45,755
so that we can interact with the cluster

22582
15:57:43,116 --> 15:57:47,680
so with that being said let's dive in

22583
15:57:45,756 --> 15:57:51,040
and so here in the console i am logged

22584
15:57:47,680 --> 15:57:53,680
in as tonybowties gmail.com

22585
15:57:51,040 --> 15:57:55,756
under the project of bow tie inc and so

22586
15:57:53,680 --> 15:57:58,000
before launching the cluster i need to

22587
15:57:55,756 --> 15:57:59,756
make sure that my default vpc has been

22588
15:57:58,000 --> 15:58:02,000
created so i'm going to go over to the

22589
15:57:59,756 --> 15:58:04,239
navigation menu and i'm going to scroll

22590
15:58:02,000 --> 15:58:06,559
down to vpc network

22591
15:58:04,239 --> 15:58:08,795
and as expected the default network is

22592
15:58:06,559 --> 15:58:10,955
here so i can go ahead and create my

22593
15:58:08,796 --> 15:58:13,040
cluster and so in order to get to my

22594
15:58:10,955 --> 15:58:15,116
kubernetes engine console i'm going to

22595
15:58:13,040 --> 15:58:17,116
go up to the navigation menu and i'm

22596
15:58:15,116 --> 15:58:20,240
going to scroll down under compute and

22597
15:58:17,116 --> 15:58:22,080
you will find here kubernetes engine and

22598
15:58:20,239 --> 15:58:24,239
you'll see a few different options to

22599
15:58:22,080 --> 15:58:26,480
choose from and over here on the left

22600
15:58:24,239 --> 15:58:29,040
hand menu i will be going through these

22601
15:58:26,480 --> 15:58:31,116
options in the upcoming demos but for

22602
15:58:29,040 --> 15:58:33,680
now i want to concentrate on creating

22603
15:58:31,116 --> 15:58:34,400
our cluster now gk makes things pretty

22604
15:58:33,680 --> 15:58:37,040
easy

22605
15:58:34,400 --> 15:58:39,756
as i have the option to create a cluster

22606
15:58:37,040 --> 15:58:41,275
to deploy a container or even taking the

22607
15:58:39,756 --> 15:58:43,360
quick start and so we're going to go

22608
15:58:41,275 --> 15:58:45,436
ahead and click on create our cluster

22609
15:58:43,360 --> 15:58:48,720
and so here we are prompted with our

22610
15:58:45,436 --> 15:58:50,955
cluster basics now if i really wanted to

22611
15:58:48,720 --> 15:58:53,436
i can simply fill out all the fields

22612
15:58:50,955 --> 15:58:55,436
that you see here and click on create

22613
15:58:53,436 --> 15:58:57,116
and it will use all the defaults to

22614
15:58:55,436 --> 15:58:59,116
build my cluster but we're going to

22615
15:58:57,116 --> 15:59:00,955
customize it a little bit so we're going

22616
15:58:59,116 --> 15:59:03,680
to go ahead and go through all these

22617
15:59:00,955 --> 15:59:06,955
options so first under name we're going

22618
15:59:03,680 --> 15:59:08,955
to name this cluster bowtie dash cluster

22619
15:59:06,955 --> 15:59:11,595
and so under location type we want to

22620
15:59:08,955 --> 15:59:14,879
keep things as zonal and if i check off

22621
15:59:11,595 --> 15:59:16,879
the specify default node locations i'll

22622
15:59:14,879 --> 15:59:19,519
be able to make this a multi-zonal

22623
15:59:16,879 --> 15:59:22,159
cluster as i have the option of

22624
15:59:19,519 --> 15:59:24,955
selecting from multiple zones where i

22625
15:59:22,160 --> 15:59:26,956
can situate my nodes and so i can select

22626
15:59:24,955 --> 15:59:29,275
off a bunch of different zones if i

22627
15:59:26,955 --> 15:59:31,519
choose but we want to keep it as a

22628
15:59:29,275 --> 15:59:33,275
single zonal cluster and so i'm going to

22629
15:59:31,519 --> 15:59:34,879
check these all off

22630
15:59:33,275 --> 15:59:37,199
and under zone i'm going to click on the

22631
15:59:34,879 --> 15:59:40,719
drop down menu and i'm going to select

22632
15:59:37,199 --> 15:59:43,115
us east 1b and just as a note for each

22633
15:59:40,720 --> 15:59:45,680
zone that you select this is where the

22634
15:59:43,116 --> 15:59:48,480
control plane will live so if i was to

22635
15:59:45,680 --> 15:59:50,955
create a multi-zonal cluster as you can

22636
15:59:48,480 --> 15:59:53,276
see the master zone is the zone where

22637
15:59:50,955 --> 15:59:56,559
the control plane will be created and is

22638
15:59:53,275 --> 15:59:58,879
selected as us east 1b as that is the

22639
15:59:56,559 --> 16:00:00,000
zone that i had selected and so if i

22640
15:59:58,879 --> 16:00:03,199
change this

22641
16:00:00,000 --> 16:00:05,360
to let's say us east 1d you can see that

22642
16:00:03,199 --> 16:00:07,199
the control plane will change with it so

22643
16:00:05,360 --> 16:00:09,915
i'm going to change it back to us east

22644
16:00:07,199 --> 16:00:12,559
1b and you also have the option of

22645
16:00:09,915 --> 16:00:15,040
creating a regional cluster and the

22646
16:00:12,559 --> 16:00:17,360
location selection will change from zone

22647
16:00:15,040 --> 16:00:20,796
to region and here you will have to

22648
16:00:17,360 --> 16:00:22,879
specify at least one zone to select but

22649
16:00:20,796 --> 16:00:25,116
please also remember that the same

22650
16:00:22,879 --> 16:00:27,680
number of nodes will be deployed to each

22651
16:00:25,116 --> 16:00:30,796
selected zone so if i have three nodes

22652
16:00:27,680 --> 16:00:33,519
in this cluster and i decide to select

22653
16:00:30,796 --> 16:00:35,680
three zones then i will have nine nodes

22654
16:00:33,519 --> 16:00:38,000
in this cluster and so doing something

22655
16:00:35,680 --> 16:00:40,400
like this could get quite pricey when

22656
16:00:38,000 --> 16:00:42,239
you're looking to be cost conscious okay

22657
16:00:40,400 --> 16:00:44,880
so moving on i'm going to uncheck

22658
16:00:42,239 --> 16:00:46,639
specify default node locations i'm going

22659
16:00:44,879 --> 16:00:49,040
to change the location type back to

22660
16:00:46,639 --> 16:00:51,839
zonal and make sure that my zone is at

22661
16:00:49,040 --> 16:00:54,239
us east 1b moving down to the master

22662
16:00:51,839 --> 16:00:57,275
version this is where we would select

22663
16:00:54,239 --> 16:00:59,040
either a static version or opt-in to a

22664
16:00:57,275 --> 16:01:01,115
release channel for the version of

22665
16:00:59,040 --> 16:01:03,680
kubernetes that you want for your

22666
16:01:01,116 --> 16:01:05,756
cluster and so with the static version i

22667
16:01:03,680 --> 16:01:07,915
can choose from a bunch of different

22668
16:01:05,756 --> 16:01:10,480
versions here all the way back from

22669
16:01:07,915 --> 16:01:12,559
1.14.10

22670
16:01:10,480 --> 16:01:14,400
all the way to the latest version and so

22671
16:01:12,559 --> 16:01:16,955
with the release channel i have the

22672
16:01:14,400 --> 16:01:18,720
release channel selection here and i can

22673
16:01:16,955 --> 16:01:21,360
choose from the rapid channel the

22674
16:01:18,720 --> 16:01:22,955
regular channel or the stable channel

22675
16:01:21,360 --> 16:01:25,595
and so i'm going to keep things as the

22676
16:01:22,955 --> 16:01:27,915
default with the regular channel as well

22677
16:01:25,595 --> 16:01:30,159
i'm going to keep the default version as

22678
16:01:27,915 --> 16:01:32,559
the version of my choice now i could go

22679
16:01:30,160 --> 16:01:34,720
ahead and simply click on create here

22680
16:01:32,559 --> 16:01:36,720
but as this demo is a walkthrough i'm

22681
16:01:34,720 --> 16:01:38,955
going to go ahead and go through all the

22682
16:01:36,720 --> 16:01:41,360
available options so i'm going to start

22683
16:01:38,955 --> 16:01:44,080
by going over to the left hand menu and

22684
16:01:41,360 --> 16:01:46,879
clicking on default pool under no pools

22685
16:01:44,080 --> 16:01:49,276
now here i have one node pool already

22686
16:01:46,879 --> 16:01:51,755
with three nodes and this is the default

22687
16:01:49,275 --> 16:01:54,239
node pool that comes with any cluster

22688
16:01:51,756 --> 16:01:56,400
but if i was doing something specific i

22689
16:01:54,239 --> 16:01:58,559
could add another node pool and

22690
16:01:56,400 --> 16:02:01,040
configure it from here but because i

22691
16:01:58,559 --> 16:02:04,479
don't have a need for two node pools i'm

22692
16:02:01,040 --> 16:02:06,000
gonna go ahead and remove nodepool1 so

22693
16:02:04,480 --> 16:02:09,116
i'm going to go up here to remove

22694
16:02:06,000 --> 16:02:12,160
nodepool and as you can see gke makes it

22695
16:02:09,116 --> 16:02:14,000
really easy for me to add or remove node

22696
16:02:12,160 --> 16:02:15,916
pools so i'm going to go back to the

22697
16:02:14,000 --> 16:02:18,239
default pool and i'm going to keep the

22698
16:02:15,915 --> 16:02:20,639
name as is i'm gonna keep my number of

22699
16:02:18,239 --> 16:02:23,115
nodes as three and if i wanted to change

22700
16:02:20,639 --> 16:02:25,839
the number of nodes i can simply select

22701
16:02:23,116 --> 16:02:28,080
this i can choose six or however many

22702
16:02:25,839 --> 16:02:29,915
nodes you need for your workload and so

22703
16:02:28,080 --> 16:02:32,560
because we're not deploying a large

22704
16:02:29,915 --> 16:02:34,795
workload i'm gonna keep this number at 3

22705
16:02:32,559 --> 16:02:37,360
and moving right along we do want to

22706
16:02:34,796 --> 16:02:39,680
check off enable auto scaling and so

22707
16:02:37,360 --> 16:02:42,319
this way we don't have to worry about

22708
16:02:39,680 --> 16:02:44,319
scaling up or scaling down and here i'm

22709
16:02:42,319 --> 16:02:46,559
going to put the minimum number of nodes

22710
16:02:44,319 --> 16:02:48,879
as one and i'm going to keep my maximum

22711
16:02:46,559 --> 16:02:51,040
number of nodes at 3. and so here i'm

22712
16:02:48,879 --> 16:02:54,159
given the option to select the zone

22713
16:02:51,040 --> 16:02:56,955
location for my nodes but again for each

22714
16:02:54,160 --> 16:02:59,360
zone that i select it will run the same

22715
16:02:56,955 --> 16:03:01,839
amount of nodes so basically i have

22716
16:02:59,360 --> 16:03:04,720
another option in order to choose from

22717
16:03:01,839 --> 16:03:06,479
having a zonal or multi-zonal cluster

22718
16:03:04,720 --> 16:03:08,319
and because we're creating our cluster

22719
16:03:06,480 --> 16:03:11,360
in a single zone i'm going to uncheck

22720
16:03:08,319 --> 16:03:14,080
this and under automation as you can see

22721
16:03:11,360 --> 16:03:16,559
enable auto upgrade and enable auto

22722
16:03:14,080 --> 16:03:19,116
repair are both checked off and this is

22723
16:03:16,559 --> 16:03:21,680
due to the fact that the auto upgrade

22724
16:03:19,116 --> 16:03:24,080
feature is always enabled for the

22725
16:03:21,680 --> 16:03:26,480
release channel that i selected but as i

22726
16:03:24,080 --> 16:03:28,400
pointed out in a previous lesson that

22727
16:03:26,480 --> 16:03:31,276
this is google's best practice

22728
16:03:28,400 --> 16:03:33,916
to have auto upgrade and auto repair

22729
16:03:31,275 --> 16:03:35,915
enabled and so moving down to the bottom

22730
16:03:33,915 --> 16:03:37,680
are some fields to change the surge

22731
16:03:35,915 --> 16:03:40,159
upgrade behavior and so just as a

22732
16:03:37,680 --> 16:03:42,639
refresher surge upgrades allow you to

22733
16:03:40,160 --> 16:03:44,720
control the number of nodes gke can

22734
16:03:42,639 --> 16:03:47,116
upgrade at a time and control how

22735
16:03:44,720 --> 16:03:49,595
disruptive those upgrades are to your

22736
16:03:47,116 --> 16:03:51,360
workloads so max surge being the number

22737
16:03:49,595 --> 16:03:53,915
of additional nodes that can be added to

22738
16:03:51,360 --> 16:03:55,915
the node pool during an upgrade and max

22739
16:03:53,915 --> 16:03:58,639
unavailable being the number of nodes

22740
16:03:55,915 --> 16:04:00,239
that can be simultaneously unavailable

22741
16:03:58,639 --> 16:04:02,400
during that upgrade and because we're

22742
16:04:00,239 --> 16:04:04,400
not worried about disruptions we'll just

22743
16:04:02,400 --> 16:04:06,160
leave it set as the default and so

22744
16:04:04,400 --> 16:04:08,639
moving on we're going to move back over

22745
16:04:06,160 --> 16:04:10,720
to the left hand menu and under no pools

22746
16:04:08,639 --> 16:04:12,639
we're going to click on nodes and here

22747
16:04:10,720 --> 16:04:15,116
is where i can choose the type of

22748
16:04:12,639 --> 16:04:17,116
instance that i want to be using for my

22749
16:04:15,116 --> 16:04:20,160
nodes and so i'm going to keep the image

22750
16:04:17,116 --> 16:04:22,400
type as container optimize os and this

22751
16:04:20,160 --> 16:04:24,956
is the default image type but i also

22752
16:04:22,400 --> 16:04:27,916
have the option of choosing from others

22753
16:04:24,955 --> 16:04:29,915
like ubuntu or windows and so i'm going

22754
16:04:27,915 --> 16:04:32,159
to keep it as the default and under

22755
16:04:29,915 --> 16:04:34,079
machine configuration i'm going to keep

22756
16:04:32,160 --> 16:04:36,880
it under general purpose

22757
16:04:34,080 --> 16:04:40,160
with series e2 but i do want to change

22758
16:04:36,879 --> 16:04:43,360
the machine type to e2 micro just to be

22759
16:04:40,160 --> 16:04:46,560
cost conscious and under boot disk size

22760
16:04:43,360 --> 16:04:48,796
i want to keep it as 10 gigabytes as we

22761
16:04:46,559 --> 16:04:50,879
don't really need 100 gigabytes for what

22762
16:04:48,796 --> 16:04:53,200
we're doing here and you also have the

22763
16:04:50,879 --> 16:04:55,040
option of choosing from a different boot

22764
16:04:53,199 --> 16:04:57,755
disk type you can change it from

22765
16:04:55,040 --> 16:05:00,000
standard persistent disk to ssd but i'm

22766
16:04:57,756 --> 16:05:02,160
going to keep things as standard as well

22767
16:05:00,000 --> 16:05:04,319
i also have the option here to use

22768
16:05:02,160 --> 16:05:06,720
customer manage keys for encryption on

22769
16:05:04,319 --> 16:05:09,595
my boot disk as well as selecting from

22770
16:05:06,720 --> 16:05:11,040
preemptable nodes for some cost savings

22771
16:05:09,595 --> 16:05:13,040
and so i'm going to now move down to

22772
16:05:11,040 --> 16:05:16,319
networking and here if i wanted to get

22773
16:05:13,040 --> 16:05:19,360
really granular i can add a maximum pods

22774
16:05:16,319 --> 16:05:21,915
per node as well as some network tags

22775
16:05:19,360 --> 16:05:23,756
but our demo doesn't require this so i'm

22776
16:05:21,915 --> 16:05:26,319
going to leave it as is and i'm going to

22777
16:05:23,756 --> 16:05:28,400
go back over to the left hand menu and

22778
16:05:26,319 --> 16:05:30,879
click on security and under node

22779
16:05:28,400 --> 16:05:33,200
security you have the option of changing

22780
16:05:30,879 --> 16:05:35,839
your service account along with the

22781
16:05:33,199 --> 16:05:38,239
access scopes and so for this demo we

22782
16:05:35,839 --> 16:05:40,399
can keep things as the default service

22783
16:05:38,239 --> 16:05:42,559
account and the access scopes can be

22784
16:05:40,400 --> 16:05:45,360
left as is i'm going to go back over to

22785
16:05:42,559 --> 16:05:48,239
the left hand menu and click on metadata

22786
16:05:45,360 --> 16:05:50,639
and here i can add kubernetes labels as

22787
16:05:48,239 --> 16:05:53,115
well as the instance metadata and so i

22788
16:05:50,639 --> 16:05:55,680
know i didn't get into node taints but

22789
16:05:53,116 --> 16:05:57,436
just to fill you in on no taints when

22790
16:05:55,680 --> 16:06:00,160
you submit a workload to run in a

22791
16:05:57,436 --> 16:06:02,480
cluster the scheduler determines where

22792
16:06:00,160 --> 16:06:05,116
to place the pods associated with the

22793
16:06:02,480 --> 16:06:08,160
workload and so the scheduler will place

22794
16:06:05,116 --> 16:06:11,040
a pod on any node that satisfies the

22795
16:06:08,160 --> 16:06:13,436
resource requirements for that workload

22796
16:06:11,040 --> 16:06:16,639
so no taints will give you some more

22797
16:06:13,436 --> 16:06:19,360
control over which workloads can run on

22798
16:06:16,639 --> 16:06:21,360
a particular pool of nodes and so they

22799
16:06:19,360 --> 16:06:24,000
let you mark a node so that the

22800
16:06:21,360 --> 16:06:26,720
scheduler avoids or prevents using it

22801
16:06:24,000 --> 16:06:29,436
for certain pods so for instance if you

22802
16:06:26,720 --> 16:06:32,639
had a node pool that is dedicated to

22803
16:06:29,436 --> 16:06:34,639
gpus you'd want to keep that node pool

22804
16:06:32,639 --> 16:06:37,275
specifically for the workload that

22805
16:06:34,639 --> 16:06:39,756
requires it and although it is in beta

22806
16:06:37,275 --> 16:06:42,159
this is a great feature to have and so

22807
16:06:39,756 --> 16:06:44,400
that pretty much covers no pools as we

22808
16:06:42,160 --> 16:06:46,480
see it here and so this is the end of

22809
16:06:44,400 --> 16:06:49,200
part one of this demo it was getting a

22810
16:06:46,480 --> 16:06:51,200
bit long so i decided to break it up

22811
16:06:49,199 --> 16:06:53,680
this would be a great opportunity for

22812
16:06:51,199 --> 16:06:56,319
you to get up and have a stretch get

22813
16:06:53,680 --> 16:06:58,955
yourself a coffee or a tea and whenever

22814
16:06:56,319 --> 16:07:01,595
you're ready part two will be starting

22815
16:06:58,955 --> 16:07:03,680
immediately from the end of part one so

22816
16:07:01,595 --> 16:07:05,279
you can now mark this as complete and

22817
16:07:03,680 --> 16:07:09,116
i'll see you in the next one

22818
16:07:05,279 --> 16:07:11,915
[Music]

22819
16:07:09,116 --> 16:07:14,400
this is part two of creating a gke

22820
16:07:11,915 --> 16:07:17,115
cluster part 2 will be starting

22821
16:07:14,400 --> 16:07:19,520
immediately from the end of part 1. so

22822
16:07:17,116 --> 16:07:21,276
with that being said let's dive in and

22823
16:07:19,519 --> 16:07:24,000
so i'm going to go back over to the left

22824
16:07:21,275 --> 16:07:26,559
hand menu and under cluster i'm going to

22825
16:07:24,000 --> 16:07:29,595
click on automation and here i have the

22826
16:07:26,559 --> 16:07:31,839
option of enabling a maintenance window

22827
16:07:29,595 --> 16:07:34,559
for aligning times when auto upgrades

22828
16:07:31,839 --> 16:07:36,559
are allowed i have the option of adding

22829
16:07:34,559 --> 16:07:39,360
the window here and i can do it at

22830
16:07:36,559 --> 16:07:41,595
specified times during the week or i can

22831
16:07:39,360 --> 16:07:43,360
create a custom maintenance window and

22832
16:07:41,595 --> 16:07:45,915
so we don't need a maintenance window

22833
16:07:43,360 --> 16:07:48,480
right now so i'm going to uncheck this

22834
16:07:45,915 --> 16:07:50,795
and as well you have the option of doing

22835
16:07:48,480 --> 16:07:53,436
maintenance exclusions for when you

22836
16:07:50,796 --> 16:07:55,916
don't want maintenance to occur ngk

22837
16:07:53,436 --> 16:07:58,319
gives you the option of doing multiple

22838
16:07:55,915 --> 16:08:00,399
maintenance exclusions for whenever you

22839
16:07:58,319 --> 16:08:02,559
need them and because we don't need any

22840
16:08:00,400 --> 16:08:04,560
maintenance exclusions i'm going to

22841
16:08:02,559 --> 16:08:06,955
delete these and here you have the

22842
16:08:04,559 --> 16:08:09,595
option to enable vertical pod auto

22843
16:08:06,955 --> 16:08:12,479
scaling and this is where gke will

22844
16:08:09,595 --> 16:08:14,955
automatically schedule pods onto other

22845
16:08:12,480 --> 16:08:18,319
nodes that satisfy the resources

22846
16:08:14,955 --> 16:08:21,116
required for that workload as well here

22847
16:08:18,319 --> 16:08:24,400
i can enable my node auto provisioning

22848
16:08:21,116 --> 16:08:27,360
and enabling this option allows gke to

22849
16:08:24,400 --> 16:08:29,596
automatically manage a set of node pools

22850
16:08:27,360 --> 16:08:31,756
that can be created and deleted as

22851
16:08:29,595 --> 16:08:34,955
needed and i have a bunch of fields that

22852
16:08:31,756 --> 16:08:37,916
i can choose from the resource type the

22853
16:08:34,955 --> 16:08:39,519
minimum and maximum for cpu and memory

22854
16:08:37,915 --> 16:08:41,915
the service account

22855
16:08:39,519 --> 16:08:44,319
as well as adding even more resources

22856
16:08:41,915 --> 16:08:46,955
like gpus but our workload doesn't

22857
16:08:44,319 --> 16:08:49,436
require anything this fancy so i'm going

22858
16:08:46,955 --> 16:08:51,915
to delete this and i'm going to uncheck

22859
16:08:49,436 --> 16:08:54,480
enable auto provisioning and lastly we

22860
16:08:51,915 --> 16:08:56,479
have the auto scaling profile and i have

22861
16:08:54,480 --> 16:08:58,796
the option from choosing the balance

22862
16:08:56,480 --> 16:09:01,200
profile which is the default as well as

22863
16:08:58,796 --> 16:09:03,200
the optimize utilization which is still

22864
16:09:01,199 --> 16:09:05,039
in beta and so i'm going to keep things

22865
16:09:03,199 --> 16:09:07,680
as the default and i'm going to move

22866
16:09:05,040 --> 16:09:09,840
back on over to the left hand menu over

22867
16:09:07,680 --> 16:09:12,239
to networking and so here i can get

22868
16:09:09,839 --> 16:09:14,719
really granular with my cluster when it

22869
16:09:12,239 --> 16:09:17,115
comes to networking i have the option of

22870
16:09:14,720 --> 16:09:19,275
choosing from a public or a private

22871
16:09:17,116 --> 16:09:21,276
cluster as well i can choose from a

22872
16:09:19,275 --> 16:09:23,436
different network and since we only have

22873
16:09:21,275 --> 16:09:25,519
the default that's what shows up but if

22874
16:09:23,436 --> 16:09:28,319
you had different networks here you can

22875
16:09:25,519 --> 16:09:30,399
choose from them as well as the subnets

22876
16:09:28,319 --> 16:09:33,436
i can also choose from other networking

22877
16:09:30,400 --> 16:09:35,436
options like pod address range maximum

22878
16:09:33,436 --> 16:09:37,916
pods per node and there's a bunch of

22879
16:09:35,436 --> 16:09:40,319
other options which i won't get into any

22880
16:09:37,915 --> 16:09:42,479
detail with but i encourage you if

22881
16:09:40,319 --> 16:09:44,639
you're very curious to go through the

22882
16:09:42,480 --> 16:09:46,640
docs and to check out these different

22883
16:09:44,639 --> 16:09:49,756
options now the one thing that i wanted

22884
16:09:46,639 --> 16:09:51,839
to note here is the enable http low

22885
16:09:49,756 --> 16:09:54,559
balancing and this is a add-on that is

22886
16:09:51,839 --> 16:09:56,879
required in order to use google cloud

22887
16:09:54,559 --> 16:09:59,595
load balancer and so as we discussed

22888
16:09:56,879 --> 16:10:02,559
previously in the services lesson when

22889
16:09:59,595 --> 16:10:05,360
you enable service type load balancer a

22890
16:10:02,559 --> 16:10:07,275
load balancer will be created for you by

22891
16:10:05,360 --> 16:10:09,840
the cloud provider and so google

22892
16:10:07,275 --> 16:10:12,239
requires you to check this off so that a

22893
16:10:09,839 --> 16:10:15,435
controller can be installed in the

22894
16:10:12,239 --> 16:10:17,680
cluster upon creation and will allow a

22895
16:10:15,436 --> 16:10:19,520
load balancer to be created when the

22896
16:10:17,680 --> 16:10:21,199
service is created and so i'm going to

22897
16:10:19,519 --> 16:10:23,275
leave this checked as we will be

22898
16:10:21,199 --> 16:10:25,360
deploying a load balancer a little bit

22899
16:10:23,275 --> 16:10:27,519
later and so moving back over to the

22900
16:10:25,360 --> 16:10:29,756
left hand menu i'm going to now click on

22901
16:10:27,519 --> 16:10:32,239
security and there are many options here

22902
16:10:29,756 --> 16:10:34,559
to choose from that will allow you to

22903
16:10:32,239 --> 16:10:36,879
really lock down your cluster and again

22904
16:10:34,559 --> 16:10:38,795
this would all depend on your specific

22905
16:10:36,879 --> 16:10:41,040
type of workload now i'm not going to go

22906
16:10:38,796 --> 16:10:42,796
through all these options here but i did

22907
16:10:41,040 --> 16:10:45,040
want to highlight it for those who are

22908
16:10:42,796 --> 16:10:47,360
looking to be more security focused with

22909
16:10:45,040 --> 16:10:48,955
your cluster and so moving down the list

22910
16:10:47,360 --> 16:10:51,360
in the menu i'm going to click on

22911
16:10:48,955 --> 16:10:53,680
metadata and so here i can enter a

22912
16:10:51,360 --> 16:10:56,080
description for my cluster as well as

22913
16:10:53,680 --> 16:10:58,559
adding labels and so the last option on

22914
16:10:56,080 --> 16:11:01,200
the cluster menu is features and here i

22915
16:10:58,559 --> 16:11:03,680
have the option of running cloud run for

22916
16:11:01,199 --> 16:11:06,479
anthos which will allow you to deploy

22917
16:11:03,680 --> 16:11:09,199
serverless workloads to anthos clusters

22918
16:11:06,480 --> 16:11:12,319
and runs on top of gke and here you can

22919
16:11:09,199 --> 16:11:14,795
enable monitoring for gke and have it be

22920
16:11:12,319 --> 16:11:16,720
natively monitored by google cloud

22921
16:11:14,796 --> 16:11:18,956
monitoring and if i was running a

22922
16:11:16,720 --> 16:11:21,520
third-party product to monitor my

22923
16:11:18,955 --> 16:11:23,519
cluster i can simply uncheck this and

22924
16:11:21,519 --> 16:11:25,755
use my third-party monitoring and

22925
16:11:23,519 --> 16:11:28,079
there's a whole bunch of other features

22926
16:11:25,756 --> 16:11:30,319
that i won't dive into right now but if

22927
16:11:28,080 --> 16:11:32,400
you're curious you can always hover over

22928
16:11:30,319 --> 16:11:34,720
the question mark and get some more

22929
16:11:32,400 --> 16:11:36,796
information about what it does and so

22930
16:11:34,720 --> 16:11:39,116
now i've pretty much covered all the

22931
16:11:36,796 --> 16:11:41,200
configuration that's needed for this

22932
16:11:39,116 --> 16:11:43,360
cluster and so now i'm going to finally

22933
16:11:41,199 --> 16:11:45,915
head down to the bottom and click on

22934
16:11:43,360 --> 16:11:47,915
create and so it may take a few minutes

22935
16:11:45,915 --> 16:11:50,239
to create this cluster so i'm going to

22936
16:11:47,915 --> 16:11:52,239
go ahead and pause this video here and

22937
16:11:50,239 --> 16:11:54,639
i'll be back faster than you can say cat

22938
16:11:52,239 --> 16:11:56,479
in the hat okay and the cluster has been

22939
16:11:54,639 --> 16:11:59,915
created as you can see it's in the

22940
16:11:56,480 --> 16:12:03,116
location of us east 1b with three nodes

22941
16:11:59,915 --> 16:12:05,595
six vcpus and three gigabytes of memory

22942
16:12:03,116 --> 16:12:08,240
and i can drill down and see exactly the

22943
16:12:05,595 --> 16:12:10,720
details of the cluster as well if i

22944
16:12:08,239 --> 16:12:12,879
wanted to edit any of these options i

22945
16:12:10,720 --> 16:12:15,595
can simply go up to the top click on

22946
16:12:12,879 --> 16:12:17,595
edit and make the necessary changes and

22947
16:12:15,595 --> 16:12:19,680
so now you're probably wondering what

22948
16:12:17,595 --> 16:12:21,680
will i need to do in order to create

22949
16:12:19,680 --> 16:12:23,436
this cluster through the command line

22950
16:12:21,680 --> 16:12:25,040
well it's a bit simpler than what you

22951
16:12:23,436 --> 16:12:26,796
think and i'm going to show you right

22952
16:12:25,040 --> 16:12:29,520
now i'm going to simply go over to the

22953
16:12:26,796 --> 16:12:31,680
right hand menu and activate cloud shell

22954
16:12:29,519 --> 16:12:34,319
and bring this up for better viewing and

22955
16:12:31,680 --> 16:12:37,436
i'm going to paste in my command gcloud

22956
16:12:34,319 --> 16:12:40,400
container clusters create bow tie dash

22957
16:12:37,436 --> 16:12:42,480
cluster with the flag num nodes and the

22958
16:12:40,400 --> 16:12:44,796
number of nodes that i choose which is

22959
16:12:42,480 --> 16:12:47,520
three and so like i said before if i

22960
16:12:44,796 --> 16:12:50,000
wanted to simply create a simple cluster

22961
16:12:47,519 --> 16:12:52,639
i can do so like this but if i wanted to

22962
16:12:50,000 --> 16:12:54,955
create the cluster exactly how i built

22963
16:12:52,639 --> 16:12:57,275
my last cluster then i can use this

22964
16:12:54,955 --> 16:12:59,756
command which has all the necessary

22965
16:12:57,275 --> 16:13:02,159
flags that i need to make it customize

22966
16:12:59,756 --> 16:13:05,116
to my liking a not so very exciting

22967
16:13:02,160 --> 16:13:08,956
demonstration but at the same time shows

22968
16:13:05,116 --> 16:13:10,480
you how easy yet powerful gke really is

22969
16:13:08,955 --> 16:13:13,116
and so i'm not going to launch this

22970
16:13:10,480 --> 16:13:15,756
cluster as i already have one and so now

22971
16:13:13,116 --> 16:13:17,916
i wanted to show you how to interact

22972
16:13:15,756 --> 16:13:20,480
with your new gke cluster so i'm going

22973
16:13:17,915 --> 16:13:22,879
to simply clear my screen and so now in

22974
16:13:20,480 --> 16:13:25,040
order for me to interact with my cluster

22975
16:13:22,879 --> 16:13:27,275
i'm going to be using the cube ctl

22976
16:13:25,040 --> 16:13:29,520
command line tool and this is the tool

22977
16:13:27,275 --> 16:13:31,680
that is used to interact with any

22978
16:13:29,519 --> 16:13:34,000
kubernetes cluster no matter the

22979
16:13:31,680 --> 16:13:36,160
platform now i could use the gcloud

22980
16:13:34,000 --> 16:13:39,275
container commands but they won't allow

22981
16:13:36,160 --> 16:13:41,680
me to get very granular as the cubectl

22982
16:13:39,275 --> 16:13:44,000
tool and so a caveat of creating your

22983
16:13:41,680 --> 16:13:46,720
cluster through the console is that you

22984
16:13:44,000 --> 16:13:49,360
need to run a command in order to

22985
16:13:46,720 --> 16:13:52,319
retrieve the cluster's credentials and

22986
16:13:49,360 --> 16:13:53,915
configure the cubectl command line tool

22987
16:13:52,319 --> 16:13:56,480
and i'm going to go ahead and paste that

22988
16:13:53,915 --> 16:14:00,000
in now and the command is gcloud

22989
16:13:56,480 --> 16:14:02,160
container clusters get dash credentials

22990
16:14:00,000 --> 16:14:04,400
and the name of my cluster which is bow

22991
16:14:02,160 --> 16:14:07,436
tie dash cluster along with the zone

22992
16:14:04,400 --> 16:14:10,239
flag dash dash zone followed by the zone

22993
16:14:07,436 --> 16:14:12,400
itself which is us east 1b i'm going to

22994
16:14:10,239 --> 16:14:15,436
go ahead and hit enter and as you can

22995
16:14:12,400 --> 16:14:17,756
see cubectl has now been configured and

22996
16:14:15,436 --> 16:14:20,480
so now i'm able to interact with my

22997
16:14:17,756 --> 16:14:22,955
cluster so just to verify i'm going to

22998
16:14:20,480 --> 16:14:26,080
run the command cubectl

22999
16:14:22,955 --> 16:14:28,400
getpods and naturally as no workloads

23000
16:14:26,080 --> 16:14:30,400
are currently deployed in the cluster

23001
16:14:28,400 --> 16:14:34,160
there are no pods so i'm going to run

23002
16:14:30,400 --> 16:14:36,560
the command cube ctl get nodes

23003
16:14:34,160 --> 16:14:39,116
and as you can see the cubectl command

23004
16:14:36,559 --> 16:14:40,879
line tool is configured correctly and so

23005
16:14:39,116 --> 16:14:42,955
now this cluster is ready to have

23006
16:14:40,879 --> 16:14:45,755
workloads deployed to it and is also

23007
16:14:42,955 --> 16:14:48,000
configured with the cubectl command line

23008
16:14:45,756 --> 16:14:50,955
tool so that you're able to manage the

23009
16:14:48,000 --> 16:14:52,879
cluster and troubleshoot if necessary

23010
16:14:50,955 --> 16:14:55,116
now i know that there has been a ton of

23011
16:14:52,879 --> 16:14:57,275
features that i covered but i wanted to

23012
16:14:55,116 --> 16:14:59,200
give you the full walkthrough so that

23013
16:14:57,275 --> 16:15:01,915
you are able to tie in some of the

23014
16:14:59,199 --> 16:15:05,199
theory from the last few lessons and get

23015
16:15:01,915 --> 16:15:07,519
a feel for the gke cluster as we will be

23016
16:15:05,199 --> 16:15:09,680
getting more involved with it over the

23017
16:15:07,519 --> 16:15:11,755
next couple of demos and so that's

23018
16:15:09,680 --> 16:15:14,319
pretty much all i wanted to cover when

23019
16:15:11,756 --> 16:15:16,955
it comes to creating and setting up a

23020
16:15:14,319 --> 16:15:19,116
gke cluster so you can now mark this as

23021
16:15:16,955 --> 16:15:21,199
complete and whenever you're ready join

23022
16:15:19,116 --> 16:15:23,276
me in the console in the next one where

23023
16:15:21,199 --> 16:15:26,159
you will be building your box a bow ties

23024
16:15:23,275 --> 16:15:27,756
container to deploy to your new cluster

23025
16:15:26,160 --> 16:15:29,916
but if you are not planning to go

23026
16:15:27,756 --> 16:15:32,080
straight into the next demo i do

23027
16:15:29,915 --> 16:15:34,879
recommend that you delete your cluster

23028
16:15:32,080 --> 16:15:36,955
to avoid any unnecessary costs and

23029
16:15:34,879 --> 16:15:38,469
recreate it when you are ready to go

23030
16:15:36,955 --> 16:15:42,400
into the next demo

23031
16:15:38,470 --> 16:15:45,200
[Music]

23032
16:15:42,400 --> 16:15:47,840
welcome back now in the last lesson you

23033
16:15:45,199 --> 16:15:50,239
built a custom gke cluster and

23034
16:15:47,839 --> 16:15:52,719
configured the cube ctl command line

23035
16:15:50,239 --> 16:15:54,955
tool to interact with the cluster in

23036
16:15:52,720 --> 16:15:58,080
this lesson you're going to be building

23037
16:15:54,955 --> 16:16:00,479
a docker image for a box of bow ties

23038
16:15:58,080 --> 16:16:03,040
using cloud build which will then be

23039
16:16:00,480 --> 16:16:05,596
pushed over to google cloud container

23040
16:16:03,040 --> 16:16:08,319
registry so that you can deploy it to

23041
16:16:05,595 --> 16:16:10,559
your current gke cluster and so as you

23042
16:16:08,319 --> 16:16:13,360
can see there's a lot to do here so with

23043
16:16:10,559 --> 16:16:15,519
that being said let's dive in so now the

23044
16:16:13,360 --> 16:16:18,239
first thing that you want to do is to

23045
16:16:15,519 --> 16:16:20,319
clone your repo within cloud shell so

23046
16:16:18,239 --> 16:16:22,239
you can run the necessary commands to

23047
16:16:20,319 --> 16:16:24,080
build your image so i'm going to go up

23048
16:16:22,239 --> 16:16:25,915
here to the top right and i'm going to

23049
16:16:24,080 --> 16:16:27,916
open up cloud shell i'm going to make

23050
16:16:25,915 --> 16:16:30,399
sure that i'm in my home directory so

23051
16:16:27,915 --> 16:16:31,435
i'm going to run the command cd space

23052
16:16:30,400 --> 16:16:33,916
tilde

23053
16:16:31,436 --> 16:16:36,560
hit enter and i'm in my home directory

23054
16:16:33,915 --> 16:16:39,435
if i run the command ls i can see that i

23055
16:16:36,559 --> 16:16:42,479
only have cloud shell.txt and so now i'm

23056
16:16:39,436 --> 16:16:44,639
going to clone my github repository and

23057
16:16:42,480 --> 16:16:47,520
i'll have a link in the instructions in

23058
16:16:44,639 --> 16:16:49,839
the github repo as well as having it in

23059
16:16:47,519 --> 16:16:52,879
the lesson text below and so the command

23060
16:16:49,839 --> 16:16:55,115
would be git clone along with the https

23061
16:16:52,879 --> 16:16:56,479
address of the github repo and i'm going

23062
16:16:55,116 --> 16:16:58,560
to hit enter

23063
16:16:56,480 --> 16:17:00,560
and it's finished cloning my repo i'm

23064
16:16:58,559 --> 16:17:03,040
going to quickly clear my screen

23065
16:17:00,559 --> 16:17:05,199
and i'm going to run the command ls and

23066
16:17:03,040 --> 16:17:07,436
i can see my repo here and now i'm going

23067
16:17:05,199 --> 16:17:10,159
to drill down into the directory by

23068
16:17:07,436 --> 16:17:13,360
running cd google cloud associate cloud

23069
16:17:10,160 --> 16:17:15,680
engineer if i run an ls i can see all my

23070
16:17:13,360 --> 16:17:18,160
clone files and folders and so now the

23071
16:17:15,680 --> 16:17:20,559
files that we need are going to be found

23072
16:17:18,160 --> 16:17:23,116
in the box of bowties folder under

23073
16:17:20,559 --> 16:17:24,639
kubernetes engine and containers so i'm

23074
16:17:23,116 --> 16:17:28,240
going to change directories to that

23075
16:17:24,639 --> 16:17:31,116
location and run ls and under box of bow

23076
16:17:28,239 --> 16:17:33,275
ties is a folder called container which

23077
16:17:31,116 --> 16:17:36,080
will have all the necessary files that

23078
16:17:33,275 --> 16:17:39,115
you need in order to build your image we

23079
16:17:36,080 --> 16:17:41,955
have the jpeg for box of bow ties we

23080
16:17:39,116 --> 16:17:44,319
have the docker file and we have our

23081
16:17:41,955 --> 16:17:46,400
index.html and so these are the three

23082
16:17:44,319 --> 16:17:48,879
files that we need in order to build the

23083
16:17:46,400 --> 16:17:51,360
image and so as i said before we are

23084
16:17:48,879 --> 16:17:53,755
going to be using a tool called cloud

23085
16:17:51,360 --> 16:17:56,400
build which we have not discussed yet

23086
16:17:53,756 --> 16:17:58,880
cloudbuild is a serverless ci cd

23087
16:17:56,400 --> 16:18:01,200
platform that allows me to package

23088
16:17:58,879 --> 16:18:03,435
source code into containers and you can

23089
16:18:01,199 --> 16:18:05,755
get really fancy with cloud build but

23090
16:18:03,436 --> 16:18:08,319
we're not going to be setting up any ci

23091
16:18:05,756 --> 16:18:11,040
cd pipelines we're merely using cloud

23092
16:18:08,319 --> 16:18:13,519
build to build our image and to push it

23093
16:18:11,040 --> 16:18:16,400
out to container registry as well

23094
16:18:13,519 --> 16:18:18,955
container registry is google cloud's

23095
16:18:16,400 --> 16:18:21,840
private docker repository where you can

23096
16:18:18,955 --> 16:18:25,275
manage your docker images and integrates

23097
16:18:21,839 --> 16:18:26,319
with cloud build gke app engine cloud

23098
16:18:25,275 --> 16:18:29,680
functions

23099
16:18:26,319 --> 16:18:31,595
and other repos like github or bitbucket

23100
16:18:29,680 --> 16:18:34,239
and it allows for an amazing build

23101
16:18:31,595 --> 16:18:36,479
experience with absolutely no heavy

23102
16:18:34,239 --> 16:18:38,955
lifting and because you're able to build

23103
16:18:36,480 --> 16:18:40,956
images without having to leave google

23104
16:18:38,955 --> 16:18:43,519
cloud i figured that this would be a

23105
16:18:40,955 --> 16:18:45,595
great time to highlight these services

23106
16:18:43,519 --> 16:18:48,319
so getting back to it we've cloned the

23107
16:18:45,595 --> 16:18:50,239
repo and so we have our files here in

23108
16:18:48,319 --> 16:18:52,000
cloud shell and so what you want to do

23109
16:18:50,239 --> 16:18:55,199
now is you want to make sure the cloud

23110
16:18:52,000 --> 16:18:57,595
build api has been enabled as this is a

23111
16:18:55,199 --> 16:18:59,435
service that we haven't used before now

23112
16:18:57,595 --> 16:19:01,756
we can go through the console and enable

23113
16:18:59,436 --> 16:19:03,520
the api there but i'm going to run it

23114
16:19:01,756 --> 16:19:06,239
here from cloud shell and i'm going to

23115
16:19:03,519 --> 16:19:09,680
paste in the command gcloud services

23116
16:19:06,239 --> 16:19:11,595
enable cloudbuild.googleapis.com

23117
16:19:09,680 --> 16:19:14,160
i'm going to hit enter and you should

23118
16:19:11,595 --> 16:19:16,079
get a prompt asking you to authorize the

23119
16:19:14,160 --> 16:19:17,360
api call you definitely want to

23120
16:19:16,080 --> 16:19:19,840
authorize

23121
16:19:17,360 --> 16:19:22,639
should take a few seconds all right and

23122
16:19:19,839 --> 16:19:24,079
the api has been enabled for cloud build

23123
16:19:22,639 --> 16:19:26,400
so now i'm going to quickly clear my

23124
16:19:24,080 --> 16:19:28,796
screen and so because i want to show you

23125
16:19:26,400 --> 16:19:30,160
exactly what cloud build is doing i want

23126
16:19:28,796 --> 16:19:31,916
to head on over there through the

23127
16:19:30,160 --> 16:19:34,080
console and so i'm going to go over to

23128
16:19:31,915 --> 16:19:36,955
the navigation menu and i'm going to

23129
16:19:34,080 --> 16:19:38,639
scroll down to tools until you come to

23130
16:19:36,955 --> 16:19:40,559
cloud build

23131
16:19:38,639 --> 16:19:43,116
and as expected there is nothing here in

23132
16:19:40,559 --> 16:19:45,040
the build history as well not a lot here

23133
16:19:43,116 --> 16:19:47,436
to interact with and so now you're going

23134
16:19:45,040 --> 16:19:48,559
to run the command that builds the image

23135
16:19:47,436 --> 16:19:50,720
and so you're going to paste that

23136
16:19:48,559 --> 16:19:54,199
command into the cloud shell which is

23137
16:19:50,720 --> 16:19:56,639
gcloud builds submit dash dash tag

23138
16:19:54,199 --> 16:19:59,115
gcr.io which is the google cloud

23139
16:19:56,639 --> 16:20:01,360
container registry our variable for our

23140
16:19:59,116 --> 16:20:06,319
google cloud project along with the

23141
16:20:01,360 --> 16:20:08,319
image name of box bow ties version 1.0.0

23142
16:20:06,319 --> 16:20:10,239
and please don't forget the trailing dot

23143
16:20:08,319 --> 16:20:12,400
at the end i'm going to go ahead and hit

23144
16:20:10,239 --> 16:20:15,040
enter cloud build will now compress the

23145
16:20:12,400 --> 16:20:17,840
files and move them to a cloud storage

23146
16:20:15,040 --> 16:20:20,080
bucket and then cloud build takes those

23147
16:20:17,839 --> 16:20:22,955
files from the bucket and uses the

23148
16:20:20,080 --> 16:20:24,955
docker file to execute the docker build

23149
16:20:22,955 --> 16:20:27,436
process and so i'm going to pause the

23150
16:20:24,955 --> 16:20:29,680
video here till the build completes and

23151
16:20:27,436 --> 16:20:32,319
i'll be back in a flash okay and the

23152
16:20:29,680 --> 16:20:34,720
image is complete and is now showing up

23153
16:20:32,319 --> 16:20:36,955
in the build history in the cloud build

23154
16:20:34,720 --> 16:20:39,116
dashboard and so if i want to drill down

23155
16:20:36,955 --> 16:20:41,116
into the actual build right beside the

23156
16:20:39,116 --> 16:20:42,955
green check mark you will see the hot

23157
16:20:41,116 --> 16:20:45,596
link so you can just simply click on

23158
16:20:42,955 --> 16:20:48,239
that and here you will see a build

23159
16:20:45,595 --> 16:20:51,115
summary with the build log

23160
16:20:48,239 --> 16:20:53,360
the execution details along with the

23161
16:20:51,116 --> 16:20:55,116
build artifacts and as well the

23162
16:20:53,360 --> 16:20:57,840
compressed files are stored in cloud

23163
16:20:55,116 --> 16:21:00,000
storage and it has a hot link right here

23164
16:20:57,839 --> 16:21:03,519
if i wanted to download the build log i

23165
16:21:00,000 --> 16:21:07,199
can do so here and i conveniently have a

23166
16:21:03,519 --> 16:21:09,359
hot link to the image of box of bow ties

23167
16:21:07,199 --> 16:21:11,435
and this will bring me to my container

23168
16:21:09,360 --> 16:21:12,955
registry so you can go ahead and click

23169
16:21:11,436 --> 16:21:15,200
on the link

23170
16:21:12,955 --> 16:21:17,360
it should open up another tab and bring

23171
16:21:15,199 --> 16:21:19,595
you right to the page of the image that

23172
16:21:17,360 --> 16:21:21,360
covers a lot of its details now the

23173
16:21:19,595 --> 16:21:24,319
great thing i love about container

23174
16:21:21,360 --> 16:21:25,756
registry is again it's so tightly

23175
16:21:24,319 --> 16:21:28,559
coupled with a lot of the other

23176
16:21:25,756 --> 16:21:31,680
resources within google cloud that i am

23177
16:21:28,559 --> 16:21:35,275
able to simply deploy right from here

23178
16:21:31,680 --> 16:21:37,360
and i can deploy to cloud run to gke as

23179
16:21:35,275 --> 16:21:39,839
well as compute engine now i could

23180
16:21:37,360 --> 16:21:42,239
simply deploy this image right from here

23181
16:21:39,839 --> 16:21:44,319
but i wanted to do it from gke so i'm

23182
16:21:42,239 --> 16:21:45,756
going to go back over to gke in the

23183
16:21:44,319 --> 16:21:48,080
other tab i'm going to go to the

23184
16:21:45,756 --> 16:21:48,955
navigation menu go down to kubernetes

23185
16:21:48,080 --> 16:21:51,040
engine

23186
16:21:48,955 --> 16:21:53,360
and i'm going to go up to the top menu

23187
16:21:51,040 --> 16:21:55,360
and click on deploy it's going to ask

23188
16:21:53,360 --> 16:21:57,360
for the image you want to deploy and you

23189
16:21:55,360 --> 16:21:59,360
want to click on select to select a new

23190
16:21:57,360 --> 16:22:01,595
container image and you should have a

23191
16:21:59,360 --> 16:22:04,239
menu pop up from the right hand side of

23192
16:22:01,595 --> 16:22:06,795
your screen and under container registry

23193
16:22:04,239 --> 16:22:09,275
you should see box of bow ties you can

23194
16:22:06,796 --> 16:22:11,916
expand the node here and simply click on

23195
16:22:09,275 --> 16:22:13,839
the image and then hit select

23196
16:22:11,915 --> 16:22:16,239
and so now the container image has been

23197
16:22:13,839 --> 16:22:18,639
populated into my image path and you

23198
16:22:16,239 --> 16:22:21,199
want to scroll down and if i wanted to i

23199
16:22:18,639 --> 16:22:23,519
could add another container and even add

23200
16:22:21,199 --> 16:22:25,435
some environment variables and so we're

23201
16:22:23,519 --> 16:22:27,595
not looking to do that right now so you

23202
16:22:25,436 --> 16:22:29,360
can simply click on continue and you're

23203
16:22:27,595 --> 16:22:31,680
going to be prompted with some fields to

23204
16:22:29,360 --> 16:22:34,239
fill out for your configuration on your

23205
16:22:31,680 --> 16:22:37,360
deployment and so the application name

23206
16:22:34,239 --> 16:22:38,795
is going to be called box of bow ties

23207
16:22:37,360 --> 16:22:41,680
i'm going to keep it in the default

23208
16:22:38,796 --> 16:22:45,436
namespace as well i'm going to keep the

23209
16:22:41,680 --> 16:22:47,519
key value pair as app box of bow ties

23210
16:22:45,436 --> 16:22:49,840
for my labels and because this

23211
16:22:47,519 --> 16:22:52,000
configuration will create a deployment

23212
16:22:49,839 --> 16:22:54,559
file for me you can always have a look

23213
16:22:52,000 --> 16:22:56,955
at the manifest by clicking on the view

23214
16:22:54,559 --> 16:22:59,360
yaml button before it's deployed and

23215
16:22:56,955 --> 16:23:01,915
this is always good practice before you

23216
16:22:59,360 --> 16:23:04,400
deploy any workload so as you can see

23217
16:23:01,915 --> 16:23:06,719
here at the top i have the kind as

23218
16:23:04,400 --> 16:23:09,360
deployment the name as well as the

23219
16:23:06,720 --> 16:23:12,720
namespace my labels

23220
16:23:09,360 --> 16:23:15,199
replicas of three as well as my selector

23221
16:23:12,720 --> 16:23:17,595
and my spec down here at the bottom as

23222
16:23:15,199 --> 16:23:18,479
well this manifest also holds another

23223
16:23:17,595 --> 16:23:21,199
kind

23224
16:23:18,480 --> 16:23:22,880
of horizontal pod auto scaler and is

23225
16:23:21,199 --> 16:23:25,039
coupled with the deployment in this

23226
16:23:22,879 --> 16:23:27,275
manifest due to the reference of the

23227
16:23:25,040 --> 16:23:29,595
deployment itself and so it's always

23228
16:23:27,275 --> 16:23:32,079
common practice to try and group the

23229
16:23:29,595 --> 16:23:34,319
manifest together whenever you can and

23230
16:23:32,080 --> 16:23:36,796
so this is a really cool feature to take

23231
16:23:34,319 --> 16:23:38,796
advantage of on gke so i'm going to

23232
16:23:36,796 --> 16:23:40,796
close this now and i'm actually going to

23233
16:23:38,796 --> 16:23:43,116
close cloud shell as i don't need it

23234
16:23:40,796 --> 16:23:45,840
right now as well you can see here that

23235
16:23:43,116 --> 16:23:49,680
it's going to deploy to my kubernetes

23236
16:23:45,839 --> 16:23:52,639
cluster of bow tie cluster in us east 1b

23237
16:23:49,680 --> 16:23:54,955
and if i wanted to i can deploy it to a

23238
16:23:52,639 --> 16:23:57,360
new cluster and if i had any other

23239
16:23:54,955 --> 16:23:59,680
clusters in my environment they would

23240
16:23:57,360 --> 16:24:02,000
show up here and i'd be able to select

23241
16:23:59,680 --> 16:24:04,080
from them as well but bow tie cluster is

23242
16:24:02,000 --> 16:24:06,160
the only one that i have and so now that

23243
16:24:04,080 --> 16:24:08,480
you've completed your configuration for

23244
16:24:06,160 --> 16:24:10,320
your deployment you can simply click on

23245
16:24:08,480 --> 16:24:12,000
deploy this is just going to take a

23246
16:24:10,319 --> 16:24:14,319
couple minutes so i'm just going to

23247
16:24:12,000 --> 16:24:16,720
pause the video here and i'll be back as

23248
16:24:14,319 --> 16:24:19,040
soon as the deployment is done okay the

23249
16:24:16,720 --> 16:24:21,275
workload has been deployed and i got

23250
16:24:19,040 --> 16:24:23,360
some default messages that popped up i

23251
16:24:21,275 --> 16:24:25,436
can set an automated pipeline for this

23252
16:24:23,360 --> 16:24:27,595
workload but we're not going to do that

23253
16:24:25,436 --> 16:24:29,840
for this demo but feel free to try it on

23254
16:24:27,595 --> 16:24:32,399
your own later if you'd like and we will

23255
16:24:29,839 --> 16:24:34,159
want to expose our service as we want to

23256
16:24:32,400 --> 16:24:36,160
see if it's up and running and we're

23257
16:24:34,160 --> 16:24:37,916
going to take care of that in just a bit

23258
16:24:36,160 --> 16:24:40,240
and so if i scroll through some of the

23259
16:24:37,915 --> 16:24:43,360
details here i can see that i have some

23260
16:24:40,239 --> 16:24:44,479
metrics here for cpu memory and disk the

23261
16:24:43,360 --> 16:24:45,756
cluster

23262
16:24:44,480 --> 16:24:48,080
namespace

23263
16:24:45,756 --> 16:24:50,720
labels and all the pods that it's

23264
16:24:48,080 --> 16:24:53,520
running on basically a live visual

23265
16:24:50,720 --> 16:24:55,595
representation of my deployment if i

23266
16:24:53,519 --> 16:24:58,239
scroll back up to the top i can dive

23267
16:24:55,595 --> 16:25:01,040
into some details events

23268
16:24:58,239 --> 16:25:03,595
and even my manifest i can also copy my

23269
16:25:01,040 --> 16:25:05,680
manifest and download it if i'd like so

23270
16:25:03,595 --> 16:25:08,399
as you can see a lot of different

23271
16:25:05,680 --> 16:25:10,559
options and so now i want to verify my

23272
16:25:08,400 --> 16:25:13,275
deployment and so i'm going to use the

23273
16:25:10,559 --> 16:25:16,000
cube ctl command line tool to run some

23274
16:25:13,275 --> 16:25:18,079
commands to verify the information so

23275
16:25:16,000 --> 16:25:19,519
i'm going to open back up my cloud shell

23276
16:25:18,080 --> 16:25:21,436
and make this a little bit bigger for

23277
16:25:19,519 --> 16:25:24,639
better viewing and i'm going to run the

23278
16:25:21,436 --> 16:25:27,436
command cubectl get all

23279
16:25:24,639 --> 16:25:29,680
and as you can see here i have a list of

23280
16:25:27,436 --> 16:25:32,000
all the pods that are running the name

23281
16:25:29,680 --> 16:25:34,559
of the service the deployment the

23282
16:25:32,000 --> 16:25:36,239
replica set everything about my cluster

23283
16:25:34,559 --> 16:25:38,239
and my deployment and you should be

23284
16:25:36,239 --> 16:25:40,479
seeing the same when running this

23285
16:25:38,239 --> 16:25:42,479
command and so next you want to pull up

23286
16:25:40,480 --> 16:25:44,720
the details on your deployments in the

23287
16:25:42,480 --> 16:25:48,480
cluster and so the command for that is

23288
16:25:44,720 --> 16:25:50,239
cube ctl get deployments and it came out

23289
16:25:48,480 --> 16:25:52,400
kind of crammed at the bottom so i'm

23290
16:25:50,239 --> 16:25:54,159
going to simply clear my screen and run

23291
16:25:52,400 --> 16:25:56,319
that command again

23292
16:25:54,160 --> 16:25:58,480
and as you can see the box of bowties

23293
16:25:56,319 --> 16:26:00,796
deployment is displayed how many

23294
16:25:58,480 --> 16:26:02,796
replicas that are available how many of

23295
16:26:00,796 --> 16:26:04,880
those replicas achieve their desired

23296
16:26:02,796 --> 16:26:07,040
state and along with how long the

23297
16:26:04,879 --> 16:26:09,595
application has been running and so now

23298
16:26:07,040 --> 16:26:12,080
i want to dive into my pods and in order

23299
16:26:09,595 --> 16:26:16,079
to do that i'm going to run the command

23300
16:26:12,080 --> 16:26:18,955
cube ctl get pods and here i can see all

23301
16:26:16,080 --> 16:26:20,400
my pods now if i wanted to look at a

23302
16:26:18,955 --> 16:26:23,519
list of events

23303
16:26:20,400 --> 16:26:27,596
for a specific pod the command for that

23304
16:26:23,519 --> 16:26:30,239
would be cubectl describe pod and then

23305
16:26:27,595 --> 16:26:32,720
the name of one of the pods so i'm going

23306
16:26:30,239 --> 16:26:34,400
to pick this first one copy that i'm

23307
16:26:32,720 --> 16:26:36,720
going to paste it and i'm going to hit

23308
16:26:34,400 --> 16:26:39,436
enter and here i can see all the events

23309
16:26:36,720 --> 16:26:41,916
that have occurred for this pod as well

23310
16:26:39,436 --> 16:26:44,639
i also have access to some other

23311
16:26:41,915 --> 16:26:47,519
information with regards to volumes

23312
16:26:44,639 --> 16:26:50,319
conditions and even the container and

23313
16:26:47,519 --> 16:26:52,399
image ids and this is a great command to

23314
16:26:50,319 --> 16:26:54,319
use for when you're troubleshooting your

23315
16:26:52,400 --> 16:26:56,560
pods and you're trying to get to the

23316
16:26:54,319 --> 16:26:58,796
bottom of a problem and so now the final

23317
16:26:56,559 --> 16:27:01,435
step that you want to do is you want to

23318
16:26:58,796 --> 16:27:03,116
be able to expose your application so

23319
16:27:01,436 --> 16:27:05,116
you can check to see if it's running

23320
16:27:03,116 --> 16:27:06,955
properly and so we're going to go ahead

23321
16:27:05,116 --> 16:27:08,955
and do that through the console so i'm

23322
16:27:06,955 --> 16:27:11,116
going to close down cloud shell and i'm

23323
16:27:08,955 --> 16:27:12,955
going to go to overview and scroll down

23324
16:27:11,116 --> 16:27:15,840
to the bottom click on the button that

23325
16:27:12,955 --> 16:27:17,756
says expose and if i wanted to i can do

23326
16:27:15,839 --> 16:27:20,479
it from up here in the top right hand

23327
16:27:17,756 --> 16:27:22,720
corner where it says expose deployment

23328
16:27:20,480 --> 16:27:25,116
so i'm going to click on expose and this

23329
16:27:22,720 --> 16:27:27,756
probably looks very familiar to you as

23330
16:27:25,116 --> 16:27:30,160
this is a graphical representation of

23331
16:27:27,756 --> 16:27:32,160
the services manifest and so the port

23332
16:27:30,160 --> 16:27:34,956
mapping here will cover the ports

23333
16:27:32,160 --> 16:27:37,596
configuration of the services manifest

23334
16:27:34,955 --> 16:27:40,080
starting here with port target port as

23335
16:27:37,595 --> 16:27:42,239
well as protocol for target port i'm

23336
16:27:40,080 --> 16:27:44,319
going to open up port 80. here under

23337
16:27:42,239 --> 16:27:46,559
service type you have the option of

23338
16:27:44,319 --> 16:27:49,275
selecting cluster ip

23339
16:27:46,559 --> 16:27:51,115
node port or load balancer and the

23340
16:27:49,275 --> 16:27:53,275
service type you want to use is going to

23341
16:27:51,116 --> 16:27:56,639
be low balancer and we can keep the

23342
16:27:53,275 --> 16:27:59,040
service name as box of bowties service

23343
16:27:56,639 --> 16:28:01,275
and again you can view the manifest file

23344
16:27:59,040 --> 16:28:03,275
for this service and you can copy or

23345
16:28:01,275 --> 16:28:04,559
download it if you need to but we don't

23346
16:28:03,275 --> 16:28:07,360
need this right now so i'm going to

23347
16:28:04,559 --> 16:28:10,239
close it in a pretty simple process

23348
16:28:07,360 --> 16:28:12,400
so all i need to do is click on expose

23349
16:28:10,239 --> 16:28:14,879
and within a minute or two you should

23350
16:28:12,400 --> 16:28:17,436
have your service up and running with

23351
16:28:14,879 --> 16:28:19,680
your shiny new low balancer okay and the

23352
16:28:17,436 --> 16:28:22,319
service has been created and as you can

23353
16:28:19,680 --> 16:28:24,480
see we're under the services and ingress

23354
16:28:22,319 --> 16:28:26,879
from the left hand menu and if i go back

23355
16:28:24,480 --> 16:28:29,276
to the main page of services in ingress

23356
16:28:26,879 --> 16:28:31,360
you can see that box a bow tie service

23357
16:28:29,275 --> 16:28:34,159
is the only one that's here i also have

23358
16:28:31,360 --> 16:28:36,000
the option of creating a service type

23359
16:28:34,160 --> 16:28:37,756
ingress but we don't want to do that

23360
16:28:36,000 --> 16:28:40,400
right now so i'm going to go back to

23361
16:28:37,756 --> 16:28:42,955
services and here you will see your

23362
16:28:40,400 --> 16:28:45,040
endpoint and this is the hot link that

23363
16:28:42,955 --> 16:28:46,795
should bring you to your application so

23364
16:28:45,040 --> 16:28:50,239
you can click on it now you'll get a

23365
16:28:46,796 --> 16:28:53,436
redirect notice as it is only http and

23366
16:28:50,239 --> 16:28:56,400
not https so it's safe to click on it so

23367
16:28:53,436 --> 16:28:59,040
i'm going to click on it now and success

23368
16:28:56,400 --> 16:29:01,116
and here is your box of bow ties

23369
16:28:59,040 --> 16:29:03,200
what were you expecting and so i wanted

23370
16:29:01,116 --> 16:29:06,160
to congratulate you on deploying your

23371
16:29:03,199 --> 16:29:09,360
first application box of bow ties on

23372
16:29:06,160 --> 16:29:11,596
your gke cluster and so just as a recap

23373
16:29:09,360 --> 16:29:13,436
you've cloned your repo into your cloud

23374
16:29:11,595 --> 16:29:16,079
shell environment you then built a

23375
16:29:13,436 --> 16:29:18,720
container image using cloud build and

23376
16:29:16,080 --> 16:29:21,116
pushed the image to container registry

23377
16:29:18,720 --> 16:29:24,080
you then created a deployment using this

23378
16:29:21,116 --> 16:29:26,880
image and verified the deployment using

23379
16:29:24,080 --> 16:29:29,520
the cube ctl command line tool you then

23380
16:29:26,879 --> 16:29:32,719
launched a service of type low balancer

23381
16:29:29,519 --> 16:29:35,199
to expose your application and verified

23382
16:29:32,720 --> 16:29:37,680
that your application was working so

23383
16:29:35,199 --> 16:29:39,435
fantastic job on your part and that's

23384
16:29:37,680 --> 16:29:40,955
pretty much all i wanted to cover in

23385
16:29:39,436 --> 16:29:43,436
this part of the demo

23386
16:29:40,955 --> 16:29:45,199
so you can now mark this as complete and

23387
16:29:43,436 --> 16:29:47,436
whenever you're ready join me in the

23388
16:29:45,199 --> 16:29:49,360
console for the next part of the demo

23389
16:29:47,436 --> 16:29:52,160
where you will manage your workload on

23390
16:29:49,360 --> 16:29:54,480
the gke cluster so please be aware of

23391
16:29:52,160 --> 16:29:57,200
the charges incurred on your currently

23392
16:29:54,480 --> 16:30:00,000
deployed cluster if you plan to do the

23393
16:29:57,199 --> 16:30:02,000
next demo at a later date again you can

23394
16:30:00,000 --> 16:30:05,239
mark this as complete and i'll see you

23395
16:30:02,000 --> 16:30:05,239
in the next

23396
16:30:07,040 --> 16:30:13,040
welcome back in the last couple of demo

23397
16:30:09,680 --> 16:30:14,955
lessons you built a custom gke cluster

23398
16:30:13,040 --> 16:30:17,595
and deployed the box of bowties

23399
16:30:14,955 --> 16:30:20,879
application in this lesson you will be

23400
16:30:17,595 --> 16:30:23,199
interacting with this workload on gke by

23401
16:30:20,879 --> 16:30:25,755
scaling the application editing your

23402
16:30:23,199 --> 16:30:28,479
application and rebuilding your docker

23403
16:30:25,756 --> 16:30:30,796
image so you can do a rolling update to

23404
16:30:28,480 --> 16:30:32,880
the current workload in your cluster now

23405
16:30:30,796 --> 16:30:35,840
there's a lot to do here so with that

23406
16:30:32,879 --> 16:30:38,399
being said let's dive in so continuing

23407
16:30:35,839 --> 16:30:41,275
where we left off you currently have

23408
16:30:38,400 --> 16:30:43,756
your box of bow ties workload deployed

23409
16:30:41,275 --> 16:30:45,839
on your gke cluster and so the first

23410
16:30:43,756 --> 16:30:48,160
thing you want to do is scale your

23411
16:30:45,839 --> 16:30:51,275
deployment and you are looking to scale

23412
16:30:48,160 --> 16:30:53,680
down your cluster to one pod and then

23413
16:30:51,275 --> 16:30:56,559
back up again to three and this is just

23414
16:30:53,680 --> 16:30:59,756
to simulate scaling your workload so

23415
16:30:56,559 --> 16:31:02,319
whether it be ten pods or one the action

23416
16:30:59,756 --> 16:31:04,480
is still the same so now we can easily

23417
16:31:02,319 --> 16:31:07,116
do it through the console by drilling

23418
16:31:04,480 --> 16:31:09,276
down into the box of bowties workload

23419
16:31:07,116 --> 16:31:12,160
going up to the top menu and clicking on

23420
16:31:09,275 --> 16:31:14,720
actions and clicking on scale and here i

23421
16:31:12,160 --> 16:31:16,956
can indicate how many replicas i'd like

23422
16:31:14,720 --> 16:31:19,275
and scale it accordingly and so i wanted

23423
16:31:16,955 --> 16:31:21,275
to do this using the command line so i'm

23424
16:31:19,275 --> 16:31:23,839
going to cancel out of here and then i'm

23425
16:31:21,275 --> 16:31:25,756
going to open up cloud shell instead

23426
16:31:23,839 --> 16:31:28,239
okay and now that you have cloud shell

23427
16:31:25,756 --> 16:31:31,275
open up you want to run the command cube

23428
16:31:28,239 --> 16:31:34,000
ctl get pods to show the currently

23429
16:31:31,275 --> 16:31:36,079
running available pods for the box of

23430
16:31:34,000 --> 16:31:38,400
bowties workload and you may get a

23431
16:31:36,080 --> 16:31:40,400
pop-up asking you to authorize the api

23432
16:31:38,400 --> 16:31:42,480
call using your credentials and you

23433
16:31:40,400 --> 16:31:44,955
definitely want to authorize and here

23434
16:31:42,480 --> 16:31:46,720
you will get a list of all the pods that

23435
16:31:44,955 --> 16:31:49,040
are running your box of bow ties

23436
16:31:46,720 --> 16:31:52,319
workload and so now since you want to

23437
16:31:49,040 --> 16:31:55,200
scale your replicas down to one you can

23438
16:31:52,319 --> 16:31:57,756
run this command cube ctl scale

23439
16:31:55,199 --> 16:32:00,955
deployment and your workload which is

23440
16:31:57,756 --> 16:32:03,680
box of bowties dash dash replicas is

23441
16:32:00,955 --> 16:32:05,040
equal to one you can hit enter and it is

23442
16:32:03,680 --> 16:32:07,840
now scaled

23443
16:32:05,040 --> 16:32:11,116
and in order to verify that i'm going to

23444
16:32:07,839 --> 16:32:13,679
run cube ctl get pods and notice that

23445
16:32:11,116 --> 16:32:16,080
there is only one pod running with my

23446
16:32:13,680 --> 16:32:18,319
box of bow ties workload and in order

23447
16:32:16,080 --> 16:32:20,955
for me to scale my deployment back up to

23448
16:32:18,319 --> 16:32:23,756
three replicas i can simply run the same

23449
16:32:20,955 --> 16:32:26,720
command but change the replicas from 1

23450
16:32:23,756 --> 16:32:29,360
to 3. hit enter it's been scaled i'm

23451
16:32:26,720 --> 16:32:31,595
going to run cube ctl get pods and

23452
16:32:29,360 --> 16:32:33,840
notice that i am now back up to 3

23453
16:32:31,595 --> 16:32:35,839
replicas and so as you can see

23454
16:32:33,839 --> 16:32:38,000
increasing or decreasing the number of

23455
16:32:35,839 --> 16:32:41,275
replicas in order to scale your

23456
16:32:38,000 --> 16:32:42,955
application is pretty simple to do okay

23457
16:32:41,275 --> 16:32:44,955
so now that you've learned how to scale

23458
16:32:42,955 --> 16:32:47,275
your application you're gonna learn how

23459
16:32:44,955 --> 16:32:49,756
to perform a rolling update but in order

23460
16:32:47,275 --> 16:32:51,519
to do that you need to make changes to

23461
16:32:49,756 --> 16:32:54,160
your application and so what you're

23462
16:32:51,519 --> 16:32:56,559
going to do is edit your application

23463
16:32:54,160 --> 16:32:58,796
then rebuild your docker image and apply

23464
16:32:56,559 --> 16:33:01,040
a rolling update and in order to do that

23465
16:32:58,796 --> 16:33:02,956
we can stay here in cloud shell as

23466
16:33:01,040 --> 16:33:05,040
you're going to edit the file in cloud

23467
16:33:02,955 --> 16:33:07,040
shell editor i'm going to first clear my

23468
16:33:05,040 --> 16:33:09,116
screen i'm going to change directory

23469
16:33:07,040 --> 16:33:11,595
into my home directory and now you want

23470
16:33:09,116 --> 16:33:13,596
to change directories to your container

23471
16:33:11,595 --> 16:33:16,000
folder where the files are that i need

23472
16:33:13,595 --> 16:33:18,000
to edit i'm going to run ls and here's

23473
16:33:16,000 --> 16:33:20,360
the files that i need and so what you're

23474
16:33:18,000 --> 16:33:23,040
going to do now is edit the

23475
16:33:20,360 --> 16:33:26,840
index.html file and the easiest way to

23476
16:33:23,040 --> 16:33:29,756
do that is to simply type in edit

23477
16:33:26,839 --> 16:33:32,519
index.html and hit enter and this will

23478
16:33:29,756 --> 16:33:35,520
open up your editor so you can edit your

23479
16:33:32,519 --> 16:33:37,755
index.html file and if you remember when

23480
16:33:35,519 --> 16:33:40,559
we launched our application it looked

23481
16:33:37,756 --> 16:33:42,319
exactly like this and so instead of what

23482
16:33:40,559 --> 16:33:44,399
were you expecting we're going to

23483
16:33:42,319 --> 16:33:46,159
actually change that text to something a

23484
16:33:44,400 --> 16:33:48,560
little different and so i'm going to go

23485
16:33:46,160 --> 16:33:51,200
back to the editor in my other tab and

23486
16:33:48,559 --> 16:33:53,839
where it says what were you expecting

23487
16:33:51,199 --> 16:33:56,159
i'm going to actually change this to

23488
16:33:53,839 --> 16:33:58,319
well i could always use something to eat

23489
16:33:56,160 --> 16:34:00,956
then i'm going to go back up to the menu

23490
16:33:58,319 --> 16:34:03,199
click on file and click on save and so

23491
16:34:00,955 --> 16:34:05,436
now in order for me to deploy this i

23492
16:34:03,199 --> 16:34:07,595
need to rebuild my container and so i'm

23493
16:34:05,436 --> 16:34:09,200
going to go back to my terminal i'm

23494
16:34:07,595 --> 16:34:10,955
going to clear the screen and i'm going

23495
16:34:09,199 --> 16:34:13,915
to run the same command that i did the

23496
16:34:10,955 --> 16:34:17,116
last time which is gcloud build submit

23497
16:34:13,915 --> 16:34:19,595
dash dash tag gcr dot io with the

23498
16:34:17,116 --> 16:34:22,635
variable for your google cloud project

23499
16:34:19,595 --> 16:34:23,795
followed by the image box of bowties

23500
16:34:22,635 --> 16:34:26,400
colon

23501
16:34:23,796 --> 16:34:28,720
1.0.1 and so this will be a different

23502
16:34:26,400 --> 16:34:30,796
version of the image also don't forget

23503
16:34:28,720 --> 16:34:33,436
that trailing dot at the end and you can

23504
16:34:30,796 --> 16:34:35,840
hit enter and again this is the process

23505
16:34:33,436 --> 16:34:38,319
where cloud build compresses the files

23506
16:34:35,839 --> 16:34:40,719
moves them to a cloud storage bucket and

23507
16:34:38,319 --> 16:34:43,040
then takes the files from the bucket and

23508
16:34:40,720 --> 16:34:45,436
uses the docker file to execute the

23509
16:34:43,040 --> 16:34:47,360
docker build process and this will take

23510
16:34:45,436 --> 16:34:49,436
a couple minutes so i'm going to pause

23511
16:34:47,360 --> 16:34:51,595
the video here and i'll be back before

23512
16:34:49,436 --> 16:34:53,916
you can say cat in the hat okay and my

23513
16:34:51,595 --> 16:34:56,079
new image has been created and so i want

23514
16:34:53,915 --> 16:34:57,839
to head over to cloud build just to make

23515
16:34:56,080 --> 16:34:59,436
sure that there are no errors so i'm

23516
16:34:57,839 --> 16:35:01,115
going to close down cloud shell because

23517
16:34:59,436 --> 16:35:03,360
i don't need it right now i'm going to

23518
16:35:01,116 --> 16:35:05,520
head back up to the navigation menu and

23519
16:35:03,360 --> 16:35:07,756
scroll down to cloud build and under

23520
16:35:05,519 --> 16:35:10,079
build history you should see your second

23521
16:35:07,756 --> 16:35:12,319
build and if you drill down into it you

23522
16:35:10,080 --> 16:35:15,276
will see that the build was successful

23523
16:35:12,319 --> 16:35:18,436
and heading over to build artifacts you

23524
16:35:15,275 --> 16:35:20,879
should now see your new image as version

23525
16:35:18,436 --> 16:35:22,796
1.0.1 and so now i'm going to head over

23526
16:35:20,879 --> 16:35:24,635
to the registry and verify the image

23527
16:35:22,796 --> 16:35:26,956
there and it seems like everything looks

23528
16:35:24,635 --> 16:35:28,879
okay so now i'm gonna head back on over

23529
16:35:26,955 --> 16:35:31,275
to my gke cluster

23530
16:35:28,879 --> 16:35:33,360
i'm gonna go to the navigation menu down

23531
16:35:31,275 --> 16:35:35,756
to kubernetes engine and here i'm gonna

23532
16:35:33,360 --> 16:35:38,400
click on workloads i'm gonna select box

23533
16:35:35,756 --> 16:35:40,480
of bowties and up at the top menu you

23534
16:35:38,400 --> 16:35:42,796
can click on actions and select a

23535
16:35:40,480 --> 16:35:44,796
rolling update and here you are prompted

23536
16:35:42,796 --> 16:35:47,116
with a pop-up where you can enter in

23537
16:35:44,796 --> 16:35:49,116
your minimum seconds ready your maximum

23538
16:35:47,116 --> 16:35:51,680
search percentage as well as your

23539
16:35:49,116 --> 16:35:53,916
maximum unavailable percentage and so

23540
16:35:51,680 --> 16:35:57,756
here under container images i am

23541
16:35:53,915 --> 16:36:00,239
prompted to enter in the sha-256 hash of

23542
16:35:57,756 --> 16:36:04,400
this docker image now a docker image's

23543
16:36:00,239 --> 16:36:07,436
id is a digest which contains a sha-256

23544
16:36:04,400 --> 16:36:09,436
hash of the image's configuration and if

23545
16:36:07,436 --> 16:36:11,916
i go back over to the open tab for

23546
16:36:09,436 --> 16:36:14,319
container registry you can see here the

23547
16:36:11,915 --> 16:36:18,000
digest details to give you a little bit

23548
16:36:14,319 --> 16:36:20,319
more context along with the sha 256 hash

23549
16:36:18,000 --> 16:36:22,796
for the image that i need to deploy and

23550
16:36:20,319 --> 16:36:24,879
so you can copy this digest by simply

23551
16:36:22,796 --> 16:36:27,596
clicking on the copy button and then you

23552
16:36:24,879 --> 16:36:29,915
can head back on over to the gke console

23553
16:36:27,595 --> 16:36:32,079
head over to the container images

23554
16:36:29,915 --> 16:36:34,479
highlight the hash and paste in the new

23555
16:36:32,080 --> 16:36:36,955
hash and so when you copy it in make

23556
16:36:34,480 --> 16:36:40,636
sure it's still in the same format of

23557
16:36:36,955 --> 16:36:44,000
gcr dot io forward slash your project

23558
16:36:40,635 --> 16:36:46,559
name forward slash box of bow ties the

23559
16:36:44,000 --> 16:36:48,480
at symbol followed by the hash and so

23560
16:36:46,559 --> 16:36:50,879
once you've done that you can click on

23561
16:36:48,480 --> 16:36:53,276
the update button and this will schedule

23562
16:36:50,879 --> 16:36:55,435
an update for your application and as

23563
16:36:53,275 --> 16:36:57,115
you can see here at the top it says that

23564
16:36:55,436 --> 16:37:00,239
pods are pending

23565
16:36:57,116 --> 16:37:02,720
as well if i go down to active revisions

23566
16:37:00,239 --> 16:37:05,275
you can see here that there is a summary

23567
16:37:02,720 --> 16:37:06,796
and the status that pods are pending and

23568
16:37:05,275 --> 16:37:09,275
so just as a note

23569
16:37:06,796 --> 16:37:12,480
rolling updates allow the deployments

23570
16:37:09,275 --> 16:37:15,595
update to take place with zero downtime

23571
16:37:12,480 --> 16:37:17,756
by incrementally updating pods instances

23572
16:37:15,595 --> 16:37:20,239
with new ones so the pods will be

23573
16:37:17,756 --> 16:37:22,720
scheduled on nodes with available

23574
16:37:20,239 --> 16:37:25,360
resources and if the nodes do not have

23575
16:37:22,720 --> 16:37:27,360
enough resources the pods will stay in a

23576
16:37:25,360 --> 16:37:28,796
pending state but i don't think we're

23577
16:37:27,360 --> 16:37:31,520
going to have any problems with these

23578
16:37:28,796 --> 16:37:33,840
nodes as this application is very light

23579
16:37:31,519 --> 16:37:34,955
in resources and if i open up cloud

23580
16:37:33,839 --> 16:37:39,275
shell

23581
16:37:34,955 --> 16:37:41,595
and run a cube ctl get pods command

23582
16:37:39,275 --> 16:37:43,756
you will see that new pods have started

23583
16:37:41,595 --> 16:37:46,635
and you can tell this by the age of the

23584
16:37:43,756 --> 16:37:49,520
pod as well if you ran the command keep

23585
16:37:46,635 --> 16:37:51,680
ctl describe pod along with the pod name

23586
16:37:49,519 --> 16:37:54,239
you could also see the event logs when

23587
16:37:51,680 --> 16:37:57,360
the pod was created and if i close cloud

23588
16:37:54,239 --> 16:37:59,680
shell i can see up here at the top of my

23589
16:37:57,360 --> 16:38:03,116
deployment details it shows that my

23590
16:37:59,680 --> 16:38:05,680
replicas have one updated four ready

23591
16:38:03,116 --> 16:38:08,480
three available and one unavailable and

23592
16:38:05,680 --> 16:38:11,040
if i click on refresh i can see now that

23593
16:38:08,480 --> 16:38:13,360
my replicas are all updated and

23594
16:38:11,040 --> 16:38:15,840
available and so now in order to check

23595
16:38:13,360 --> 16:38:18,559
your new update you can simply go down

23596
16:38:15,839 --> 16:38:20,879
to exposing services and click on the

23597
16:38:18,559 --> 16:38:23,595
endpoints link you'll get that redirect

23598
16:38:20,879 --> 16:38:25,519
notice you can simply click on the link

23599
16:38:23,595 --> 16:38:27,756
and because the old site may be cached

23600
16:38:25,519 --> 16:38:29,115
in your browser you may have to refresh

23601
16:38:27,756 --> 16:38:32,000
your web page

23602
16:38:29,116 --> 16:38:34,796
and success and you have now completed a

23603
16:38:32,000 --> 16:38:37,595
rolling update in gke so i wanted to

23604
16:38:34,796 --> 16:38:40,240
congratulate you on making it to the end

23605
16:38:37,595 --> 16:38:42,879
of this multi-part demo and hope that

23606
16:38:40,239 --> 16:38:45,595
it's been extremely useful in excelling

23607
16:38:42,879 --> 16:38:48,079
your knowledge in gke and so just as a

23608
16:38:45,595 --> 16:38:51,275
recap you scaled your application to

23609
16:38:48,080 --> 16:38:53,520
accommodate both less and more replicas

23610
16:38:51,275 --> 16:38:56,159
you edited your application in the cloud

23611
16:38:53,519 --> 16:38:58,559
shell editor and rebuilt your container

23612
16:38:56,160 --> 16:39:01,200
image using cloud build you then applied

23613
16:38:58,559 --> 16:39:03,435
the new digest to your rolling update

23614
16:39:01,199 --> 16:39:06,399
and applied that rolling update to your

23615
16:39:03,436 --> 16:39:09,680
deployment while verifying it all in the

23616
16:39:06,400 --> 16:39:13,040
end fantastic job on your part as this

23617
16:39:09,680 --> 16:39:15,519
was a pretty complex and long multi-part

23618
16:39:13,040 --> 16:39:18,000
demo and you can expect things like what

23619
16:39:15,519 --> 16:39:20,000
you've experienced in this demo to pop

23620
16:39:18,000 --> 16:39:23,040
up in your role of being a cloud

23621
16:39:20,000 --> 16:39:25,360
engineer when dealing with gke and so

23622
16:39:23,040 --> 16:39:27,756
that's pretty much all i wanted to cover

23623
16:39:25,360 --> 16:39:31,040
with this multi-part demo working with

23624
16:39:27,756 --> 16:39:33,680
gke so before you go i wanted to take a

23625
16:39:31,040 --> 16:39:35,840
few moments to delete all the resources

23626
16:39:33,680 --> 16:39:37,595
you've created one by one so i'm going

23627
16:39:35,839 --> 16:39:39,839
to go up to the top i'm going to close

23628
16:39:37,595 --> 16:39:42,000
all my tabs i'm going to head on over to

23629
16:39:39,839 --> 16:39:44,159
clusters and so i don't want to delete

23630
16:39:42,000 --> 16:39:46,400
my cluster just yet but the first thing

23631
16:39:44,160 --> 16:39:48,320
that i want to do is delete my container

23632
16:39:46,400 --> 16:39:50,796
images so i'm going to head up to the

23633
16:39:48,319 --> 16:39:53,116
top and open up cloud shell

23634
16:39:50,796 --> 16:39:56,400
and i'm going to use the command gcloud

23635
16:39:53,116 --> 16:39:58,720
container images delete gcr dot io

23636
16:39:56,400 --> 16:40:01,360
forward slash your google cloud project

23637
16:39:58,720 --> 16:40:04,840
variable forward slash along with your

23638
16:40:01,360 --> 16:40:06,400
first image of box of bow ties colon

23639
16:40:04,839 --> 16:40:08,000
1.0.0

23640
16:40:06,400 --> 16:40:09,916
hit enter it's going to prompt you if

23641
16:40:08,000 --> 16:40:12,635
you want to continue you want to hit y

23642
16:40:09,915 --> 16:40:14,479
for yes and it has now deleted the image

23643
16:40:12,635 --> 16:40:16,116
as well you want to delete your latest

23644
16:40:14,480 --> 16:40:18,720
image which is

23645
16:40:16,116 --> 16:40:20,720
1.0.1 so i'm going to change the zero to

23646
16:40:18,720 --> 16:40:22,955
one hit enter it's going to ask if you

23647
16:40:20,720 --> 16:40:25,200
want to continue yes and so the

23648
16:40:22,955 --> 16:40:27,360
container images have now been deleted

23649
16:40:25,199 --> 16:40:29,680
and so now along with the images you

23650
16:40:27,360 --> 16:40:31,915
want to delete the artifacts as well and

23651
16:40:29,680 --> 16:40:33,519
those are stored in cloud storage so i'm

23652
16:40:31,915 --> 16:40:35,040
going to close down cloud shell i'm

23653
16:40:33,519 --> 16:40:36,795
going to head on up to the navigation

23654
16:40:35,040 --> 16:40:38,480
menu and i'm going to head down to

23655
16:40:36,796 --> 16:40:40,080
storage and you want to select your

23656
16:40:38,480 --> 16:40:42,319
bucket that has your project name

23657
16:40:40,080 --> 16:40:44,240
underscore cloud build select the source

23658
16:40:42,319 --> 16:40:45,839
folder and click on delete and you're

23659
16:40:44,239 --> 16:40:48,000
going to get a prompt asking you to

23660
16:40:45,839 --> 16:40:50,079
delete the selected folder but in order

23661
16:40:48,000 --> 16:40:51,915
to do this you need to type in the name

23662
16:40:50,080 --> 16:40:52,720
of the folder so i'm going to type it in

23663
16:40:51,915 --> 16:40:54,795
now

23664
16:40:52,720 --> 16:40:56,955
you can click on confirm and so now the

23665
16:40:54,796 --> 16:40:59,276
folder has been deleted along with the

23666
16:40:56,955 --> 16:41:01,595
artifacts and so now that we've taken

23667
16:40:59,275 --> 16:41:04,319
care of the images along with the

23668
16:41:01,595 --> 16:41:06,159
artifacts we need to clean up our gke

23669
16:41:04,319 --> 16:41:08,080
cluster so i'm going to head back on up

23670
16:41:06,160 --> 16:41:10,560
to the navigation menu and i'm going to

23671
16:41:08,080 --> 16:41:12,240
head on over to kubernetes engine and

23672
16:41:10,559 --> 16:41:14,319
the first thing that i want to delete is

23673
16:41:12,239 --> 16:41:16,559
the low balancer so i'm going to head on

23674
16:41:14,319 --> 16:41:19,275
up to services and ingress and you can

23675
16:41:16,559 --> 16:41:21,199
select box of bow tie service and go up

23676
16:41:19,275 --> 16:41:23,040
to the top and click on delete you're

23677
16:41:21,199 --> 16:41:24,635
going to get a confirmation and you want

23678
16:41:23,040 --> 16:41:26,559
to click on delete and it's going to

23679
16:41:24,635 --> 16:41:28,796
take a couple minutes you do quick

23680
16:41:26,559 --> 16:41:31,275
refresh and the service has finally been

23681
16:41:28,796 --> 16:41:32,880
deleted i now want to delete my workload

23682
16:41:31,275 --> 16:41:35,199
so i'm going to go over to the left hand

23683
16:41:32,879 --> 16:41:38,000
menu click on workloads select the

23684
16:41:35,199 --> 16:41:40,079
workload box of bowties and go up to the

23685
16:41:38,000 --> 16:41:42,080
top and click on delete and you want to

23686
16:41:40,080 --> 16:41:44,400
delete all resources including the

23687
16:41:42,080 --> 16:41:46,635
horizontal pod auto scaler so you can

23688
16:41:44,400 --> 16:41:48,796
simply click on delete and it may take a

23689
16:41:46,635 --> 16:41:50,955
few minutes to delete gonna go up to the

23690
16:41:48,796 --> 16:41:53,116
top and hit refresh and my workload has

23691
16:41:50,955 --> 16:41:55,756
been deleted and so now all that's left

23692
16:41:53,116 --> 16:41:57,436
to delete is the gke cluster itself so

23693
16:41:55,756 --> 16:41:59,040
i'm going to go back to clusters so

23694
16:41:57,436 --> 16:42:01,436
you're going to select the cluster and

23695
16:41:59,040 --> 16:42:03,116
go up to the top and click on delete and

23696
16:42:01,436 --> 16:42:05,275
you're going to get a prompt asking you

23697
16:42:03,116 --> 16:42:07,360
if you want to delete these storage pods

23698
16:42:05,275 --> 16:42:09,595
and these are default storage pods that

23699
16:42:07,360 --> 16:42:11,436
are installed with the cluster as well

23700
16:42:09,595 --> 16:42:13,595
you can delete the cluster while the

23701
16:42:11,436 --> 16:42:15,840
workload is still in play but i have

23702
16:42:13,595 --> 16:42:18,479
this habit of being thorough so i wanted

23703
16:42:15,839 --> 16:42:20,479
to delete the workload before deleting

23704
16:42:18,480 --> 16:42:22,636
the cluster and so you want to go ahead

23705
16:42:20,480 --> 16:42:24,796
and click on delete and so that's pretty

23706
16:42:22,635 --> 16:42:27,360
much all i have for this demo

23707
16:42:24,796 --> 16:42:29,916
and this section on google kubernetes

23708
16:42:27,360 --> 16:42:32,480
engine and again congrats on the great

23709
16:42:29,915 --> 16:42:34,239
job you can now mark this as complete

23710
16:42:32,480 --> 16:42:38,160
and i'll see you in the next one

23711
16:42:34,239 --> 16:42:40,879
[Music]

23712
16:42:38,160 --> 16:42:43,680
welcome back and in this lesson i will

23713
16:42:40,879 --> 16:42:46,159
be covering the features of cloud vpn an

23714
16:42:43,680 --> 16:42:48,080
essential service for any engineer to

23715
16:42:46,160 --> 16:42:50,880
know about when looking to connect

23716
16:42:48,080 --> 16:42:53,276
another network to google cloud whether

23717
16:42:50,879 --> 16:42:54,399
it be your on-premises network another

23718
16:42:53,275 --> 16:42:57,115
cloud provider

23719
16:42:54,400 --> 16:42:59,840
or even when connecting to vpcs

23720
16:42:57,116 --> 16:43:02,480
this service is a must know for any

23721
16:42:59,839 --> 16:43:04,719
engineer and for the exam so with that

23722
16:43:02,480 --> 16:43:07,436
being said let's dive in

23723
16:43:04,720 --> 16:43:10,239
now cloudvpn securely connects your peer

23724
16:43:07,436 --> 16:43:13,200
network to your vpc network through an

23725
16:43:10,239 --> 16:43:16,159
ipsec vpn connection when i talk about a

23726
16:43:13,199 --> 16:43:20,559
peer network this is referring to an

23727
16:43:16,160 --> 16:43:22,796
on-premises vpn device or vpn service a

23728
16:43:20,559 --> 16:43:26,559
vpn gateway hosted by another cloud

23729
16:43:22,796 --> 16:43:29,276
provider such as aws or azure or another

23730
16:43:26,559 --> 16:43:32,720
google cloud vpn gateway and so this is

23731
16:43:29,275 --> 16:43:35,756
an ipsec or encrypted tunnel from your

23732
16:43:32,720 --> 16:43:38,000
peer network to your vpc network that

23733
16:43:35,756 --> 16:43:40,796
traverses the public internet and so for

23734
16:43:38,000 --> 16:43:43,595
those who don't know ipsec being short

23735
16:43:40,796 --> 16:43:46,635
for internet security protocol and this

23736
16:43:43,595 --> 16:43:49,199
is a set of protocols using algorithms

23737
16:43:46,635 --> 16:43:52,479
allowing the transport of secure data

23738
16:43:49,199 --> 16:43:55,435
over an ip network ipsec operates at the

23739
16:43:52,480 --> 16:43:58,240
network layer so layer 3 of the osi

23740
16:43:55,436 --> 16:44:00,635
model which allows it to be independent

23741
16:43:58,239 --> 16:44:02,955
of any applications although it does

23742
16:44:00,635 --> 16:44:05,116
come with some additional overhead so

23743
16:44:02,955 --> 16:44:06,879
please be aware and so when creating

23744
16:44:05,116 --> 16:44:08,880
your cloud vpn

23745
16:44:06,879 --> 16:44:12,559
traffic traveling between the two

23746
16:44:08,879 --> 16:44:15,115
networks is encrypted by one vpn gateway

23747
16:44:12,559 --> 16:44:17,199
and then decrypted by the other vpn

23748
16:44:15,116 --> 16:44:20,000
gateway now moving on to some details

23749
16:44:17,199 --> 16:44:22,319
about cloud vpn this is a regional

23750
16:44:20,000 --> 16:44:24,559
service and so please take that into

23751
16:44:22,319 --> 16:44:27,839
consideration when connecting your

23752
16:44:24,559 --> 16:44:30,000
on-premises location to google cloud for

23753
16:44:27,839 --> 16:44:31,755
the least amount of latency it also

23754
16:44:30,000 --> 16:44:33,756
means that if that region were to go

23755
16:44:31,756 --> 16:44:36,080
down you would lose your connection

23756
16:44:33,756 --> 16:44:39,595
until the region is back up and running

23757
16:44:36,080 --> 16:44:42,400
now cloud vpn is also a site-to-site vpn

23758
16:44:39,595 --> 16:44:44,720
only and therefore it does not support

23759
16:44:42,400 --> 16:44:47,680
site-to-client so this means that if you

23760
16:44:44,720 --> 16:44:50,720
have a laptop or a computer at home you

23761
16:44:47,680 --> 16:44:53,680
cannot use this option with a vpn client

23762
16:44:50,720 --> 16:44:56,319
to connect to google cloud cloudvpn can

23763
16:44:53,680 --> 16:44:59,840
also be used in conjunction with private

23764
16:44:56,319 --> 16:45:02,159
google access for your on-premises hosts

23765
16:44:59,839 --> 16:45:05,039
so if you're using private google access

23766
16:45:02,160 --> 16:45:08,160
within gcp you can simply connect to

23767
16:45:05,040 --> 16:45:11,595
your data center with vpn and have

23768
16:45:08,160 --> 16:45:13,200
access as if you were already in gcp so

23769
16:45:11,595 --> 16:45:15,680
if you're looking to extend private

23770
16:45:13,199 --> 16:45:18,000
google access to your on-premises data

23771
16:45:15,680 --> 16:45:20,635
center cloud vpn would be the perfect

23772
16:45:18,000 --> 16:45:23,756
choice and so when it comes to speeds

23773
16:45:20,635 --> 16:45:26,635
each cloud vpn tunnel can support up to

23774
16:45:23,756 --> 16:45:29,680
three gigabits per second total for

23775
16:45:26,635 --> 16:45:31,680
ingress and egress as well routing

23776
16:45:29,680 --> 16:45:33,840
options that are available are both

23777
16:45:31,680 --> 16:45:37,275
static and dynamic but are only

23778
16:45:33,839 --> 16:45:40,955
available as dynamic for aha vpn and

23779
16:45:37,275 --> 16:45:44,000
lastly cloudvpn supports ik version 1

23780
16:45:40,955 --> 16:45:46,559
and ike version 2 using shared secret

23781
16:45:44,000 --> 16:45:48,796
and for those of you who are unaware ike

23782
16:45:46,559 --> 16:45:50,720
stands for internet key exchange and

23783
16:45:48,796 --> 16:45:53,200
this helps establish a secure

23784
16:45:50,720 --> 16:45:55,595
authenticated communication channel by

23785
16:45:53,199 --> 16:45:58,479
using a key exchange algorithm to

23786
16:45:55,595 --> 16:46:00,635
generate a shared secret key to encrypt

23787
16:45:58,480 --> 16:46:03,520
communications so know that when you

23788
16:46:00,635 --> 16:46:06,319
choose cloudvpn that your connection is

23789
16:46:03,519 --> 16:46:08,479
both private and secure so now there are

23790
16:46:06,319 --> 16:46:11,040
two types of vpn options that are

23791
16:46:08,480 --> 16:46:14,636
available in google cloud one being the

23792
16:46:11,040 --> 16:46:16,080
classic vpn and the other being h a vpn

23793
16:46:14,635 --> 16:46:18,080
and i'm going to take a moment to go

23794
16:46:16,080 --> 16:46:20,720
through the differences now with classic

23795
16:46:18,080 --> 16:46:24,720
vpn this provides a service level

23796
16:46:20,720 --> 16:46:28,480
agreement of 99.9 percent also known as

23797
16:46:24,720 --> 16:46:31,116
an sla of three nines while h a vpn

23798
16:46:28,480 --> 16:46:33,680
provides a four nines sla when

23799
16:46:31,116 --> 16:46:35,916
configured with two interfaces and two

23800
16:46:33,680 --> 16:46:39,680
external ips now when it comes to

23801
16:46:35,915 --> 16:46:42,635
routing classic vpn supports both static

23802
16:46:39,680 --> 16:46:45,199
and dynamic routing whereas havpn

23803
16:46:42,635 --> 16:46:48,159
supports dynamic routing only and this

23804
16:46:45,199 --> 16:46:51,115
must be done through bgp using cloud

23805
16:46:48,160 --> 16:46:52,400
router classic vpn gateways have a

23806
16:46:51,116 --> 16:46:55,360
single interface

23807
16:46:52,400 --> 16:46:58,160
and a single external ip address and

23808
16:46:55,360 --> 16:47:00,319
support tunnels using static routing as

23809
16:46:58,160 --> 16:47:02,636
well as dynamic routing and the static

23810
16:47:00,319 --> 16:47:06,000
routing can be either route based or

23811
16:47:02,635 --> 16:47:09,116
policy based whereas with havpn it can

23812
16:47:06,000 --> 16:47:12,879
be configured for two interfaces and two

23813
16:47:09,116 --> 16:47:14,880
external ips for true ha capabilities

23814
16:47:12,879 --> 16:47:18,319
and as mentioned earlier when it comes

23815
16:47:14,879 --> 16:47:20,635
to routing for havpn dynamic routing is

23816
16:47:18,319 --> 16:47:23,275
the only available option now the one

23817
16:47:20,635 --> 16:47:24,955
thing about classic vpn is that google

23818
16:47:23,275 --> 16:47:29,595
cloud is deprecating certain

23819
16:47:24,955 --> 16:47:32,080
functionality on october 31st of 2021

23820
16:47:29,595 --> 16:47:35,199
and is recommending all their customers

23821
16:47:32,080 --> 16:47:37,756
to move to h a vpn and so know that this

23822
16:47:35,199 --> 16:47:40,479
has not been reflected in the exam and

23823
16:47:37,756 --> 16:47:42,635
not sure if and when it will be but know

23824
16:47:40,480 --> 16:47:45,276
that when you are creating a cloud vpn

23825
16:47:42,635 --> 16:47:48,239
connection in your current environment h

23826
16:47:45,275 --> 16:47:49,839
a vpn is the recommended option and so

23827
16:47:48,239 --> 16:47:53,275
now i wanted to dive into some

23828
16:47:49,839 --> 16:47:55,839
architecture of how cloud vpn is set up

23829
16:47:53,275 --> 16:47:57,595
for these two options starting with

23830
16:47:55,839 --> 16:48:00,719
classic vpn

23831
16:47:57,595 --> 16:48:02,559
now as i said before classic vpn is a

23832
16:48:00,720 --> 16:48:04,720
cloud vpn solution

23833
16:48:02,559 --> 16:48:08,319
that lets you connect your peer network

23834
16:48:04,720 --> 16:48:11,595
to your vpc network through an ipsec vpn

23835
16:48:08,319 --> 16:48:15,680
connection in a single region now unlike

23836
16:48:11,595 --> 16:48:17,839
h a vpn classic vpn offers no redundancy

23837
16:48:15,680 --> 16:48:20,000
out of the box you would have to create

23838
16:48:17,839 --> 16:48:22,000
another vpn connection and if the

23839
16:48:20,000 --> 16:48:23,756
connection were to go down you would

23840
16:48:22,000 --> 16:48:26,319
have to manually switch over the

23841
16:48:23,756 --> 16:48:28,796
connection from one to the other now as

23842
16:48:26,319 --> 16:48:31,360
you can see here when you create a vpn

23843
16:48:28,796 --> 16:48:34,956
gateway google cloud automatically

23844
16:48:31,360 --> 16:48:37,915
chooses only one external ip address for

23845
16:48:34,955 --> 16:48:41,040
its interface and the diagram shown here

23846
16:48:37,915 --> 16:48:44,000
shows that of a classic vpn network

23847
16:48:41,040 --> 16:48:47,915
connected from the bowtie dash network

23848
16:48:44,000 --> 16:48:50,879
vpc in bowtie project to an on-premises

23849
16:48:47,915 --> 16:48:54,079
network configured using a static route

23850
16:48:50,879 --> 16:48:56,635
to connect now moving on to h-a-v-p-n

23851
16:48:54,080 --> 16:48:59,596
again this is a highly available cloud

23852
16:48:56,635 --> 16:49:02,720
vpn solution that lets you connect your

23853
16:48:59,595 --> 16:49:05,839
peer network to your vpc network using

23854
16:49:02,720 --> 16:49:09,200
an ipsec vpn connection in a single

23855
16:49:05,839 --> 16:49:12,399
region exactly like classic vpn where

23856
16:49:09,199 --> 16:49:14,879
havpn differs is that it provides four

23857
16:49:12,400 --> 16:49:17,275
nines sla and as you can see here it

23858
16:49:14,879 --> 16:49:20,399
supports double the connections so when

23859
16:49:17,275 --> 16:49:23,360
you create an h a vpn gateway google

23860
16:49:20,400 --> 16:49:24,880
cloud automatically chooses two external

23861
16:49:23,360 --> 16:49:27,520
ip addresses

23862
16:49:24,879 --> 16:49:30,000
one for each of its fixed number of two

23863
16:49:27,519 --> 16:49:32,319
interfaces each ip address is

23864
16:49:30,000 --> 16:49:34,160
automatically chosen from a unique

23865
16:49:32,319 --> 16:49:36,879
address pool to support high

23866
16:49:34,160 --> 16:49:39,680
availability each of these ha vpn

23867
16:49:36,879 --> 16:49:41,839
gateway interfaces supports multiple

23868
16:49:39,680 --> 16:49:44,400
tunnels which allows you to create

23869
16:49:41,839 --> 16:49:47,435
multiple h a vpn gateways and you can

23870
16:49:44,400 --> 16:49:50,480
configure an h a vpn gateway with only

23871
16:49:47,436 --> 16:49:53,436
one active interface and one public ip

23872
16:49:50,480 --> 16:49:57,200
address however this configuration does

23873
16:49:53,436 --> 16:50:00,400
not provide a four nines sla now for h a

23874
16:49:57,199 --> 16:50:03,039
vpn gateway you configure an external

23875
16:50:00,400 --> 16:50:05,596
peer vpn gateway resource that

23876
16:50:03,040 --> 16:50:07,520
represents your physical peer gateway in

23877
16:50:05,595 --> 16:50:09,915
google cloud you can also create this

23878
16:50:07,519 --> 16:50:12,559
resource as a standalone resource and

23879
16:50:09,915 --> 16:50:16,159
use it later in this diagram the two

23880
16:50:12,559 --> 16:50:19,275
interfaces of an h a vpn gateway in the

23881
16:50:16,160 --> 16:50:22,240
bowtie network vpc living in bowtie

23882
16:50:19,275 --> 16:50:25,275
project are connected to two peer vpn

23883
16:50:22,239 --> 16:50:28,159
gateways in an on-premises network and

23884
16:50:25,275 --> 16:50:31,199
this connection is using dynamic routing

23885
16:50:28,160 --> 16:50:33,680
with bgp connecting to a cloud router in

23886
16:50:31,199 --> 16:50:37,115
google cloud now when it comes to the

23887
16:50:33,680 --> 16:50:38,796
times when using cloudvpn makes sense

23888
16:50:37,116 --> 16:50:41,436
one of the first things you should think

23889
16:50:38,796 --> 16:50:43,840
about is whether or not you need public

23890
16:50:41,436 --> 16:50:46,560
internet access so when you're sharing

23891
16:50:43,839 --> 16:50:48,955
files or your company needs a specific

23892
16:50:46,559 --> 16:50:51,756
sas product that's only available on the

23893
16:50:48,955 --> 16:50:53,680
internet vpn would be your only option

23894
16:50:51,756 --> 16:50:56,480
as well when you're looking to use

23895
16:50:53,680 --> 16:50:58,635
interconnect and your peering location

23896
16:50:56,480 --> 16:51:00,636
is not available so you're not able to

23897
16:50:58,635 --> 16:51:03,595
connect your data center to the

23898
16:51:00,635 --> 16:51:05,436
colocation facility of your choice vpn

23899
16:51:03,595 --> 16:51:08,239
would be the only other option that you

23900
16:51:05,436 --> 16:51:10,796
have as well if budget constraints come

23901
16:51:08,239 --> 16:51:13,595
into play when deciding on connecting to

23902
16:51:10,796 --> 16:51:16,240
your peer network vpn would always be

23903
16:51:13,595 --> 16:51:18,559
the way to go as cloud interconnect is

23904
16:51:16,239 --> 16:51:20,795
going to be the more expensive option

23905
16:51:18,559 --> 16:51:23,680
and lastly if you don't need a high

23906
16:51:20,796 --> 16:51:25,840
speed network and low latency is not

23907
16:51:23,680 --> 16:51:28,319
really a concern for you and you only

23908
16:51:25,839 --> 16:51:31,435
have regular outgoing traffic coming

23909
16:51:28,319 --> 16:51:33,680
from google cloud then vpn would suffice

23910
16:51:31,436 --> 16:51:36,480
for your everyday needs and so the

23911
16:51:33,680 --> 16:51:39,040
options shown here are also the deciding

23912
16:51:36,480 --> 16:51:41,436
factors to look for when it comes to

23913
16:51:39,040 --> 16:51:44,559
questions in the exam that refer to

23914
16:51:41,436 --> 16:51:46,720
cloudvpn or connecting networks and so

23915
16:51:44,559 --> 16:51:49,915
that's pretty much all i have for this

23916
16:51:46,720 --> 16:51:52,000
short lesson on cloudvpn so you can now

23917
16:51:49,915 --> 16:51:53,709
mark this lesson as complete and let's

23918
16:51:52,000 --> 16:51:57,595
move on to the next one

23919
16:51:53,709 --> 16:51:59,915
[Music]

23920
16:51:57,595 --> 16:52:02,479
welcome back and in this lesson i'm

23921
16:51:59,915 --> 16:52:05,435
going to go over another connection type

23922
16:52:02,480 --> 16:52:08,560
that allows for on-premises connectivity

23923
16:52:05,436 --> 16:52:11,200
to your google cloud vpcs which is cloud

23924
16:52:08,559 --> 16:52:13,115
interconnect other than vpn this is the

23925
16:52:11,199 --> 16:52:15,595
other connection type that allows

23926
16:52:13,116 --> 16:52:18,480
connectivity from your on-premises

23927
16:52:15,595 --> 16:52:20,559
environment to your google cloud vpc

23928
16:52:18,480 --> 16:52:23,680
cloud interconnect is the most common

23929
16:52:20,559 --> 16:52:26,319
connection for most larger organizations

23930
16:52:23,680 --> 16:52:28,796
and are for those that demand fast low

23931
16:52:26,319 --> 16:52:31,116
latency connections this lesson will

23932
16:52:28,796 --> 16:52:32,480
cover the features of cloud interconnect

23933
16:52:31,116 --> 16:52:34,955
and the different types that are

23934
16:52:32,480 --> 16:52:37,680
available so with that being said let's

23935
16:52:34,955 --> 16:52:40,635
dive in so getting right into it cloud

23936
16:52:37,680 --> 16:52:42,879
interconnect is a low latency highly

23937
16:52:40,635 --> 16:52:45,756
available connection between your

23938
16:52:42,879 --> 16:52:48,795
on-premises data center and google cloud

23939
16:52:45,756 --> 16:52:51,916
vpc networks also cloud interconnect

23940
16:52:48,796 --> 16:52:54,480
connections provide internal ip address

23941
16:52:51,915 --> 16:52:57,199
connection which means internal ip

23942
16:52:54,480 --> 16:53:00,400
addresses are directly accessible from

23943
16:52:57,199 --> 16:53:03,275
both networks and so on premises hosts

23944
16:53:00,400 --> 16:53:06,080
can use internal ip addresses and take

23945
16:53:03,275 --> 16:53:09,115
advantage of private google access

23946
16:53:06,080 --> 16:53:12,240
rather than external ip addresses to

23947
16:53:09,116 --> 16:53:14,560
reach google apis and services traffic

23948
16:53:12,239 --> 16:53:17,199
between your on-premises network and

23949
16:53:14,559 --> 16:53:19,680
your vpc network doesn't traverse the

23950
16:53:17,199 --> 16:53:21,755
public internet traffic traverses a

23951
16:53:19,680 --> 16:53:23,519
dedicated connection or through a

23952
16:53:21,756 --> 16:53:26,160
service provider with a dedicated

23953
16:53:23,519 --> 16:53:29,199
connection your vpc network's internal

23954
16:53:26,160 --> 16:53:32,000
ip addresses are directly accessible

23955
16:53:29,199 --> 16:53:35,275
from your on-premises network now unlike

23956
16:53:32,000 --> 16:53:37,199
vpn this connection is not encrypted if

23957
16:53:35,275 --> 16:53:39,915
you need to encrypt your traffic at the

23958
16:53:37,199 --> 16:53:43,275
ip layer you can create one or more

23959
16:53:39,915 --> 16:53:46,319
self-managed vpn gateways in your vpc

23960
16:53:43,275 --> 16:53:48,720
network and assign a private ip address

23961
16:53:46,319 --> 16:53:51,275
to each gateway now although this may be

23962
16:53:48,720 --> 16:53:53,916
a very fast connection it also comes

23963
16:53:51,275 --> 16:53:56,319
with a very high price tag now unlike

23964
16:53:53,915 --> 16:53:58,319
vpn this connection type is not

23965
16:53:56,319 --> 16:54:01,360
encrypted if you need to encrypt your

23966
16:53:58,319 --> 16:54:04,720
traffic at the ip layer you can create

23967
16:54:01,360 --> 16:54:07,840
one or more self-managed vpn gateways in

23968
16:54:04,720 --> 16:54:10,160
your vpc network and assign a private ip

23969
16:54:07,839 --> 16:54:12,635
address to each gateway now although

23970
16:54:10,160 --> 16:54:15,276
this may be a very fast connection it

23971
16:54:12,635 --> 16:54:17,756
also comes with a very high price tag

23972
16:54:15,275 --> 16:54:20,079
and is the highest price connection type

23973
16:54:17,756 --> 16:54:22,400
cloud interconnect offers two options

23974
16:54:20,080 --> 16:54:25,116
for extending your on-premises network

23975
16:54:22,400 --> 16:54:27,520
dedicated interconnect which provides a

23976
16:54:25,116 --> 16:54:30,000
direct physical connection between your

23977
16:54:27,519 --> 16:54:32,399
on-premises network and google's network

23978
16:54:30,000 --> 16:54:34,796
as well as partner interconnect which

23979
16:54:32,400 --> 16:54:38,080
provides connectivity between your

23980
16:54:34,796 --> 16:54:40,400
on-premises and vpc networks through a

23981
16:54:38,080 --> 16:54:42,635
supported service provider and so i

23982
16:54:40,400 --> 16:54:44,955
wanted to take a moment to highlight the

23983
16:54:42,635 --> 16:54:47,915
different options for cloud interconnect

23984
16:54:44,955 --> 16:54:50,879
starting with dedicated interconnect now

23985
16:54:47,915 --> 16:54:52,955
dedicated interconnect provides a direct

23986
16:54:50,879 --> 16:54:55,595
physical connection between your

23987
16:54:52,955 --> 16:54:58,000
on-premises network and google's network

23988
16:54:55,595 --> 16:55:00,635
dedicated interconnect enables you to

23989
16:54:58,000 --> 16:55:03,360
transfer large amounts of data between

23990
16:55:00,635 --> 16:55:06,239
your network and google cloud which can

23991
16:55:03,360 --> 16:55:08,319
be more cost effective than purchasing

23992
16:55:06,239 --> 16:55:10,955
additional bandwidth over the public

23993
16:55:08,319 --> 16:55:13,116
internet for dedicated interconnect you

23994
16:55:10,955 --> 16:55:15,756
provision a dedicated interconnect

23995
16:55:13,116 --> 16:55:18,560
connection between the google network

23996
16:55:15,756 --> 16:55:21,275
and your own router in a common location

23997
16:55:18,559 --> 16:55:24,079
the following example shown here shows a

23998
16:55:21,275 --> 16:55:27,275
single dedicated interconnect connection

23999
16:55:24,080 --> 16:55:30,240
between a vpc network and an on-premises

24000
16:55:27,275 --> 16:55:32,479
network for this basic setup a dedicated

24001
16:55:30,239 --> 16:55:34,635
interconnect connection is provisioned

24002
16:55:32,480 --> 16:55:37,040
between the google network and the

24003
16:55:34,635 --> 16:55:39,519
on-premises router in a common

24004
16:55:37,040 --> 16:55:42,319
co-location facility when you create a

24005
16:55:39,519 --> 16:55:44,635
vlan attachment you associate it with a

24006
16:55:42,319 --> 16:55:48,000
cloud router this cloud router creates a

24007
16:55:44,635 --> 16:55:50,319
bgp session for the vlan attachment and

24008
16:55:48,000 --> 16:55:53,040
its corresponding on-premises peer

24009
16:55:50,319 --> 16:55:55,519
router these routes are added as custom

24010
16:55:53,040 --> 16:55:57,915
dynamic routes in your vpc network and

24011
16:55:55,519 --> 16:56:01,115
so for dedicated interconnect connection

24012
16:55:57,915 --> 16:56:04,319
capacity is delivered over one or more

24013
16:56:01,116 --> 16:56:06,880
10 gigabits per second or 100 gigabits

24014
16:56:04,319 --> 16:56:09,839
per second ethernet connections with the

24015
16:56:06,879 --> 16:56:12,159
follow-on maximum capacity supported per

24016
16:56:09,839 --> 16:56:14,635
interconnect connection so with your 10

24017
16:56:12,160 --> 16:56:17,040
gigabit per second connections you can

24018
16:56:14,635 --> 16:56:19,915
get up to eight connections totaling a

24019
16:56:17,040 --> 16:56:22,480
speed of 80 gigabits per second with the

24020
16:56:19,915 --> 16:56:24,795
100 gigabit per second connection you

24021
16:56:22,480 --> 16:56:27,680
can connect two of them together to have

24022
16:56:24,796 --> 16:56:30,160
a total speed of 200 gigabits per second

24023
16:56:27,680 --> 16:56:32,480
and so for dedicated interconnect your

24024
16:56:30,160 --> 16:56:35,040
network must physically meet google's

24025
16:56:32,480 --> 16:56:37,916
network in a supported co-location

24026
16:56:35,040 --> 16:56:40,559
facility also known as an interconnect

24027
16:56:37,915 --> 16:56:42,635
connection location this facility

24028
16:56:40,559 --> 16:56:45,199
is where a vendor the co-location

24029
16:56:42,635 --> 16:56:47,680
facility provider provisions a circuit

24030
16:56:45,199 --> 16:56:50,399
between your network and a google edge

24031
16:56:47,680 --> 16:56:52,796
point of presence also known as a pop

24032
16:56:50,400 --> 16:56:55,200
the setup shown here is suitable for

24033
16:56:52,796 --> 16:56:57,916
non-critical applications that can

24034
16:56:55,199 --> 16:57:00,795
tolerate some downtime but for sensitive

24035
16:56:57,915 --> 16:57:03,115
production applications at least two

24036
16:57:00,796 --> 16:57:05,596
interconnect connections in two

24037
16:57:03,116 --> 16:57:08,160
different edge availability domains are

24038
16:57:05,595 --> 16:57:10,079
recommended now partner interconnect

24039
16:57:08,160 --> 16:57:13,040
provides connectivity between your

24040
16:57:10,080 --> 16:57:15,436
on-premises network and your vpc network

24041
16:57:13,040 --> 16:57:17,756
through a supported service provider so

24042
16:57:15,436 --> 16:57:20,319
this is not a direct connection from

24043
16:57:17,756 --> 16:57:22,796
your on-premises network to google as

24044
16:57:20,319 --> 16:57:25,199
the service provider provides a conduit

24045
16:57:22,796 --> 16:57:27,596
between your on-premises network and

24046
16:57:25,199 --> 16:57:30,399
google's pop now a partner interconnect

24047
16:57:27,595 --> 16:57:33,115
connection is useful if a dedicated

24048
16:57:30,400 --> 16:57:35,200
interconnect co-location facility is

24049
16:57:33,116 --> 16:57:38,240
physically out of reach or your

24050
16:57:35,199 --> 16:57:40,239
workloads don't warrant an entire 10

24051
16:57:38,239 --> 16:57:42,635
gigabit per second connection for

24052
16:57:40,239 --> 16:57:45,436
partner interconnect 50 megabits per

24053
16:57:42,635 --> 16:57:47,915
second to 50 gigabits per second vlan

24054
16:57:45,436 --> 16:57:51,200
attachments are available with the

24055
16:57:47,915 --> 16:57:53,275
maximum supported attachment size of 50

24056
16:57:51,199 --> 16:57:55,519
gigabits per second now service

24057
16:57:53,275 --> 16:57:57,839
providers have existing physical

24058
16:57:55,519 --> 16:57:59,839
connections to google's network that

24059
16:57:57,839 --> 16:58:02,955
they make available for their customer

24060
16:57:59,839 --> 16:58:05,115
to use so in this example shown here you

24061
16:58:02,955 --> 16:58:07,915
would provision a partner interconnect

24062
16:58:05,116 --> 16:58:10,319
connection with a service provider and

24063
16:58:07,915 --> 16:58:12,719
connecting your on-premises network to

24064
16:58:10,319 --> 16:58:15,040
that service provider after connectivity

24065
16:58:12,720 --> 16:58:17,200
is established with the service provider

24066
16:58:15,040 --> 16:58:19,756
a partner interconnect connection is

24067
16:58:17,199 --> 16:58:22,079
requested from the service provider and

24068
16:58:19,756 --> 16:58:24,400
the service provider configures your vln

24069
16:58:22,080 --> 16:58:26,400
attachment for use once your connection

24070
16:58:24,400 --> 16:58:28,796
is provisioned you can start passing

24071
16:58:26,400 --> 16:58:31,040
traffic between your networks by using

24072
16:58:28,796 --> 16:58:33,436
the service providers network now there

24073
16:58:31,040 --> 16:58:35,840
are many more detailed steps involved to

24074
16:58:33,436 --> 16:58:38,000
get a connection established along with

24075
16:58:35,839 --> 16:58:40,479
traffic flowing but i just wanted to

24076
16:58:38,000 --> 16:58:42,635
give you a high level summary of how a

24077
16:58:40,480 --> 16:58:45,360
connection would be established with a

24078
16:58:42,635 --> 16:58:48,319
service provider now as well to build a

24079
16:58:45,360 --> 16:58:50,955
highly available topology you can use

24080
16:58:48,319 --> 16:58:53,040
multiple service providers as well you

24081
16:58:50,955 --> 16:58:55,040
must build redundant connections for

24082
16:58:53,040 --> 16:58:57,200
each service provider in each

24083
16:58:55,040 --> 16:58:59,116
metropolitan and so now there's a couple

24084
16:58:57,199 --> 16:59:01,199
more connection types that run through

24085
16:58:59,116 --> 16:59:03,436
service providers that are not on the

24086
16:59:01,199 --> 16:59:06,159
exam but i wanted you to be aware of

24087
16:59:03,436 --> 16:59:08,560
them if ever the situation arises in

24088
16:59:06,160 --> 16:59:10,956
your role as a cloud engineer so the

24089
16:59:08,559 --> 16:59:13,435
first one is direct peering and direct

24090
16:59:10,955 --> 16:59:15,915
peering enables you to establish a

24091
16:59:13,436 --> 16:59:18,160
direct peering connection between your

24092
16:59:15,915 --> 16:59:20,719
business network and google's edge

24093
16:59:18,160 --> 16:59:23,276
network and exchange high throughput

24094
16:59:20,720 --> 16:59:26,160
cloud traffic this capability is

24095
16:59:23,275 --> 16:59:28,879
available at any of more than 100

24096
16:59:26,160 --> 16:59:31,436
locations in 33 countries around the

24097
16:59:28,879 --> 16:59:33,755
world when established direct peering

24098
16:59:31,436 --> 16:59:36,796
provides a direct path from your

24099
16:59:33,756 --> 16:59:39,360
on-premises network to google services

24100
16:59:36,796 --> 16:59:42,319
including google cloud products that can

24101
16:59:39,360 --> 16:59:45,116
be exposed through one or more public ip

24102
16:59:42,319 --> 16:59:47,915
addresses traffic from google's network

24103
16:59:45,116 --> 16:59:49,360
to your on-premises network also takes

24104
16:59:47,915 --> 16:59:52,159
that direct path

24105
16:59:49,360 --> 16:59:54,559
including traffic from vpc networks in

24106
16:59:52,160 --> 16:59:57,596
your projects now you can also save

24107
16:59:54,559 --> 16:59:59,839
money and receive direct egress pricing

24108
16:59:57,595 --> 17:00:02,079
for your projects after they have

24109
16:59:59,839 --> 17:00:04,399
established direct peering with google

24110
17:00:02,080 --> 17:00:07,200
direct peering exists outside of google

24111
17:00:04,400 --> 17:00:09,840
cloud unless you need to access google

24112
17:00:07,199 --> 17:00:12,559
workspace applications the recommended

24113
17:00:09,839 --> 17:00:15,115
methods of access to google cloud are

24114
17:00:12,559 --> 17:00:17,275
dedicated interconnect or partner

24115
17:00:15,116 --> 17:00:19,756
interconnect establishing a direct

24116
17:00:17,275 --> 17:00:22,400
peering connection with google is free

24117
17:00:19,756 --> 17:00:25,275
and there are no costs per port and no

24118
17:00:22,400 --> 17:00:27,680
per hour charges you just have to meet

24119
17:00:25,275 --> 17:00:29,519
google's technical peering requirements

24120
17:00:27,680 --> 17:00:31,680
and can then be considered for the

24121
17:00:29,519 --> 17:00:33,519
direct peering service

24122
17:00:31,680 --> 17:00:36,879
and moving on to the last connection

24123
17:00:33,519 --> 17:00:39,519
type is cdn interconnect now i know we

24124
17:00:36,879 --> 17:00:41,915
haven't gotten into cdns in the course

24125
17:00:39,519 --> 17:00:45,359
as the exam does not require you to know

24126
17:00:41,915 --> 17:00:48,239
it but cdn standing for content delivery

24127
17:00:45,360 --> 17:00:51,360
network is what caches content at the

24128
17:00:48,239 --> 17:00:53,915
network edge to deliver files faster to

24129
17:00:51,360 --> 17:00:56,160
those requesting it one of the main ways

24130
17:00:53,915 --> 17:00:58,719
to improve website performance now

24131
17:00:56,160 --> 17:01:01,200
moving on to cdn interconnect this

24132
17:00:58,720 --> 17:01:04,319
connection type enables select

24133
17:01:01,199 --> 17:01:07,199
third-party cdn providers like akamai

24134
17:01:04,319 --> 17:01:09,680
and cloudflare along with others to

24135
17:01:07,199 --> 17:01:12,635
establish and optimize your cdn

24136
17:01:09,680 --> 17:01:15,040
population costs by using direct peering

24137
17:01:12,635 --> 17:01:17,756
links with google's edge network and

24138
17:01:15,040 --> 17:01:20,400
enables you to direct your traffic from

24139
17:01:17,756 --> 17:01:23,200
your vpc networks to the provider's

24140
17:01:20,400 --> 17:01:26,160
network and so your egress traffic from

24141
17:01:23,199 --> 17:01:29,199
google cloud through one of these links

24142
17:01:26,160 --> 17:01:31,840
benefits from the direct connectivity to

24143
17:01:29,199 --> 17:01:34,239
the cdn provider and is billed

24144
17:01:31,839 --> 17:01:37,435
automatically with reduced pricing

24145
17:01:34,239 --> 17:01:40,079
typical use cases for cdn interconnect

24146
17:01:37,436 --> 17:01:42,880
is if you're populating your cdn with

24147
17:01:40,080 --> 17:01:45,596
large data files from google cloud or

24148
17:01:42,879 --> 17:01:47,915
you have frequent content updates stored

24149
17:01:45,595 --> 17:01:50,319
in different cdn locations and so

24150
17:01:47,915 --> 17:01:53,040
getting into the use cases of when to

24151
17:01:50,319 --> 17:01:55,519
use cloud interconnect a big purpose for

24152
17:01:53,040 --> 17:01:58,080
it would be to prevent traffic from

24153
17:01:55,519 --> 17:02:00,635
traversing the public internet it is a

24154
17:01:58,080 --> 17:02:02,796
dedicated physical connection right to

24155
17:02:00,635 --> 17:02:05,595
google's data centers so when you need

24156
17:02:02,796 --> 17:02:08,319
an extension of your vpc network to your

24157
17:02:05,595 --> 17:02:10,795
on-premises network interconnect is

24158
17:02:08,319 --> 17:02:13,595
definitely the way to go now in speed

24159
17:02:10,796 --> 17:02:16,000
and low latencies of extreme importance

24160
17:02:13,595 --> 17:02:18,720
interconnect is always the best option

24161
17:02:16,000 --> 17:02:21,519
and will support up to 200 gigabits per

24162
17:02:18,720 --> 17:02:24,080
second as well when you have heavy

24163
17:02:21,519 --> 17:02:26,559
outgoing traffic or egress traffic

24164
17:02:24,080 --> 17:02:29,276
leaving google cloud cloud interconnect

24165
17:02:26,559 --> 17:02:31,839
fits the bill perfectly and lastly when

24166
17:02:29,275 --> 17:02:34,000
it comes to private google access this

24167
17:02:31,839 --> 17:02:35,915
travels over the backbone of google's

24168
17:02:34,000 --> 17:02:38,319
network and so when you are connected

24169
17:02:35,915 --> 17:02:40,635
with interconnect this is an extension

24170
17:02:38,319 --> 17:02:43,116
of that backbone and therefore your

24171
17:02:40,635 --> 17:02:45,756
on-premises hosts will be able to take

24172
17:02:43,116 --> 17:02:47,520
advantage of private google access and

24173
17:02:45,756 --> 17:02:49,916
so i hope this has given you some

24174
17:02:47,519 --> 17:02:52,319
clarity on the differences between the

24175
17:02:49,915 --> 17:02:55,115
different connection types and how to

24176
17:02:52,319 --> 17:02:58,400
extend your google cloud network to a

24177
17:02:55,116 --> 17:03:00,635
peer or on-premises network so that's

24178
17:02:58,400 --> 17:03:02,955
pretty much all i had to cover when it

24179
17:03:00,635 --> 17:03:05,040
comes to cloud interconnect so you can

24180
17:03:02,955 --> 17:03:06,879
now mark this lesson as complete and

24181
17:03:05,040 --> 17:03:10,879
let's move on to the next one

24182
17:03:06,879 --> 17:03:13,519
[Music]

24183
17:03:10,879 --> 17:03:16,559
welcome back in this lesson i'm going to

24184
17:03:13,519 --> 17:03:18,795
be covering an overview of app engine

24185
17:03:16,559 --> 17:03:21,360
now this is not a deep dive lesson for

24186
17:03:18,796 --> 17:03:23,680
app engine as there is so much to cover

24187
17:03:21,360 --> 17:03:25,915
with this service but i will be listing

24188
17:03:23,680 --> 17:03:28,635
a lot of the features of app engine to

24189
17:03:25,915 --> 17:03:30,559
give you a good feel for what it can do

24190
17:03:28,635 --> 17:03:33,436
and what you will need to know for the

24191
17:03:30,559 --> 17:03:36,399
exam so with that being said let's dive

24192
17:03:33,436 --> 17:03:39,436
in now app engine is a fully managed

24193
17:03:36,400 --> 17:03:42,319
serverless platform for developing and

24194
17:03:39,436 --> 17:03:44,480
hosting web applications at scale this

24195
17:03:42,319 --> 17:03:46,879
is google's platform as a service

24196
17:03:44,480 --> 17:03:49,200
offering that was designed for

24197
17:03:46,879 --> 17:03:52,159
developers so that they can develop

24198
17:03:49,199 --> 17:03:54,719
their application and let app engine do

24199
17:03:52,160 --> 17:03:57,276
all the heavy lifting by taking care of

24200
17:03:54,720 --> 17:04:00,000
provisioning the servers and scaling the

24201
17:03:57,275 --> 17:04:02,239
instances needed based on demand app

24202
17:04:00,000 --> 17:04:04,796
engine gives you the flexibility of

24203
17:04:02,239 --> 17:04:07,040
launching your code as is or you can

24204
17:04:04,796 --> 17:04:09,436
launch it as a container and uses

24205
17:04:07,040 --> 17:04:11,680
runtime environments of a variety of

24206
17:04:09,436 --> 17:04:18,560
different programming languages like

24207
17:04:11,680 --> 17:04:21,116
python java node.js go ruby php or net

24208
17:04:18,559 --> 17:04:24,159
applications deployed on app engine that

24209
17:04:21,116 --> 17:04:26,480
experience regular traffic fluctuations

24210
17:04:24,160 --> 17:04:28,956
or newly deployed applications where

24211
17:04:26,480 --> 17:04:30,956
you're simply unsure about the load are

24212
17:04:28,955 --> 17:04:33,839
auto scaled accordingly and

24213
17:04:30,955 --> 17:04:36,400
automatically your apps scale up to the

24214
17:04:33,839 --> 17:04:39,435
number of instances that are running to

24215
17:04:36,400 --> 17:04:42,400
provide consistent performance or scale

24216
17:04:39,436 --> 17:04:45,116
down to minimize idle instances and

24217
17:04:42,400 --> 17:04:48,000
reduces costs app engine also has the

24218
17:04:45,116 --> 17:04:51,116
capabilities of being able to deal with

24219
17:04:48,000 --> 17:04:53,436
rapid scaling for sudden extreme spikes

24220
17:04:51,116 --> 17:04:56,240
of traffic having multiple versions of

24221
17:04:53,436 --> 17:04:58,480
your application within each service

24222
17:04:56,239 --> 17:05:00,955
allows you to quickly switch between

24223
17:04:58,480 --> 17:05:04,400
different versions of that application

24224
17:05:00,955 --> 17:05:07,275
for rollbacks testing or other temporary

24225
17:05:04,400 --> 17:05:08,880
events you can route traffic to one or

24226
17:05:07,275 --> 17:05:11,680
more specific versions of your

24227
17:05:08,879 --> 17:05:13,595
application by migrating or splitting

24228
17:05:11,680 --> 17:05:16,080
traffic and you can use traffic

24229
17:05:13,595 --> 17:05:19,199
splitting to specify a percentage

24230
17:05:16,080 --> 17:05:21,680
distribution of traffic across two or

24231
17:05:19,199 --> 17:05:24,635
more of the versions within a service

24232
17:05:21,680 --> 17:05:27,275
and allows you to do a b testing or blue

24233
17:05:24,635 --> 17:05:30,000
green deployment between your versions

24234
17:05:27,275 --> 17:05:32,239
when rolling out new features app engine

24235
17:05:30,000 --> 17:05:35,519
supports connecting to back-end storage

24236
17:05:32,239 --> 17:05:38,079
services such as cloud firestore cloud

24237
17:05:35,519 --> 17:05:41,115
sql and cloud storage along with

24238
17:05:38,080 --> 17:05:43,680
connecting to on-premises databases and

24239
17:05:41,116 --> 17:05:46,319
even external databases that are hosted

24240
17:05:43,680 --> 17:05:48,796
on other public clouds app engine is

24241
17:05:46,319 --> 17:05:51,756
available in two separate flavors

24242
17:05:48,796 --> 17:05:54,000
standard and flexible environments and

24243
17:05:51,756 --> 17:05:56,480
each environment offers their own set of

24244
17:05:54,000 --> 17:05:57,360
features that i will get into in just a

24245
17:05:56,480 --> 17:05:59,916
sec

24246
17:05:57,360 --> 17:06:02,400
now as i mentioned before app engine is

24247
17:05:59,915 --> 17:06:04,399
available in standard and flexible

24248
17:06:02,400 --> 17:06:06,720
environments and depending on your

24249
17:06:04,400 --> 17:06:09,840
application needs either one will

24250
17:06:06,720 --> 17:06:11,916
support what you need for your workload

24251
17:06:09,839 --> 17:06:14,559
or you could even use both

24252
17:06:11,915 --> 17:06:16,635
simultaneously the features shown here

24253
17:06:14,559 --> 17:06:18,795
will give you a feel for both types of

24254
17:06:16,635 --> 17:06:20,879
environments and i'm going to be doing a

24255
17:06:18,796 --> 17:06:22,880
quick run through summarizing the

24256
17:06:20,879 --> 17:06:24,795
features of each starting with the

24257
17:06:22,879 --> 17:06:27,680
standard environment now with the

24258
17:06:24,796 --> 17:06:31,040
standard environment applications run in

24259
17:06:27,680 --> 17:06:33,756
a secure sandboxed environment allowing

24260
17:06:31,040 --> 17:06:36,480
app engine standard to distribute

24261
17:06:33,756 --> 17:06:39,275
requests across multiple servers and

24262
17:06:36,480 --> 17:06:41,840
scaling servers to meet traffic demands

24263
17:06:39,275 --> 17:06:44,720
your application runs with its own

24264
17:06:41,839 --> 17:06:47,039
secure reliable environment that is

24265
17:06:44,720 --> 17:06:49,916
independent of the hardware

24266
17:06:47,040 --> 17:06:52,796
operating system or physical location of

24267
17:06:49,915 --> 17:06:54,479
the server the source code is written in

24268
17:06:52,796 --> 17:06:56,880
specific versions

24269
17:06:54,480 --> 17:06:59,040
of the supported programming languages

24270
17:06:56,879 --> 17:07:01,915
and with app engine standard it is

24271
17:06:59,040 --> 17:07:04,879
intended to run for free or at a very

24272
17:07:01,915 --> 17:07:07,360
low cost where you pay only for what you

24273
17:07:04,879 --> 17:07:09,755
need and when you need it with app

24274
17:07:07,360 --> 17:07:12,796
engine standard your application can

24275
17:07:09,756 --> 17:07:16,160
scale to zero instances when there is no

24276
17:07:12,796 --> 17:07:19,200
traffic app engine standard is designed

24277
17:07:16,160 --> 17:07:21,756
for sudden and extreme spikes of traffic

24278
17:07:19,199 --> 17:07:24,635
which require immediate scaling and

24279
17:07:21,756 --> 17:07:27,116
pricing for standard app engine is based

24280
17:07:24,635 --> 17:07:30,080
on instance hours and so when it comes

24281
17:07:27,116 --> 17:07:33,116
to features for app engine flexible the

24282
17:07:30,080 --> 17:07:35,436
application instances run within docker

24283
17:07:33,116 --> 17:07:38,480
containers that includes a custom

24284
17:07:35,436 --> 17:07:40,480
runtime or source code written in other

24285
17:07:38,480 --> 17:07:43,116
programming languages these docker

24286
17:07:40,480 --> 17:07:46,240
containers are then run on compute

24287
17:07:43,116 --> 17:07:48,480
engine vms app engine flexible will run

24288
17:07:46,239 --> 17:07:50,319
any source code that is written in a

24289
17:07:48,480 --> 17:07:52,796
version of any of the supported

24290
17:07:50,319 --> 17:07:55,116
programming languages for app engine

24291
17:07:52,796 --> 17:07:57,436
flexible and unlike the standard

24292
17:07:55,116 --> 17:08:00,400
environment unfortunately there is no

24293
17:07:57,436 --> 17:08:03,360
free quota for app engine flexible as

24294
17:08:00,400 --> 17:08:06,000
well app engine flexible is designed for

24295
17:08:03,360 --> 17:08:08,000
consistent traffic or for applications

24296
17:08:06,000 --> 17:08:11,116
that experience regular traffic

24297
17:08:08,000 --> 17:08:14,480
fluctuations and pricing is based on the

24298
17:08:11,116 --> 17:08:16,720
vm resources and not on instance hours

24299
17:08:14,480 --> 17:08:19,436
like app engine standard and so where

24300
17:08:16,720 --> 17:08:22,080
app engine flexible really shines over

24301
17:08:19,436 --> 17:08:25,040
app engine standard are how the vms are

24302
17:08:22,080 --> 17:08:27,756
managed so instances are health checked

24303
17:08:25,040 --> 17:08:30,160
healed as necessary and co-located with

24304
17:08:27,756 --> 17:08:32,635
other services within the project the

24305
17:08:30,160 --> 17:08:35,360
vm's operating system is updated and

24306
17:08:32,635 --> 17:08:38,239
applied automatically as well vms are

24307
17:08:35,360 --> 17:08:40,239
restarted on a weekly basis to make sure

24308
17:08:38,239 --> 17:08:43,360
any necessary operating system and

24309
17:08:40,239 --> 17:08:46,319
security updates are applied ssh along

24310
17:08:43,360 --> 17:08:48,720
with root access are available to the vm

24311
17:08:46,319 --> 17:08:51,199
instances running your containers now

24312
17:08:48,720 --> 17:08:53,840
deploying applications to app engine is

24313
17:08:51,199 --> 17:08:54,795
as simple as using the gcloud app deploy

24314
17:08:53,839 --> 17:08:57,275
command

24315
17:08:54,796 --> 17:08:59,756
this command automatically builds a

24316
17:08:57,275 --> 17:09:02,795
container image from your configuration

24317
17:08:59,756 --> 17:09:04,955
file by using the cloud build service

24318
17:09:02,796 --> 17:09:08,080
and then deploys that image to app

24319
17:09:04,955 --> 17:09:11,116
engine now an app engine application is

24320
17:09:08,080 --> 17:09:14,240
made up of a single application resource

24321
17:09:11,116 --> 17:09:16,720
that consists of one or more services

24322
17:09:14,239 --> 17:09:19,040
each service can be configured to use

24323
17:09:16,720 --> 17:09:21,040
different runtimes and to operate with

24324
17:09:19,040 --> 17:09:23,436
different performance settings

24325
17:09:21,040 --> 17:09:26,319
services and app engine are used to

24326
17:09:23,436 --> 17:09:28,080
factor your large applications into

24327
17:09:26,319 --> 17:09:30,319
logical components

24328
17:09:28,080 --> 17:09:32,400
that can securely share app engine

24329
17:09:30,319 --> 17:09:35,360
features and communicate with one

24330
17:09:32,400 --> 17:09:37,680
another these app engine services become

24331
17:09:35,360 --> 17:09:40,879
loosely coupled behaving like

24332
17:09:37,680 --> 17:09:43,756
microservices now within each service

24333
17:09:40,879 --> 17:09:47,115
you deploy versions of that service and

24334
17:09:43,756 --> 17:09:49,756
each version then runs within one or

24335
17:09:47,116 --> 17:09:52,000
more instances depending on how much

24336
17:09:49,756 --> 17:09:53,595
traffic you configured it to handle

24337
17:09:52,000 --> 17:09:56,559
having multiple versions of your

24338
17:09:53,595 --> 17:09:58,559
application within each service allows

24339
17:09:56,559 --> 17:10:00,720
you to quickly switch between different

24340
17:09:58,559 --> 17:10:03,680
versions of that application for

24341
17:10:00,720 --> 17:10:06,559
rollbacks testing or other temporary

24342
17:10:03,680 --> 17:10:08,160
events you can route traffic to one or

24343
17:10:06,559 --> 17:10:11,115
more specific versions of your

24344
17:10:08,160 --> 17:10:12,480
application by migrating traffic to one

24345
17:10:11,116 --> 17:10:14,880
specific version

24346
17:10:12,480 --> 17:10:17,040
or splitting your traffic between two

24347
17:10:14,879 --> 17:10:20,159
separate versions and so the versions

24348
17:10:17,040 --> 17:10:23,275
within your services run on one or more

24349
17:10:20,160 --> 17:10:26,000
instances by default app engine scales

24350
17:10:23,275 --> 17:10:28,635
your application to match the load your

24351
17:10:26,000 --> 17:10:31,040
applications will scale up the number of

24352
17:10:28,635 --> 17:10:34,080
instances that are running to provide

24353
17:10:31,040 --> 17:10:37,595
consistent performance or scale down to

24354
17:10:34,080 --> 17:10:40,000
minimize idle instances and reduce costs

24355
17:10:37,595 --> 17:10:43,040
now when it comes to managing instances

24356
17:10:40,000 --> 17:10:45,436
app engine can automatically create and

24357
17:10:43,040 --> 17:10:48,239
shut down instances as traffic

24358
17:10:45,436 --> 17:10:49,916
fluctuates or you can specify a number

24359
17:10:48,239 --> 17:10:52,239
of instances to run

24360
17:10:49,915 --> 17:10:54,955
regardless of the amount of traffic you

24361
17:10:52,239 --> 17:10:57,680
can also configure how and when new

24362
17:10:54,955 --> 17:11:00,080
instances are created by specifying a

24363
17:10:57,680 --> 17:11:02,400
scaling type for your application and

24364
17:11:00,080 --> 17:11:04,955
how you do this is you specify the

24365
17:11:02,400 --> 17:11:07,360
scaling type in your application's

24366
17:11:04,955 --> 17:11:09,199
app.yaml file now there are three

24367
17:11:07,360 --> 17:11:11,275
different types of scaling choices to

24368
17:11:09,199 --> 17:11:14,000
choose from and the first one being

24369
17:11:11,275 --> 17:11:17,199
automatic scaling and this scaling type

24370
17:11:14,000 --> 17:11:19,839
creates instances based on request rate

24371
17:11:17,199 --> 17:11:22,795
response latencies and other application

24372
17:11:19,839 --> 17:11:25,039
metrics you can specify thresholds for

24373
17:11:22,796 --> 17:11:27,840
each of these metrics as well as a

24374
17:11:25,040 --> 17:11:30,319
minimum number instances to keep running

24375
17:11:27,839 --> 17:11:32,479
at all times if you use automatic

24376
17:11:30,319 --> 17:11:35,199
scaling each instance in your

24377
17:11:32,480 --> 17:11:37,680
application has its own queue for

24378
17:11:35,199 --> 17:11:39,915
incoming requests before the queues

24379
17:11:37,680 --> 17:11:42,796
become long enough to have a visible

24380
17:11:39,915 --> 17:11:45,275
effect on your app's latency app engine

24381
17:11:42,796 --> 17:11:48,160
automatically creates one or more new

24382
17:11:45,275 --> 17:11:51,040
instances to handle the load the second

24383
17:11:48,160 --> 17:11:53,680
type is basic scaling and this creates

24384
17:11:51,040 --> 17:11:56,720
instances when your application receives

24385
17:11:53,680 --> 17:11:59,116
requests each instance is shut down when

24386
17:11:56,720 --> 17:12:02,080
the application becomes idle basic

24387
17:11:59,116 --> 17:12:04,480
scaling is fantastic for intermittent

24388
17:12:02,080 --> 17:12:07,116
workloads or if you're looking to drive

24389
17:12:04,480 --> 17:12:09,756
your application by user activity app

24390
17:12:07,116 --> 17:12:11,520
engine will try to keep your costs low

24391
17:12:09,756 --> 17:12:14,080
even though it might result in higher

24392
17:12:11,519 --> 17:12:16,159
latency as the volume of incoming

24393
17:12:14,080 --> 17:12:18,720
requests increase and so the last

24394
17:12:16,160 --> 17:12:20,480
scaling type is manual scaling and this

24395
17:12:18,720 --> 17:12:23,040
is where you specify the number of

24396
17:12:20,480 --> 17:12:25,276
instances that continuously run

24397
17:12:23,040 --> 17:12:27,680
regardless of the load so these are

24398
17:12:25,275 --> 17:12:30,879
instances that are constantly running

24399
17:12:27,680 --> 17:12:33,040
and this allows complex startup tasks on

24400
17:12:30,879 --> 17:12:35,839
the instances to have already been

24401
17:12:33,040 --> 17:12:38,319
completed when receiving requests and

24402
17:12:35,839 --> 17:12:41,039
applications that rely on the state of

24403
17:12:38,319 --> 17:12:43,360
the memory over time so this is ideal

24404
17:12:41,040 --> 17:12:46,400
for instances whose configuration

24405
17:12:43,360 --> 17:12:48,796
scripts require some time to fully run

24406
17:12:46,400 --> 17:12:51,275
their course so now that i've gone over

24407
17:12:48,796 --> 17:12:54,400
managing the instances i wanted to take

24408
17:12:51,275 --> 17:12:57,115
a few moments to go over how app engine

24409
17:12:54,400 --> 17:12:59,840
manages traffic starting with traffic

24410
17:12:57,116 --> 17:13:02,796
migration now traffic migration switches

24411
17:12:59,839 --> 17:13:05,275
the request routing between the versions

24412
17:13:02,796 --> 17:13:08,160
within a service of your application

24413
17:13:05,275 --> 17:13:10,159
moving traffic from one or more versions

24414
17:13:08,160 --> 17:13:12,636
to a single new version so when

24415
17:13:10,160 --> 17:13:15,436
deploying a new version with the same

24416
17:13:12,635 --> 17:13:17,595
name of an existing version it causes an

24417
17:13:15,436 --> 17:13:19,916
immediate traffic migration all

24418
17:13:17,595 --> 17:13:22,239
instances of the old version are

24419
17:13:19,915 --> 17:13:24,239
immediately shut down in app engine

24420
17:13:22,239 --> 17:13:27,275
standard you can choose to route

24421
17:13:24,239 --> 17:13:30,319
requests to the target version either

24422
17:13:27,275 --> 17:13:32,955
immediately or gradually you can also

24423
17:13:30,319 --> 17:13:35,595
choose to enable warm-up requests if you

24424
17:13:32,955 --> 17:13:38,559
want the traffic gradually migrated to a

24425
17:13:35,595 --> 17:13:41,360
version gradual traffic migration is not

24426
17:13:38,559 --> 17:13:44,079
supported in app engine flexible and

24427
17:13:41,360 --> 17:13:46,000
traffic is migrated immediately now one

24428
17:13:44,080 --> 17:13:48,400
thing to note is that when you

24429
17:13:46,000 --> 17:13:51,360
immediately migrate traffic to a new

24430
17:13:48,400 --> 17:13:53,596
version without any running instances

24431
17:13:51,360 --> 17:13:56,400
then your application will have a spike

24432
17:13:53,595 --> 17:13:59,040
in latency for loading requests

24433
17:13:56,400 --> 17:14:01,436
while instances are being created and so

24434
17:13:59,040 --> 17:14:03,840
another way to manage traffic on app

24435
17:14:01,436 --> 17:14:06,400
engine is through traffic splitting now

24436
17:14:03,839 --> 17:14:09,359
you can use traffic splitting to specify

24437
17:14:06,400 --> 17:14:11,916
a percentage distribution of traffic

24438
17:14:09,360 --> 17:14:14,796
across two or more of the versions

24439
17:14:11,915 --> 17:14:16,795
within a service so in this example if

24440
17:14:14,796 --> 17:14:19,436
i'm deploying a new version of my

24441
17:14:16,796 --> 17:14:22,240
service i can decide on how i want to

24442
17:14:19,436 --> 17:14:24,480
distribute traffic to each version of my

24443
17:14:22,239 --> 17:14:26,955
application and so i decide that i want

24444
17:14:24,480 --> 17:14:28,480
to keep my current version in play but

24445
17:14:26,955 --> 17:14:32,080
roll out the new version of my

24446
17:14:28,480 --> 17:14:34,480
application to 10 of my users leaving

24447
17:14:32,080 --> 17:14:37,276
the old version was still 90 of the

24448
17:14:34,480 --> 17:14:39,840
traffic going to that version and so

24449
17:14:37,275 --> 17:14:42,955
splitting traffic allows you to conduct

24450
17:14:39,839 --> 17:14:45,595
a b testing between your versions and

24451
17:14:42,955 --> 17:14:48,319
provides control over the pace when

24452
17:14:45,595 --> 17:14:50,399
rolling out features and just as a note

24453
17:14:48,319 --> 17:14:52,796
when you've specified two or more

24454
17:14:50,400 --> 17:14:55,756
versions for splitting you must choose

24455
17:14:52,796 --> 17:14:59,520
whether to split traffic by either by

24456
17:14:55,756 --> 17:15:02,000
either ip address http cookie or do it

24457
17:14:59,519 --> 17:15:05,039
randomly now again this has not been a

24458
17:15:02,000 --> 17:15:07,680
deep dive lesson on app engine but i

24459
17:15:05,040 --> 17:15:09,840
hope this has given you an overview of

24460
17:15:07,680 --> 17:15:12,239
the features that are available as the

24461
17:15:09,839 --> 17:15:14,559
exam touches on these features i also

24462
17:15:12,239 --> 17:15:17,519
wanted to give you some familiarity with

24463
17:15:14,559 --> 17:15:19,839
the service itself as coming up next i

24464
17:15:17,519 --> 17:15:22,159
will be going into a demo where we will

24465
17:15:19,839 --> 17:15:24,239
be launching an application using app

24466
17:15:22,160 --> 17:15:26,400
engine and trying on some of these

24467
17:15:24,239 --> 17:15:28,400
features for yourself and so that's

24468
17:15:26,400 --> 17:15:30,480
pretty much all i wanted to cover

24469
17:15:28,400 --> 17:15:32,635
when it comes to app engine so you can

24470
17:15:30,480 --> 17:15:34,560
now mark this lesson as complete and

24471
17:15:32,635 --> 17:15:36,479
whenever you're ready join me in the

24472
17:15:34,559 --> 17:15:38,720
console where you will deploy an

24473
17:15:36,480 --> 17:15:40,780
application on app engine and try out

24474
17:15:38,720 --> 17:15:44,720
some of these features for yourself

24475
17:15:40,779 --> 17:15:47,275
[Music]

24476
17:15:44,720 --> 17:15:49,275
welcome back and in this demo you're

24477
17:15:47,275 --> 17:15:52,400
going to build another application to

24478
17:15:49,275 --> 17:15:55,115
deploy on app engine called serverless

24479
17:15:52,400 --> 17:15:57,436
bowties this demo will run you through

24480
17:15:55,116 --> 17:16:00,000
the ins and outs of deploying a website

24481
17:15:57,436 --> 17:16:02,480
application on app engine along with

24482
17:16:00,000 --> 17:16:04,559
managing it while experiencing no

24483
17:16:02,480 --> 17:16:07,276
downtime so there's quite a bit of work

24484
17:16:04,559 --> 17:16:09,915
to do here so with that being said let's

24485
17:16:07,275 --> 17:16:13,595
dive in and so here in my console i am

24486
17:16:09,915 --> 17:16:15,839
logged in as tonybowtieace gmail.com

24487
17:16:13,595 --> 17:16:18,000
under project bowtie inc and so the

24488
17:16:15,839 --> 17:16:20,319
first thing i want to do here is i want

24489
17:16:18,000 --> 17:16:22,000
to head on over to app engine so in

24490
17:16:20,319 --> 17:16:24,400
order to do that i'm going to go to the

24491
17:16:22,000 --> 17:16:26,319
top left-hand navigation menu and i'm

24492
17:16:24,400 --> 17:16:27,680
going to go down to app engine and

24493
17:16:26,319 --> 17:16:29,756
because i haven't created any

24494
17:16:27,680 --> 17:16:32,239
applications i'm going to be brought to

24495
17:16:29,756 --> 17:16:34,160
this splash page now in order to deploy

24496
17:16:32,239 --> 17:16:36,239
this application we're not going to be

24497
17:16:34,160 --> 17:16:38,160
doing it through the console but we will

24498
17:16:36,239 --> 17:16:39,756
be doing it through the command line and

24499
17:16:38,160 --> 17:16:42,080
so to get started with that i'm going to

24500
17:16:39,756 --> 17:16:43,595
go up to the top and open up cloud shell

24501
17:16:42,080 --> 17:16:45,520
i'm going to make this bigger for better

24502
17:16:43,595 --> 17:16:47,756
viewing and so in order for me to get

24503
17:16:45,519 --> 17:16:50,635
the code to launch this application i'm

24504
17:16:47,756 --> 17:16:52,880
going to be cloning my github repository

24505
17:16:50,635 --> 17:16:55,595
into cloud shell and so for those of you

24506
17:16:52,879 --> 17:16:58,000
who haven't deleted your repository from

24507
17:16:55,595 --> 17:17:00,079
the last demo you can go ahead and skip

24508
17:16:58,000 --> 17:17:02,239
the cloning step for those of you who

24509
17:17:00,080 --> 17:17:04,796
need to clone your repository you will

24510
17:17:02,239 --> 17:17:06,879
find a link to the instructions in the

24511
17:17:04,796 --> 17:17:08,956
lesson text and there you'll be able to

24512
17:17:06,879 --> 17:17:11,275
retrieve the command which will be git

24513
17:17:08,955 --> 17:17:13,040
clone along with the address of the repo

24514
17:17:11,275 --> 17:17:15,360
i'm going to hit enter and because i've

24515
17:17:13,040 --> 17:17:17,756
already cloned this repo i'm receiving

24516
17:17:15,360 --> 17:17:19,756
this error i'm going to do an ls and as

24517
17:17:17,756 --> 17:17:21,840
you can see here the google cloud

24518
17:17:19,756 --> 17:17:23,916
associate cloud engineer repo has

24519
17:17:21,839 --> 17:17:26,159
already been cloned so i'm going to cd

24520
17:17:23,915 --> 17:17:28,159
into that directory and in order to get

24521
17:17:26,160 --> 17:17:30,160
the code i'm going to simply run the

24522
17:17:28,160 --> 17:17:32,480
command git pull

24523
17:17:30,160 --> 17:17:34,636
to get the latest and i'm going to

24524
17:17:32,480 --> 17:17:36,720
simply clear my screen and so now that

24525
17:17:34,635 --> 17:17:38,720
i've retrieved all the code that i need

24526
17:17:36,720 --> 17:17:40,880
in order to deploy it i need to go to

24527
17:17:38,720 --> 17:17:44,000
that directory and that directory is

24528
17:17:40,879 --> 17:17:47,275
going to be 11 serverless services

24529
17:17:44,000 --> 17:17:49,436
forward slash 0 1 serverless bowties and

24530
17:17:47,275 --> 17:17:51,360
hit enter you're going to run ls and

24531
17:17:49,436 --> 17:17:55,116
here you will find two versions of the

24532
17:17:51,360 --> 17:17:57,520
website application site v1 and site v2

24533
17:17:55,116 --> 17:17:59,520
along with the instructions if you want

24534
17:17:57,519 --> 17:18:01,519
to follow straight from here and so i

24535
17:17:59,519 --> 17:18:04,079
want to go ahead and deploy my first

24536
17:18:01,519 --> 17:18:08,479
website application so i'm going to cd

24537
17:18:04,080 --> 17:18:11,276
into site v1 ls and here you will see

24538
17:18:08,480 --> 17:18:13,520
the app.yaml which is the configuration

24539
17:18:11,275 --> 17:18:15,756
file that you will need in order to run

24540
17:18:13,519 --> 17:18:18,000
the application on app engine and so

24541
17:18:15,756 --> 17:18:20,160
before i go ahead and deploy this i

24542
17:18:18,000 --> 17:18:22,319
wanted to take a moment to show you the

24543
17:18:20,160 --> 17:18:24,240
application configuration so i'm going

24544
17:18:22,319 --> 17:18:25,915
to go ahead and open it up in cloud

24545
17:18:24,239 --> 17:18:29,275
shell editor so i'm going to type in

24546
17:18:25,915 --> 17:18:32,479
edit app.yaml enter and as you can see

24547
17:18:29,275 --> 17:18:35,199
here my runtime is python 3.7 and as you

24548
17:18:32,480 --> 17:18:37,756
can see i have a default expiration of

24549
17:18:35,199 --> 17:18:40,000
two seconds along with an expiration

24550
17:18:37,756 --> 17:18:42,239
underneath each handler and this is due

24551
17:18:40,000 --> 17:18:44,635
to the caching issue that happens with

24552
17:18:42,239 --> 17:18:46,635
app engine and so in order to simulate

24553
17:18:44,635 --> 17:18:48,879
traffic splitting between the two

24554
17:18:46,635 --> 17:18:51,839
website applications in order to make

24555
17:18:48,879 --> 17:18:54,000
things easy i needed to expire the cash

24556
17:18:51,839 --> 17:18:56,000
and this is an easy way to do it now

24557
17:18:54,000 --> 17:18:58,160
there may be applications out there that

24558
17:18:56,000 --> 17:19:00,635
do need that caching and so the

24559
17:18:58,160 --> 17:19:02,956
expiration may be a lot higher but for

24560
17:19:00,635 --> 17:19:05,275
the purposes of this demo two seconds

24561
17:19:02,955 --> 17:19:08,000
expiration should suffice as well

24562
17:19:05,275 --> 17:19:09,839
explain the two handlers here the first

24563
17:19:08,000 --> 17:19:12,160
one showing the files that will be

24564
17:19:09,839 --> 17:19:14,319
uploaded to the cloud storage bucket as

24565
17:19:12,160 --> 17:19:16,400
well as the second stating what static

24566
17:19:14,319 --> 17:19:18,635
files will be presented and so i'm going

24567
17:19:16,400 --> 17:19:20,000
to go ahead back over to my terminal and

24568
17:19:18,635 --> 17:19:22,159
i'm going to go ahead and clear my

24569
17:19:20,000 --> 17:19:25,436
screen and i'm going to go ahead and run

24570
17:19:22,160 --> 17:19:28,080
the command gcloud app deploy with the

24571
17:19:25,436 --> 17:19:30,000
flag dash dash version and this is going

24572
17:19:28,080 --> 17:19:32,480
to be version one so i'm going to go

24573
17:19:30,000 --> 17:19:34,955
ahead and hit enter and you may get a

24574
17:19:32,480 --> 17:19:36,956
pop-up asking you to authorize this api

24575
17:19:34,955 --> 17:19:38,795
call using your credentials and you want

24576
17:19:36,955 --> 17:19:41,519
to click on authorize and you're going

24577
17:19:38,796 --> 17:19:43,436
to be prompted to enter in a region that

24578
17:19:41,519 --> 17:19:45,519
you want to deploy your website

24579
17:19:43,436 --> 17:19:48,319
application to we want to keep this in

24580
17:19:45,519 --> 17:19:49,755
us east one so i'm going to type in 15

24581
17:19:48,319 --> 17:19:51,116
hit enter

24582
17:19:49,756 --> 17:19:53,436
and you're going to be prompted to

24583
17:19:51,116 --> 17:19:55,596
verify your configuration for your

24584
17:19:53,436 --> 17:19:56,880
application before it's deployed you're

24585
17:19:55,595 --> 17:19:59,115
also going to be prompted if you want to

24586
17:19:56,879 --> 17:20:01,839
continue definitely yes so i'm going to

24587
17:19:59,116 --> 17:20:03,756
hit y enter and so now as you've seen

24588
17:20:01,839 --> 17:20:06,000
the files have been uploaded to cloud

24589
17:20:03,756 --> 17:20:08,319
storage and app engine is going to take

24590
17:20:06,000 --> 17:20:10,080
a few minutes to create the service

24591
17:20:08,319 --> 17:20:12,080
along with the version so i'm going to

24592
17:20:10,080 --> 17:20:13,840
let it do the needful and i'll be back

24593
17:20:12,080 --> 17:20:15,916
before you know it okay and my

24594
17:20:13,839 --> 17:20:17,435
application has been deployed now

24595
17:20:15,915 --> 17:20:20,079
although you don't see it here in the

24596
17:20:17,436 --> 17:20:22,400
console it has been deployed all i need

24597
17:20:20,080 --> 17:20:24,720
to do is refresh my screen but i wanted

24598
17:20:22,400 --> 17:20:26,720
to just point out a couple things that

24599
17:20:24,720 --> 17:20:29,116
is shown here in the terminal the first

24600
17:20:26,720 --> 17:20:31,275
one being the default service now the

24601
17:20:29,116 --> 17:20:34,000
first time you deploy a version of your

24602
17:20:31,275 --> 17:20:36,879
application it will always deploy to the

24603
17:20:34,000 --> 17:20:39,519
default service initially and only then

24604
17:20:36,879 --> 17:20:42,079
will you be able to deploy another named

24605
17:20:39,519 --> 17:20:44,719
service to app engine now here where it

24606
17:20:42,080 --> 17:20:46,880
says setting traffic split for service

24607
17:20:44,720 --> 17:20:49,436
this is referring to the configuration

24608
17:20:46,879 --> 17:20:51,435
for traffic splitting being applied in

24609
17:20:49,436 --> 17:20:54,000
the background which i will be getting

24610
17:20:51,436 --> 17:20:56,880
into a little bit later and lastly the

24611
17:20:54,000 --> 17:20:58,559
url shown for the deployed service will

24612
17:20:56,879 --> 17:21:02,595
always start with the name of your

24613
17:20:58,559 --> 17:21:02,595
project followed by.ue.r.appspot.com

24614
17:21:03,839 --> 17:21:08,479
which is why in production google

24615
17:21:06,000 --> 17:21:10,400
recommends to run app engine in a

24616
17:21:08,480 --> 17:21:12,796
completely separate project

24617
17:21:10,400 --> 17:21:14,720
before this demo running it in the same

24618
17:21:12,796 --> 17:21:17,276
project that we've been using will

24619
17:21:14,720 --> 17:21:19,200
suffice okay so let's go ahead and take

24620
17:21:17,275 --> 17:21:21,199
a look at the application so i'm going

24621
17:21:19,199 --> 17:21:24,000
to go back up to the top here to the

24622
17:21:21,199 --> 17:21:26,955
navigation menu and i'm gonna go down to

24623
17:21:24,000 --> 17:21:29,360
app engine and go over to services and

24624
17:21:26,955 --> 17:21:31,756
so here you will see the default service

24625
17:21:29,360 --> 17:21:34,879
with version one and if i go over to

24626
17:21:31,756 --> 17:21:35,916
versions i will see here my version the

24627
17:21:34,879 --> 17:21:38,479
status

24628
17:21:35,915 --> 17:21:41,519
the traffic allocation along with any

24629
17:21:38,480 --> 17:21:44,000
instances that it needs the run time the

24630
17:21:41,519 --> 17:21:46,399
specific environment and i'll have some

24631
17:21:44,000 --> 17:21:48,720
diagnostic tools here that i could use

24632
17:21:46,400 --> 17:21:51,116
and so because this is a static website

24633
17:21:48,720 --> 17:21:53,520
application we won't be using any

24634
17:21:51,116 --> 17:21:56,000
instances and so this will always show a

24635
17:21:53,519 --> 17:21:58,159
zero so now i want to head back on over

24636
17:21:56,000 --> 17:22:00,239
to services and i'm going to launch my

24637
17:21:58,160 --> 17:22:01,276
application by simply clicking on this

24638
17:22:00,239 --> 17:22:04,559
hot link

24639
17:22:01,275 --> 17:22:06,635
and success serverless bow ties for all

24640
17:22:04,559 --> 17:22:08,720
and so it looks like my application has

24641
17:22:06,635 --> 17:22:10,559
been successfully deployed so i'm going

24642
17:22:08,720 --> 17:22:12,160
to close down this tab now there's a

24643
17:22:10,559 --> 17:22:14,795
couple of things that i wanted to run

24644
17:22:12,160 --> 17:22:17,276
through here on the left hand menu just

24645
17:22:14,796 --> 17:22:19,756
for your information so here i can click

24646
17:22:17,275 --> 17:22:22,879
on instances and if i was running any

24647
17:22:19,756 --> 17:22:25,116
instances i am able to see a summary of

24648
17:22:22,879 --> 17:22:27,040
those instances and i can click on the

24649
17:22:25,116 --> 17:22:29,596
drop down here and choose a different

24650
17:22:27,040 --> 17:22:32,160
metric and find out any information that

24651
17:22:29,595 --> 17:22:34,795
i need as well i can click on this drop

24652
17:22:32,160 --> 17:22:37,116
down and select a version if i had

24653
17:22:34,796 --> 17:22:39,436
multiple versions which i do not

24654
17:22:37,116 --> 17:22:41,840
clicking on task queues here is where i

24655
17:22:39,436 --> 17:22:43,596
can manage my task queues but this is a

24656
17:22:41,839 --> 17:22:46,479
legacy service that will soon be

24657
17:22:43,595 --> 17:22:48,879
deprecated clicking on cron jobs here i

24658
17:22:46,480 --> 17:22:51,360
can schedule any tasks that i need to

24659
17:22:48,879 --> 17:22:54,319
run at a specific time on a recurring

24660
17:22:51,360 --> 17:22:56,559
basis i can edit or add any firewall

24661
17:22:54,319 --> 17:22:59,275
rules if i need to and as you can see

24662
17:22:56,559 --> 17:23:02,635
the default firewall rule is open to the

24663
17:22:59,275 --> 17:23:04,635
world now you probably noticed memcache

24664
17:23:02,635 --> 17:23:07,199
as being one of the options here in the

24665
17:23:04,635 --> 17:23:09,040
menu but this is a legacy service that

24666
17:23:07,199 --> 17:23:11,839
will soon be deprecated

24667
17:23:09,040 --> 17:23:14,879
memcache is a distributed in-memory data

24668
17:23:11,839 --> 17:23:18,079
store that is bundled into the python to

24669
17:23:14,879 --> 17:23:21,115
runtime acting as a cache for specific

24670
17:23:18,080 --> 17:23:23,200
tasks and google recommends moving to

24671
17:23:21,116 --> 17:23:25,680
memory store for redis if you're

24672
17:23:23,199 --> 17:23:27,915
planning on applying caching for your

24673
17:23:25,680 --> 17:23:30,080
app engine application and so i'm not

24674
17:23:27,915 --> 17:23:32,719
sure how much longer this will be here

24675
17:23:30,080 --> 17:23:34,240
and lastly under settings here is where

24676
17:23:32,720 --> 17:23:37,275
you can change your settings for your

24677
17:23:34,239 --> 17:23:40,319
application i can add any custom domains

24678
17:23:37,275 --> 17:23:42,795
any ssl certificates as well as setting

24679
17:23:40,319 --> 17:23:45,360
up email for any applications that want

24680
17:23:42,796 --> 17:23:47,360
to send email out to your users okay and

24681
17:23:45,360 --> 17:23:49,680
now that we've done that walkthrough i

24682
17:23:47,360 --> 17:23:51,756
want to go ahead and deploy my second

24683
17:23:49,680 --> 17:23:53,436
version of the application and so i'm

24684
17:23:51,756 --> 17:23:55,360
going to go ahead back down to cloud

24685
17:23:53,436 --> 17:23:57,756
shell i'm going to quickly clear my

24686
17:23:55,360 --> 17:24:00,879
screen and i want to move into the site

24687
17:23:57,756 --> 17:24:02,559
v2 directory so i'm going to hit cd dot

24688
17:24:00,879 --> 17:24:05,275
dot which will bring you back one

24689
17:24:02,559 --> 17:24:08,000
directory you do an ls and i'm going to

24690
17:24:05,275 --> 17:24:10,635
change directories into site v2 and do

24691
17:24:08,000 --> 17:24:12,955
an ls just to verify and yes you will

24692
17:24:10,635 --> 17:24:15,040
see serverless bow ties too i'm going to

24693
17:24:12,955 --> 17:24:17,275
quickly clear my screen and i'm going to

24694
17:24:15,040 --> 17:24:20,480
run the same command as before which is

24695
17:24:17,275 --> 17:24:23,199
gcloud app deploy with the version flag

24696
17:24:20,480 --> 17:24:25,200
dash dash version and instead of one i'm

24697
17:24:23,199 --> 17:24:27,115
going to launch version 2. so i'm going

24698
17:24:25,199 --> 17:24:29,755
to hit enter i'm going to be prompted if

24699
17:24:27,116 --> 17:24:31,840
i want to continue yes i do and as you

24700
17:24:29,756 --> 17:24:34,559
can see the files have been uploaded to

24701
17:24:31,839 --> 17:24:36,955
cloud storage for version 2 of the

24702
17:24:34,559 --> 17:24:39,040
website application and app engine is

24703
17:24:36,955 --> 17:24:41,436
going to take a few minutes to create

24704
17:24:39,040 --> 17:24:42,796
the service along with the version so

24705
17:24:41,436 --> 17:24:44,796
i'm going to let it cook here for a

24706
17:24:42,796 --> 17:24:47,276
couple minutes and i'll be back before

24707
17:24:44,796 --> 17:24:49,756
you can say cat in the hat okay so

24708
17:24:47,275 --> 17:24:52,559
version 2 has been deployed and so if i

24709
17:24:49,756 --> 17:24:54,955
go up here to the console and i click on

24710
17:24:52,559 --> 17:24:57,915
refresh you should see version 2 of your

24711
17:24:54,955 --> 17:25:00,795
service and as you can see 100 of the

24712
17:24:57,915 --> 17:25:02,955
traffic has been allocated to version 2

24713
17:25:00,796 --> 17:25:05,360
automatically and this is the default

24714
17:25:02,955 --> 17:25:07,595
behavior for whenever you launch a new

24715
17:25:05,360 --> 17:25:10,559
version of your service the only way to

24716
17:25:07,595 --> 17:25:13,115
avoid this is to deploy your new version

24717
17:25:10,559 --> 17:25:15,360
with the no promote flag and so if i go

24718
17:25:13,116 --> 17:25:17,436
back to services here on the left and i

24719
17:25:15,360 --> 17:25:20,000
click on the default service

24720
17:25:17,436 --> 17:25:21,756
you should see success for version two

24721
17:25:20,000 --> 17:25:24,080
and so i know that my website

24722
17:25:21,756 --> 17:25:25,916
application for version 2 has been

24723
17:25:24,080 --> 17:25:27,680
deployed successfully so i'm going to

24724
17:25:25,915 --> 17:25:29,755
close down this tab again and i'm going

24725
17:25:27,680 --> 17:25:32,160
to go back to versions and so what i

24726
17:25:29,756 --> 17:25:35,436
want to do now is i want to simulate an

24727
17:25:32,160 --> 17:25:37,916
a b test or blue green deployment by

24728
17:25:35,436 --> 17:25:40,720
migrating my traffic back to the old

24729
17:25:37,915 --> 17:25:42,879
version in this case being version one

24730
17:25:40,720 --> 17:25:45,116
so in production let's say that you

24731
17:25:42,879 --> 17:25:47,519
would release a new version and the

24732
17:25:45,116 --> 17:25:49,596
version doesn't go according to plan you

24733
17:25:47,519 --> 17:25:52,079
can always go back to the previous

24734
17:25:49,595 --> 17:25:54,159
version and app engine allows you to do

24735
17:25:52,080 --> 17:25:56,480
that very easily and so i'm going to

24736
17:25:54,160 --> 17:25:58,956
click on version 1 and i'm going to go

24737
17:25:56,480 --> 17:26:00,796
up to the top menu and click on migrate

24738
17:25:58,955 --> 17:26:03,275
traffic you'll be prompted if you want

24739
17:26:00,796 --> 17:26:05,276
to migrate traffic yes i do so i'm going

24740
17:26:03,275 --> 17:26:07,519
to click on migrate and it should take a

24741
17:26:05,275 --> 17:26:10,720
minute here and traffic should migrate

24742
17:26:07,519 --> 17:26:12,479
over to version one and success traffic

24743
17:26:10,720 --> 17:26:14,635
has been migrated and so we want to

24744
17:26:12,480 --> 17:26:16,560
verify that this has happened i'm gonna

24745
17:26:14,635 --> 17:26:19,199
go back to services i'm gonna click on

24746
17:26:16,559 --> 17:26:21,839
the default service and yes the traffic

24747
17:26:19,199 --> 17:26:24,000
has been allocated to version one okay

24748
17:26:21,839 --> 17:26:26,399
so i'm going to shut down this tab i'm

24749
17:26:24,000 --> 17:26:28,635
going to go back to versions and so now

24750
17:26:26,400 --> 17:26:30,796
what i want to do is i want to simulate

24751
17:26:28,635 --> 17:26:32,796
splitting the traffic between the two

24752
17:26:30,796 --> 17:26:35,436
versions and so in order for you to do

24753
17:26:32,796 --> 17:26:37,680
this you can go up to the top menu

24754
17:26:35,436 --> 17:26:40,319
click on split traffic and you'll be

24755
17:26:37,680 --> 17:26:42,879
prompted with a new menu here and here i

24756
17:26:40,319 --> 17:26:44,720
can choose from different versions and

24757
17:26:42,879 --> 17:26:47,360
because i only have two versions i'm

24758
17:26:44,720 --> 17:26:49,916
going to add version 2 and in order to

24759
17:26:47,360 --> 17:26:52,160
allocate the traffic between the two i

24760
17:26:49,915 --> 17:26:53,755
can either use this slider

24761
17:26:52,160 --> 17:26:56,320
and as you can see the allocation

24762
17:26:53,756 --> 17:26:58,000
percentage will change or i can simply

24763
17:26:56,319 --> 17:27:00,559
just type it in and so i'm going to

24764
17:26:58,000 --> 17:27:02,635
leave this at 50 percent so fifty

24765
17:27:00,559 --> 17:27:04,955
percent of version one fifty percent of

24766
17:27:02,635 --> 17:27:07,116
version two i'm going to split traffic

24767
17:27:04,955 --> 17:27:09,199
randomly i'm gonna move this down just a

24768
17:27:07,116 --> 17:27:11,276
little bit and so that's exactly how you

24769
17:27:09,199 --> 17:27:12,879
wanna allocate your traffic and so once

24770
17:27:11,275 --> 17:27:14,479
you've completed that you can simply

24771
17:27:12,879 --> 17:27:16,559
click on save it's going to take a

24772
17:27:14,480 --> 17:27:18,636
moment to update the settings and it's

24773
17:27:16,559 --> 17:27:20,795
been successful so if i head back on

24774
17:27:18,635 --> 17:27:22,955
over to the previous page you can see

24775
17:27:20,796 --> 17:27:25,276
here that traffic has been allocated to

24776
17:27:22,955 --> 17:27:27,595
both versions and so now in order to

24777
17:27:25,275 --> 17:27:29,680
verify this what you're going to do is

24778
17:27:27,595 --> 17:27:32,000
go over to services and click on the

24779
17:27:29,680 --> 17:27:34,480
default hot link and you'll see version

24780
17:27:32,000 --> 17:27:36,879
one but if i continuously refresh my

24781
17:27:34,480 --> 17:27:39,520
screen i can see that here i have

24782
17:27:36,879 --> 17:27:42,239
version two so because it's random i

24783
17:27:39,519 --> 17:27:44,955
have a 50 chance of getting version 1

24784
17:27:42,239 --> 17:27:47,436
and a 50 chance of getting version 2.

24785
17:27:44,955 --> 17:27:49,360
and so this is a simulation of splitting

24786
17:27:47,436 --> 17:27:52,239
traffic to different versions and

24787
17:27:49,360 --> 17:27:54,319
usually with a b testing only a small

24788
17:27:52,239 --> 17:27:56,955
percentage of the traffic is routed to

24789
17:27:54,319 --> 17:27:59,519
the new version until verification can

24790
17:27:56,955 --> 17:28:02,159
be made that the new version deployed

24791
17:27:59,519 --> 17:28:04,239
has indeed been successful and this can

24792
17:28:02,160 --> 17:28:06,480
be done by receiving feedback from the

24793
17:28:04,239 --> 17:28:08,879
users and so now i wanted to take a

24794
17:28:06,480 --> 17:28:10,796
quick moment to congratulate you on

24795
17:28:08,879 --> 17:28:13,115
making it through this demo and hope

24796
17:28:10,796 --> 17:28:15,200
that it has been extremely useful in

24797
17:28:13,116 --> 17:28:18,000
excelling your knowledge in deploying

24798
17:28:15,199 --> 17:28:20,239
and managing applications on app engine

24799
17:28:18,000 --> 17:28:22,955
so just as a recap you've cloned the

24800
17:28:20,239 --> 17:28:25,199
repo to cloud shell you then deployed

24801
17:28:22,955 --> 17:28:27,756
version one of your application into app

24802
17:28:25,199 --> 17:28:29,435
engine you verified its launch and then

24803
17:28:27,756 --> 17:28:31,680
you deployed version two of the

24804
17:28:29,436 --> 17:28:34,239
application and verified its launch as

24805
17:28:31,680 --> 17:28:36,635
well you then migrated traffic from

24806
17:28:34,239 --> 17:28:39,199
version two over to version one and then

24807
17:28:36,635 --> 17:28:42,319
you went ahead and split traffic between

24808
17:28:39,199 --> 17:28:45,039
both versions and allotted 50 of the

24809
17:28:42,319 --> 17:28:47,275
traffic allocation to each version and

24810
17:28:45,040 --> 17:28:49,116
so now before you go i want to make sure

24811
17:28:47,275 --> 17:28:51,519
that we clean up any resources that

24812
17:28:49,116 --> 17:28:54,319
we've deployed so that we don't incur

24813
17:28:51,519 --> 17:28:57,275
any unnecessary costs and so the way to

24814
17:28:54,319 --> 17:28:59,595
do this is very simple so first step you

24815
17:28:57,275 --> 17:29:02,000
want to go over to the left hand menu

24816
17:28:59,595 --> 17:29:03,915
and click on settings and simply click

24817
17:29:02,000 --> 17:29:06,319
on disable application you're going to

24818
17:29:03,915 --> 17:29:08,319
be prompted to type in the app's id for

24819
17:29:06,319 --> 17:29:09,839
me it's bowtie inc so i'm going to type

24820
17:29:08,319 --> 17:29:11,839
that in and i'm going to click on

24821
17:29:09,839 --> 17:29:13,915
disable now unfortunately with app

24822
17:29:11,839 --> 17:29:16,719
engine you can't actually delete the

24823
17:29:13,915 --> 17:29:18,635
application it can only be disabled and

24824
17:29:16,720 --> 17:29:20,559
so now here i'm going to hit the hot

24825
17:29:18,635 --> 17:29:22,955
link to go over to the cloud storage

24826
17:29:20,559 --> 17:29:24,879
bucket and as you can see here i have no

24827
17:29:22,955 --> 17:29:25,915
files but i'm going to move back to my

24828
17:29:24,879 --> 17:29:27,755
buckets

24829
17:29:25,915 --> 17:29:29,519
and i'm going to move into the staging

24830
17:29:27,756 --> 17:29:31,916
bucket which is appended with your

24831
17:29:29,519 --> 17:29:33,519
project id.appspot.com

24832
17:29:31,915 --> 17:29:35,680
and as you can see here there's a whole

24833
17:29:33,519 --> 17:29:37,755
bunch of different files as well if i

24834
17:29:35,680 --> 17:29:40,480
drill down into the directory marked as

24835
17:29:37,756 --> 17:29:42,400
ae for app engine i can see here that i

24836
17:29:40,480 --> 17:29:44,720
have some more directories along with

24837
17:29:42,400 --> 17:29:47,040
the manifest and so now if you want to

24838
17:29:44,720 --> 17:29:48,880
keep your application in order to run it

24839
17:29:47,040 --> 17:29:51,436
later you don't need to delete this

24840
17:29:48,879 --> 17:29:53,680
bucket but because i don't need it i'm

24841
17:29:51,436 --> 17:29:56,000
going to go ahead and delete the bucket

24842
17:29:53,680 --> 17:29:59,275
hit delete paste in my bucket name hit

24843
17:29:56,000 --> 17:30:00,796
delete as well under us.artifacts

24844
17:29:59,275 --> 17:30:03,040
you will find a directory called

24845
17:30:00,796 --> 17:30:05,916
containers and as explained in the last

24846
17:30:03,040 --> 17:30:08,400
lesson code build builds a container for

24847
17:30:05,915 --> 17:30:10,159
your application before deploying it to

24848
17:30:08,400 --> 17:30:12,560
app engine so i'm going to drill down

24849
17:30:10,160 --> 17:30:15,596
into images so here's all the container

24850
17:30:12,559 --> 17:30:17,275
digests and i don't need any of these so

24851
17:30:15,595 --> 17:30:19,519
i'm gonna go ahead and delete this

24852
17:30:17,275 --> 17:30:21,115
bucket as well and so this is the last

24853
17:30:19,519 --> 17:30:23,519
step in order to delete all the

24854
17:30:21,116 --> 17:30:25,840
directories and files that we use to

24855
17:30:23,519 --> 17:30:28,079
deploy our application in an app engine

24856
17:30:25,839 --> 17:30:31,199
okay and so i'm gonna head back on over

24857
17:30:28,080 --> 17:30:33,360
to app engine and so now that cleanup

24858
17:30:31,199 --> 17:30:35,755
has been taken care of that's pretty

24859
17:30:33,360 --> 17:30:38,319
much all i wanted to cover in this demo

24860
17:30:35,756 --> 17:30:40,720
for deploying and managing applications

24861
17:30:38,319 --> 17:30:42,796
on app engine so you can now mark this

24862
17:30:40,720 --> 17:30:45,436
as complete and i'll see you in the next

24863
17:30:42,796 --> 17:30:46,330
one and again congrats on a job well

24864
17:30:45,436 --> 17:30:50,239
done

24865
17:30:46,330 --> 17:30:52,796
[Music]

24866
17:30:50,239 --> 17:30:55,115
welcome back in this lesson i will be

24867
17:30:52,796 --> 17:30:57,520
diving into another serverless product

24868
17:30:55,116 --> 17:30:59,916
from google cloud by the name of cloud

24869
17:30:57,519 --> 17:31:02,239
functions an extremely useful and

24870
17:30:59,915 --> 17:31:04,795
advanced service that can be used with

24871
17:31:02,239 --> 17:31:06,559
almost every service on the platform now

24872
17:31:04,796 --> 17:31:09,200
there's quite a bit to cover here so

24873
17:31:06,559 --> 17:31:11,756
with that being said let's dive in now

24874
17:31:09,199 --> 17:31:14,000
cloud functions as i said before are a

24875
17:31:11,756 --> 17:31:16,480
serverless execution environment and

24876
17:31:14,000 --> 17:31:18,400
what i mean by this is like app engine

24877
17:31:16,480 --> 17:31:21,116
there is no need to provision any

24878
17:31:18,400 --> 17:31:24,000
servers or updating vms as the

24879
17:31:21,116 --> 17:31:26,240
infrastructure is all handled by google

24880
17:31:24,000 --> 17:31:28,559
but unlike app engine you will never see

24881
17:31:26,239 --> 17:31:30,720
the servers so the provisioning of

24882
17:31:28,559 --> 17:31:33,435
resources happens when the code is

24883
17:31:30,720 --> 17:31:35,840
executed now cloud functions are a

24884
17:31:33,436 --> 17:31:38,080
function as a service offering and this

24885
17:31:35,839 --> 17:31:40,559
is where you upload code that is

24886
17:31:38,080 --> 17:31:42,796
purposefully written in a supported

24887
17:31:40,559 --> 17:31:45,435
programming language and when your code

24888
17:31:42,796 --> 17:31:48,319
is triggered it is executed in a fully

24889
17:31:45,436 --> 17:31:50,480
managed environment and your billed for

24890
17:31:48,319 --> 17:31:53,040
when that code is executed cloud

24891
17:31:50,480 --> 17:31:55,840
functions run in a runtime environment

24892
17:31:53,040 --> 17:32:01,040
and support many different runtimes like

24893
17:31:55,839 --> 17:32:03,359
python java node.js go and net core

24894
17:32:01,040 --> 17:32:05,360
cloud functions are event driven so when

24895
17:32:03,360 --> 17:32:07,199
something happens in your environment

24896
17:32:05,360 --> 17:32:10,000
you can choose whether or not you'd like

24897
17:32:07,199 --> 17:32:12,479
to respond to this event if you do then

24898
17:32:10,000 --> 17:32:15,436
your code can be executed in response to

24899
17:32:12,480 --> 17:32:18,880
the event these triggers can be one of a

24900
17:32:15,436 --> 17:32:22,480
few different types such as http

24901
17:32:18,879 --> 17:32:24,955
pub sub cloud storage and now firestore

24902
17:32:22,480 --> 17:32:27,200
and firebase which are in beta and have

24903
17:32:24,955 --> 17:32:29,436
yet to be seen in the exam cloud

24904
17:32:27,199 --> 17:32:31,839
functions are priced according to how

24905
17:32:29,436 --> 17:32:33,596
long your function runs and how many

24906
17:32:31,839 --> 17:32:35,519
resources you provision for your

24907
17:32:33,595 --> 17:32:38,000
function if your function makes an

24908
17:32:35,519 --> 17:32:40,399
outbound network request there are also

24909
17:32:38,000 --> 17:32:43,680
additional data transfer fees cloud

24910
17:32:40,400 --> 17:32:45,916
functions also include a perpetual free

24911
17:32:43,680 --> 17:32:48,480
tier which allows you 2 million

24912
17:32:45,915 --> 17:32:50,955
invocations or executions of your

24913
17:32:48,480 --> 17:32:53,756
function now cloud functions themselves

24914
17:32:50,955 --> 17:32:56,400
are very simple but have a few steps to

24915
17:32:53,756 --> 17:32:58,480
execute before actually running so i

24916
17:32:56,400 --> 17:33:01,116
wanted to give you a walkthrough on

24917
17:32:58,480 --> 17:33:03,200
exactly how cloud functions work now

24918
17:33:01,116 --> 17:33:05,276
after selecting the name and region you

24919
17:33:03,199 --> 17:33:08,159
want your function to live in you would

24920
17:33:05,275 --> 17:33:10,000
then select the trigger you wish to use

24921
17:33:08,160 --> 17:33:13,756
and you can choose from the many i

24922
17:33:10,000 --> 17:33:16,955
listed earlier being http cloud storage

24923
17:33:13,756 --> 17:33:19,360
pub sub cloud firestore and firebase a

24924
17:33:16,955 --> 17:33:21,915
trigger is a declaration that you are

24925
17:33:19,360 --> 17:33:25,116
interested in a certain event or set of

24926
17:33:21,915 --> 17:33:27,360
events binding a function to a trigger

24927
17:33:25,116 --> 17:33:29,916
allows you to capture and act on these

24928
17:33:27,360 --> 17:33:32,559
events authentication configuration is

24929
17:33:29,915 --> 17:33:34,000
the next step and can be selected with

24930
17:33:32,559 --> 17:33:37,199
public access

24931
17:33:34,000 --> 17:33:39,199
or configured through iam now there are

24932
17:33:37,199 --> 17:33:41,519
some optional settings that can be

24933
17:33:39,199 --> 17:33:43,275
configured where you would provide the

24934
17:33:41,519 --> 17:33:44,319
amount of memory the function will need

24935
17:33:43,275 --> 17:33:46,559
to run

24936
17:33:44,319 --> 17:33:49,275
networking preferences and even

24937
17:33:46,559 --> 17:33:51,519
selection for a service account now once

24938
17:33:49,275 --> 17:33:53,680
all the settings have been solidified

24939
17:33:51,519 --> 17:33:55,755
your written code can then be put into

24940
17:33:53,680 --> 17:33:58,080
the function now the functions code

24941
17:33:55,756 --> 17:34:01,756
supports a variety of languages as

24942
17:33:58,080 --> 17:34:04,400
stated before like python java node.js

24943
17:34:01,756 --> 17:34:06,635
or go now when writing your code there

24944
17:34:04,400 --> 17:34:09,275
are two distinct types of cloud

24945
17:34:06,635 --> 17:34:12,159
functions that you could use http

24946
17:34:09,275 --> 17:34:14,955
functions and background functions with

24947
17:34:12,160 --> 17:34:18,400
http functions you invoke them from

24948
17:34:14,955 --> 17:34:20,795
standard http requests these http

24949
17:34:18,400 --> 17:34:24,160
requests wait for the response and

24950
17:34:20,796 --> 17:34:26,880
support handling of common http request

24951
17:34:24,160 --> 17:34:29,520
methods like get put

24952
17:34:26,879 --> 17:34:32,635
post delete and options when you use

24953
17:34:29,519 --> 17:34:35,359
cloud functions a tls certificate is

24954
17:34:32,635 --> 17:34:38,879
automatically provisioned for you so all

24955
17:34:35,360 --> 17:34:41,116
http functions can be invoked via a

24956
17:34:38,879 --> 17:34:42,719
secure connection now when it comes to

24957
17:34:41,116 --> 17:34:44,955
background functions

24958
17:34:42,720 --> 17:34:48,080
these are used to handle events from

24959
17:34:44,955 --> 17:34:51,199
your gcp infrastructure such as messages

24960
17:34:48,080 --> 17:34:53,520
on a pub sub topic or changes in a cloud

24961
17:34:51,199 --> 17:34:55,755
storage bucket now once you have put all

24962
17:34:53,519 --> 17:34:57,915
this together you are ready to deploy

24963
17:34:55,756 --> 17:35:00,080
your code now there are two things that

24964
17:34:57,915 --> 17:35:02,635
will happen when deploying your code the

24965
17:35:00,080 --> 17:35:05,116
first one is the binding of your trigger

24966
17:35:02,635 --> 17:35:07,275
to your function once you bind a trigger

24967
17:35:05,116 --> 17:35:08,240
you cannot bind another one to the same

24968
17:35:07,275 --> 17:35:10,559
function

24969
17:35:08,239 --> 17:35:12,879
only one trigger can be bound to a

24970
17:35:10,559 --> 17:35:14,559
function at a time now the second thing

24971
17:35:12,879 --> 17:35:16,159
that will happen when you deploy your

24972
17:35:14,559 --> 17:35:18,635
function's source code to cloud

24973
17:35:16,160 --> 17:35:21,840
functions is that source code is stored

24974
17:35:18,635 --> 17:35:24,319
in a cloud storage bucket as a zip file

24975
17:35:21,839 --> 17:35:27,199
cloud build then automatically builds

24976
17:35:24,319 --> 17:35:30,000
your code into a container image that

24977
17:35:27,199 --> 17:35:32,795
pushes that image to container registry

24978
17:35:30,000 --> 17:35:35,199
cloud functions accesses this image when

24979
17:35:32,796 --> 17:35:37,276
it needs to run the container to execute

24980
17:35:35,199 --> 17:35:40,000
your function the process of building

24981
17:35:37,275 --> 17:35:42,955
the image is entirely automatic and

24982
17:35:40,000 --> 17:35:44,796
requires no manual intervention and so

24983
17:35:42,955 --> 17:35:46,479
at this point of the process the

24984
17:35:44,796 --> 17:35:48,635
building of your function is now

24985
17:35:46,480 --> 17:35:51,040
complete now that the function has been

24986
17:35:48,635 --> 17:35:54,000
created we now wait for an event to

24987
17:35:51,040 --> 17:35:56,000
happen and events are things that happen

24988
17:35:54,000 --> 17:35:58,160
within your cloud environment that you

24989
17:35:56,000 --> 17:36:01,519
might want to take action on these might

24990
17:35:58,160 --> 17:36:04,480
be changes to data in cloud sql files

24991
17:36:01,519 --> 17:36:06,955
added to cloud storage or a new vm being

24992
17:36:04,480 --> 17:36:08,080
created currently cloud functions

24993
17:36:06,955 --> 17:36:10,635
supports

24994
17:36:08,080 --> 17:36:13,040
events from the same services used for

24995
17:36:10,635 --> 17:36:15,436
triggers that i have just mentioned

24996
17:36:13,040 --> 17:36:19,200
including other google services like

24997
17:36:15,436 --> 17:36:21,756
bigquery cloud sql and cloud spanner now

24998
17:36:19,199 --> 17:36:23,275
when an event triggers the execution of

24999
17:36:21,756 --> 17:36:26,400
your cloud function

25000
17:36:23,275 --> 17:36:28,879
data associated with the event is passed

25001
17:36:26,400 --> 17:36:31,116
via the functions parameters the type of

25002
17:36:28,879 --> 17:36:33,360
event determines the parameters that are

25003
17:36:31,116 --> 17:36:36,000
passed to your function cloud functions

25004
17:36:33,360 --> 17:36:38,480
handles incoming requests by assigning

25005
17:36:36,000 --> 17:36:40,879
them to instances of your function now

25006
17:36:38,480 --> 17:36:42,560
depending on the volume of requests

25007
17:36:40,879 --> 17:36:44,955
as well as the number of existing

25008
17:36:42,559 --> 17:36:48,000
function instances cloud functions may

25009
17:36:44,955 --> 17:36:50,080
assign a request to an existing instance

25010
17:36:48,000 --> 17:36:52,635
or create a new one so the cloud

25011
17:36:50,080 --> 17:36:55,276
function will grab the image from cloud

25012
17:36:52,635 --> 17:36:57,756
registry and hand off the image along

25013
17:36:55,275 --> 17:36:59,915
with the event data to the instance for

25014
17:36:57,756 --> 17:37:02,160
processing now each instance of a

25015
17:36:59,915 --> 17:37:04,559
function handles only one concurrent

25016
17:37:02,160 --> 17:37:06,956
request at a time this means that while

25017
17:37:04,559 --> 17:37:09,275
your code is processing one request

25018
17:37:06,955 --> 17:37:11,199
there is no possibility of a second

25019
17:37:09,275 --> 17:37:14,559
request being routed to the same

25020
17:37:11,199 --> 17:37:17,115
instance thus the original request can

25021
17:37:14,559 --> 17:37:19,275
use the full amount of resources that

25022
17:37:17,116 --> 17:37:21,360
you requested and this is the memory

25023
17:37:19,275 --> 17:37:24,079
that you assign to your cloud function

25024
17:37:21,360 --> 17:37:26,160
when deploying it now to allow google to

25025
17:37:24,080 --> 17:37:28,796
automatically manage and scale the

25026
17:37:26,160 --> 17:37:31,200
functions they must be stateless

25027
17:37:28,796 --> 17:37:33,916
functions are not meant to be persistent

25028
17:37:31,199 --> 17:37:36,079
nor is the data that is passed on to the

25029
17:37:33,915 --> 17:37:38,399
function and so once the function has

25030
17:37:36,080 --> 17:37:40,955
run and all data has been processed by

25031
17:37:38,400 --> 17:37:44,560
the server it is then passed on to

25032
17:37:40,955 --> 17:37:46,955
either a vpc or to the internet now by

25033
17:37:44,559 --> 17:37:49,839
default functions have public internet

25034
17:37:46,955 --> 17:37:52,319
access unless configured otherwise

25035
17:37:49,839 --> 17:37:55,115
functions can also be private and used

25036
17:37:52,319 --> 17:37:57,595
within your vpc but must be configured

25037
17:37:55,116 --> 17:38:00,080
before deployment now there are so many

25038
17:37:57,595 --> 17:38:02,159
use cases for cloud functions and there

25039
17:38:00,080 --> 17:38:04,480
are many that have already been created

25040
17:38:02,160 --> 17:38:07,116
by google for you to try out

25041
17:38:04,480 --> 17:38:09,276
and can be located in the documentation

25042
17:38:07,116 --> 17:38:12,000
that i've supplied in the lesson text

25043
17:38:09,275 --> 17:38:14,559
below now the exam doesn't go into too

25044
17:38:12,000 --> 17:38:16,879
much depth on cloud functions but i did

25045
17:38:14,559 --> 17:38:19,756
want to give you some exposure to this

25046
17:38:16,879 --> 17:38:22,559
fantastic serverless product from google

25047
17:38:19,756 --> 17:38:25,360
as it is so commonly used in many

25048
17:38:22,559 --> 17:38:28,559
production environments in a simple and

25049
17:38:25,360 --> 17:38:30,879
easy way to take in data process it and

25050
17:38:28,559 --> 17:38:33,435
return a result from any event you are

25051
17:38:30,879 --> 17:38:35,435
given and i have no doubt that once you

25052
17:38:33,436 --> 17:38:37,840
get the hang of deploying them that you

25053
17:38:35,436 --> 17:38:40,239
will be a huge fan of them as well and

25054
17:38:37,839 --> 17:38:42,559
so that's pretty much all i had to cover

25055
17:38:40,239 --> 17:38:44,795
when it comes to cloud functions so you

25056
17:38:42,559 --> 17:38:46,720
can now mark this lesson as complete and

25057
17:38:44,796 --> 17:38:49,040
whenever you're ready join me in the

25058
17:38:46,720 --> 17:38:51,840
next one where we go hands-on in the

25059
17:38:49,040 --> 17:38:55,239
console creating and deploying your very

25060
17:38:51,839 --> 17:38:55,239
first function

25061
17:38:57,040 --> 17:39:02,635
welcome back and in this demo we will be

25062
17:39:00,080 --> 17:39:04,880
diving into creating and deploying our

25063
17:39:02,635 --> 17:39:07,199
very first cloud function we're going to

25064
17:39:04,879 --> 17:39:09,199
take a tour of all the options in the

25065
17:39:07,199 --> 17:39:11,435
console but we're going to do most of

25066
17:39:09,199 --> 17:39:13,915
the work in cloud shell to get a good

25067
17:39:11,436 --> 17:39:16,560
feel for doing it in the command line so

25068
17:39:13,915 --> 17:39:19,559
with that being said let's dive in and

25069
17:39:16,559 --> 17:39:21,115
so i'm logged in here as tony bowties

25070
17:39:19,559 --> 17:39:23,756
gmail.com

25071
17:39:21,116 --> 17:39:26,000
and i'm in the project of bowtie inc and

25072
17:39:23,756 --> 17:39:27,756
so the first thing i want to do is head

25073
17:39:26,000 --> 17:39:29,839
on over to cloud functions in the

25074
17:39:27,756 --> 17:39:32,000
console so i'm going to go up to the top

25075
17:39:29,839 --> 17:39:34,319
left to the navigation menu and i'm

25076
17:39:32,000 --> 17:39:36,160
going to scroll down to cloud functions

25077
17:39:34,319 --> 17:39:38,080
and as you can see here cloud functions

25078
17:39:36,160 --> 17:39:40,720
is getting ready and this is because

25079
17:39:38,080 --> 17:39:43,360
we've never used it before and the api

25080
17:39:40,720 --> 17:39:45,520
is being enabled okay and the api has

25081
17:39:43,360 --> 17:39:47,520
been enabled and we can go ahead and

25082
17:39:45,519 --> 17:39:49,839
start creating our function so you can

25083
17:39:47,519 --> 17:39:51,755
go ahead and click create function and

25084
17:39:49,839 --> 17:39:54,000
you will be prompted with some fields to

25085
17:39:51,756 --> 17:39:56,559
fill out for the configuration of your

25086
17:39:54,000 --> 17:39:59,275
cloud function and so under basics for

25087
17:39:56,559 --> 17:40:02,239
function name i'm going to name this

25088
17:39:59,275 --> 17:40:04,955
hello underscore world for region i'm

25089
17:40:02,239 --> 17:40:06,720
going to select us east one and under

25090
17:40:04,955 --> 17:40:09,595
trigger for trigger type we're gonna

25091
17:40:06,720 --> 17:40:11,756
keep this as http although if i click on

25092
17:40:09,595 --> 17:40:14,079
the drop down menu you can see that i

25093
17:40:11,756 --> 17:40:16,239
will have options for cloud pub sub

25094
17:40:14,080 --> 17:40:18,560
cloud storage and the ones that i

25095
17:40:16,239 --> 17:40:21,115
mentioned before that are in beta so

25096
17:40:18,559 --> 17:40:24,720
we're going to keep things as http and

25097
17:40:21,116 --> 17:40:27,276
here under url is the url for the actual

25098
17:40:24,720 --> 17:40:29,520
cloud function under authentication i

25099
17:40:27,275 --> 17:40:32,795
have the option of choosing require

25100
17:40:29,519 --> 17:40:35,115
authentication or allow unauthenticated

25101
17:40:32,796 --> 17:40:37,596
invocations and as you can see this is

25102
17:40:35,116 --> 17:40:40,880
clearly marked saying that check this if

25103
17:40:37,595 --> 17:40:42,795
you are creating a public api or website

25104
17:40:40,879 --> 17:40:44,319
which we are and so this is the

25105
17:40:42,796 --> 17:40:46,560
authentication method that you want to

25106
17:40:44,319 --> 17:40:48,635
select and so now that we have all the

25107
17:40:46,559 --> 17:40:50,559
fields filled out for the basic

25108
17:40:48,635 --> 17:40:52,559
configuration i'm going to go ahead and

25109
17:40:50,559 --> 17:40:54,479
click on save and just to give you a

25110
17:40:52,559 --> 17:40:56,319
quick run through of what else is

25111
17:40:54,480 --> 17:40:58,956
available i'm going to click on the drop

25112
17:40:56,319 --> 17:41:01,275
down here and this will give me access

25113
17:40:58,955 --> 17:41:03,839
to variables networking and advanced

25114
17:41:01,275 --> 17:41:07,115
settings the first field here memory

25115
17:41:03,839 --> 17:41:09,039
allocated i can actually add more memory

25116
17:41:07,116 --> 17:41:10,796
depending what i am doing with my cloud

25117
17:41:09,040 --> 17:41:12,955
function but i'm going to keep it as the

25118
17:41:10,796 --> 17:41:15,360
default if you have a cloud function

25119
17:41:12,955 --> 17:41:17,436
that runs a little bit longer and you

25120
17:41:15,360 --> 17:41:19,436
need more time to run the cloud function

25121
17:41:17,436 --> 17:41:22,160
you can add additional time for the

25122
17:41:19,436 --> 17:41:24,319
timeout and as well i have the option of

25123
17:41:22,160 --> 17:41:26,560
choosing a different service account for

25124
17:41:24,319 --> 17:41:29,040
this cloud function and so moving on

25125
17:41:26,559 --> 17:41:31,435
under environment variables you will see

25126
17:41:29,040 --> 17:41:34,160
the options to add build environment

25127
17:41:31,436 --> 17:41:36,319
variables along with runtime environment

25128
17:41:34,160 --> 17:41:38,480
variables and the last option being

25129
17:41:36,319 --> 17:41:40,559
connections here you can change the

25130
17:41:38,480 --> 17:41:43,200
different networking settings for

25131
17:41:40,559 --> 17:41:45,360
ingress and egress traffic under ingress

25132
17:41:43,199 --> 17:41:47,680
settings i can allow all traffic which

25133
17:41:45,360 --> 17:41:50,080
is the default i can allow internal

25134
17:41:47,680 --> 17:41:52,879
traffic only as well i can allow

25135
17:41:50,080 --> 17:41:55,040
internal traffic and traffic from cloud

25136
17:41:52,879 --> 17:41:58,000
low balancing now as well when it comes

25137
17:41:55,040 --> 17:42:00,720
to the egress settings as i said before

25138
17:41:58,000 --> 17:42:03,116
by default your cloud function is able

25139
17:42:00,720 --> 17:42:05,756
to send requests to the internet but not

25140
17:42:03,116 --> 17:42:07,916
to resources in your vpc network and so

25141
17:42:05,756 --> 17:42:10,239
this is where you would create a vpc

25142
17:42:07,915 --> 17:42:13,519
connector to send requests from your

25143
17:42:10,239 --> 17:42:15,680
cloud function to resources in your vpc

25144
17:42:13,519 --> 17:42:18,239
so if i click on create a connector

25145
17:42:15,680 --> 17:42:21,915
it'll open up a new tab and bring me to

25146
17:42:18,239 --> 17:42:23,436
vpc network to add serverless vpc access

25147
17:42:21,915 --> 17:42:25,360
and so i don't want to do that right now

25148
17:42:23,436 --> 17:42:26,635
so i'm going to close down this tab and

25149
17:42:25,360 --> 17:42:30,319
i'm going to go ahead and leave

25150
17:42:26,635 --> 17:42:32,159
everything else as is and click on next

25151
17:42:30,319 --> 17:42:34,720
and so now that the configuration is

25152
17:42:32,160 --> 17:42:37,040
done i can dive right into the code and

25153
17:42:34,720 --> 17:42:38,880
so google cloud gives you a inline

25154
17:42:37,040 --> 17:42:40,879
editor right here along with the

25155
17:42:38,879 --> 17:42:43,115
different runtime environments so if i

25156
17:42:40,879 --> 17:42:44,719
click on the drop down menu you can see

25157
17:42:43,116 --> 17:42:49,436
i have the options

25158
17:42:44,720 --> 17:42:53,040
of net core go java node.js and python

25159
17:42:49,436 --> 17:42:55,275
3.7 and 3.8 and so for this demo i'm

25160
17:42:53,040 --> 17:42:57,595
going to keep it as node.js 10. the

25161
17:42:55,275 --> 17:43:00,239
entry point will be hello world and i'm

25162
17:42:57,595 --> 17:43:02,795
going to keep the code exactly as is and

25163
17:43:00,239 --> 17:43:05,115
this is a default cloud function that is

25164
17:43:02,796 --> 17:43:07,200
packaged with any runtime whenever you

25165
17:43:05,116 --> 17:43:09,596
create a function from the console and

25166
17:43:07,199 --> 17:43:11,519
so if i had any different code i can

25167
17:43:09,595 --> 17:43:13,040
change it here but i'm not going to do

25168
17:43:11,519 --> 17:43:15,839
that i'm going to leave everything else

25169
17:43:13,040 --> 17:43:18,160
as is and click on deploy and it'll take

25170
17:43:15,839 --> 17:43:19,915
a couple minutes here to create my cloud

25171
17:43:18,160 --> 17:43:22,240
function and so i'm going to pause the

25172
17:43:19,915 --> 17:43:24,635
video here for just a quick sec and i'll

25173
17:43:22,239 --> 17:43:26,720
be back in a flash okay and my cloud

25174
17:43:24,635 --> 17:43:28,400
function has been deployed and i got a

25175
17:43:26,720 --> 17:43:30,319
green check mark which means that i'm

25176
17:43:28,400 --> 17:43:32,239
all good and so i want to dive right

25177
17:43:30,319 --> 17:43:34,239
into it for just a second so i can get

25178
17:43:32,239 --> 17:43:36,559
some more details here i have the

25179
17:43:34,239 --> 17:43:39,756
metrics for my cloud function the

25180
17:43:36,559 --> 17:43:42,479
invocations per second execution time

25181
17:43:39,756 --> 17:43:44,720
memory utilization and active instances

25182
17:43:42,480 --> 17:43:47,116
i have my versions up here at the top

25183
17:43:44,720 --> 17:43:49,200
but since i only have one version only

25184
17:43:47,116 --> 17:43:51,360
one version shows up if i click on

25185
17:43:49,199 --> 17:43:53,595
details it'll show me the general

25186
17:43:51,360 --> 17:43:56,160
information along with the networking

25187
17:43:53,595 --> 17:43:58,635
settings the source will show me the

25188
17:43:56,160 --> 17:44:01,436
code for this cloud function as well as

25189
17:43:58,635 --> 17:44:03,680
the variables the trigger permissions

25190
17:44:01,436 --> 17:44:05,840
logs and testing and here i can write in

25191
17:44:03,680 --> 17:44:08,239
some code and test the function and so

25192
17:44:05,839 --> 17:44:10,399
in order for me to invoke this function

25193
17:44:08,239 --> 17:44:12,720
i can simply go to trigger and it'll

25194
17:44:10,400 --> 17:44:14,635
show me the url but a quick way to do

25195
17:44:12,720 --> 17:44:16,880
this through the command line is to

25196
17:44:14,635 --> 17:44:18,720
simply open up cloud shell and make this

25197
17:44:16,879 --> 17:44:20,955
a little bigger for better viewing and

25198
17:44:18,720 --> 17:44:23,116
i'm going to paste in the command gcloud

25199
17:44:20,955 --> 17:44:25,360
functions describe along with the

25200
17:44:23,116 --> 17:44:27,680
function name which is hello underscore

25201
17:44:25,360 --> 17:44:29,840
world along with the region flag dash

25202
17:44:27,680 --> 17:44:31,756
dash region with the region that my

25203
17:44:29,839 --> 17:44:33,755
cloud function has been deployed in

25204
17:44:31,756 --> 17:44:34,955
which is us east one and i'm going to

25205
17:44:33,756 --> 17:44:37,200
hit enter

25206
17:44:34,955 --> 17:44:39,680
it's going to ask me to authorize my api

25207
17:44:37,199 --> 17:44:41,519
call yes i want to authorize it and this

25208
17:44:39,680 --> 17:44:43,595
command should output some information

25209
17:44:41,519 --> 17:44:46,319
on your screen and so what we're looking

25210
17:44:43,595 --> 17:44:49,360
for here is the http trigger which you

25211
17:44:46,319 --> 17:44:51,519
will find here under https trigger and

25212
17:44:49,360 --> 17:44:54,000
it is the same as what you see here in

25213
17:44:51,519 --> 17:44:57,115
the console and so just know if you want

25214
17:44:54,000 --> 17:44:59,116
to grab the http url trigger you can

25215
17:44:57,116 --> 17:45:00,955
also do it from the command line and so

25216
17:44:59,116 --> 17:45:03,040
i'm going to now trigger it by going to

25217
17:45:00,955 --> 17:45:05,040
this url and you should see in the top

25218
17:45:03,040 --> 17:45:07,200
left hand side of your screen hello

25219
17:45:05,040 --> 17:45:10,080
world not as exciting as spinning bow

25220
17:45:07,199 --> 17:45:12,719
ties but this example gives you an idea

25221
17:45:10,080 --> 17:45:14,635
of what an http function can do and so

25222
17:45:12,720 --> 17:45:16,400
i'm going to close down this tab and so

25223
17:45:14,635 --> 17:45:18,879
now what i want to do is i want to

25224
17:45:16,400 --> 17:45:20,635
deploy another function but i want to do

25225
17:45:18,879 --> 17:45:22,955
it now through the command line and so

25226
17:45:20,635 --> 17:45:24,796
i'm going to now quickly clear my screen

25227
17:45:22,955 --> 17:45:26,879
and so since i've already uploaded the

25228
17:45:24,796 --> 17:45:29,360
code to the repo i'm going to simply

25229
17:45:26,879 --> 17:45:32,159
clone that repo and run it from here so

25230
17:45:29,360 --> 17:45:34,160
i'm going to simply do a cd tilde to

25231
17:45:32,160 --> 17:45:35,756
make sure i'm in my home directory for

25232
17:45:34,160 --> 17:45:38,720
those of you who haven't deleted the

25233
17:45:35,756 --> 17:45:41,040
directory you can simply cd into it so

25234
17:45:38,720 --> 17:45:43,520
i'm going to run cd google cloud

25235
17:45:41,040 --> 17:45:45,756
associate cloud engineer hit enter and

25236
17:45:43,519 --> 17:45:47,680
i'm going to run a get pull command

25237
17:45:45,756 --> 17:45:49,360
and it pull down all the files that i

25238
17:45:47,680 --> 17:45:51,116
needed i'm going to quickly clear my

25239
17:45:49,360 --> 17:45:53,520
screen and so i'm going to change

25240
17:45:51,116 --> 17:45:55,436
directories into the directory that has

25241
17:45:53,519 --> 17:45:58,719
my code and so you're going to find it

25242
17:45:55,436 --> 17:46:01,840
under 11 serverless services under zero

25243
17:45:58,720 --> 17:46:04,559
to you called hit enter and again i will

25244
17:46:01,839 --> 17:46:06,719
have a link in the lesson text for the

25245
17:46:04,559 --> 17:46:08,720
full instructions on this demo and it

25246
17:46:06,720 --> 17:46:11,275
will list the directory where you can

25247
17:46:08,720 --> 17:46:13,840
find this code okay so moving forward

25248
17:46:11,275 --> 17:46:15,436
i'm going to run ls and you should see

25249
17:46:13,839 --> 17:46:17,319
three files here

25250
17:46:15,436 --> 17:46:19,756
main.py

25251
17:46:17,319 --> 17:46:21,915
requirements.txt and the text file with

25252
17:46:19,756 --> 17:46:23,680
the instructions and so now that i have

25253
17:46:21,915 --> 17:46:25,435
everything in place in order to deploy

25254
17:46:23,680 --> 17:46:27,915
my code i'm going to paste in the

25255
17:46:25,436 --> 17:46:30,319
command to actually deploy my function

25256
17:46:27,915 --> 17:46:32,159
which is gcloud functions deploy the

25257
17:46:30,319 --> 17:46:34,000
name of the function which is you

25258
17:46:32,160 --> 17:46:36,636
underscore called the flag for the

25259
17:46:34,000 --> 17:46:39,116
runtime dash dash runtime and the

25260
17:46:36,635 --> 17:46:40,879
runtime is going to be python 3.8 the

25261
17:46:39,116 --> 17:46:43,756
flag for the trigger which is going to

25262
17:46:40,879 --> 17:46:45,915
be http and because i'm a nice guy and i

25263
17:46:43,756 --> 17:46:48,319
want everyone to have access to this i'm

25264
17:46:45,915 --> 17:46:50,239
going to tag it with the flag dash dash

25265
17:46:48,319 --> 17:46:52,159
allow unauthenticated so i'm going to

25266
17:46:50,239 --> 17:46:54,079
hit enter okay and this function should

25267
17:46:52,160 --> 17:46:55,756
take a couple minutes to deploy so i'm

25268
17:46:54,080 --> 17:46:57,276
going to sit here and let it cook and

25269
17:46:55,756 --> 17:46:59,360
i'll be back before you can say cat in

25270
17:46:57,275 --> 17:47:01,519
the hat okay and our function has been

25271
17:46:59,360 --> 17:47:03,680
deployed i'm going to do a quick refresh

25272
17:47:01,519 --> 17:47:06,000
here in the console and it deployed

25273
17:47:03,680 --> 17:47:08,080
successfully as you can see the green

25274
17:47:06,000 --> 17:47:10,080
check mark is here okay and so now that

25275
17:47:08,080 --> 17:47:11,840
it's been deployed we want to trigger

25276
17:47:10,080 --> 17:47:14,240
our function and so because i just

25277
17:47:11,839 --> 17:47:16,319
deployed this function the url trigger

25278
17:47:14,239 --> 17:47:18,159
is conveniently located here in my

25279
17:47:16,319 --> 17:47:21,199
screen so you can go ahead and click on

25280
17:47:18,160 --> 17:47:23,680
it and hello lover of bow ties you

25281
17:47:21,199 --> 17:47:26,079
called now although this may be similar

25282
17:47:23,680 --> 17:47:28,480
to the hello world demo but i did add a

25283
17:47:26,080 --> 17:47:30,955
small feature that might spice things up

25284
17:47:28,480 --> 17:47:34,560
and so if you go up to the url and you

25285
17:47:30,955 --> 17:47:36,879
type in question mark name equals and

25286
17:47:34,559 --> 17:47:38,795
your name and since my name is anthony

25287
17:47:36,879 --> 17:47:42,079
i'm going to type in anthony

25288
17:47:38,796 --> 17:47:44,635
hit enter and hello anthony you called

25289
17:47:42,080 --> 17:47:46,080
and so this is a perfect example of the

25290
17:47:44,635 --> 17:47:47,915
many different ways you can use

25291
17:47:46,080 --> 17:47:49,360
functions and although i've only

25292
17:47:47,915 --> 17:47:51,519
highlighted some very simple

25293
17:47:49,360 --> 17:47:54,239
demonstrations there are many different

25294
17:47:51,519 --> 17:47:57,275
ways that you can use functions such as

25295
17:47:54,239 --> 17:47:59,839
running pipelines running batch jobs and

25296
17:47:57,275 --> 17:48:02,319
even event driven security now although

25297
17:47:59,839 --> 17:48:04,635
the exam doesn't go into too much depth

25298
17:48:02,319 --> 17:48:06,879
on cloud functions it's always good to

25299
17:48:04,635 --> 17:48:09,436
know its use cases and where its

25300
17:48:06,879 --> 17:48:12,239
strengths lie for when you do decide to

25301
17:48:09,436 --> 17:48:14,480
use it in your role as a cloud engineer

25302
17:48:12,239 --> 17:48:16,879
now before you go be sure to delete all

25303
17:48:14,480 --> 17:48:19,360
the resources you've created by deleting

25304
17:48:16,879 --> 17:48:20,955
the functions and the storage buckets

25305
17:48:19,360 --> 17:48:23,040
that house the code for the cloud

25306
17:48:20,955 --> 17:48:25,275
functions and i will walk you through

25307
17:48:23,040 --> 17:48:27,360
the steps right now okay so first i'm

25308
17:48:25,275 --> 17:48:29,519
going to close down this tab and next

25309
17:48:27,360 --> 17:48:30,796
you're going to select all the functions

25310
17:48:29,519 --> 17:48:32,399
and you're going to simply click on

25311
17:48:30,796 --> 17:48:33,916
delete you're going to get a prompt to

25312
17:48:32,400 --> 17:48:35,756
delete the functions you're going to

25313
17:48:33,915 --> 17:48:37,755
click on delete and it's going to take a

25314
17:48:35,756 --> 17:48:39,520
minute or two and the functions are

25315
17:48:37,756 --> 17:48:41,040
deleted i'm going to close down my cloud

25316
17:48:39,519 --> 17:48:42,399
shell and i'm going to head over to

25317
17:48:41,040 --> 17:48:44,080
cloud storage

25318
17:48:42,400 --> 17:48:46,635
and as you can see here both these

25319
17:48:44,080 --> 17:48:49,200
buckets that start with gcf standing for

25320
17:48:46,635 --> 17:48:52,239
google cloud functions can be safely

25321
17:48:49,199 --> 17:48:54,399
deleted as inside them are the files

25322
17:48:52,239 --> 17:48:55,756
that were used for the cloud function so

25323
17:48:54,400 --> 17:48:57,756
i'm going to go back out i'm going to

25324
17:48:55,756 --> 17:48:59,680
select both of these and i'm going to

25325
17:48:57,756 --> 17:49:02,160
click on delete you get a prompt to

25326
17:48:59,680 --> 17:49:04,559
delete two buckets you can simply type

25327
17:49:02,160 --> 17:49:06,880
in delete and click on delete and the

25328
17:49:04,559 --> 17:49:08,955
buckets have now been deleted and you've

25329
17:49:06,879 --> 17:49:11,199
pretty much finished your cleanup and so

25330
17:49:08,955 --> 17:49:13,595
just as a recap you created a default

25331
17:49:11,199 --> 17:49:16,239
cloud function that was available from

25332
17:49:13,595 --> 17:49:19,040
the console and then verified it by

25333
17:49:16,239 --> 17:49:20,795
triggering the http url you then

25334
17:49:19,040 --> 17:49:23,200
deployed another function from the

25335
17:49:20,796 --> 17:49:26,400
command line by pulling the code from

25336
17:49:23,199 --> 17:49:28,559
the repo and using it for deployment and

25337
17:49:26,400 --> 17:49:32,319
then you verified that function by

25338
17:49:28,559 --> 17:49:35,040
triggering it using the http url as well

25339
17:49:32,319 --> 17:49:37,519
and then you modify the url for a

25340
17:49:35,040 --> 17:49:39,915
different output great job on another

25341
17:49:37,519 --> 17:49:42,000
successful demo so you can now mark this

25342
17:49:39,915 --> 17:49:42,889
as complete and let's move on to the

25343
17:49:42,000 --> 17:49:46,796
next one

25344
17:49:42,889 --> 17:49:49,436
[Music]

25345
17:49:46,796 --> 17:49:52,080
welcome back in this lesson we're going

25346
17:49:49,436 --> 17:49:54,720
to dive into cloud storage the go to

25347
17:49:52,080 --> 17:49:56,400
storage service from google cloud if

25348
17:49:54,720 --> 17:49:58,880
you're an engineer working in google

25349
17:49:56,400 --> 17:50:01,275
cloud you've probably used this many

25350
17:49:58,879 --> 17:50:03,595
times as a storage solution and if you

25351
17:50:01,275 --> 17:50:05,756
haven't this is definitely a service

25352
17:50:03,595 --> 17:50:08,635
that you will need to know for both the

25353
17:50:05,756 --> 17:50:10,319
exam and your day-to-day role as a cloud

25354
17:50:08,635 --> 17:50:12,955
engineer now there's quite a bit to

25355
17:50:10,319 --> 17:50:15,519
cover here so with that being said let's

25356
17:50:12,955 --> 17:50:18,795
dive in now cloud storage is a

25357
17:50:15,519 --> 17:50:21,595
consistent scalable large capacity

25358
17:50:18,796 --> 17:50:24,319
highly durable object storage and this

25359
17:50:21,595 --> 17:50:27,199
is unlimited storage for objects with no

25360
17:50:24,319 --> 17:50:29,360
minimum object size but please remember

25361
17:50:27,199 --> 17:50:31,595
that this is object storage and is not

25362
17:50:29,360 --> 17:50:34,400
designed to store an operating system on

25363
17:50:31,595 --> 17:50:36,955
but to store whole objects like pictures

25364
17:50:34,400 --> 17:50:39,596
or videos cloud storage has worldwide

25365
17:50:36,955 --> 17:50:41,915
accessibility and worldwide storage

25366
17:50:39,595 --> 17:50:44,559
locations so anywhere that there is a

25367
17:50:41,915 --> 17:50:47,199
region or zone cloud storage is

25368
17:50:44,559 --> 17:50:49,115
available from there and can be accessed

25369
17:50:47,199 --> 17:50:51,199
at any time through an internet

25370
17:50:49,116 --> 17:50:54,480
connection cloud storage is great for

25371
17:50:51,199 --> 17:50:57,039
storing data from data analytics jobs

25372
17:50:54,480 --> 17:50:59,840
text files with code pictures of the

25373
17:50:57,040 --> 17:51:02,080
latest fashion from paris and videos of

25374
17:50:59,839 --> 17:51:04,479
your favorite house dj at the shelter

25375
17:51:02,080 --> 17:51:07,520
cloud storage excels for content

25376
17:51:04,480 --> 17:51:10,720
delivery big data sets and backups and

25377
17:51:07,519 --> 17:51:13,199
are all stored as objects in buckets and

25378
17:51:10,720 --> 17:51:15,680
this is the heart of cloud storage that

25379
17:51:13,199 --> 17:51:18,319
i will be diving into so starting with

25380
17:51:15,680 --> 17:51:21,199
buckets these are the basic containers

25381
17:51:18,319 --> 17:51:23,116
or construct that holds your data

25382
17:51:21,199 --> 17:51:26,319
everything that you store in cloud

25383
17:51:23,116 --> 17:51:28,160
storage must be contained in a bucket

25384
17:51:26,319 --> 17:51:31,519
you can use buckets to organize your

25385
17:51:28,160 --> 17:51:34,000
data and control access to your data but

25386
17:51:31,519 --> 17:51:36,399
unlike directories and folders you

25387
17:51:34,000 --> 17:51:38,319
cannot nest buckets and i'll get into

25388
17:51:36,400 --> 17:51:40,720
that in just a minute now when you

25389
17:51:38,319 --> 17:51:44,000
create a bucket you must specify a

25390
17:51:40,720 --> 17:51:46,319
globally unique name as every bucket

25391
17:51:44,000 --> 17:51:48,879
resides in a single cloud storage

25392
17:51:46,319 --> 17:51:52,080
namespace as well as a name you must

25393
17:51:48,879 --> 17:51:54,635
specify a geographic location where the

25394
17:51:52,080 --> 17:51:56,720
bucket and its contents are stored and

25395
17:51:54,635 --> 17:51:59,839
you have three available geography

25396
17:51:56,720 --> 17:52:02,559
choices to choose from from region dual

25397
17:51:59,839 --> 17:52:04,795
region and multi-region and so just as a

25398
17:52:02,559 --> 17:52:07,756
note choosing dual region and

25399
17:52:04,796 --> 17:52:10,400
multi-region is considered geo-redundant

25400
17:52:07,756 --> 17:52:12,635
for dual region geo-redundancy is

25401
17:52:10,400 --> 17:52:15,680
achieved using a specific pair of

25402
17:52:12,635 --> 17:52:18,080
regions for multi-region geo-redundancy

25403
17:52:15,680 --> 17:52:21,275
is achieved using a continent that

25404
17:52:18,080 --> 17:52:23,756
contains two or more geographic places

25405
17:52:21,275 --> 17:52:25,839
basically the more regions your data is

25406
17:52:23,756 --> 17:52:28,480
available in the greater your

25407
17:52:25,839 --> 17:52:31,435
availability for that data after you've

25408
17:52:28,480 --> 17:52:33,756
chosen a geographic location a default

25409
17:52:31,436 --> 17:52:36,239
storage class must be chosen and this

25410
17:52:33,756 --> 17:52:38,160
applies to objects added to the bucket

25411
17:52:36,239 --> 17:52:40,720
that don't have a storage class

25412
17:52:38,160 --> 17:52:42,956
explicitly specified and i'll be diving

25413
17:52:40,720 --> 17:52:45,040
into storage classes in just a bit and

25414
17:52:42,955 --> 17:52:47,595
so after you create a bucket you can

25415
17:52:45,040 --> 17:52:50,160
still change its default storage class

25416
17:52:47,595 --> 17:52:52,795
to any class supported in the buckets

25417
17:52:50,160 --> 17:52:55,116
location with some stipulations

25418
17:52:52,796 --> 17:52:57,840
you can only change the bucket name

25419
17:52:55,116 --> 17:53:00,400
and location by deleting and recreating

25420
17:52:57,839 --> 17:53:02,559
the bucket as well once dual region is

25421
17:53:00,400 --> 17:53:04,560
selected it cannot be changed to

25422
17:53:02,559 --> 17:53:06,720
multi-region and when selecting

25423
17:53:04,559 --> 17:53:09,115
multi-region you will not be able to

25424
17:53:06,720 --> 17:53:11,360
change the bucket to be dual region and

25425
17:53:09,116 --> 17:53:13,756
lastly you will need to choose what

25426
17:53:11,360 --> 17:53:15,915
level of access you want others to have

25427
17:53:13,756 --> 17:53:18,635
on your bucket whether you want to apply

25428
17:53:15,915 --> 17:53:21,040
permissions using uniform or fine

25429
17:53:18,635 --> 17:53:24,559
grained access uniform bucket level

25430
17:53:21,040 --> 17:53:26,796
access allows you to use iam alone to

25431
17:53:24,559 --> 17:53:29,519
manage permissions iam applies

25432
17:53:26,796 --> 17:53:32,400
permissions to all the objects contained

25433
17:53:29,519 --> 17:53:35,039
inside the bucket or groups of objects

25434
17:53:32,400 --> 17:53:38,160
with common name prefixes the find green

25435
17:53:35,040 --> 17:53:40,879
option enables you to use iam and access

25436
17:53:38,160 --> 17:53:44,080
control lists or acls

25437
17:53:40,879 --> 17:53:46,559
together to manage permissions acls are

25438
17:53:44,080 --> 17:53:49,520
a legacy access control system for cloud

25439
17:53:46,559 --> 17:53:52,479
storage designed for interoperability

25440
17:53:49,519 --> 17:53:55,755
with amazon s3 for those of you who use

25441
17:53:52,480 --> 17:53:58,636
aws you can specify access and apply

25442
17:53:55,756 --> 17:54:01,520
permissions at both the bucket level and

25443
17:53:58,635 --> 17:54:03,595
per individual object and i will also be

25444
17:54:01,519 --> 17:54:04,399
diving more into depth with access

25445
17:54:03,595 --> 17:54:07,435
control

25446
17:54:04,400 --> 17:54:10,160
in just a bit and just as a note labels

25447
17:54:07,436 --> 17:54:12,080
are an optional item for bucket creation

25448
17:54:10,160 --> 17:54:14,720
like every other resource creation

25449
17:54:12,080 --> 17:54:17,116
process in gcp now that we've covered

25450
17:54:14,720 --> 17:54:20,239
buckets i wanted to cover what is stored

25451
17:54:17,116 --> 17:54:22,400
in those buckets which is objects and

25452
17:54:20,239 --> 17:54:25,199
objects are the individual pieces of

25453
17:54:22,400 --> 17:54:27,436
data or data chunks that you store in a

25454
17:54:25,199 --> 17:54:29,275
cloud storage bucket and there is no

25455
17:54:27,436 --> 17:54:31,520
limit on the number of objects that you

25456
17:54:29,275 --> 17:54:34,239
can create in a bucket so you can think

25457
17:54:31,519 --> 17:54:36,955
of objects kind of like files objects

25458
17:54:34,239 --> 17:54:38,559
have two components object data and

25459
17:54:36,955 --> 17:54:41,595
object metadata

25460
17:54:38,559 --> 17:54:43,915
object data is typically a file that you

25461
17:54:41,595 --> 17:54:46,319
want to store in cloud storage and in

25462
17:54:43,915 --> 17:54:48,719
this case it is the picture of the plaid

25463
17:54:46,319 --> 17:54:51,436
bow tie and object metadata is a

25464
17:54:48,720 --> 17:54:53,756
collection of name value pairs that

25465
17:54:51,436 --> 17:54:56,400
describe the various properties of that

25466
17:54:53,756 --> 17:54:58,319
object an object's name is treated as a

25467
17:54:56,400 --> 17:55:00,880
piece of object metadata in cloud

25468
17:54:58,319 --> 17:55:03,040
storage and must be unique within the

25469
17:55:00,879 --> 17:55:05,915
bucket cloud storage uses a flat

25470
17:55:03,040 --> 17:55:08,239
namespace to store objects which means

25471
17:55:05,915 --> 17:55:10,719
that cloud storage isn't a file system

25472
17:55:08,239 --> 17:55:13,595
hierarchy but sees all objects in a

25473
17:55:10,720 --> 17:55:15,756
given bucket as independent with no

25474
17:55:13,595 --> 17:55:16,955
relationship towards each other for

25475
17:55:15,756 --> 17:55:20,796
convenience

25476
17:55:16,955 --> 17:55:23,360
tools such as the console and gsutil

25477
17:55:20,796 --> 17:55:25,520
work with objects that use the slash

25478
17:55:23,360 --> 17:55:28,080
character as if they were stored in a

25479
17:55:25,519 --> 17:55:31,115
virtual hierarchy for example you can

25480
17:55:28,080 --> 17:55:35,116
name one object slash bow ties slash

25481
17:55:31,116 --> 17:55:37,040
spring 2021 slash plaid bowtie.jpg when

25482
17:55:35,116 --> 17:55:39,116
using the cloud console you can then

25483
17:55:37,040 --> 17:55:41,040
navigate to these objects as if they

25484
17:55:39,116 --> 17:55:44,160
were in a hierarchical directory

25485
17:55:41,040 --> 17:55:47,200
structure under the folders bow ties and

25486
17:55:44,160 --> 17:55:49,116
spring 2021 now i mentioned before that

25487
17:55:47,199 --> 17:55:51,755
the part of the bucket creation is the

25488
17:55:49,116 --> 17:55:54,160
selection of a storage class the storage

25489
17:55:51,756 --> 17:55:56,720
class you set for an object affects the

25490
17:55:54,160 --> 17:55:58,320
object's availability and pricing model

25491
17:55:56,720 --> 17:56:01,116
so when you create a bucket you can

25492
17:55:58,319 --> 17:56:02,796
specify a default storage class for the

25493
17:56:01,116 --> 17:56:05,360
bucket when you add objects to the

25494
17:56:02,796 --> 17:56:08,160
bucket they inherit this storage class

25495
17:56:05,360 --> 17:56:09,915
unless explicitly set otherwise now i

25496
17:56:08,160 --> 17:56:11,916
wanted to touch on these four storage

25497
17:56:09,915 --> 17:56:13,915
classes now to give you a better

25498
17:56:11,915 --> 17:56:16,879
understanding of the differences between

25499
17:56:13,915 --> 17:56:19,915
them the first one is standard storage

25500
17:56:16,879 --> 17:56:22,319
and is considered best for hot data or

25501
17:56:19,915 --> 17:56:25,040
frequently accessed data and is best for

25502
17:56:22,319 --> 17:56:27,436
short-term use as it does not have any

25503
17:56:25,040 --> 17:56:29,756
specified storage duration and this is

25504
17:56:27,436 --> 17:56:32,080
excellent for use in analytical

25505
17:56:29,756 --> 17:56:34,720
workloads and transcoding and the price

25506
17:56:32,080 --> 17:56:37,360
for this storage class comes in at two

25507
17:56:34,720 --> 17:56:39,756
cents per gigabyte per month next up is

25508
17:56:37,360 --> 17:56:42,559
near line storage and this is considered

25509
17:56:39,756 --> 17:56:45,275
hot data as well and is a low-cost

25510
17:56:42,559 --> 17:56:48,000
storage class for storing in frequently

25511
17:56:45,275 --> 17:56:50,720
accessed data nearline storage has a

25512
17:56:48,000 --> 17:56:53,199
slightly lower availability a 30-day

25513
17:56:50,720 --> 17:56:55,840
minimum storage duration and comes with

25514
17:56:53,199 --> 17:56:57,915
the cost for data access nearline

25515
17:56:55,839 --> 17:57:00,955
storage is ideal if you're looking to

25516
17:56:57,915 --> 17:57:03,839
continuously add files but only plan to

25517
17:57:00,955 --> 17:57:06,479
access them once a month and is perfect

25518
17:57:03,839 --> 17:57:08,879
for data backup and data archiving the

25519
17:57:06,480 --> 17:57:11,596
price for this storage class comes in at

25520
17:57:08,879 --> 17:57:14,399
a penny per gigabyte per month now cold

25521
17:57:11,595 --> 17:57:16,879
line storage is considered cold data as

25522
17:57:14,400 --> 17:57:20,160
it enters into more of the longer term

25523
17:57:16,879 --> 17:57:22,719
storage classes and is a very low cost

25524
17:57:20,160 --> 17:57:24,880
storage class for storing and frequently

25525
17:57:22,720 --> 17:57:27,840
accessed data it comes with slightly

25526
17:57:24,879 --> 17:57:30,479
lower availability than nearline storage

25527
17:57:27,839 --> 17:57:32,879
a 90-day minimum storage duration and

25528
17:57:30,480 --> 17:57:35,116
comes with the cost for data access that

25529
17:57:32,879 --> 17:57:37,839
is higher than the retrieval cost for

25530
17:57:35,116 --> 17:57:40,635
nearline storage coldline storage is

25531
17:57:37,839 --> 17:57:43,519
ideal for data you plan to read or

25532
17:57:40,635 --> 17:57:46,000
modify at most once a quarter and is

25533
17:57:43,519 --> 17:57:47,839
perfect for data backup and data

25534
17:57:46,000 --> 17:57:50,480
archiving the price for this storage

25535
17:57:47,839 --> 17:57:53,519
class comes in at less than half of a

25536
17:57:50,480 --> 17:57:56,400
penny per gigabyte per month and finally

25537
17:57:53,519 --> 17:57:58,879
archive storage is the lowest cost

25538
17:57:56,400 --> 17:58:01,840
highly durable storage service for data

25539
17:57:58,879 --> 17:58:04,635
archiving online backup and disaster

25540
17:58:01,839 --> 17:58:08,079
recovery and even coming in at a lowest

25541
17:58:04,635 --> 17:58:10,319
cost the data access is still available

25542
17:58:08,080 --> 17:58:12,560
within milliseconds archive storage

25543
17:58:10,319 --> 17:58:15,756
comes in at a higher cost for data

25544
17:58:12,559 --> 17:58:18,399
retrieval as well as a

25545
17:58:15,756 --> 17:58:20,880
day minimum storage duration and is the

25546
17:58:18,400 --> 17:58:23,596
best choice for data that you plan to

25547
17:58:20,879 --> 17:58:25,595
access less than once a year archive

25548
17:58:23,595 --> 17:58:28,879
storage also comes with the highest

25549
17:58:25,595 --> 17:58:31,680
price for data retrieval and it is ideal

25550
17:58:28,879 --> 17:58:34,795
for archive data storage that's used for

25551
17:58:31,680 --> 17:58:36,720
regulatory purposes or disaster recovery

25552
17:58:34,796 --> 17:58:38,956
data in the event that there is an

25553
17:58:36,720 --> 17:58:40,955
oopsies in your environment the price of

25554
17:58:38,955 --> 17:58:43,519
the storage class comes in at a

25555
17:58:40,955 --> 17:58:46,319
ridiculously low price per gigabyte per

25556
17:58:43,519 --> 17:58:48,879
month at a fraction of a penny per

25557
17:58:46,319 --> 17:58:51,519
gigabyte per month now when it comes to

25558
17:58:48,879 --> 17:58:53,755
choosing your geographic location this

25559
17:58:51,519 --> 17:58:56,399
will determine the availability of your

25560
17:58:53,756 --> 17:58:58,720
data here as you can see the highest

25561
17:58:56,400 --> 17:59:01,360
availability is the standard

25562
17:58:58,720 --> 17:59:03,680
multi-region whereas archive has the

25563
17:59:01,360 --> 17:59:05,520
lowest availability when stored in a

25564
17:59:03,680 --> 17:59:08,000
regional setting now when it comes to

25565
17:59:05,519 --> 17:59:10,319
the durability of your data meaning the

25566
17:59:08,000 --> 17:59:12,796
measurement of how healthy and resilient

25567
17:59:10,319 --> 17:59:16,319
your data is from data loss or data

25568
17:59:12,796 --> 17:59:20,000
corruption google cloud boasts 11 9's

25569
17:59:16,319 --> 17:59:23,116
durability annually on all data stored

25570
17:59:20,000 --> 17:59:26,160
in any storage class on cloud storage so

25571
17:59:23,116 --> 17:59:28,880
know that your data is stored safely and

25572
17:59:26,160 --> 17:59:30,796
will be there holding the same integrity

25573
17:59:28,879 --> 17:59:32,719
from the day you stored it now when it

25574
17:59:30,796 --> 17:59:35,116
comes to granting permissions to your

25575
17:59:32,720 --> 17:59:37,116
cloud storage buckets and the objects

25576
17:59:35,116 --> 17:59:40,160
within them there are four different

25577
17:59:37,116 --> 17:59:42,080
options to choose from the first is iam

25578
17:59:40,160 --> 17:59:44,796
permissions and these are the standard

25579
17:59:42,080 --> 17:59:47,436
permissions that control all your other

25580
17:59:44,796 --> 17:59:49,596
resources in google cloud and follow the

25581
17:59:47,436 --> 17:59:51,680
same top-down hierarchy that we

25582
17:59:49,595 --> 17:59:55,275
discussed earlier the next available

25583
17:59:51,680 --> 17:59:57,756
option are access control list or acls

25584
17:59:55,275 --> 18:00:00,795
and these define who has access to your

25585
17:59:57,756 --> 18:00:03,436
buckets and objects as well as what type

25586
18:00:00,796 --> 18:00:06,560
of access they have and these can work

25587
18:00:03,436 --> 18:00:09,520
in tandem with im permissions moving on

25588
18:00:06,559 --> 18:00:12,159
to sign urls these are time limited

25589
18:00:09,519 --> 18:00:15,039
reader write access urls that can be

25590
18:00:12,160 --> 18:00:17,520
created by you to give access to the

25591
18:00:15,040 --> 18:00:20,720
object in question for the duration that

25592
18:00:17,519 --> 18:00:23,039
you specify and lastly is sign policy

25593
18:00:20,720 --> 18:00:25,916
documents and these are documents to

25594
18:00:23,040 --> 18:00:27,840
specify what can be uploaded to a bucket

25595
18:00:25,915 --> 18:00:30,399
and i will be going into each one of

25596
18:00:27,839 --> 18:00:32,879
these in a bit of detail now cloud

25597
18:00:30,400 --> 18:00:35,840
storage offers two systems for granting

25598
18:00:32,879 --> 18:00:39,680
users permission to access your buckets

25599
18:00:35,839 --> 18:00:42,000
and objects iam and access control lists

25600
18:00:39,680 --> 18:00:44,400
these systems act in parallel in order

25601
18:00:42,000 --> 18:00:47,040
for a user to access a cloud storage

25602
18:00:44,400 --> 18:00:49,756
resource only one of the systems needs

25603
18:00:47,040 --> 18:00:51,756
to grant the user permission im is

25604
18:00:49,756 --> 18:00:54,160
always the recommended method when it

25605
18:00:51,756 --> 18:00:56,080
comes to giving access to buckets and

25606
18:00:54,160 --> 18:00:58,400
the objects within those buckets

25607
18:00:56,080 --> 18:01:00,635
granting roles at the bucket level does

25608
18:00:58,400 --> 18:01:03,040
not affect any existing roles that you

25609
18:01:00,635 --> 18:01:05,199
granted at the project level and vice

25610
18:01:03,040 --> 18:01:07,360
versa giving you two levels of

25611
18:01:05,199 --> 18:01:09,839
granularity to customize your

25612
18:01:07,360 --> 18:01:12,160
permissions so for instance you can give

25613
18:01:09,839 --> 18:01:15,359
a user permission to read objects in any

25614
18:01:12,160 --> 18:01:17,680
bucket but permissions to create objects

25615
18:01:15,360 --> 18:01:19,915
only in one specific bucket the roles

25616
18:01:17,680 --> 18:01:22,635
that are available through iam are the

25617
18:01:19,915 --> 18:01:24,955
primitive standard storage roles or the

25618
18:01:22,635 --> 18:01:28,400
legacy roles which are equivalent to

25619
18:01:24,955 --> 18:01:31,040
acls now acls are there if you need to

25620
18:01:28,400 --> 18:01:33,596
customize access and really get granular

25621
18:01:31,040 --> 18:01:36,160
with individual objects within a bucket

25622
18:01:33,595 --> 18:01:38,635
and are used to define who has access to

25623
18:01:36,160 --> 18:01:41,360
your buckets and objects as well as what

25624
18:01:38,635 --> 18:01:43,756
level of access they have each acl

25625
18:01:41,360 --> 18:01:46,239
consists of one or more entries and

25626
18:01:43,756 --> 18:01:49,040
gives a specific user or group the

25627
18:01:46,239 --> 18:01:51,275
ability to perform specific actions each

25628
18:01:49,040 --> 18:01:54,000
entry consists of two pieces of

25629
18:01:51,275 --> 18:01:56,159
information a permission which defines

25630
18:01:54,000 --> 18:01:58,635
what actions can be performed and a

25631
18:01:56,160 --> 18:02:01,200
scope which defines who can perform the

25632
18:01:58,635 --> 18:02:04,879
specified actions now acls should be

25633
18:02:01,199 --> 18:02:07,039
used with caution as iam roles and acls

25634
18:02:04,879 --> 18:02:09,275
overlap cloud storage will grant a

25635
18:02:07,040 --> 18:02:11,595
broader permission so if you allow

25636
18:02:09,275 --> 18:02:14,159
specific users access to an object in a

25637
18:02:11,595 --> 18:02:16,399
bucket and then an acl is applied to

25638
18:02:14,160 --> 18:02:19,200
that object to make it public then it

25639
18:02:16,400 --> 18:02:22,319
will be publicly accessible so please be

25640
18:02:19,199 --> 18:02:24,879
aware now a signed url is a url that

25641
18:02:22,319 --> 18:02:27,839
provides limited permission and time to

25642
18:02:24,879 --> 18:02:30,239
make a request sign urls contain

25643
18:02:27,839 --> 18:02:32,955
authentication information allowing

25644
18:02:30,239 --> 18:02:35,519
users without credentials to perform

25645
18:02:32,955 --> 18:02:38,879
specific actions on a resource when you

25646
18:02:35,519 --> 18:02:41,199
generate a signed url you specify a user

25647
18:02:38,879 --> 18:02:43,115
or service account which must have

25648
18:02:41,199 --> 18:02:45,915
sufficient permission to make the

25649
18:02:43,116 --> 18:02:48,560
request that the sign url will make

25650
18:02:45,915 --> 18:02:51,519
after you generate a signed url anyone

25651
18:02:48,559 --> 18:02:54,000
who possesses it can use the sign url to

25652
18:02:51,519 --> 18:02:56,319
perform specified actions such as

25653
18:02:54,000 --> 18:02:58,160
reading an object within a specified

25654
18:02:56,319 --> 18:03:00,720
period of time now if you want to

25655
18:02:58,160 --> 18:03:03,040
provide public access to a user who

25656
18:03:00,720 --> 18:03:05,520
doesn't have an account you can provide

25657
18:03:03,040 --> 18:03:08,879
a signed url to that user which gives

25658
18:03:05,519 --> 18:03:11,435
the user read write or delete access to

25659
18:03:08,879 --> 18:03:13,519
that resource for a limited time you

25660
18:03:11,436 --> 18:03:16,400
specify an expiration date when you

25661
18:03:13,519 --> 18:03:19,199
create the sign url so anyone who knows

25662
18:03:16,400 --> 18:03:22,319
the url can access the resource until

25663
18:03:19,199 --> 18:03:25,360
the expiration time for the url is

25664
18:03:22,319 --> 18:03:27,756
reached or the key used to sign the url

25665
18:03:25,360 --> 18:03:30,720
is rotated and the command to create the

25666
18:03:27,756 --> 18:03:33,360
sign url is shown here and as you can

25667
18:03:30,720 --> 18:03:36,160
see has been assigned for a limited time

25668
18:03:33,360 --> 18:03:38,720
of 10 minutes so as you've seen when it

25669
18:03:36,160 --> 18:03:41,520
comes to cloud storage there are so many

25670
18:03:38,720 --> 18:03:43,840
configuration options to choose from and

25671
18:03:41,519 --> 18:03:46,479
lots of different ways to store and give

25672
18:03:43,839 --> 18:03:49,679
access and this makes this resource from

25673
18:03:46,480 --> 18:03:51,756
google cloud such a flexible option and

25674
18:03:49,680 --> 18:03:53,756
full of great potential for many

25675
18:03:51,756 --> 18:03:56,160
different types of workloads this is

25676
18:03:53,756 --> 18:03:58,559
also a service that comes up a lot in

25677
18:03:56,160 --> 18:04:01,040
the exam as one of the many different

25678
18:03:58,559 --> 18:04:03,680
storage options to choose from and so

25679
18:04:01,040 --> 18:04:06,160
knowing the features storage classes

25680
18:04:03,680 --> 18:04:08,319
pricing and access options will

25681
18:04:06,160 --> 18:04:10,240
definitely give you a leg up when you

25682
18:04:08,319 --> 18:04:12,239
are presented with questions regarding

25683
18:04:10,239 --> 18:04:14,319
storage and so that's pretty much all i

25684
18:04:12,239 --> 18:04:16,955
wanted to cover when it comes to this

25685
18:04:14,319 --> 18:04:19,199
overview on cloud storage so you can now

25686
18:04:16,955 --> 18:04:20,750
mark this lesson as complete and let's

25687
18:04:19,199 --> 18:04:24,635
move on to the next one

25688
18:04:20,750 --> 18:04:27,116
[Music]

25689
18:04:24,635 --> 18:04:29,275
welcome back and in this lesson i will

25690
18:04:27,116 --> 18:04:31,840
be covering object versioning and life

25691
18:04:29,275 --> 18:04:34,400
cycle management a feature within cloud

25692
18:04:31,839 --> 18:04:36,559
storage that is used to manage and sort

25693
18:04:34,400 --> 18:04:39,360
through older files that need to be

25694
18:04:36,559 --> 18:04:42,000
deleted along with files that are not in

25695
18:04:39,360 --> 18:04:44,635
high need of regular access knowing the

25696
18:04:42,000 --> 18:04:47,275
capabilities of these two features

25697
18:04:44,635 --> 18:04:50,080
can really help organize accumulated

25698
18:04:47,275 --> 18:04:53,040
objects in storage buckets and cut down

25699
18:04:50,080 --> 18:04:55,680
on costs so without further ado let's

25700
18:04:53,040 --> 18:04:58,080
dive in now to understand a bit more

25701
18:04:55,680 --> 18:05:01,040
about objects i wanted to dive into

25702
18:04:58,080 --> 18:05:03,116
immutability and versioning now objects

25703
18:05:01,040 --> 18:05:05,915
are immutable which means that an

25704
18:05:03,116 --> 18:05:08,720
uploaded object cannot change throughout

25705
18:05:05,915 --> 18:05:11,040
its storage lifetime an object's storage

25706
18:05:08,720 --> 18:05:14,080
lifetime is the time between a

25707
18:05:11,040 --> 18:05:16,796
successful object creation or upload and

25708
18:05:14,080 --> 18:05:19,756
successful object deletion this means

25709
18:05:16,796 --> 18:05:22,796
that you cannot edit objects in place

25710
18:05:19,756 --> 18:05:25,275
instead objects are always replaced with

25711
18:05:22,796 --> 18:05:27,756
a new version so after the upload of the

25712
18:05:25,275 --> 18:05:30,159
new object completes the new version of

25713
18:05:27,756 --> 18:05:32,559
the object is served to readers this

25714
18:05:30,160 --> 18:05:34,880
replacement marks the end of one

25715
18:05:32,559 --> 18:05:37,115
object's life cycle and the beginning of

25716
18:05:34,879 --> 18:05:39,519
a new one now to support the retrieval

25717
18:05:37,116 --> 18:05:41,520
of objects that are deleted or replaced

25718
18:05:39,519 --> 18:05:43,755
cloud storage offers the object

25719
18:05:41,519 --> 18:05:46,479
versioning feature object versioning

25720
18:05:43,756 --> 18:05:48,400
retains a non-current object version

25721
18:05:46,480 --> 18:05:51,200
when the live object version gets

25722
18:05:48,400 --> 18:05:53,840
replaced or deleted enabling object

25723
18:05:51,199 --> 18:05:56,000
versioning increases storage costs which

25724
18:05:53,839 --> 18:05:58,635
can be partially mitigated by

25725
18:05:56,000 --> 18:06:01,275
configuring object lifecycle management

25726
18:05:58,635 --> 18:06:03,756
to delete older object versions but more

25727
18:06:01,275 --> 18:06:06,239
on that in just a bit cloud storage uses

25728
18:06:03,756 --> 18:06:09,275
two properties that together identify

25729
18:06:06,239 --> 18:06:11,275
the version of an object the generation

25730
18:06:09,275 --> 18:06:12,479
which identifies the version of the

25731
18:06:11,275 --> 18:06:15,115
object's data

25732
18:06:12,480 --> 18:06:17,436
and the meta generation which identifies

25733
18:06:15,116 --> 18:06:20,400
the version of the object's metadata

25734
18:06:17,436 --> 18:06:22,720
these properties are always present with

25735
18:06:20,400 --> 18:06:25,200
every version of the object even if

25736
18:06:22,720 --> 18:06:27,520
object versioning is not enabled these

25737
18:06:25,199 --> 18:06:29,915
properties can be used to enforce

25738
18:06:27,519 --> 18:06:32,079
ordering of updates so in order to

25739
18:06:29,915 --> 18:06:34,479
enable object versioning you would do

25740
18:06:32,080 --> 18:06:36,635
that by enabling it on a bucket once

25741
18:06:34,480 --> 18:06:38,796
enabled older versions remain in your

25742
18:06:36,635 --> 18:06:41,839
bucket when a replacement or deletion

25743
18:06:38,796 --> 18:06:44,319
occurs so by default when you replace an

25744
18:06:41,839 --> 18:06:46,795
object cloud storage deletes the old

25745
18:06:44,319 --> 18:06:48,879
version and adds a new version these

25746
18:06:46,796 --> 18:06:51,596
older versions retain the name of the

25747
18:06:48,879 --> 18:06:53,915
object but are uniquely identified by

25748
18:06:51,595 --> 18:06:55,915
their generation number when object

25749
18:06:53,915 --> 18:06:58,479
versioning has created an older version

25750
18:06:55,915 --> 18:07:01,115
of an object you can use the generation

25751
18:06:58,480 --> 18:07:03,756
number to refer to the older version

25752
18:07:01,116 --> 18:07:06,319
this allows you to restore a replaced

25753
18:07:03,756 --> 18:07:08,955
object in your bucket or permanently

25754
18:07:06,319 --> 18:07:11,360
delete older object versions that you no

25755
18:07:08,955 --> 18:07:13,595
longer need and so touching back on cost

25756
18:07:11,360 --> 18:07:16,400
for just a minute these versions can

25757
18:07:13,595 --> 18:07:18,879
really add up and start costing you some

25758
18:07:16,400 --> 18:07:21,200
serious money if you have thousands of

25759
18:07:18,879 --> 18:07:23,115
files with hundreds of versions and this

25760
18:07:21,199 --> 18:07:25,839
is where life cycle management comes

25761
18:07:23,116 --> 18:07:28,240
into play now cloud storage offers the

25762
18:07:25,839 --> 18:07:30,559
object lifecycle management feature in

25763
18:07:28,239 --> 18:07:33,275
order to support some common use cases

25764
18:07:30,559 --> 18:07:34,399
like setting a time to live or ttl for

25765
18:07:33,275 --> 18:07:36,559
objects

25766
18:07:34,400 --> 18:07:39,596
retaining non-current versions of

25767
18:07:36,559 --> 18:07:42,319
objects or downgrading storage classes

25768
18:07:39,595 --> 18:07:44,319
of objects to help manage costs now in

25769
18:07:42,319 --> 18:07:46,720
order to apply this feature to your

25770
18:07:44,319 --> 18:07:49,116
objects you would assign a lifecycle

25771
18:07:46,720 --> 18:07:51,520
management configuration to a bucket the

25772
18:07:49,116 --> 18:07:53,596
configuration contains a set of rules

25773
18:07:51,519 --> 18:07:55,915
which apply to current and feature

25774
18:07:53,595 --> 18:07:58,319
objects in the bucket when an object

25775
18:07:55,915 --> 18:08:00,795
meets the criteria of one of the rules

25776
18:07:58,319 --> 18:08:03,436
cloud storage automatically performs the

25777
18:08:00,796 --> 18:08:06,319
specified action on the object and so

25778
18:08:03,436 --> 18:08:07,680
some example use cases are shown here so

25779
18:08:06,319 --> 18:08:08,955
if you're looking to downgrade the

25780
18:08:07,680 --> 18:08:12,720
storage class

25781
18:08:08,955 --> 18:08:15,199
of objects older than 365 days to cold

25782
18:08:12,720 --> 18:08:17,275
line storage for compliance purposes

25783
18:08:15,199 --> 18:08:19,360
along with saving money life cycle

25784
18:08:17,275 --> 18:08:21,519
management is perfect for this another

25785
18:08:19,360 --> 18:08:24,239
use case is when you want to delete

25786
18:08:21,519 --> 18:08:26,955
objects created before january 1st of

25787
18:08:24,239 --> 18:08:29,839
2020 and this is another great use case

25788
18:08:26,955 --> 18:08:32,000
to save money as well with keeping only

25789
18:08:29,839 --> 18:08:34,079
the three most recent versions of each

25790
18:08:32,000 --> 18:08:36,635
object in a bucket with versioning

25791
18:08:34,080 --> 18:08:39,276
enabled to keep from version objects

25792
18:08:36,635 --> 18:08:41,680
building up object lifecycle management

25793
18:08:39,275 --> 18:08:43,756
has so many other use cases across a

25794
18:08:41,680 --> 18:08:46,319
myriad of industries and when used

25795
18:08:43,756 --> 18:08:48,559
correctly is a great way to achieve

25796
18:08:46,319 --> 18:08:51,199
object management along with saving

25797
18:08:48,559 --> 18:08:53,360
money now i wanted to take a moment to

25798
18:08:51,199 --> 18:08:55,839
dive into the lifecycle management

25799
18:08:53,360 --> 18:08:58,000
configuration each lifecycle management

25800
18:08:55,839 --> 18:09:00,719
configuration contains a set of

25801
18:08:58,000 --> 18:09:02,879
components these are a set of rules

25802
18:09:00,720 --> 18:09:05,520
conditions and the action when the

25803
18:09:02,879 --> 18:09:08,719
conditions are met rules are any set of

25804
18:09:05,519 --> 18:09:11,199
conditions for any action conditions is

25805
18:09:08,720 --> 18:09:14,239
something an object must meet before the

25806
18:09:11,199 --> 18:09:16,239
action defined in the rule occurs on the

25807
18:09:14,239 --> 18:09:18,720
object and there are various conditions

25808
18:09:16,239 --> 18:09:21,680
to choose from that allows you to get

25809
18:09:18,720 --> 18:09:23,595
pretty granular and finally the action

25810
18:09:21,680 --> 18:09:26,480
which is where you would have the option

25811
18:09:23,595 --> 18:09:28,955
to delete or set storage class now when

25812
18:09:26,480 --> 18:09:30,956
you delete current versions this will

25813
18:09:28,955 --> 18:09:33,519
move the current version into a

25814
18:09:30,955 --> 18:09:36,000
non-current state and when you delete a

25815
18:09:33,519 --> 18:09:38,319
non-current version you will permanently

25816
18:09:36,000 --> 18:09:40,559
delete the version and cannot get it

25817
18:09:38,319 --> 18:09:43,519
back and so when you set the storage

25818
18:09:40,559 --> 18:09:45,915
class it will transition the object to a

25819
18:09:43,519 --> 18:09:48,319
different storage class so when defining

25820
18:09:45,915 --> 18:09:51,755
a rule you can specify any set of

25821
18:09:48,319 --> 18:09:54,319
conditions for any action if you specify

25822
18:09:51,756 --> 18:09:57,275
multiple conditions in a rule an object

25823
18:09:54,319 --> 18:09:59,360
has to match all of the conditions for

25824
18:09:57,275 --> 18:10:01,199
the action to be taken so if you have

25825
18:09:59,360 --> 18:10:03,436
three conditions and one of those

25826
18:10:01,199 --> 18:10:05,839
conditions have not been met then the

25827
18:10:03,436 --> 18:10:08,239
action will not take place if you

25828
18:10:05,839 --> 18:10:11,275
specify multiple rules that contain the

25829
18:10:08,239 --> 18:10:13,839
same action the action is taken when an

25830
18:10:11,275 --> 18:10:16,795
object matches the conditions in any of

25831
18:10:13,839 --> 18:10:18,435
these rules now if multiple rules have

25832
18:10:16,796 --> 18:10:21,276
their conditions satisfied

25833
18:10:18,436 --> 18:10:23,200
simultaneously for a single object cloud

25834
18:10:21,275 --> 18:10:25,915
storage will either perform the delete

25835
18:10:23,199 --> 18:10:28,719
action as it takes precedence over the

25836
18:10:25,915 --> 18:10:30,559
set storage class action or the set

25837
18:10:28,720 --> 18:10:33,116
storage class action that switches the

25838
18:10:30,559 --> 18:10:35,519
object to the storage class with the

25839
18:10:33,116 --> 18:10:38,319
lowest at rest storage pricing takes

25840
18:10:35,519 --> 18:10:41,115
precedence so for example if you have

25841
18:10:38,319 --> 18:10:43,275
one rule that deletes an object and

25842
18:10:41,116 --> 18:10:46,000
another rule that changes the object

25843
18:10:43,275 --> 18:10:49,040
storage class but both rules use the

25844
18:10:46,000 --> 18:10:51,915
exact same condition the delete action

25845
18:10:49,040 --> 18:10:54,080
always occurs when the condition is met

25846
18:10:51,915 --> 18:10:56,079
or if you have one rule that changes the

25847
18:10:54,080 --> 18:10:58,560
object storage class to near line

25848
18:10:56,080 --> 18:11:00,635
storage and another rule that changes

25849
18:10:58,559 --> 18:11:03,360
the object storage class to cold line

25850
18:11:00,635 --> 18:11:06,159
storage but both rules use the exact

25851
18:11:03,360 --> 18:11:08,720
same condition the object storage class

25852
18:11:06,160 --> 18:11:10,796
always changes to cold line storage when

25853
18:11:08,720 --> 18:11:12,796
the condition is met and so some

25854
18:11:10,796 --> 18:11:15,116
considerations that i wanted to point

25855
18:11:12,796 --> 18:11:17,116
out when it comes to cloud storage is

25856
18:11:15,116 --> 18:11:18,240
that when it comes to object life cycle

25857
18:11:17,116 --> 18:11:20,635
management

25858
18:11:18,239 --> 18:11:23,519
changes are in accordance to object

25859
18:11:20,635 --> 18:11:26,796
creation date as well once an object is

25860
18:11:23,519 --> 18:11:29,115
deleted it cannot be undeleted so please

25861
18:11:26,796 --> 18:11:31,840
be careful when permanently deleting a

25862
18:11:29,116 --> 18:11:35,276
version as well life cycle rules can

25863
18:11:31,839 --> 18:11:37,519
take up to 24 hours to take effect so be

25864
18:11:35,275 --> 18:11:40,479
aware when setting them and always be

25865
18:11:37,519 --> 18:11:42,955
sure to test these life cycle rules in

25866
18:11:40,480 --> 18:11:45,200
development first before rolling them

25867
18:11:42,955 --> 18:11:47,436
out into production and so that's pretty

25868
18:11:45,199 --> 18:11:49,595
much all i had to cover when it comes to

25869
18:11:47,436 --> 18:11:51,520
versioning and object life cycle

25870
18:11:49,595 --> 18:11:53,595
management and so you can now mark this

25871
18:11:51,519 --> 18:11:56,319
lesson as complete and whenever you're

25872
18:11:53,595 --> 18:11:58,879
ready join me in the console where we go

25873
18:11:56,319 --> 18:12:01,275
hands-on with versioning object life

25874
18:11:58,879 --> 18:12:02,129
cycle management and cloud storage as a

25875
18:12:01,275 --> 18:12:06,079
whole

25876
18:12:02,129 --> 18:12:08,719
[Music]

25877
18:12:06,080 --> 18:12:10,480
welcome back in this demo we're going to

25878
18:12:08,720 --> 18:12:12,720
cement the knowledge that we learned

25879
18:12:10,480 --> 18:12:15,360
from the past couple lessons on cloud

25880
18:12:12,720 --> 18:12:17,835
storage and really dive into the nitty

25881
18:12:15,360 --> 18:12:19,680
gritty when it comes to the features and

25882
18:12:17,835 --> 18:12:22,080
configuration you're first going to

25883
18:12:19,679 --> 18:12:24,399
create a cloud storage bucket and upload

25884
18:12:22,080 --> 18:12:26,796
some files to it and then interact with

25885
18:12:24,399 --> 18:12:29,195
the bucket and the files using the

25886
18:12:26,796 --> 18:12:32,080
console as well you're going to get your

25887
18:12:29,195 --> 18:12:34,399
hands dirty using the gsutil command

25888
18:12:32,080 --> 18:12:36,796
line tool and this is the tool for

25889
18:12:34,399 --> 18:12:38,639
managing cloud storage from the command

25890
18:12:36,796 --> 18:12:41,436
line now there's quite a bit of work to

25891
18:12:38,639 --> 18:12:44,080
do here so with that being said let's

25892
18:12:41,436 --> 18:12:47,516
dive in and so i am logged in here as

25893
18:12:44,080 --> 18:12:50,400
tony bowties at gmail.com along with

25894
18:12:47,516 --> 18:12:52,156
being in project bowtie inc and so the

25895
18:12:50,399 --> 18:12:54,399
first thing i want to do is i want to

25896
18:12:52,156 --> 18:12:55,835
create a cloud storage bucket so in

25897
18:12:54,399 --> 18:12:58,319
order for me to do that i'm going to

25898
18:12:55,835 --> 18:13:00,475
head over to the navigation menu and i'm

25899
18:12:58,320 --> 18:13:02,156
going to scroll down to storage

25900
18:13:00,475 --> 18:13:04,155
and here i already have a couple of

25901
18:13:02,156 --> 18:13:06,244
buckets that i created from earlier

25902
18:13:04,156 --> 18:13:08,080
lessons and you may have a couple

25903
18:13:06,244 --> 18:13:10,400
buckets as well but you're going to go

25904
18:13:08,080 --> 18:13:12,796
ahead and create a new bucket by going

25905
18:13:10,399 --> 18:13:14,795
up to the top here and click on create

25906
18:13:12,796 --> 18:13:17,360
bucket now i know that we've gone

25907
18:13:14,796 --> 18:13:19,516
through this before in previous lessons

25908
18:13:17,360 --> 18:13:21,436
but this time i wanted to go through all

25909
18:13:19,516 --> 18:13:23,279
the configuration options that are

25910
18:13:21,436 --> 18:13:25,600
available and so the first thing that

25911
18:13:23,279 --> 18:13:27,919
you're prompted to do here is to name

25912
18:13:25,600 --> 18:13:30,556
your bucket as explained in an earlier

25913
18:13:27,919 --> 18:13:32,475
lesson it needs to be a globally unique

25914
18:13:30,555 --> 18:13:34,720
name and so you can pick any name you

25915
18:13:32,475 --> 18:13:38,720
choose and so for me i'm going to call

25916
18:13:34,720 --> 18:13:40,876
this bucket bowtie inc dash 2021 i'm

25917
18:13:38,720 --> 18:13:43,600
going to hit continue and if it wasn't a

25918
18:13:40,876 --> 18:13:45,279
globally unique name it would error out

25919
18:13:43,600 --> 18:13:47,116
and you would have to enter in a new

25920
18:13:45,279 --> 18:13:49,679
name but since this bucket name is

25921
18:13:47,115 --> 18:13:52,080
globally unique i'm able to move forward

25922
18:13:49,679 --> 18:13:55,195
for location type you can select from

25923
18:13:52,080 --> 18:13:57,516
region dual region and multi region with

25924
18:13:55,195 --> 18:14:00,555
multi region under location you can

25925
18:13:57,516 --> 18:14:03,600
select from either the americas europe

25926
18:14:00,555 --> 18:14:06,319
or asia pacific and under dual region

25927
18:14:03,600 --> 18:14:09,516
you have the options of again choosing

25928
18:14:06,320 --> 18:14:11,196
from america's europe and asia pacific

25929
18:14:09,516 --> 18:14:13,360
and you will be given the regions for

25930
18:14:11,195 --> 18:14:15,195
each and so for this demo we're going to

25931
18:14:13,360 --> 18:14:17,516
go ahead and choose region and we're

25932
18:14:15,195 --> 18:14:19,279
going to keep the location as u.s east

25933
18:14:17,516 --> 18:14:21,195
one and once you've selected that you

25934
18:14:19,279 --> 18:14:23,115
can go ahead and hit continue and you're

25935
18:14:21,195 --> 18:14:25,039
going to be prompted to choose a default

25936
18:14:23,115 --> 18:14:27,436
storage class and here you have the

25937
18:14:25,039 --> 18:14:29,755
option of selecting from the four

25938
18:14:27,436 --> 18:14:31,919
storage classes that we discussed in an

25939
18:14:29,755 --> 18:14:34,319
earlier lesson and so for this demo you

25940
18:14:31,919 --> 18:14:36,475
can keep it as standard and simply click

25941
18:14:34,320 --> 18:14:38,796
on continue and so here you're prompted

25942
18:14:36,475 --> 18:14:41,195
to choose access control and because

25943
18:14:38,796 --> 18:14:43,600
we're going to be diving into acls you

25944
18:14:41,195 --> 18:14:45,279
can keep this as the default fine grain

25945
18:14:43,600 --> 18:14:47,756
access control you can go ahead and

25946
18:14:45,279 --> 18:14:50,080
click continue and under encryption you

25947
18:14:47,755 --> 18:14:52,000
can keep it as the default google manage

25948
18:14:50,080 --> 18:14:54,555
key but know that you always have the

25949
18:14:52,000 --> 18:14:56,244
option of choosing a customer manage key

25950
18:14:54,555 --> 18:14:58,399
and once you've uploaded your customer

25951
18:14:56,244 --> 18:15:00,320
manage key you can select it from here

25952
18:14:58,399 --> 18:15:02,720
and because i have no customer managed

25953
18:15:00,320 --> 18:15:04,960
keys no other keys show up so i'm going

25954
18:15:02,720 --> 18:15:07,516
to click on google manage keys and here

25955
18:15:04,960 --> 18:15:09,516
under retention policy i know i haven't

25956
18:15:07,516 --> 18:15:12,156
touched into that but just to give you

25957
18:15:09,516 --> 18:15:15,116
some context when placing a retention

25958
18:15:12,156 --> 18:15:17,756
policy on a bucket it ensures that all

25959
18:15:15,115 --> 18:15:20,639
current and future objects in the bucket

25960
18:15:17,755 --> 18:15:23,039
can't be deleted or replaced until they

25961
18:15:20,639 --> 18:15:26,080
reach the age that you define in the

25962
18:15:23,039 --> 18:15:28,795
retention policy so if you try to delete

25963
18:15:26,080 --> 18:15:30,960
or replace objects where the age is less

25964
18:15:28,796 --> 18:15:33,116
than the retention period it will

25965
18:15:30,960 --> 18:15:36,080
obviously fail and this is great for

25966
18:15:33,115 --> 18:15:38,243
compliance purposes in areas where logs

25967
18:15:36,080 --> 18:15:40,400
need to be audited by regulators every

25968
18:15:38,244 --> 18:15:43,040
year or where government required

25969
18:15:40,399 --> 18:15:46,155
retention periods apply as well with the

25970
18:15:43,039 --> 18:15:48,243
retention policy you have the option of

25971
18:15:46,156 --> 18:15:50,960
locking that retention policy and when

25972
18:15:48,244 --> 18:15:53,360
you lock a retention policy on a bucket

25973
18:15:50,960 --> 18:15:56,244
you prevent the policy from ever being

25974
18:15:53,360 --> 18:15:59,039
removed or the retention period from

25975
18:15:56,244 --> 18:16:01,680
ever being reduced and this feature is

25976
18:15:59,039 --> 18:16:03,755
irreversible so please be aware if

25977
18:16:01,679 --> 18:16:06,155
you're ever experimenting with lock

25978
18:16:03,755 --> 18:16:08,475
retention policies so if i set a

25979
18:16:06,156 --> 18:16:11,195
retention policy here i can retain

25980
18:16:08,475 --> 18:16:14,080
objects for a certain amount of seconds

25981
18:16:11,195 --> 18:16:15,755
days months and years and for this demo

25982
18:16:14,080 --> 18:16:17,756
we're not going to set any retention

25983
18:16:15,755 --> 18:16:19,279
policies so i'm going to check that off

25984
18:16:17,755 --> 18:16:22,000
and i'm going to go ahead and add a

25985
18:16:19,279 --> 18:16:24,399
label with the key being environment and

25986
18:16:22,000 --> 18:16:26,796
the value being test and just as a note

25987
18:16:24,399 --> 18:16:28,875
before you go ahead and click on create

25988
18:16:26,796 --> 18:16:31,195
over on the right hand side you will see

25989
18:16:28,876 --> 18:16:33,196
a monthly cost estimate and you will be

25990
18:16:31,195 --> 18:16:35,599
given an estimate with storage and

25991
18:16:33,195 --> 18:16:38,555
retrieval as well as how much it costs

25992
18:16:35,600 --> 18:16:40,796
for operations your sla and your

25993
18:16:38,555 --> 18:16:43,195
estimated monthly cost and so before

25994
18:16:40,796 --> 18:16:46,000
creating any buckets you can always do a

25995
18:16:43,195 --> 18:16:49,279
price check to see how much it'll cost

25996
18:16:46,000 --> 18:16:51,835
for storage size retrieval to get a good

25997
18:16:49,279 --> 18:16:53,516
idea of how much it'll cost you monthly

25998
18:16:51,835 --> 18:16:56,080
okay so once you're all done here you

25999
18:16:53,516 --> 18:16:57,680
can simply click on create

26000
18:16:56,080 --> 18:16:59,436
and it'll go ahead and create your

26001
18:16:57,679 --> 18:17:02,155
bucket and so now that your bucket is

26002
18:16:59,436 --> 18:17:05,115
created we want to add some files and so

26003
18:17:02,156 --> 18:17:07,680
we first want to go into copying files

26004
18:17:05,115 --> 18:17:10,080
from an instance to your cloud storage

26005
18:17:07,679 --> 18:17:12,155
bucket and so in order to do that we

26006
18:17:10,080 --> 18:17:13,919
need to create an instance and so we're

26007
18:17:12,156 --> 18:17:16,244
gonna go back over to the navigation

26008
18:17:13,919 --> 18:17:17,919
menu we're gonna scroll down to compute

26009
18:17:16,244 --> 18:17:20,156
engine and we're gonna create our

26010
18:17:17,919 --> 18:17:22,720
instance and for those who do not have

26011
18:17:20,156 --> 18:17:24,876
your default vpc set up please be sure

26012
18:17:22,720 --> 18:17:26,555
to create one before going ahead and

26013
18:17:24,876 --> 18:17:28,244
creating your instance i'm going to go

26014
18:17:26,555 --> 18:17:29,679
ahead and click on create i'm going to

26015
18:17:28,244 --> 18:17:32,244
name this instance

26016
18:17:29,679 --> 18:17:35,435
bowtie instance going to give it a label

26017
18:17:32,244 --> 18:17:37,279
of environment test click on save

26018
18:17:35,436 --> 18:17:39,360
the region is going to be

26019
18:17:37,279 --> 18:17:42,080
east one and you can keep the default

26020
18:17:39,360 --> 18:17:44,320
zone as us east 1b the machine type

26021
18:17:42,080 --> 18:17:46,080
we're going to change it to e2micro and

26022
18:17:44,320 --> 18:17:48,640
you're going to scroll down to access

26023
18:17:46,080 --> 18:17:51,040
scopes and here your instance is going

26024
18:17:48,639 --> 18:17:53,115
to need access to your cloud storage

26025
18:17:51,039 --> 18:17:54,875
bucket and so it's going to need cloud

26026
18:17:53,115 --> 18:17:57,599
storage access so you're going to click

26027
18:17:54,876 --> 18:17:59,600
on set access for each api scroll down

26028
18:17:57,600 --> 18:18:01,600
to storage and for this demo we'll

26029
18:17:59,600 --> 18:18:03,680
select full gonna leave everything else

26030
18:18:01,600 --> 18:18:05,600
as the default and simply click on

26031
18:18:03,679 --> 18:18:08,155
create and so we'll give it a couple

26032
18:18:05,600 --> 18:18:10,244
minutes here for instance to create okay

26033
18:18:08,156 --> 18:18:12,796
and my instance has been created and so

26034
18:18:10,244 --> 18:18:14,876
now i want to create some files and copy

26035
18:18:12,796 --> 18:18:17,756
them over to cloud storage so i'm going

26036
18:18:14,876 --> 18:18:19,919
to first navigate over to cloud storage

26037
18:18:17,755 --> 18:18:22,000
and into my bucket and this way you can

26038
18:18:19,919 --> 18:18:23,755
see the files that you upload and so

26039
18:18:22,000 --> 18:18:25,600
next you're going to open up cloud shell

26040
18:18:23,755 --> 18:18:27,599
and make this a little bigger for better

26041
18:18:25,600 --> 18:18:30,244
viewing and so now you're going to ssh

26042
18:18:27,600 --> 18:18:32,960
into your instance by using the command

26043
18:18:30,244 --> 18:18:35,600
gcloud compute ssh along with your

26044
18:18:32,960 --> 18:18:38,244
instance name the zone flag dash dash

26045
18:18:35,600 --> 18:18:40,156
zone with the zone of us east 1b i'm

26046
18:18:38,244 --> 18:18:42,320
going to go ahead and hit enter and you

26047
18:18:40,156 --> 18:18:44,476
may be prompted with a message asking to

26048
18:18:42,320 --> 18:18:46,156
authorize this api call and you want to

26049
18:18:44,475 --> 18:18:48,080
hit authorize and you're going to be

26050
18:18:46,156 --> 18:18:51,040
prompted to enter a passphrase for your

26051
18:18:48,080 --> 18:18:52,639
key pair enter it in again

26052
18:18:51,039 --> 18:18:54,555
and one more time

26053
18:18:52,639 --> 18:18:56,319
and success we're logged into the

26054
18:18:54,555 --> 18:18:59,039
instance i'm going to quickly clear my

26055
18:18:56,320 --> 18:19:01,116
screen and so i know i could have sshed

26056
18:18:59,039 --> 18:19:03,679
into the instance from the compute

26057
18:19:01,115 --> 18:19:06,080
engine console but i wanted to display

26058
18:19:03,679 --> 18:19:08,959
both the console and the shell on the

26059
18:19:06,080 --> 18:19:11,600
same screen to make viewing a bit easier

26060
18:19:08,960 --> 18:19:13,600
as i add and remove files to and from

26061
18:19:11,600 --> 18:19:15,600
the bucket okay and so now that you're

26062
18:19:13,600 --> 18:19:17,516
logged in you want to create your first

26063
18:19:15,600 --> 18:19:20,080
file that you can copy over to your

26064
18:19:17,516 --> 18:19:23,756
bucket so you can enter in the command

26065
18:19:20,080 --> 18:19:25,680
sudo nano file a bow ties dot text hit

26066
18:19:23,755 --> 18:19:28,079
enter and this will allow you to open up

26067
18:19:25,679 --> 18:19:30,795
the nano editor to edit the file of

26068
18:19:28,080 --> 18:19:32,960
bowties.txt and here you can enter in

26069
18:19:30,796 --> 18:19:35,835
any message that you'd like for me i'm

26070
18:19:32,960 --> 18:19:38,320
going to enter in learning to tie a bow

26071
18:19:35,835 --> 18:19:41,039
tie takes time okay and i'm going to hit

26072
18:19:38,320 --> 18:19:44,080
ctrl o to save hit enter to verify the

26073
18:19:41,039 --> 18:19:46,243
file name to right and ctrl x to exit

26074
18:19:44,080 --> 18:19:48,320
and so now i want to copy this file up

26075
18:19:46,244 --> 18:19:50,720
to my bucket and so here is where i'm

26076
18:19:48,320 --> 18:19:54,000
going to use the gsutil command so i'm

26077
18:19:50,720 --> 18:19:55,755
going to type in gsutil cp for copy the

26078
18:19:54,000 --> 18:19:57,039
name of the file which is file of

26079
18:19:55,755 --> 18:20:00,795
bowties

26080
18:19:57,039 --> 18:20:02,555
text along with gs colon forward slash

26081
18:20:00,796 --> 18:20:05,600
forward slash and the name of your

26082
18:20:02,555 --> 18:20:09,115
bucket which in my case is bow tie ink

26083
18:20:05,600 --> 18:20:12,080
dash 2021 and this should copy my file

26084
18:20:09,115 --> 18:20:13,515
file a bowties.txt up to my bucket of

26085
18:20:12,080 --> 18:20:16,244
bow tie inc

26086
18:20:13,516 --> 18:20:18,555
2021 i'm gonna hit enter

26087
18:20:16,244 --> 18:20:20,796
okay and it's finished copying over and

26088
18:20:18,555 --> 18:20:23,279
if i go up here to the top right and

26089
18:20:20,796 --> 18:20:25,360
click on refresh i can see that my file

26090
18:20:23,279 --> 18:20:28,156
successfully uploaded and this is a

26091
18:20:25,360 --> 18:20:30,796
great and easy method to upload any

26092
18:20:28,156 --> 18:20:33,279
files that you may have to cloud storage

26093
18:20:30,796 --> 18:20:35,600
okay and so now that you've copied files

26094
18:20:33,279 --> 18:20:37,516
from your instance to your bucket you're

26095
18:20:35,600 --> 18:20:40,796
going to now copy some files from the

26096
18:20:37,516 --> 18:20:42,796
repo to be uploaded to cloud storage for

26097
18:20:40,796 --> 18:20:45,516
our next step so you're gonna go ahead

26098
18:20:42,796 --> 18:20:47,600
and exit out of the instance by just

26099
18:20:45,516 --> 18:20:49,680
simply typing in exit i'm gonna quickly

26100
18:20:47,600 --> 18:20:52,720
clear the screen and so here i need to

26101
18:20:49,679 --> 18:20:55,195
clone my repo if you already have clone

26102
18:20:52,720 --> 18:20:57,279
the repo then you can skip this step i'm

26103
18:20:55,195 --> 18:20:59,755
going to cd tilde to make sure i'm in my

26104
18:20:57,279 --> 18:21:01,360
home directory i'm going to do an ls and

26105
18:20:59,755 --> 18:21:03,835
so i can see here that i've already

26106
18:21:01,360 --> 18:21:05,680
cloned my repo so i'm going to cd into

26107
18:21:03,835 --> 18:21:08,080
that directory and i'm going to run the

26108
18:21:05,679 --> 18:21:09,919
command git pull to get the latest files

26109
18:21:08,080 --> 18:21:12,156
fantastic i'm going to now clear my

26110
18:21:09,919 --> 18:21:14,555
screen and i'm going to cd back to my

26111
18:21:12,156 --> 18:21:16,796
home directory and so now i want to copy

26112
18:21:14,555 --> 18:21:19,039
up the files that i want to work with to

26113
18:21:16,796 --> 18:21:21,475
my cloud storage bucket and they are two

26114
18:21:19,039 --> 18:21:24,399
jpegs by the name of pink

26115
18:21:21,475 --> 18:21:26,720
elephant-bowtie as well as plaid bowtie

26116
18:21:24,399 --> 18:21:30,079
and these files can be found in the repo

26117
18:21:26,720 --> 18:21:32,244
marked 12 storage services under zero

26118
18:21:30,080 --> 18:21:34,555
one cloud storage management and i will

26119
18:21:32,244 --> 18:21:36,796
be providing this in the lesson text as

26120
18:21:34,555 --> 18:21:38,796
well as can be found in the instructions

26121
18:21:36,796 --> 18:21:41,516
and so i'm going to simply cd into that

26122
18:21:38,796 --> 18:21:43,756
directory by typing in cd google cloud

26123
18:21:41,516 --> 18:21:46,244
associate cloud engineer 12 storage

26124
18:21:43,755 --> 18:21:47,679
services and 0 1 cloud storage

26125
18:21:46,244 --> 18:21:49,516
management i'm going to list all the

26126
18:21:47,679 --> 18:21:52,319
files in the directory and as you can

26127
18:21:49,516 --> 18:21:54,320
see here pink elephant dash bow tie and

26128
18:21:52,320 --> 18:21:56,400
plaid bow tie are both here and so i'm

26129
18:21:54,320 --> 18:21:58,876
going to quickly clear my screen and so

26130
18:21:56,399 --> 18:22:01,599
now for me to copy these files i'm going

26131
18:21:58,876 --> 18:22:05,040
to use the command gsutil

26132
18:22:01,600 --> 18:22:07,680
cp for copy star.jpg which is all the

26133
18:22:05,039 --> 18:22:10,000
jpegs that are available along with gs

26134
18:22:07,679 --> 18:22:12,475
colon forward slash forward slash and

26135
18:22:10,000 --> 18:22:15,360
the bucket name which is bow tie inc

26136
18:22:12,475 --> 18:22:17,039
dash 2021 i'm going to hit enter and it

26137
18:22:15,360 --> 18:22:19,115
says that it's successfully copied the

26138
18:22:17,039 --> 18:22:21,195
files i'm going to simply go up to the

26139
18:22:19,115 --> 18:22:24,080
top right hand corner and do another

26140
18:22:21,195 --> 18:22:26,399
refresh and success the files have been

26141
18:22:24,080 --> 18:22:29,115
successfully uploaded another perfect

26142
18:22:26,399 --> 18:22:32,155
example of copying files from another

26143
18:22:29,115 --> 18:22:34,319
source to your bucket using the gsutil

26144
18:22:32,156 --> 18:22:36,400
command line tool and so this is the end

26145
18:22:34,320 --> 18:22:38,960
of part one of this demo it was getting

26146
18:22:36,399 --> 18:22:40,795
a bit long so i decided to break it up

26147
18:22:38,960 --> 18:22:43,196
and this would be a great opportunity

26148
18:22:40,796 --> 18:22:45,436
for you to get up and have a stretch get

26149
18:22:43,195 --> 18:22:47,599
yourself a coffee or tea and whenever

26150
18:22:45,436 --> 18:22:50,156
you're ready part two will be starting

26151
18:22:47,600 --> 18:22:52,000
immediately from the end of part one so

26152
18:22:50,156 --> 18:22:53,539
you can complete this video and i will

26153
18:22:52,000 --> 18:22:57,360
see you in part two

26154
18:22:53,539 --> 18:23:00,000
[Music]

26155
18:22:57,360 --> 18:23:02,156
this is part two of the managing cloud

26156
18:23:00,000 --> 18:23:04,320
storage access demo and we'll be

26157
18:23:02,156 --> 18:23:06,876
starting exactly where we left off in

26158
18:23:04,320 --> 18:23:09,040
part 1. so with that being said let's

26159
18:23:06,876 --> 18:23:11,360
dive in and so now that we've uploaded

26160
18:23:09,039 --> 18:23:13,599
all these files we next want to make

26161
18:23:11,360 --> 18:23:16,399
this bucket publicly available now

26162
18:23:13,600 --> 18:23:19,040
please know that leaving a bucket public

26163
18:23:16,399 --> 18:23:21,435
is not common practice and should only

26164
18:23:19,039 --> 18:23:23,679
be used on the rare occasion that you

26165
18:23:21,436 --> 18:23:26,320
are hosting a static website from your

26166
18:23:23,679 --> 18:23:28,959
bucket and should always be kept private

26167
18:23:26,320 --> 18:23:31,600
whenever possible especially in a

26168
18:23:28,960 --> 18:23:33,836
production environment so please note

26169
18:23:31,600 --> 18:23:35,600
that this is only for the purposes of

26170
18:23:33,835 --> 18:23:37,436
this demo and so i'm going to quickly

26171
18:23:35,600 --> 18:23:39,040
show this to you in the console so i'm

26172
18:23:37,436 --> 18:23:40,720
going to shut down the cloud shell for

26173
18:23:39,039 --> 18:23:42,959
just a minute and i'm going to go to the

26174
18:23:40,720 --> 18:23:44,796
top menu and click on permissions and

26175
18:23:42,960 --> 18:23:47,196
under permissions i'm going to click on

26176
18:23:44,796 --> 18:23:48,876
add here you can add new members and

26177
18:23:47,195 --> 18:23:51,516
because you want to make it publicly

26178
18:23:48,876 --> 18:23:53,919
available you want to use the all users

26179
18:23:51,516 --> 18:23:56,639
member so you type in all and you should

26180
18:23:53,919 --> 18:23:58,639
get a pop-up bringing up all users and

26181
18:23:56,639 --> 18:24:00,796
all authenticated users you want to

26182
18:23:58,639 --> 18:24:03,115
click on all users and the role that you

26183
18:24:00,796 --> 18:24:05,116
want to select for this demo is going to

26184
18:24:03,115 --> 18:24:08,475
be storage object viewer so i'm going to

26185
18:24:05,115 --> 18:24:10,555
type in storage object viewer and here

26186
18:24:08,475 --> 18:24:12,243
it should pop up and select that and

26187
18:24:10,555 --> 18:24:14,000
then you can click on save you're going

26188
18:24:12,244 --> 18:24:15,516
to be prompted to make sure that this is

26189
18:24:14,000 --> 18:24:18,080
what you want to do that you want to

26190
18:24:15,516 --> 18:24:20,320
make this bucket public and so yes we do

26191
18:24:18,080 --> 18:24:22,475
so you can simply click on allow public

26192
18:24:20,320 --> 18:24:24,876
access and you will get a banner up here

26193
18:24:22,475 --> 18:24:27,195
at the top saying that this bucket is

26194
18:24:24,876 --> 18:24:29,436
public to internet and is a great fail

26195
18:24:27,195 --> 18:24:31,835
safe to have in case you were to ever

26196
18:24:29,436 --> 18:24:34,244
mistakenly make your bucket public and

26197
18:24:31,835 --> 18:24:37,195
if i head back over to objects you can

26198
18:24:34,244 --> 18:24:39,196
see that public access is available to

26199
18:24:37,195 --> 18:24:41,039
all the files in the bucket and so just

26200
18:24:39,195 --> 18:24:44,080
to verify this i'm going to copy the

26201
18:24:41,039 --> 18:24:46,000
public url for pink elephant dash bowtie

26202
18:24:44,080 --> 18:24:48,720
i'm going to open up a new tab paste in

26203
18:24:46,000 --> 18:24:51,195
the url hit enter and as you can see i

26204
18:24:48,720 --> 18:24:53,195
have public access to this picture and

26205
18:24:51,195 --> 18:24:54,875
close this tab and so now that we've

26206
18:24:53,195 --> 18:24:57,516
done our demo to make the bucket

26207
18:24:54,876 --> 18:25:00,244
publicly accessible we should go ahead

26208
18:24:57,516 --> 18:25:02,796
and remove public access so in order to

26209
18:25:00,244 --> 18:25:05,116
remove public permissions i can simply

26210
18:25:02,796 --> 18:25:07,040
go up to permissions and simply click on

26211
18:25:05,115 --> 18:25:08,795
remove public permissions i'm going to

26212
18:25:07,039 --> 18:25:11,039
get a prompt to make sure this is

26213
18:25:08,796 --> 18:25:13,040
exactly what i want to do and yes it is

26214
18:25:11,039 --> 18:25:15,599
so you can click on remove public

26215
18:25:13,039 --> 18:25:18,155
permissions a very simple and elegant

26216
18:25:15,600 --> 18:25:20,156
solution in order to remove public

26217
18:25:18,156 --> 18:25:22,400
access from your bucket and if you go

26218
18:25:20,156 --> 18:25:24,796
back to objects you'll see that all the

26219
18:25:22,399 --> 18:25:26,555
public access has been removed from all

26220
18:25:24,796 --> 18:25:29,195
the files and so now that you've

26221
18:25:26,555 --> 18:25:31,195
experienced how to add public access to

26222
18:25:29,195 --> 18:25:33,115
a bucket i wanted to get a little bit

26223
18:25:31,195 --> 18:25:36,399
more granular and so we're going to go

26224
18:25:33,115 --> 18:25:39,039
ahead and apply acl permissions for one

26225
18:25:36,399 --> 18:25:41,679
specific object and because i like pink

26226
18:25:39,039 --> 18:25:43,919
elephants let's go ahead and select pink

26227
18:25:41,679 --> 18:25:46,243
elephant dash bow tie and so here i can

26228
18:25:43,919 --> 18:25:48,319
go up to the top menu and click on edit

26229
18:25:46,244 --> 18:25:50,476
permissions and i'll be prompted with a

26230
18:25:48,320 --> 18:25:52,720
new window for permissions that are

26231
18:25:50,475 --> 18:25:54,875
currently available for this object you

26232
18:25:52,720 --> 18:25:57,040
can click on add entry click on the drop

26233
18:25:54,876 --> 18:25:59,360
down and select public from the

26234
18:25:57,039 --> 18:26:02,475
drop-down and it will automatically auto

26235
18:25:59,360 --> 18:26:04,244
populate the name which is all users and

26236
18:26:02,475 --> 18:26:06,155
the access which will be reader i'm

26237
18:26:04,244 --> 18:26:08,556
going to go ahead and click on save and

26238
18:26:06,156 --> 18:26:10,244
a public url will be generated and so

26239
18:26:08,555 --> 18:26:13,360
just to verify this i'm going to click

26240
18:26:10,244 --> 18:26:15,756
on the public url and success i now have

26241
18:26:13,360 --> 18:26:17,755
public access to this picture yet once

26242
18:26:15,755 --> 18:26:19,515
again i'm going to close down this tab

26243
18:26:17,755 --> 18:26:22,079
and so now that you've configured this

26244
18:26:19,516 --> 18:26:24,720
object for public access i want to show

26245
18:26:22,080 --> 18:26:26,244
you how to remove public access using

26246
18:26:24,720 --> 18:26:27,600
the command line this time so you're

26247
18:26:26,244 --> 18:26:29,920
going to go up to the top right hand

26248
18:26:27,600 --> 18:26:31,836
corner and open up cloud shell i'm going

26249
18:26:29,919 --> 18:26:33,755
to quickly clear my screen and i'm going

26250
18:26:31,835 --> 18:26:38,319
to paste in the command here which is

26251
18:26:33,755 --> 18:26:40,720
gsutil acl ch for change minus d which

26252
18:26:38,320 --> 18:26:43,280
is delete the name of the user which is

26253
18:26:40,720 --> 18:26:45,279
all users and if this was a regular user

26254
18:26:43,279 --> 18:26:47,516
you could enter in their email address

26255
18:26:45,279 --> 18:26:50,156
along with gs colon forward slash

26256
18:26:47,516 --> 18:26:53,279
forward slash the bucket name which in

26257
18:26:50,156 --> 18:26:55,680
my case is bow tie ink dash 2021 and the

26258
18:26:53,279 --> 18:26:58,080
name of the file which is pink elephant

26259
18:26:55,679 --> 18:26:59,919
bow tie dot jpeg i'm going to hit enter

26260
18:26:58,080 --> 18:27:02,320
and it says that it's been successfully

26261
18:26:59,919 --> 18:27:04,959
updated and so if i go back up here to

26262
18:27:02,320 --> 18:27:06,876
the console and i back out and go back

26263
18:27:04,960 --> 18:27:09,680
into the file i can see here that the

26264
18:27:06,876 --> 18:27:11,919
public url has been removed okay and now

26265
18:27:09,679 --> 18:27:14,155
there's one last step that we need to do

26266
18:27:11,919 --> 18:27:17,039
before ending this demo and this is to

26267
18:27:14,156 --> 18:27:19,360
create a signed url for the file so in

26268
18:27:17,039 --> 18:27:21,279
order to create a signed url we first

26269
18:27:19,360 --> 18:27:23,039
need to create a private key and so

26270
18:27:21,279 --> 18:27:24,959
we're gonna do this using a service

26271
18:27:23,039 --> 18:27:26,555
account and so i'm gonna head on over to

26272
18:27:24,960 --> 18:27:28,639
iam so i'm going to go up to the

26273
18:27:26,555 --> 18:27:30,720
navigation menu i'm going to go to i am

26274
18:27:28,639 --> 18:27:32,399
an admin and here with the menu on the

26275
18:27:30,720 --> 18:27:34,720
left i'm going to click on service

26276
18:27:32,399 --> 18:27:36,720
accounts here up at the top menu you're

26277
18:27:34,720 --> 18:27:38,960
going to click on create service account

26278
18:27:36,720 --> 18:27:40,399
and under service account name you can

26279
18:27:38,960 --> 18:27:43,116
enter in any name

26280
18:27:40,399 --> 18:27:45,115
but for me i'm going to enter in signed

26281
18:27:43,115 --> 18:27:47,115
url i'm going to leave everything else

26282
18:27:45,115 --> 18:27:48,875
as is i'm going to simply click on

26283
18:27:47,115 --> 18:27:50,155
create i'm going to close down cloud

26284
18:27:48,876 --> 18:27:52,555
shell because i don't really need it

26285
18:27:50,156 --> 18:27:54,476
right now just select a role and i'm

26286
18:27:52,555 --> 18:27:56,399
going to give it the role of storage

26287
18:27:54,475 --> 18:27:58,243
object viewer

26288
18:27:56,399 --> 18:28:00,319
i'm going to click on continue and i'm

26289
18:27:58,244 --> 18:28:02,080
going to leave the rest blank and simply

26290
18:28:00,320 --> 18:28:04,000
click on done and you should see a

26291
18:28:02,080 --> 18:28:06,960
service account with the name of signed

26292
18:28:04,000 --> 18:28:09,115
url and so in order to create a key i'm

26293
18:28:06,960 --> 18:28:11,116
going to simply go over to actions and

26294
18:28:09,115 --> 18:28:13,115
i'm going to click on the three dots and

26295
18:28:11,115 --> 18:28:15,039
i'm going to select create key from the

26296
18:28:13,115 --> 18:28:17,195
drop down menu and here i'm going to be

26297
18:28:15,039 --> 18:28:18,959
prompted with what type of key that i

26298
18:28:17,195 --> 18:28:21,436
want to create and you want to make sure

26299
18:28:18,960 --> 18:28:23,516
that json is selected and simply click

26300
18:28:21,436 --> 18:28:25,756
on create and this is where your key

26301
18:28:23,516 --> 18:28:27,436
will be automatically downloaded to your

26302
18:28:25,755 --> 18:28:29,599
downloads folder i'm going to click on

26303
18:28:27,436 --> 18:28:31,756
close and so once you have your key

26304
18:28:29,600 --> 18:28:34,876
downloaded you're able to start the

26305
18:28:31,755 --> 18:28:36,639
process of generating a signed url and

26306
18:28:34,876 --> 18:28:38,639
so i'm going to go ahead and use cloud

26307
18:28:36,639 --> 18:28:40,796
shell in order to generate this signed

26308
18:28:38,639 --> 18:28:42,720
url so i'm going to go ahead back up to

26309
18:28:40,796 --> 18:28:44,555
the top and open up cloud shell again

26310
18:28:42,720 --> 18:28:46,796
and then you can open up the cloud shell

26311
18:28:44,555 --> 18:28:48,720
editor going to go up to the top menu in

26312
18:28:46,796 --> 18:28:51,436
editor and click on file and you're

26313
18:28:48,720 --> 18:28:53,115
going to select upload files and here's

26314
18:28:51,436 --> 18:28:55,360
where you upload your key from your

26315
18:28:53,115 --> 18:28:57,599
downloads folder and i can see my key

26316
18:28:55,360 --> 18:28:59,360
has been uploaded right here and you can

26317
18:28:57,600 --> 18:29:01,196
rename your key file to something a

26318
18:28:59,360 --> 18:29:02,796
little bit more human readable so i'm

26319
18:29:01,195 --> 18:29:05,516
going to right click i'm going to click

26320
18:29:02,796 --> 18:29:08,555
on rename and you can rename this file

26321
18:29:05,516 --> 18:29:10,876
as privatekey.json hit ok and so once

26322
18:29:08,555 --> 18:29:13,195
you have your key uploaded and renamed

26323
18:29:10,876 --> 18:29:15,116
you can now go back into the terminal to

26324
18:29:13,195 --> 18:29:16,720
generate a signed url i'm going to

26325
18:29:15,115 --> 18:29:18,319
quickly clear the screen i'm going to

26326
18:29:16,720 --> 18:29:21,195
make sure that the private key is in my

26327
18:29:18,320 --> 18:29:23,280
path by typing in ls and as you can see

26328
18:29:21,195 --> 18:29:25,599
here privatekey.json

26329
18:29:23,279 --> 18:29:27,600
is indeed in my path and so before i

26330
18:29:25,600 --> 18:29:29,516
generate this key i'm going to head back

26331
18:29:27,600 --> 18:29:31,600
on over to cloud storage i'm going to

26332
18:29:29,516 --> 18:29:34,080
drill down into my bucket and as you can

26333
18:29:31,600 --> 18:29:36,476
see here pink elephant dash bow tie does

26334
18:29:34,080 --> 18:29:39,279
not have a public url and so when the

26335
18:29:36,475 --> 18:29:41,919
sign url is generated you will get a

26336
18:29:39,279 --> 18:29:44,555
public url that will not be shown here

26337
18:29:41,919 --> 18:29:47,195
in the console and will be private to

26338
18:29:44,555 --> 18:29:49,919
only the user that generated it and the

26339
18:29:47,195 --> 18:29:52,243
users that the url has been distributed

26340
18:29:49,919 --> 18:29:54,720
to okay and once you have everything in

26341
18:29:52,244 --> 18:29:58,960
place you can then go ahead and paste in

26342
18:29:54,720 --> 18:30:01,436
the command gsutil sign url minus d the

26343
18:29:58,960 --> 18:30:03,360
allotted time which is 10 minutes the

26344
18:30:01,436 --> 18:30:06,156
private key which is private key dot

26345
18:30:03,360 --> 18:30:08,639
json along with gs colon forward slash

26346
18:30:06,156 --> 18:30:11,835
forward slash your bucket name which in

26347
18:30:08,639 --> 18:30:14,436
my case is bow tie ink dash 2021 along

26348
18:30:11,835 --> 18:30:16,080
with the file name of

26349
18:30:14,436 --> 18:30:18,796
pinkelephant-bowtie.jpg i'm going to hit

26350
18:30:16,080 --> 18:30:20,639
enter and so i purposely left this error

26351
18:30:18,796 --> 18:30:23,756
here so you can see that when you

26352
18:30:20,639 --> 18:30:26,080
generate a signed url you need pi open

26353
18:30:23,755 --> 18:30:28,795
ssl in order to generate it and so the

26354
18:30:26,080 --> 18:30:31,516
caveat here is that because python 2 is

26355
18:30:28,796 --> 18:30:35,279
being deprecated the command pip install

26356
18:30:31,516 --> 18:30:37,919
pi openssl will not work pi open ssl

26357
18:30:35,279 --> 18:30:39,835
needs to be installed with python3 and

26358
18:30:37,919 --> 18:30:44,000
so to install it you're going to run the

26359
18:30:39,835 --> 18:30:45,835
command pip3 install pi open ssl and hit

26360
18:30:44,000 --> 18:30:48,000
enter and so once it's finished

26361
18:30:45,835 --> 18:30:50,243
installing you can now generate your

26362
18:30:48,000 --> 18:30:52,639
signed url i'm going to quickly clear my

26363
18:30:50,244 --> 18:30:56,244
screen paste in the command again hit

26364
18:30:52,639 --> 18:30:59,796
enter and success you've now generated a

26365
18:30:56,244 --> 18:31:02,400
sign url for the object pink elephant

26366
18:30:59,796 --> 18:31:05,756
bowtie.jpg and because this is a signed

26367
18:31:02,399 --> 18:31:08,555
url you will see under public url there

26368
18:31:05,755 --> 18:31:10,795
is no url there available even though it

26369
18:31:08,555 --> 18:31:12,555
is publicly accessible and so just to

26370
18:31:10,796 --> 18:31:14,555
verify this i'm going to highlight the

26371
18:31:12,555 --> 18:31:16,475
link here i'm going to copy it i'm going

26372
18:31:14,555 --> 18:31:20,156
to open up a new tab i'm going to paste

26373
18:31:16,475 --> 18:31:23,039
in this url hit enter and success this

26374
18:31:20,156 --> 18:31:25,756
sign url is working and anyone who has

26375
18:31:23,039 --> 18:31:28,719
access to it has viewing permissions of

26376
18:31:25,755 --> 18:31:30,795
the file for 10 minutes and so again

26377
18:31:28,720 --> 18:31:33,279
this is a great method for giving

26378
18:31:30,796 --> 18:31:35,116
someone access to an object who doesn't

26379
18:31:33,279 --> 18:31:38,244
have an account and will give them a

26380
18:31:35,115 --> 18:31:40,555
limited time to view or edit this object

26381
18:31:38,244 --> 18:31:42,639
and so i wanted to congratulate you on

26382
18:31:40,555 --> 18:31:45,039
making it through this demo and hope

26383
18:31:42,639 --> 18:31:47,195
that it has been extremely useful in

26384
18:31:45,039 --> 18:31:50,000
excelling your knowledge on managing

26385
18:31:47,195 --> 18:31:52,720
buckets files and access to the buckets

26386
18:31:50,000 --> 18:31:55,360
and files in cloud storage and so just

26387
18:31:52,720 --> 18:31:57,680
as a recap you created a cloud storage

26388
18:31:55,360 --> 18:32:00,475
bucket you then created an instance and

26389
18:31:57,679 --> 18:32:02,959
copied a file from that instance to the

26390
18:32:00,475 --> 18:32:06,155
bucket you then clone your repo to cloud

26391
18:32:02,960 --> 18:32:08,720
shell and copy two jpeg files to your

26392
18:32:06,156 --> 18:32:11,195
cloud storage bucket you then assigned

26393
18:32:08,720 --> 18:32:14,639
and then removed public access to your

26394
18:32:11,195 --> 18:32:17,115
bucket and then applied an acl to a file

26395
18:32:14,639 --> 18:32:19,919
in the bucket making it public as well

26396
18:32:17,115 --> 18:32:21,755
as removing public access right after

26397
18:32:19,919 --> 18:32:25,039
you then created a service account

26398
18:32:21,755 --> 18:32:27,039
private key and generated a signed url

26399
18:32:25,039 --> 18:32:29,919
to an object in that bucket

26400
18:32:27,039 --> 18:32:31,755
congratulations again on a job well done

26401
18:32:29,919 --> 18:32:35,039
and so that's pretty much all i wanted

26402
18:32:31,755 --> 18:32:37,515
to cover in this demo on managing cloud

26403
18:32:35,039 --> 18:32:39,515
storage access so you can now mark this

26404
18:32:37,516 --> 18:32:40,539
as complete and let's move on to the

26405
18:32:39,516 --> 18:32:44,476
next one

26406
18:32:40,539 --> 18:32:46,876
[Music]

26407
18:32:44,475 --> 18:32:49,195
welcome back in this demo we're going to

26408
18:32:46,876 --> 18:32:51,516
be getting into the weeds with object

26409
18:32:49,195 --> 18:32:53,360
versioning and life cycle management

26410
18:32:51,516 --> 18:32:55,116
using both the console and the command

26411
18:32:53,360 --> 18:32:57,436
line we're going to go through how

26412
18:32:55,115 --> 18:33:00,835
versioning works and what happens when

26413
18:32:57,436 --> 18:33:03,195
objects get promoted along with creation

26414
18:33:00,835 --> 18:33:05,436
configuration and editing these life

26415
18:33:03,195 --> 18:33:08,000
cycle policies and so with that being

26416
18:33:05,436 --> 18:33:10,156
said let's dive in so we're going to be

26417
18:33:08,000 --> 18:33:12,720
starting off from where we left off in

26418
18:33:10,156 --> 18:33:15,436
the last demo with all the resources

26419
18:33:12,720 --> 18:33:17,516
intact that we created before and we're

26420
18:33:15,436 --> 18:33:19,360
going to go ahead and dive right into

26421
18:33:17,516 --> 18:33:21,836
versioning and so the first thing that

26422
18:33:19,360 --> 18:33:24,320
you want to do is turn on versioning for

26423
18:33:21,835 --> 18:33:27,360
your current bucket so in my case for

26424
18:33:24,320 --> 18:33:29,280
bow tie ink dash 2021 and we're going to

26425
18:33:27,360 --> 18:33:30,960
do this through the command line so i'm

26426
18:33:29,279 --> 18:33:33,755
going to first go up to the top right

26427
18:33:30,960 --> 18:33:36,000
hand corner and open up cloud shell and

26428
18:33:33,755 --> 18:33:38,155
so you first want to see if versioning

26429
18:33:36,000 --> 18:33:41,600
is turned on for your bucket and you can

26430
18:33:38,156 --> 18:33:44,720
do this by using the command gsutil

26431
18:33:41,600 --> 18:33:46,720
versioning get along with gs colon

26432
18:33:44,720 --> 18:33:49,195
forward slash forward slash with your

26433
18:33:46,720 --> 18:33:51,115
bucket name and hit enter and you may be

26434
18:33:49,195 --> 18:33:53,436
prompted with a message asking you to

26435
18:33:51,115 --> 18:33:55,755
authorize this api call you definitely

26436
18:33:53,436 --> 18:33:57,516
want to authorize and as expected

26437
18:33:55,755 --> 18:34:00,243
versioning is not turned on on this

26438
18:33:57,516 --> 18:34:02,555
bucket hence the return of suspended and

26439
18:34:00,244 --> 18:34:05,436
so in order to turn versioning on we're

26440
18:34:02,555 --> 18:34:07,516
going to use a similar command gsutil

26441
18:34:05,436 --> 18:34:10,475
versioning and instead of get we're

26442
18:34:07,516 --> 18:34:12,796
going to use set on gs colon forward

26443
18:34:10,475 --> 18:34:15,115
slash forward slash and the bucket name

26444
18:34:12,796 --> 18:34:17,040
and hit enter and versioning has been

26445
18:34:15,115 --> 18:34:20,080
enabled and so if i run the command

26446
18:34:17,039 --> 18:34:23,115
gsutil version in get again i'll get a

26447
18:34:20,080 --> 18:34:25,360
response of enabled okay great now that

26448
18:34:23,115 --> 18:34:27,360
we have versioning enabled we can go

26449
18:34:25,360 --> 18:34:29,680
ahead with the next step which is to

26450
18:34:27,360 --> 18:34:31,680
delete one of the files in the bucket

26451
18:34:29,679 --> 18:34:33,195
and so you can go ahead and select plaid

26452
18:34:31,679 --> 18:34:35,195
bowtie.jpg

26453
18:34:33,195 --> 18:34:37,436
and simply click on delete you can

26454
18:34:35,195 --> 18:34:39,755
confirm the deletion and the file has

26455
18:34:37,436 --> 18:34:42,080
been deleted now technically the file

26456
18:34:39,755 --> 18:34:44,875
has not been deleted it is merely been

26457
18:34:42,080 --> 18:34:47,360
converted to a non-current version and

26458
18:34:44,876 --> 18:34:49,436
so in order to check the current and

26459
18:34:47,360 --> 18:34:50,639
non-current versions i'm going to use

26460
18:34:49,436 --> 18:34:52,080
the command

26461
18:34:50,639 --> 18:34:55,279
gsutil

26462
18:34:52,080 --> 18:34:58,320
ls minus a along with the bucket name of

26463
18:34:55,279 --> 18:35:01,516
g s colon forward slash forward slash

26464
18:34:58,320 --> 18:35:02,400
bow tie inc dash 2021 i'm gonna hit

26465
18:35:01,516 --> 18:35:04,960
enter

26466
18:35:02,399 --> 18:35:08,319
and as you can see here plaid bow tie

26467
18:35:04,960 --> 18:35:10,876
still shows up the ls minus a command is

26468
18:35:08,320 --> 18:35:13,196
a linux command to show all files

26469
18:35:10,876 --> 18:35:15,360
including the hidden files and so what's

26470
18:35:13,195 --> 18:35:18,475
different about these files is right

26471
18:35:15,360 --> 18:35:20,796
after the dot text or dot jpg you will

26472
18:35:18,475 --> 18:35:22,959
see a hashtag number and this is the

26473
18:35:20,796 --> 18:35:25,516
generation number and this determines

26474
18:35:22,960 --> 18:35:27,836
the version of each object and so what i

26475
18:35:25,516 --> 18:35:30,476
want to do now is bring back the

26476
18:35:27,835 --> 18:35:32,156
non-current version and make it current

26477
18:35:30,475 --> 18:35:34,720
so i'm going to promote the non-current

26478
18:35:32,156 --> 18:35:36,639
version of plaid bowtie.jpg

26479
18:35:34,720 --> 18:35:38,720
to the current version and so in order

26480
18:35:36,639 --> 18:35:41,919
to do this i'm going to run the command

26481
18:35:38,720 --> 18:35:44,639
gsutil and v for move along with the

26482
18:35:41,919 --> 18:35:48,399
bucket of gs colon forward slash forward

26483
18:35:44,639 --> 18:35:51,279
slash bowtie inc hyphen 2021 and the

26484
18:35:48,399 --> 18:35:53,835
name of the file of plaid bow tie dot

26485
18:35:51,279 --> 18:35:55,115
jpeg along with the generation number

26486
18:35:53,835 --> 18:35:57,360
and i'm going to copy it from the

26487
18:35:55,115 --> 18:35:59,195
currently listed i'm going to paste it

26488
18:35:57,360 --> 18:36:01,195
in and so now we need to put in the

26489
18:35:59,195 --> 18:36:03,360
target which is going to be the same

26490
18:36:01,195 --> 18:36:05,919
without the generation number and paste

26491
18:36:03,360 --> 18:36:08,796
that in then hit enter

26492
18:36:05,919 --> 18:36:10,876
okay operation completed and so if i go

26493
18:36:08,796 --> 18:36:13,279
up to the top right hand corner and

26494
18:36:10,876 --> 18:36:15,516
click on refresh i can see that now

26495
18:36:13,279 --> 18:36:18,080
there is a current version for plaid bow

26496
18:36:15,516 --> 18:36:20,720
tie now just know that using the move

26497
18:36:18,080 --> 18:36:22,796
command actually deletes the non-current

26498
18:36:20,720 --> 18:36:25,516
version and gives the new current

26499
18:36:22,796 --> 18:36:27,360
version a new generation number and so

26500
18:36:25,516 --> 18:36:29,195
in order to verify this i'm going to

26501
18:36:27,360 --> 18:36:33,039
quickly clear my screen and i'm going to

26502
18:36:29,195 --> 18:36:35,919
run the command gsutil ls minus a along

26503
18:36:33,039 --> 18:36:38,243
with the bucket name a bow tie inc dash

26504
18:36:35,919 --> 18:36:40,555
2021

26505
18:36:38,244 --> 18:36:43,040
and the generation number here is

26506
18:36:40,555 --> 18:36:46,000
different than that of the last now if i

26507
18:36:43,039 --> 18:36:48,475
use the cp or copy command it would

26508
18:36:46,000 --> 18:36:51,279
leave the non-current version and create

26509
18:36:48,475 --> 18:36:53,599
a new version on top of that leaving two

26510
18:36:51,279 --> 18:36:55,755
objects with two different generation

26511
18:36:53,600 --> 18:36:58,400
numbers okay so with that step being

26512
18:36:55,755 --> 18:37:00,155
done you now want to log into your linux

26513
18:36:58,399 --> 18:37:03,435
instance and we're going to be doing

26514
18:37:00,156 --> 18:37:05,040
some versioning for file of bowties.text

26515
18:37:03,436 --> 18:37:06,876
so i'm going to go ahead and clear my

26516
18:37:05,039 --> 18:37:10,639
screen again and i'm going to run the

26517
18:37:06,876 --> 18:37:12,320
command gcloud compute ssh bowtie

26518
18:37:10,639 --> 18:37:14,960
instance which is the name of my

26519
18:37:12,320 --> 18:37:18,080
instance along with the zone flag dash

26520
18:37:14,960 --> 18:37:19,920
dash zone of the zone us east 1b i'm

26521
18:37:18,080 --> 18:37:21,360
going to hit enter

26522
18:37:19,919 --> 18:37:23,115
and you should be prompted for the

26523
18:37:21,360 --> 18:37:25,600
passphrase of your key

26524
18:37:23,115 --> 18:37:28,155
and i'm in and so here you want to edit

26525
18:37:25,600 --> 18:37:30,720
file a bowties.txt to a different

26526
18:37:28,156 --> 18:37:33,680
version so you can go ahead and run the

26527
18:37:30,720 --> 18:37:36,244
command sudo nano file a bow ties dot

26528
18:37:33,679 --> 18:37:38,639
text and hit enter and you should have

26529
18:37:36,244 --> 18:37:42,320
learning to tie a bow tie takes time and

26530
18:37:38,639 --> 18:37:45,115
what you want to do is append version 2

26531
18:37:42,320 --> 18:37:47,116
right at the end ctrl o to save enter to

26532
18:37:45,115 --> 18:37:49,835
verify the file name to right and

26533
18:37:47,115 --> 18:37:52,639
control x to exit and so now we want to

26534
18:37:49,835 --> 18:37:55,115
copy file a bow ties dot text to your

26535
18:37:52,639 --> 18:37:57,600
current bucket mine being bow tie ink

26536
18:37:55,115 --> 18:38:00,959
dash 2021 so i'm going to go ahead and

26537
18:37:57,600 --> 18:38:03,836
run the command gsutil cp the name of

26538
18:38:00,960 --> 18:38:06,796
the file which is file of bowties dot

26539
18:38:03,835 --> 18:38:08,156
text and the target which is going to be

26540
18:38:06,796 --> 18:38:10,796
bowtie inc

26541
18:38:08,156 --> 18:38:13,040
2021 and hit enter

26542
18:38:10,796 --> 18:38:15,279
and it's copied the file to the bucket

26543
18:38:13,039 --> 18:38:17,039
and so if i hit refresh in the console

26544
18:38:15,279 --> 18:38:20,080
you can see that there is only one

26545
18:38:17,039 --> 18:38:22,719
version of file of bowties.text and so

26546
18:38:20,080 --> 18:38:24,796
to check on all the versions that i have

26547
18:38:22,720 --> 18:38:26,796
i'm going to go back to my cloud shell

26548
18:38:24,796 --> 18:38:30,320
i'm going to quickly clear my screen and

26549
18:38:26,796 --> 18:38:33,279
i'm going to run the command gsutil ls

26550
18:38:30,320 --> 18:38:36,160
minus a along with the target bucket

26551
18:38:33,279 --> 18:38:38,551
hit enter and as you can see here there

26552
18:38:36,160 --> 18:38:41,360
are now two versions of file of

26553
18:38:38,551 --> 18:38:42,239
bowties.text and if i quickly open this

26554
18:38:41,360 --> 18:38:44,320
up

26555
18:38:42,240 --> 18:38:46,800
i'm gonna click on the url you can see

26556
18:38:44,320 --> 18:38:49,192
here that this is version two and so

26557
18:38:46,800 --> 18:38:52,400
this should be the latest generation of

26558
18:38:49,191 --> 18:38:54,239
file of bowties.txt that you edited over

26559
18:38:52,399 --> 18:38:56,871
in your instance i'm going to close this

26560
18:38:54,240 --> 18:38:58,800
tab now and so what i want to do now is

26561
18:38:56,872 --> 18:39:01,440
i want to promote the non-current

26562
18:38:58,800 --> 18:39:03,919
version to be the current version in

26563
18:39:01,440 --> 18:39:05,512
essence making version 2 the non-current

26564
18:39:03,919 --> 18:39:08,872
version and so i'm going to run the

26565
18:39:05,512 --> 18:39:10,960
command gsutil cp and i'm going to take

26566
18:39:08,872 --> 18:39:13,279
the older generation number and i'm

26567
18:39:10,960 --> 18:39:15,600
going to copy it and paste it here and

26568
18:39:13,279 --> 18:39:17,919
the target is going to be the same

26569
18:39:15,600 --> 18:39:20,240
without the generation number and paste

26570
18:39:17,919 --> 18:39:22,240
it and hit enter okay and the file has

26571
18:39:20,240 --> 18:39:24,480
been copied over so i'm going to do a

26572
18:39:22,240 --> 18:39:27,120
quick refresh in the console i'm going

26573
18:39:24,479 --> 18:39:29,119
to drill down into file a bowties.txt

26574
18:39:27,119 --> 18:39:31,599
and when i click on the url link it

26575
18:39:29,119 --> 18:39:34,799
should come up as version 1. and so this

26576
18:39:31,600 --> 18:39:37,680
is a way to promote non-current versions

26577
18:39:34,800 --> 18:39:40,872
to current versions using the gsutil

26578
18:39:37,679 --> 18:39:42,551
copy command or the gsutil move command

26579
18:39:40,872 --> 18:39:44,479
i'm going to close on this tab now i'm

26580
18:39:42,551 --> 18:39:47,512
going to quickly clear my screen and if

26581
18:39:44,479 --> 18:39:50,319
i run the command gsutil ls minus a

26582
18:39:47,512 --> 18:39:53,119
again you can see that i have even more

26583
18:39:50,320 --> 18:39:55,680
files and so these files and versions of

26584
18:39:53,119 --> 18:39:58,319
files will eventually accumulate and

26585
18:39:55,679 --> 18:40:00,239
continuously take up space along with

26586
18:39:58,320 --> 18:40:02,720
costing you money and so in order to

26587
18:40:00,240 --> 18:40:05,279
mitigate this a good idea would be to

26588
18:40:02,720 --> 18:40:07,759
put life cycle policies into place and

26589
18:40:05,279 --> 18:40:10,240
so you're gonna go ahead now and add a

26590
18:40:07,759 --> 18:40:12,000
life cycle policy to the bucket and this

26591
18:40:10,240 --> 18:40:14,960
will help manage the ever-growing

26592
18:40:12,000 --> 18:40:17,119
accumulation of files as more files are

26593
18:40:14,960 --> 18:40:19,120
being added to the bucket and more

26594
18:40:17,119 --> 18:40:21,512
versions are being produced something

26595
18:40:19,119 --> 18:40:23,360
that is very common that is seen in many

26596
18:40:21,512 --> 18:40:24,872
different environments and so we're

26597
18:40:23,360 --> 18:40:26,639
going to go ahead and get this done in

26598
18:40:24,872 --> 18:40:28,479
the console so i'm going to close down

26599
18:40:26,639 --> 18:40:30,399
cloud shell and i'm going to go back to

26600
18:40:28,479 --> 18:40:33,279
the main page of the bucket and under

26601
18:40:30,399 --> 18:40:35,599
the menu you can click on lifecycle and

26602
18:40:33,279 --> 18:40:37,679
here you'll be able to add the lifecycle

26603
18:40:35,600 --> 18:40:39,760
rules and so here you're going to click

26604
18:40:37,679 --> 18:40:41,919
on add a rule and the first thing that

26605
18:40:39,759 --> 18:40:43,679
you're prompted to do is to select an

26606
18:40:41,919 --> 18:40:46,639
action and so the first rule you're

26607
18:40:43,679 --> 18:40:49,119
going to apply is to delete non-current

26608
18:40:46,639 --> 18:40:51,039
objects after seven days so you're gonna

26609
18:40:49,119 --> 18:40:52,799
click on delete object you're gonna be

26610
18:40:51,039 --> 18:40:54,959
prompted with a warning gonna hit

26611
18:40:52,800 --> 18:40:57,192
continue and you'll be prompted to

26612
18:40:54,960 --> 18:40:59,440
select object conditions and as

26613
18:40:57,191 --> 18:41:01,512
discussed in an earlier lesson there are

26614
18:40:59,440 --> 18:41:04,080
many conditions to choose from and

26615
18:41:01,512 --> 18:41:06,320
multiple conditions can be selected so

26616
18:41:04,080 --> 18:41:08,551
here you're going to select days since

26617
18:41:06,320 --> 18:41:10,800
becoming non-current and in the empty

26618
18:41:08,551 --> 18:41:12,959
field you're going to type in 7. you can

26619
18:41:10,800 --> 18:41:15,919
click on continue and before you click

26620
18:41:12,960 --> 18:41:18,872
on create i wanted just to note that any

26621
18:41:15,919 --> 18:41:20,639
life cycle rule can take up to 24 hours

26622
18:41:18,872 --> 18:41:23,120
to take effect so i'm going to click on

26623
18:41:20,639 --> 18:41:26,160
create and here you can see the rule has

26624
18:41:23,119 --> 18:41:28,319
been applied to delete objects after

26625
18:41:26,160 --> 18:41:30,480
seven days when object becomes

26626
18:41:28,320 --> 18:41:32,800
non-current and so now that we added a

26627
18:41:30,479 --> 18:41:35,759
delete rule we're going to go ahead and

26628
18:41:32,800 --> 18:41:37,832
add another rule to move current files

26629
18:41:35,759 --> 18:41:40,639
that are not being used to a storage

26630
18:41:37,831 --> 18:41:43,279
class that can save the company money

26631
18:41:40,639 --> 18:41:46,000
and so let's go ahead and create another

26632
18:41:43,279 --> 18:41:48,319
lifecycle rule but this time to use this

26633
18:41:46,000 --> 18:41:50,240
set storage class action and so the

26634
18:41:48,320 --> 18:41:52,480
files that accumulate that have been

26635
18:41:50,240 --> 18:41:54,872
there for over 90 days you want to set

26636
18:41:52,479 --> 18:41:56,639
the storage class the cold line so this

26637
18:41:54,872 --> 18:41:58,080
way it'll save you some money and so

26638
18:41:56,639 --> 18:41:59,919
you're going to click on add a rule

26639
18:41:58,080 --> 18:42:02,320
you're going to select set storage class

26640
18:41:59,919 --> 18:42:04,319
to cold line and as a note here it says

26641
18:42:02,320 --> 18:42:06,320
archive objects will not be changed to

26642
18:42:04,320 --> 18:42:08,240
cold line so you can move forward with

26643
18:42:06,320 --> 18:42:10,400
the storage class but you can't move

26644
18:42:08,240 --> 18:42:13,360
backwards in other words i can't move

26645
18:42:10,399 --> 18:42:15,439
from cold line to near line or archive

26646
18:42:13,360 --> 18:42:17,831
the cold line i can only move from near

26647
18:42:15,440 --> 18:42:19,512
line to cold line or cold line to

26648
18:42:17,831 --> 18:42:21,831
archive so i'm going to go ahead and

26649
18:42:19,512 --> 18:42:24,160
click continue for the object conditions

26650
18:42:21,831 --> 18:42:26,871
you want to select age and in the field

26651
18:42:24,160 --> 18:42:29,040
you want to enter 90 days and here you

26652
18:42:26,872 --> 18:42:31,360
want to hit continue and finally click

26653
18:42:29,039 --> 18:42:33,599
on create and so in order to actually

26654
18:42:31,360 --> 18:42:36,800
see these rules take effect like i said

26655
18:42:33,600 --> 18:42:39,279
before it'll take up to 24 hours and so

26656
18:42:36,800 --> 18:42:41,760
before we end this demo i wanted to show

26657
18:42:39,279 --> 18:42:44,872
you another way to edit a life cycle

26658
18:42:41,759 --> 18:42:47,039
policy by editing the json file itself

26659
18:42:44,872 --> 18:42:48,800
so you can head on up to the top right

26660
18:42:47,039 --> 18:42:50,551
and open up cloud shell i'm going to

26661
18:42:48,800 --> 18:42:52,960
bring this down a little bit and you're

26662
18:42:50,551 --> 18:42:55,679
going to run the command gsutil

26663
18:42:52,960 --> 18:42:57,960
lifecycle get along with the bucket name

26664
18:42:55,679 --> 18:43:00,871
and output it to a file called

26665
18:42:57,960 --> 18:43:03,360
lifecycle.json and hit enter

26666
18:43:00,872 --> 18:43:05,512
and no errors so that's a good sign next

26667
18:43:03,360 --> 18:43:08,399
i'm going to run the command ls and as

26668
18:43:05,512 --> 18:43:10,639
you can see here the lifecycle.json file

26669
18:43:08,399 --> 18:43:12,959
has been written and so i'd like to edit

26670
18:43:10,639 --> 18:43:16,800
this file where it changes the set to

26671
18:43:12,960 --> 18:43:19,040
cold line rule from 90 days to 120 days

26672
18:43:16,800 --> 18:43:20,960
as tony bowtie's manager thinks that

26673
18:43:19,039 --> 18:43:23,831
they should keep the files a little bit

26674
18:43:20,960 --> 18:43:25,680
longer before sending it to coldline and

26675
18:43:23,831 --> 18:43:28,551
so in order to edit this file you're

26676
18:43:25,679 --> 18:43:30,799
going to run the command sudo nano

26677
18:43:28,551 --> 18:43:33,512
along with the name of the file of

26678
18:43:30,800 --> 18:43:36,160
lifecycle.js you hit enter and it's

26679
18:43:33,512 --> 18:43:39,119
going to be a long string but if you use

26680
18:43:36,160 --> 18:43:41,360
your arrow keys and move down and then

26681
18:43:39,119 --> 18:43:44,080
back you'll see the set to cold line

26682
18:43:41,360 --> 18:43:45,919
rule with the age of 90 days so i'm

26683
18:43:44,080 --> 18:43:48,080
going to move over here and i'm going to

26684
18:43:45,919 --> 18:43:50,872
edit this to 120 and i'm going to hit

26685
18:43:48,080 --> 18:43:53,680
ctrl o to save enter to verify file name

26686
18:43:50,872 --> 18:43:56,320
to write and ctrl x to exit and just

26687
18:43:53,679 --> 18:43:58,479
know that you can also edit this file in

26688
18:43:56,320 --> 18:44:01,280
cloud shell editor and so in order for

26689
18:43:58,479 --> 18:44:03,440
me to put this lifecycle policy in place

26690
18:44:01,279 --> 18:44:06,000
i need to set this as the new lifecycle

26691
18:44:03,440 --> 18:44:08,479
policy and so in order for me to do that

26692
18:44:06,000 --> 18:44:10,872
i'm going to run the command gsutil

26693
18:44:08,479 --> 18:44:12,831
lifecycle set along with the name of the

26694
18:44:10,872 --> 18:44:14,960
json file which is

26695
18:44:12,831 --> 18:44:17,439
lifecycle.json along with the bucket

26696
18:44:14,960 --> 18:44:18,960
name and hit enter and it looks like it

26697
18:44:17,440 --> 18:44:21,760
said it and i'm going to do quick

26698
18:44:18,960 --> 18:44:24,552
refresh in the console just to verify

26699
18:44:21,759 --> 18:44:28,479
and success the rule has been changed

26700
18:44:24,551 --> 18:44:30,551
from 90 days to 120 days congratulations

26701
18:44:28,479 --> 18:44:32,872
on completing this demo now a lot of

26702
18:44:30,551 --> 18:44:35,512
what you've experienced here is more of

26703
18:44:32,872 --> 18:44:38,240
what you will see in the architect exam

26704
18:44:35,512 --> 18:44:40,551
as the cloud engineer exam focuses on

26705
18:44:38,240 --> 18:44:42,400
more of the high level theory of these

26706
18:44:40,551 --> 18:44:44,399
cloud storage features

26707
18:44:42,399 --> 18:44:47,191
but i wanted to show you some real life

26708
18:44:44,399 --> 18:44:49,599
scenarios and how to apply the theory

26709
18:44:47,191 --> 18:44:52,399
that was shown in previous lessons into

26710
18:44:49,600 --> 18:44:54,000
practice and so just as a recap you set

26711
18:44:52,399 --> 18:44:56,079
versioning on the current bucket that

26712
18:44:54,000 --> 18:44:58,320
you are working in and you deleted a

26713
18:44:56,080 --> 18:45:00,720
file and made it non-current you then

26714
18:44:58,320 --> 18:45:03,360
brought it back to be current again you

26715
18:45:00,720 --> 18:45:05,512
then edited a file on your instance and

26716
18:45:03,360 --> 18:45:08,000
copied it over to replace the current

26717
18:45:05,512 --> 18:45:10,000
version of that file in your bucket you

26718
18:45:08,000 --> 18:45:12,479
then promoted the non-current version as

26719
18:45:10,000 --> 18:45:14,960
the new one and moved into lifecycle

26720
18:45:12,479 --> 18:45:18,080
rules where you created two separate

26721
18:45:14,960 --> 18:45:20,720
rules you created a rule to delete files

26722
18:45:18,080 --> 18:45:22,960
along with the rule to set storage class

26723
18:45:20,720 --> 18:45:25,191
after a certain age of the file and the

26724
18:45:22,960 --> 18:45:27,920
last step you took was to copy the

26725
18:45:25,191 --> 18:45:30,871
lifecycle policy to your cloud shell and

26726
18:45:27,919 --> 18:45:32,959
edited that policy and set it to a newer

26727
18:45:30,872 --> 18:45:36,000
edited version and so that pretty much

26728
18:45:32,960 --> 18:45:38,400
covers this demo on object versioning

26729
18:45:36,000 --> 18:45:40,960
and lifecycle management congratulations

26730
18:45:38,399 --> 18:45:41,919
again on a job well done and so before

26731
18:45:40,960 --> 18:45:44,000
you go

26732
18:45:41,919 --> 18:45:46,399
make sure you delete all the resources

26733
18:45:44,000 --> 18:45:48,399
you've created for the past couple of

26734
18:45:46,399 --> 18:45:51,039
demos as you want to make sure that

26735
18:45:48,399 --> 18:45:53,039
you're not accumulating any unnecessary

26736
18:45:51,039 --> 18:45:55,279
costs and so i'm going to do a quick run

26737
18:45:53,039 --> 18:45:56,959
through on deleting these resources and

26738
18:45:55,279 --> 18:45:58,639
so i'm going to quickly close down cloud

26739
18:45:56,960 --> 18:46:01,512
shell and i'm going to head on over to

26740
18:45:58,639 --> 18:46:03,512
the navigation menu go to compute engine

26741
18:46:01,512 --> 18:46:05,119
i'm going to delete my instance and i'm

26742
18:46:03,512 --> 18:46:07,440
going to head back on over to cloud

26743
18:46:05,119 --> 18:46:09,512
storage and delete the bucket there i'm

26744
18:46:07,440 --> 18:46:11,760
going to confirm the deletion i'm going

26745
18:46:09,512 --> 18:46:14,160
to click on delete and so that covers

26746
18:46:11,759 --> 18:46:16,239
the deletion of all the resources so you

26747
18:46:14,160 --> 18:46:20,040
can now mark this as complete and i'll

26748
18:46:16,240 --> 18:46:20,040
see you in the next one

26749
18:46:21,600 --> 18:46:26,800
welcome back and in this lesson i'm

26750
18:46:24,160 --> 18:46:29,512
going to be covering cloud sql one of

26751
18:46:26,800 --> 18:46:32,639
google cloud's many database offerings

26752
18:46:29,512 --> 18:46:35,512
that offers reliable secure and scalable

26753
18:46:32,639 --> 18:46:37,919
sql databases without having to worry

26754
18:46:35,512 --> 18:46:39,919
about the complexity to set it all up

26755
18:46:37,919 --> 18:46:42,551
now there's quite a bit to cover here so

26756
18:46:39,919 --> 18:46:45,512
with that being said let's dive in now

26757
18:46:42,551 --> 18:46:48,399
cloud sql is a fully managed cloud

26758
18:46:45,512 --> 18:46:52,080
native relational database service that

26759
18:46:48,399 --> 18:46:54,079
offers mysql postgres and sql server

26760
18:46:52,080 --> 18:46:57,440
engines with built-in support for

26761
18:46:54,080 --> 18:46:59,512
replication cloud sql is a database as a

26762
18:46:57,440 --> 18:47:02,240
service offering from google where

26763
18:46:59,512 --> 18:47:04,720
google takes care of all the underlying

26764
18:47:02,240 --> 18:47:06,720
infrastructure for the database along

26765
18:47:04,720 --> 18:47:08,960
with the operating system and the

26766
18:47:06,720 --> 18:47:10,639
database software now because there are

26767
18:47:08,960 --> 18:47:13,192
a few different types of database

26768
18:47:10,639 --> 18:47:16,800
offerings from google cloud sql was

26769
18:47:13,191 --> 18:47:19,679
designed for low latency transactional

26770
18:47:16,800 --> 18:47:21,760
and relational database workloads it's

26771
18:47:19,679 --> 18:47:25,679
also available in three different

26772
18:47:21,759 --> 18:47:28,080
flavors of databases mysql postgres and

26773
18:47:25,679 --> 18:47:30,959
the newest edition is sql server and all

26774
18:47:28,080 --> 18:47:33,191
of them support standard apis for

26775
18:47:30,960 --> 18:47:35,832
connectivity cloud sql offers

26776
18:47:33,191 --> 18:47:38,159
replication using different types of

26777
18:47:35,831 --> 18:47:40,959
read replicas which i will get into a

26778
18:47:38,160 --> 18:47:43,760
little bit later and offers capabilities

26779
18:47:40,960 --> 18:47:46,480
for high availability for continuous

26780
18:47:43,759 --> 18:47:49,439
access to your data cloud sql also

26781
18:47:46,479 --> 18:47:52,000
offers backups in two different flavors

26782
18:47:49,440 --> 18:47:54,400
and allows you to restore your database

26783
18:47:52,000 --> 18:47:57,039
from these backups with the same amount

26784
18:47:54,399 --> 18:47:59,511
of ease now along with your backups

26785
18:47:57,039 --> 18:48:02,000
comes point in time recovery for when

26786
18:47:59,512 --> 18:48:05,279
you want to restore a database from a

26787
18:48:02,000 --> 18:48:07,759
specific point in time cloud sql storage

26788
18:48:05,279 --> 18:48:10,240
relies on connected persistent disks in

26789
18:48:07,759 --> 18:48:14,000
the same zone that are available in

26790
18:48:10,240 --> 18:48:16,872
regular hard disk drives or ssds that

26791
18:48:14,000 --> 18:48:19,279
currently give you up to 30 terabytes of

26792
18:48:16,872 --> 18:48:21,760
storage capacity and because the same

26793
18:48:19,279 --> 18:48:23,360
technologies lie in the background for

26794
18:48:21,759 --> 18:48:26,399
persistent disks

26795
18:48:23,360 --> 18:48:29,360
automatic storage increase is available

26796
18:48:26,399 --> 18:48:32,399
to resize your disks for more storage

26797
18:48:29,360 --> 18:48:34,800
cloud sql also offers encryption at rest

26798
18:48:32,399 --> 18:48:37,039
and in transit for securing data

26799
18:48:34,800 --> 18:48:39,512
entering and leaving your instance and

26800
18:48:37,039 --> 18:48:42,399
when it comes to costs you are billed

26801
18:48:39,512 --> 18:48:45,360
for cpu memory and storage of the

26802
18:48:42,399 --> 18:48:47,360
instance along with egress traffic as

26803
18:48:45,360 --> 18:48:50,000
well please be aware that there is a

26804
18:48:47,360 --> 18:48:52,800
licensing cost when it comes to windows

26805
18:48:50,000 --> 18:48:55,360
instances now cloud sql instances are

26806
18:48:52,800 --> 18:48:58,160
not available in the same instance types

26807
18:48:55,360 --> 18:48:59,831
as compute engine and are only available

26808
18:48:58,160 --> 18:49:03,192
in the shared core

26809
18:48:59,831 --> 18:49:05,439
standard and high memory cpu types and

26810
18:49:03,191 --> 18:49:08,239
when you see them they will be clearly

26811
18:49:05,440 --> 18:49:10,639
marked with a db on the beginning of the

26812
18:49:08,240 --> 18:49:12,552
cpu type you cannot customize these

26813
18:49:10,639 --> 18:49:15,600
instances like you can with compute

26814
18:49:12,551 --> 18:49:17,759
engine and so memory will be pre-defined

26815
18:49:15,600 --> 18:49:20,240
when choosing the instance type now

26816
18:49:17,759 --> 18:49:23,511
storage types for cloud sql are only

26817
18:49:20,240 --> 18:49:25,279
available in hard disk drives and ssds

26818
18:49:23,512 --> 18:49:28,400
you are able to size them according to

26819
18:49:25,279 --> 18:49:31,279
your needs and as stated earlier can be

26820
18:49:28,399 --> 18:49:33,279
sized up to 30 terabytes in size and

26821
18:49:31,279 --> 18:49:35,831
when entering the danger zone of having

26822
18:49:33,279 --> 18:49:38,639
a full disk you do have the option of

26823
18:49:35,831 --> 18:49:40,551
enabling automatic storage increase so

26824
18:49:38,639 --> 18:49:43,679
you never have to worry about filling up

26825
18:49:40,551 --> 18:49:45,679
your disk before that 30 terabyte limit

26826
18:49:43,679 --> 18:49:48,871
now when it comes to connecting to your

26827
18:49:45,679 --> 18:49:52,159
cloud sql instance you can configure it

26828
18:49:48,872 --> 18:49:54,000
with a public or private ip but know

26829
18:49:52,160 --> 18:49:56,872
that after configuring the instance with

26830
18:49:54,000 --> 18:49:59,360
a private ip it cannot be changed

26831
18:49:56,872 --> 18:50:01,680
although connecting with the private ip

26832
18:49:59,360 --> 18:50:04,479
is preferred when connecting from a

26833
18:50:01,679 --> 18:50:08,079
client on a resource with access to a

26834
18:50:04,479 --> 18:50:11,039
vpc as well it is always best practice

26835
18:50:08,080 --> 18:50:13,279
to use private i p addresses for any

26836
18:50:11,039 --> 18:50:15,831
database in your environment whenever

26837
18:50:13,279 --> 18:50:18,160
you can now moving on to authentication

26838
18:50:15,831 --> 18:50:21,039
options the recommended method to

26839
18:50:18,160 --> 18:50:23,919
connecting to your cloud sql instance is

26840
18:50:21,039 --> 18:50:26,479
using cloud sql proxy the cloud sql

26841
18:50:23,919 --> 18:50:29,679
proxy allows you to authorize and secure

26842
18:50:26,479 --> 18:50:32,080
your connections using iam permissions

26843
18:50:29,679 --> 18:50:34,551
unless using the cloud sql proxy

26844
18:50:32,080 --> 18:50:36,960
connections to an instance's public ip

26845
18:50:34,551 --> 18:50:39,039
address are only allowed if the

26846
18:50:36,960 --> 18:50:41,512
connection comes from an authorized

26847
18:50:39,039 --> 18:50:44,079
network authorized networks are ip

26848
18:50:41,512 --> 18:50:46,240
addresses or ranges that the user has

26849
18:50:44,080 --> 18:50:48,720
specified as having permission to

26850
18:50:46,240 --> 18:50:50,639
connect once you are authorized you can

26851
18:50:48,720 --> 18:50:53,919
connect to your instance through

26852
18:50:50,639 --> 18:50:56,872
external clients or applications and

26853
18:50:53,919 --> 18:51:00,720
even other google cloud services like

26854
18:50:56,872 --> 18:51:03,600
compute engine gke app engine cloud

26855
18:51:00,720 --> 18:51:05,831
functions and cloud run now i wanted to

26856
18:51:03,600 --> 18:51:08,320
focus a moment here on the recommended

26857
18:51:05,831 --> 18:51:10,871
method for connecting to your instance

26858
18:51:08,320 --> 18:51:13,760
which is cloud sql proxy now as

26859
18:51:10,872 --> 18:51:15,919
mentioned before the cloud sql proxy

26860
18:51:13,759 --> 18:51:18,720
allows you to authorize and secure your

26861
18:51:15,919 --> 18:51:21,039
connections using iam permissions the

26862
18:51:18,720 --> 18:51:23,919
proxy validates connections using

26863
18:51:21,039 --> 18:51:26,399
credentials for a user or service

26864
18:51:23,919 --> 18:51:30,240
account and wrapping the connection in

26865
18:51:26,399 --> 18:51:33,191
an ssl tls layer that is authorized for

26866
18:51:30,240 --> 18:51:36,080
a cloud sql instance using the cloud sql

26867
18:51:33,191 --> 18:51:38,399
proxy is the recommended method for

26868
18:51:36,080 --> 18:51:41,600
authenticating connections to a cloud

26869
18:51:38,399 --> 18:51:43,599
sql instance as it is the most secure

26870
18:51:41,600 --> 18:51:46,480
the client proxy is an open source

26871
18:51:43,600 --> 18:51:50,400
library distributed as an executable

26872
18:51:46,479 --> 18:51:53,279
binary and is available for linux macos

26873
18:51:50,399 --> 18:51:55,919
and windows the client proxy acts as an

26874
18:51:53,279 --> 18:51:58,551
intermediary server that listens for

26875
18:51:55,919 --> 18:52:01,279
incoming connections wraps them in ssl

26876
18:51:58,551 --> 18:52:04,551
or tls and then passes them to a cloud

26877
18:52:01,279 --> 18:52:07,512
sql instance the cloud sql proxy handles

26878
18:52:04,551 --> 18:52:10,720
authentication with cloud sql providing

26879
18:52:07,512 --> 18:52:13,191
secure access to cloud sql instances

26880
18:52:10,720 --> 18:52:16,160
without the need to manage allowed ip

26881
18:52:13,191 --> 18:52:18,479
addresses or configure ssl connections

26882
18:52:16,160 --> 18:52:20,872
as well this is also the best solution

26883
18:52:18,479 --> 18:52:23,191
for applications that hold ephemeral

26884
18:52:20,872 --> 18:52:24,479
eyepiece and while the proxy can listen

26885
18:52:23,191 --> 18:52:27,119
on any port

26886
18:52:24,479 --> 18:52:31,360
it only creates outgoing connections to

26887
18:52:27,119 --> 18:52:33,919
your cloud sql instance on port 3307 now

26888
18:52:31,360 --> 18:52:36,160
when it comes to database replication

26889
18:52:33,919 --> 18:52:38,959
it's more than just copying your data

26890
18:52:36,160 --> 18:52:41,600
from one database to another the primary

26891
18:52:38,960 --> 18:52:44,320
reason for using replication is to scale

26892
18:52:41,600 --> 18:52:46,720
the use of data in a database without

26893
18:52:44,320 --> 18:52:48,960
degrading performance other reasons

26894
18:52:46,720 --> 18:52:51,512
include migrating data between regions

26895
18:52:48,960 --> 18:52:53,832
and platforms and from an on-premises

26896
18:52:51,512 --> 18:52:56,400
database to cloud sql you could also

26897
18:52:53,831 --> 18:52:58,551
promote a replica if the original

26898
18:52:56,399 --> 18:53:00,720
instance becomes corrupted and i'll be

26899
18:52:58,551 --> 18:53:03,039
getting into promoting replicas a little

26900
18:53:00,720 --> 18:53:05,440
bit later now when it comes to a cloud

26901
18:53:03,039 --> 18:53:08,639
sql instance the instance that is

26902
18:53:05,440 --> 18:53:11,440
replicated is called a primary instance

26903
18:53:08,639 --> 18:53:14,240
and the copies are called read replicas

26904
18:53:11,440 --> 18:53:17,191
the primary instance and read replicas

26905
18:53:14,240 --> 18:53:19,360
all reside in cloud sql read replicas

26906
18:53:17,191 --> 18:53:22,239
are read-only and you cannot write to

26907
18:53:19,360 --> 18:53:24,960
them the read replica processes queries

26908
18:53:22,240 --> 18:53:27,279
read requests and analytics traffics

26909
18:53:24,960 --> 18:53:30,000
thus reducing the load on the primary

26910
18:53:27,279 --> 18:53:33,039
instance read replicas can have more

26911
18:53:30,000 --> 18:53:35,360
cpus in memory than the primary instance

26912
18:53:33,039 --> 18:53:38,159
but they cannot have any less and you

26913
18:53:35,360 --> 18:53:40,720
can have up to 10 read replicas per

26914
18:53:38,160 --> 18:53:43,680
primary instance and you can connect to

26915
18:53:40,720 --> 18:53:46,639
a replica directly using its connection

26916
18:53:43,679 --> 18:53:49,039
name and ip address cloud sql supports

26917
18:53:46,639 --> 18:53:52,479
the following types of replicas

26918
18:53:49,039 --> 18:53:55,679
read replicas cross region read replicas

26919
18:53:52,479 --> 18:53:58,000
external read replicas and cloud sql

26920
18:53:55,679 --> 18:54:00,079
replicas when replicating from an

26921
18:53:58,000 --> 18:54:02,479
external server now when it comes to

26922
18:54:00,080 --> 18:54:05,600
read replicas you would use it to

26923
18:54:02,479 --> 18:54:08,399
offload work from a cloud sql instance

26924
18:54:05,600 --> 18:54:10,872
the read replica is an exact copy of the

26925
18:54:08,399 --> 18:54:13,511
primary instance and data and other

26926
18:54:10,872 --> 18:54:16,479
changes on the primary instance are

26927
18:54:13,512 --> 18:54:19,191
updated in almost real time on the read

26928
18:54:16,479 --> 18:54:21,039
replica a read replica is created in a

26929
18:54:19,191 --> 18:54:23,119
different region from the primary

26930
18:54:21,039 --> 18:54:25,679
instance and you can create a cross

26931
18:54:23,119 --> 18:54:28,399
region read replica the same way as you

26932
18:54:25,679 --> 18:54:30,551
would create an in-region replica this

26933
18:54:28,399 --> 18:54:32,720
improves read performance by making

26934
18:54:30,551 --> 18:54:34,959
replicas available closer to your

26935
18:54:32,720 --> 18:54:37,600
application's region it also provides

26936
18:54:34,960 --> 18:54:39,760
additional disaster recovery capability

26937
18:54:37,600 --> 18:54:42,160
to guard you against a regional failure

26938
18:54:39,759 --> 18:54:45,119
it also lets you migrate data from one

26939
18:54:42,160 --> 18:54:47,680
region to another with minimum downtime

26940
18:54:45,119 --> 18:54:50,799
and lastly when it comes to external

26941
18:54:47,679 --> 18:54:53,439
read replicas these are external mysql

26942
18:54:50,800 --> 18:54:55,440
instances that replicate from a cloud

26943
18:54:53,440 --> 18:54:58,320
sql primary instance

26944
18:54:55,440 --> 18:55:01,191
for example a mysql instance running on

26945
18:54:58,320 --> 18:55:03,192
compute engine is considered an external

26946
18:55:01,191 --> 18:55:05,279
instance and so just as a quick note

26947
18:55:03,191 --> 18:55:08,959
here before you can create a read

26948
18:55:05,279 --> 18:55:10,800
replica of a primary cloud sql instance

26949
18:55:08,960 --> 18:55:13,600
the instance must meet the following

26950
18:55:10,800 --> 18:55:16,639
requirements automated backups must be

26951
18:55:13,600 --> 18:55:19,192
enabled binary logging must be enabled

26952
18:55:16,639 --> 18:55:22,000
which requires point-in-time recovery to

26953
18:55:19,191 --> 18:55:24,871
be enabled and at least one backup must

26954
18:55:22,000 --> 18:55:27,279
have been created after binary logging

26955
18:55:24,872 --> 18:55:29,512
was enabled and so when you have read

26956
18:55:27,279 --> 18:55:31,512
replicas in your environment it gives

26957
18:55:29,512 --> 18:55:33,919
you the flexibility of promoting those

26958
18:55:31,512 --> 18:55:36,639
replicas if needed now promoting

26959
18:55:33,919 --> 18:55:38,959
replicas is a feature that can be used

26960
18:55:36,639 --> 18:55:41,679
for when your primary database becomes

26961
18:55:38,960 --> 18:55:44,552
corrupted or unreachable now you can

26962
18:55:41,679 --> 18:55:46,959
promote an in-region read replica or

26963
18:55:44,551 --> 18:55:49,440
cross-region re-replica depending on

26964
18:55:46,960 --> 18:55:52,080
where you have your read replicas hosted

26965
18:55:49,440 --> 18:55:55,191
so when you promote a read replica the

26966
18:55:52,080 --> 18:55:57,831
instance stops replication and converts

26967
18:55:55,191 --> 18:56:00,319
the instance to a standalone cloud sql

26968
18:55:57,831 --> 18:56:02,871
primary instance with read and write

26969
18:56:00,320 --> 18:56:05,680
capabilities please note that this

26970
18:56:02,872 --> 18:56:08,000
cannot be undone and also note that when

26971
18:56:05,679 --> 18:56:10,079
your new primary instance has started

26972
18:56:08,000 --> 18:56:12,720
your other read replicas are not

26973
18:56:10,080 --> 18:56:15,360
transferred over from the old primary

26974
18:56:12,720 --> 18:56:18,160
instance you will need to reconnect your

26975
18:56:15,360 --> 18:56:20,399
other read replicas to your new primary

26976
18:56:18,160 --> 18:56:23,279
instance and as you can see here

26977
18:56:20,399 --> 18:56:26,239
promoting a replica is done manually and

26978
18:56:23,279 --> 18:56:28,551
intentionally whereas high availability

26979
18:56:26,240 --> 18:56:31,120
has a standby instance that

26980
18:56:28,551 --> 18:56:34,000
automatically becomes the primary in

26981
18:56:31,119 --> 18:56:35,919
case of a failure horizontal outage now

26982
18:56:34,000 --> 18:56:38,639
when it comes to promoting cross-region

26983
18:56:35,919 --> 18:56:40,080
replicas there are two common scenarios

26984
18:56:38,639 --> 18:56:42,551
for promotion

26985
18:56:40,080 --> 18:56:44,872
regional migration which performs a

26986
18:56:42,551 --> 18:56:47,512
planned migration of a database to a

26987
18:56:44,872 --> 18:56:49,360
different region and disaster recovery

26988
18:56:47,512 --> 18:56:52,160
and this is where you would fail over a

26989
18:56:49,360 --> 18:56:54,399
database to another region in the event

26990
18:56:52,160 --> 18:56:57,192
that the primary instances region

26991
18:56:54,399 --> 18:56:58,959
becomes unavailable both use cases

26992
18:56:57,191 --> 18:57:01,191
involve setting up cross-region

26993
18:56:58,960 --> 18:57:03,760
replication and then promoting the

26994
18:57:01,191 --> 18:57:06,000
replica the main difference between them

26995
18:57:03,759 --> 18:57:08,639
is whether the promotion of the replica

26996
18:57:06,000 --> 18:57:11,039
is planned or unplanned now if you're

26997
18:57:08,639 --> 18:57:13,679
promoting your replicas for a regional

26998
18:57:11,039 --> 18:57:16,319
migration you can use a cross region

26999
18:57:13,679 --> 18:57:18,799
replica to migrate your database to

27000
18:57:16,320 --> 18:57:21,120
another region with minimal downtime and

27001
18:57:18,800 --> 18:57:23,120
this is so you can create a replica in

27002
18:57:21,119 --> 18:57:25,512
another region wait until the

27003
18:57:23,119 --> 18:57:27,360
replication catches up promote it and

27004
18:57:25,512 --> 18:57:29,680
then direct your applications to the

27005
18:57:27,360 --> 18:57:31,680
newly promoted instance the steps

27006
18:57:29,679 --> 18:57:34,399
involved in promotion are the same as

27007
18:57:31,679 --> 18:57:36,551
for promoting an in-region replica and

27008
18:57:34,399 --> 18:57:39,360
so when you're promoting replicas for

27009
18:57:36,551 --> 18:57:41,599
disaster recovery cross-region replicas

27010
18:57:39,360 --> 18:57:43,759
can be used as part of this disaster

27011
18:57:41,600 --> 18:57:46,480
recovery procedure you can promote a

27012
18:57:43,759 --> 18:57:48,639
cross-region replica to fail over to

27013
18:57:46,479 --> 18:57:51,512
another region should the primary

27014
18:57:48,639 --> 18:57:54,000
instances region become unavailable for

27015
18:57:51,512 --> 18:57:57,119
an extended period of time so in this

27016
18:57:54,000 --> 18:57:59,679
example the entire u.s east 1 region has

27017
18:57:57,119 --> 18:58:01,831
gone down yet the reed replica in the

27018
18:57:59,679 --> 18:58:03,831
europe region is still up and running

27019
18:58:01,831 --> 18:58:05,919
and although there may be a little bit

27020
18:58:03,831 --> 18:58:08,799
more latency for your customers in north

27021
18:58:05,919 --> 18:58:10,800
america i'm able to promote this read

27022
18:58:08,800 --> 18:58:13,512
replica connect it to the needed

27023
18:58:10,800 --> 18:58:16,320
resources and get back to business now

27024
18:58:13,512 --> 18:58:19,040
moving along to high availability cloud

27025
18:58:16,320 --> 18:58:22,160
sql offers aha capabilities out of the

27026
18:58:19,039 --> 18:58:24,399
box the aha configuration sometimes

27027
18:58:22,160 --> 18:58:27,279
called a cluster provides data

27028
18:58:24,399 --> 18:58:30,319
redundancy so a cloud sql instance

27029
18:58:27,279 --> 18:58:32,959
configured for ha is also called a

27030
18:58:30,320 --> 18:58:35,832
regional instance and is located in a

27031
18:58:32,960 --> 18:58:38,000
primary and secondary zone within the

27032
18:58:35,831 --> 18:58:40,799
configured region within a regional

27033
18:58:38,000 --> 18:58:43,191
instance the configuration is made up of

27034
18:58:40,800 --> 18:58:45,120
a primary instance and a standby

27035
18:58:43,191 --> 18:58:47,360
instance and through synchronous

27036
18:58:45,119 --> 18:58:49,831
replication to each zone's persistent

27037
18:58:47,360 --> 18:58:52,399
disk all rights made to the primary

27038
18:58:49,831 --> 18:58:55,119
instance are also made to the standby

27039
18:58:52,399 --> 18:58:57,831
instance each second the primary

27040
18:58:55,119 --> 18:59:00,000
instance writes to a system database as

27041
18:58:57,831 --> 18:59:01,919
a heartbeat signal if multiple

27042
18:59:00,000 --> 18:59:04,399
heartbeats aren't detected

27043
18:59:01,919 --> 18:59:06,399
failover is initiated and so if an

27044
18:59:04,399 --> 18:59:09,191
ha-configured instance becomes

27045
18:59:06,399 --> 18:59:11,439
unresponsive cloud sql automatically

27046
18:59:09,191 --> 18:59:13,831
switches to serving data from the

27047
18:59:11,440 --> 18:59:16,479
standby instance and this is called a

27048
18:59:13,831 --> 18:59:19,511
failover in this example the primary

27049
18:59:16,479 --> 18:59:22,239
instance or zone fails and failover is

27050
18:59:19,512 --> 18:59:25,191
initiated so if the primary instance is

27051
18:59:22,240 --> 18:59:27,512
unresponsive for approximately 60

27052
18:59:25,191 --> 18:59:30,639
seconds or the zone containing the

27053
18:59:27,512 --> 18:59:33,191
primary instance experiences an outage

27054
18:59:30,639 --> 18:59:36,240
failover will initiate the standby

27055
18:59:33,191 --> 18:59:38,799
instance immediately starts serving data

27056
18:59:36,240 --> 18:59:41,600
upon reconnection through a shared

27057
18:59:38,800 --> 18:59:44,080
static ip address with the primary

27058
18:59:41,600 --> 18:59:46,872
instance and the standby instance now

27059
18:59:44,080 --> 18:59:48,720
serves data from the secondary zone and

27060
18:59:46,872 --> 18:59:51,919
now when the primary instance is

27061
18:59:48,720 --> 18:59:53,831
available again a fail back will happen

27062
18:59:51,919 --> 18:59:56,959
and this is when traffic will be

27063
18:59:53,831 --> 18:59:59,439
redirected back to the primary instance

27064
18:59:56,960 --> 19:00:02,160
and the standby instance will go back

27065
18:59:59,440 --> 19:00:04,960
into standby mode as well the regional

27066
19:00:02,160 --> 19:00:07,760
persistent disk will pick up replication

27067
19:00:04,960 --> 19:00:10,240
to the persistent disk in that same zone

27068
19:00:07,759 --> 19:00:13,119
and with regards to billing an ha

27069
19:00:10,240 --> 19:00:15,680
configured instance is charged at double

27070
19:00:13,119 --> 19:00:18,639
the price of a standalone instance

27071
19:00:15,679 --> 19:00:21,039
and this includes cpu ram and storage

27072
19:00:18,639 --> 19:00:23,512
also note that the standby instance

27073
19:00:21,039 --> 19:00:26,000
cannot be used for read queries and this

27074
19:00:23,512 --> 19:00:28,551
is where it differs from read replicas

27075
19:00:26,000 --> 19:00:31,119
as well a very important note here is

27076
19:00:28,551 --> 19:00:33,831
that automatic backups and point in time

27077
19:00:31,119 --> 19:00:36,239
recovery must be enabled for high

27078
19:00:33,831 --> 19:00:38,871
availability and so the last topic that

27079
19:00:36,240 --> 19:00:41,192
i wanted to touch on is backups

27080
19:00:38,872 --> 19:00:43,680
and backups help you restore lost data

27081
19:00:41,191 --> 19:00:45,919
to your cloud sql instance you can also

27082
19:00:43,679 --> 19:00:48,079
restore an instance that is having

27083
19:00:45,919 --> 19:00:50,720
problems from a backup you enable

27084
19:00:48,080 --> 19:00:53,680
backups for any instance that contains

27085
19:00:50,720 --> 19:00:56,479
necessary data backups protect your data

27086
19:00:53,679 --> 19:00:59,279
from loss or damage enabling automated

27087
19:00:56,479 --> 19:01:02,239
backups along with binary logging is

27088
19:00:59,279 --> 19:01:05,600
also required for some operations such

27089
19:01:02,240 --> 19:01:08,160
as clone and replica creation by default

27090
19:01:05,600 --> 19:01:10,960
cloud sql stores backup data in two

27091
19:01:08,160 --> 19:01:13,040
regions for redundancy one region can be

27092
19:01:10,960 --> 19:01:15,280
the same region that the instance is in

27093
19:01:13,039 --> 19:01:17,759
and the other is a different region if

27094
19:01:15,279 --> 19:01:20,000
there are two regions in a continent the

27095
19:01:17,759 --> 19:01:22,959
backup data remains on the same

27096
19:01:20,000 --> 19:01:25,600
continent cloud sql also lets you select

27097
19:01:22,960 --> 19:01:27,920
a custom location for your backup data

27098
19:01:25,600 --> 19:01:30,639
and this is great if you need to comply

27099
19:01:27,919 --> 19:01:33,599
with data residency regulations for your

27100
19:01:30,639 --> 19:01:36,720
business now cloud sql performs two

27101
19:01:33,600 --> 19:01:39,120
types of backups on-demand backups and

27102
19:01:36,720 --> 19:01:41,919
automated backups now with on-demand

27103
19:01:39,119 --> 19:01:44,399
backups you can create a backup at any

27104
19:01:41,919 --> 19:01:46,551
time and this is useful for when you're

27105
19:01:44,399 --> 19:01:49,759
making risky changes that may go

27106
19:01:46,551 --> 19:01:52,399
sideways you can always create on-demand

27107
19:01:49,759 --> 19:01:54,959
backups for any instance whether the

27108
19:01:52,399 --> 19:01:57,919
instance has automatic backups enabled

27109
19:01:54,960 --> 19:02:00,480
or not and these backups persist until

27110
19:01:57,919 --> 19:02:02,240
you delete them or until their instance

27111
19:02:00,479 --> 19:02:05,119
is deleted now when it comes to

27112
19:02:02,240 --> 19:02:07,680
automated backups these use a four hour

27113
19:02:05,119 --> 19:02:10,159
backup window these backups start during

27114
19:02:07,679 --> 19:02:12,399
the backup window and just as a note

27115
19:02:10,160 --> 19:02:14,639
when possible you should schedule your

27116
19:02:12,399 --> 19:02:17,191
backups when your instance has the least

27117
19:02:14,639 --> 19:02:20,080
activity automated backups occur every

27118
19:02:17,191 --> 19:02:23,279
day when your instance is running at any

27119
19:02:20,080 --> 19:02:26,320
time in the 36 hour window and by

27120
19:02:23,279 --> 19:02:28,551
default up to seven most recent backups

27121
19:02:26,320 --> 19:02:31,680
are retained you can also configure how

27122
19:02:28,551 --> 19:02:32,360
many automated backups to retain from 1

27123
19:02:31,679 --> 19:02:35,279
to

27124
19:02:32,360 --> 19:02:37,360
365. now i've touched on this topic many

27125
19:02:35,279 --> 19:02:39,600
times in this lesson and i wanted to

27126
19:02:37,360 --> 19:02:41,600
highlight it for just a second and this

27127
19:02:39,600 --> 19:02:43,832
is point-in-time recovery so

27128
19:02:41,600 --> 19:02:47,040
point-in-time recovery helps you recover

27129
19:02:43,831 --> 19:02:49,919
an instance to a specific point in time

27130
19:02:47,039 --> 19:02:52,871
for example if an error causes a loss of

27131
19:02:49,919 --> 19:02:55,512
data you can recover a database to its

27132
19:02:52,872 --> 19:02:57,919
state before the error happened a point

27133
19:02:55,512 --> 19:03:00,320
in time recovery always creates a new

27134
19:02:57,919 --> 19:03:03,360
instance and you cannot perform a point

27135
19:03:00,320 --> 19:03:06,000
in time recovery to an existing instance

27136
19:03:03,360 --> 19:03:08,872
and point in time recovery is enabled by

27137
19:03:06,000 --> 19:03:11,440
default when you create a new cloud sql

27138
19:03:08,872 --> 19:03:14,720
instance and so when it comes to billing

27139
19:03:11,440 --> 19:03:18,000
by default cloud sql retains seven days

27140
19:03:14,720 --> 19:03:20,720
of automated backups plus all on-demand

27141
19:03:18,000 --> 19:03:22,872
backups for an instance and so i know

27142
19:03:20,720 --> 19:03:25,360
there is a lot to retain in this lesson

27143
19:03:22,872 --> 19:03:27,040
on cloud sql but be sure that these

27144
19:03:25,360 --> 19:03:29,831
concepts and knowing the difference

27145
19:03:27,039 --> 19:03:33,439
between them as well as when to use each

27146
19:03:29,831 --> 19:03:35,191
feature will be a sure help in the exam

27147
19:03:33,440 --> 19:03:38,400
along with giving you the knowledge you

27148
19:03:35,191 --> 19:03:40,720
need to use cloud sql in your role as a

27149
19:03:38,399 --> 19:03:42,959
cloud engineer and so that's pretty much

27150
19:03:40,720 --> 19:03:45,119
all i had to cover when it comes to

27151
19:03:42,960 --> 19:03:47,600
cloud sql so you can now mark this

27152
19:03:45,119 --> 19:03:51,000
lesson as complete and let's move on to

27153
19:03:47,600 --> 19:03:51,000
the next one

27154
19:03:52,639 --> 19:03:57,831
welcome back and in this lesson i wanted

27155
19:03:55,512 --> 19:04:01,119
to touch on google cloud's global

27156
19:03:57,831 --> 19:04:03,360
relational database called cloud spanner

27157
19:04:01,119 --> 19:04:06,319
now cloud spanner is the same in some

27158
19:04:03,360 --> 19:04:09,279
ways as cloud sql when it comes to asset

27159
19:04:06,320 --> 19:04:12,240
transactions sql querying and strong

27160
19:04:09,279 --> 19:04:14,720
consistency but differs in the way that

27161
19:04:12,240 --> 19:04:17,360
data is handled under the hood than

27162
19:04:14,720 --> 19:04:19,680
cloud sql and so knowing this database

27163
19:04:17,360 --> 19:04:22,000
only at a high level is needed for the

27164
19:04:19,679 --> 19:04:24,079
exam but i'll be going into a bit more

27165
19:04:22,000 --> 19:04:26,872
detail just to give you a better

27166
19:04:24,080 --> 19:04:29,680
understanding on how it works so with

27167
19:04:26,872 --> 19:04:32,320
that being said let's dive in now cloud

27168
19:04:29,679 --> 19:04:35,039
spanner is a fully managed relational

27169
19:04:32,320 --> 19:04:37,832
database service that is both strongly

27170
19:04:35,039 --> 19:04:39,759
consistent and horizontally scalable

27171
19:04:37,831 --> 19:04:42,319
cloud spanner is another database as a

27172
19:04:39,759 --> 19:04:44,799
service offering from google and so it

27173
19:04:42,320 --> 19:04:47,440
strips away all the headaches of setting

27174
19:04:44,800 --> 19:04:50,080
up and maintaining the infrastructure

27175
19:04:47,440 --> 19:04:52,080
and software needed to run your database

27176
19:04:50,080 --> 19:04:55,040
in the cloud now being strongly

27177
19:04:52,080 --> 19:04:58,080
consistent in this context is when data

27178
19:04:55,039 --> 19:05:00,639
will get passed on to all the replicas

27179
19:04:58,080 --> 19:05:02,960
as soon as a write request comes to one

27180
19:05:00,639 --> 19:05:06,479
of the replicas of the database cloud

27181
19:05:02,960 --> 19:05:09,280
spanner uses truetime a highly available

27182
19:05:06,479 --> 19:05:11,919
distributed atomic clock system that is

27183
19:05:09,279 --> 19:05:15,191
provided to applications on all google

27184
19:05:11,919 --> 19:05:17,599
servers it applies a time stamp to every

27185
19:05:15,191 --> 19:05:20,159
transaction on commit and so

27186
19:05:17,600 --> 19:05:22,800
transactions in other regions are always

27187
19:05:20,160 --> 19:05:25,440
executed sequentially cloud spanner can

27188
19:05:22,800 --> 19:05:28,479
distribute and manage data at a global

27189
19:05:25,440 --> 19:05:30,960
scale and support globally consistent

27190
19:05:28,479 --> 19:05:33,599
reads along with strongly consistent

27191
19:05:30,960 --> 19:05:36,160
distributed transactions now being fully

27192
19:05:33,600 --> 19:05:38,080
managed cloud spanner handles any

27193
19:05:36,160 --> 19:05:41,040
replicas that are needed for

27194
19:05:38,080 --> 19:05:43,512
availability of your data and optimizes

27195
19:05:41,039 --> 19:05:46,551
performance by automatically sharding

27196
19:05:43,512 --> 19:05:48,960
the data based on request load and size

27197
19:05:46,551 --> 19:05:51,119
of the data part of why cloud spanner's

27198
19:05:48,960 --> 19:05:54,160
high availability is due to its

27199
19:05:51,119 --> 19:05:57,039
automatic synchronous data replication

27200
19:05:54,160 --> 19:05:59,832
between all replicas in independent

27201
19:05:57,039 --> 19:06:02,871
zones cloud spanner scales horizontally

27202
19:05:59,831 --> 19:06:05,439
automatically within regions but it can

27203
19:06:02,872 --> 19:06:07,360
also scale across regions for workloads

27204
19:06:05,440 --> 19:06:10,160
that have higher availability

27205
19:06:07,360 --> 19:06:13,680
requirements making data available

27206
19:06:10,160 --> 19:06:16,720
faster to users at a global scale along

27207
19:06:13,679 --> 19:06:19,439
with node redundancy quietly added for

27208
19:06:16,720 --> 19:06:21,600
every node deployed in the instance and

27209
19:06:19,440 --> 19:06:24,240
when you quickly add up all these

27210
19:06:21,600 --> 19:06:26,000
features of cloud spanner it's no wonder

27211
19:06:24,240 --> 19:06:28,960
that it's available to achieve five

27212
19:06:26,000 --> 19:06:32,080
nines availability on a multi-regional

27213
19:06:28,960 --> 19:06:34,320
instance and four nines availability on

27214
19:06:32,080 --> 19:06:37,191
a regional instance cloud spanner is

27215
19:06:34,320 --> 19:06:40,320
highly secure and offers data layer

27216
19:06:37,191 --> 19:06:42,551
encryption audit logging and iam

27217
19:06:40,320 --> 19:06:45,760
integration cloud spanner was designed

27218
19:06:42,551 --> 19:06:47,831
to fit the needs of specific industries

27219
19:06:45,759 --> 19:06:51,039
such as financial services

27220
19:06:47,831 --> 19:06:53,360
ad tech retail and global supply chain

27221
19:06:51,039 --> 19:06:56,159
along with gaming and pricing for cloud

27222
19:06:53,360 --> 19:06:58,960
spanner comes in at 90 cents per node

27223
19:06:56,160 --> 19:07:02,080
per hour with the cost of storage coming

27224
19:06:58,960 --> 19:07:04,240
in at 30 cents per gigabyte per month

27225
19:07:02,080 --> 19:07:07,119
definitely not cheap but the features

27226
19:07:04,240 --> 19:07:09,120
are plentiful now this isn't in the exam

27227
19:07:07,119 --> 19:07:11,599
but i did want to take a moment to dive

27228
19:07:09,119 --> 19:07:14,959
into the architecture for a bit more

27229
19:07:11,600 --> 19:07:17,440
context as to why this database is of a

27230
19:07:14,960 --> 19:07:20,480
different breed than the typical sql

27231
19:07:17,440 --> 19:07:22,960
database now to use cloud spanner you

27232
19:07:20,479 --> 19:07:25,831
must first create a cloud spanner

27233
19:07:22,960 --> 19:07:28,160
instance this instance is an allocation

27234
19:07:25,831 --> 19:07:30,799
of resources that is used by cloud

27235
19:07:28,160 --> 19:07:33,760
spanner databases created in that

27236
19:07:30,800 --> 19:07:35,760
instance instance creation includes two

27237
19:07:33,759 --> 19:07:38,479
important choices the instance

27238
19:07:35,759 --> 19:07:40,959
configuration and the node count and

27239
19:07:38,479 --> 19:07:43,440
these choices determine the location and

27240
19:07:40,960 --> 19:07:46,160
the amount of the instances cpu and

27241
19:07:43,440 --> 19:07:48,639
memory along with its storage resources

27242
19:07:46,160 --> 19:07:51,192
your configuration choice is permanent

27243
19:07:48,639 --> 19:07:53,512
for an instance and only the node count

27244
19:07:51,191 --> 19:07:56,000
can be changed later if needed an

27245
19:07:53,512 --> 19:07:58,639
instance configuration defines the

27246
19:07:56,000 --> 19:08:01,191
geographic placement and replication of

27247
19:07:58,639 --> 19:08:04,479
the database in that instance either

27248
19:08:01,191 --> 19:08:06,239
regional or multi-region and please note

27249
19:08:04,479 --> 19:08:09,039
that when you choose a multi-zone

27250
19:08:06,240 --> 19:08:12,160
configuration it allows you to replicate

27251
19:08:09,039 --> 19:08:14,871
the databases data not just in multiple

27252
19:08:12,160 --> 19:08:17,040
zones but in multiple zones across

27253
19:08:14,872 --> 19:08:19,440
multiple regions and when it comes to

27254
19:08:17,039 --> 19:08:21,511
the node count this determines the

27255
19:08:19,440 --> 19:08:23,680
number of nodes to allocate to that

27256
19:08:21,512 --> 19:08:26,639
instance these nodes allocate the amount

27257
19:08:23,679 --> 19:08:28,959
of cpu memory and storage needed for

27258
19:08:26,639 --> 19:08:31,600
your instance to either increase

27259
19:08:28,960 --> 19:08:33,600
throughput or storage capacity there is

27260
19:08:31,600 --> 19:08:36,000
no instance types to choose from like

27261
19:08:33,600 --> 19:08:38,720
cloud sql and so when you need more

27262
19:08:36,000 --> 19:08:41,279
power you simply add another node now

27263
19:08:38,720 --> 19:08:44,080
for any regional configuration cloud

27264
19:08:41,279 --> 19:08:46,479
spanner maintains exactly three read

27265
19:08:44,080 --> 19:08:48,639
write replicas each within a different

27266
19:08:46,479 --> 19:08:51,512
zone in that region each read write

27267
19:08:48,639 --> 19:08:54,160
replica contains a full copy of your

27268
19:08:51,512 --> 19:08:57,191
operational database that is able to

27269
19:08:54,160 --> 19:08:59,512
serve rewrite and read only requests

27270
19:08:57,191 --> 19:09:02,399
cloud spanner uses replicas in different

27271
19:08:59,512 --> 19:09:05,360
zones so that if a single zone failure

27272
19:09:02,399 --> 19:09:08,000
occurs your database remains available

27273
19:09:05,360 --> 19:09:10,479
in a multi-region instance configuration

27274
19:09:08,000 --> 19:09:12,960
the instance is allotted a combination

27275
19:09:10,479 --> 19:09:16,000
of four read write and read only

27276
19:09:12,960 --> 19:09:18,240
replicas and just as a note a three node

27277
19:09:16,000 --> 19:09:21,440
configuration minimum is what is

27278
19:09:18,240 --> 19:09:23,600
recommended for production by google and

27279
19:09:21,440 --> 19:09:24,551
as cloud spanner gets populated with

27280
19:09:23,600 --> 19:09:26,872
data

27281
19:09:24,551 --> 19:09:29,039
sharding happens which is also known as

27282
19:09:26,872 --> 19:09:31,760
a split and cloud spanner creates

27283
19:09:29,039 --> 19:09:34,399
replicas of each database split to

27284
19:09:31,759 --> 19:09:36,720
improve performance and availability all

27285
19:09:34,399 --> 19:09:39,191
of the data in a split is physically

27286
19:09:36,720 --> 19:09:41,759
stored together in a replica and cloud

27287
19:09:39,191 --> 19:09:44,479
spanner serves each replica out of an

27288
19:09:41,759 --> 19:09:45,759
independent failure zone and within each

27289
19:09:44,479 --> 19:09:48,319
replica set

27290
19:09:45,759 --> 19:09:50,871
one replica is elected to act as the

27291
19:09:48,320 --> 19:09:54,160
leader leader replicas are responsible

27292
19:09:50,872 --> 19:09:56,872
for handling rights while any read write

27293
19:09:54,160 --> 19:09:58,960
or read only replica can serve a read

27294
19:09:56,872 --> 19:10:01,919
request without communicating with the

27295
19:09:58,960 --> 19:10:04,639
leader and so this is the inner workings

27296
19:10:01,919 --> 19:10:06,720
of cloud spanner at a high level and not

27297
19:10:04,639 --> 19:10:09,440
meant to confuse you but to give you a

27298
19:10:06,720 --> 19:10:12,160
better context of how cloud spanner

27299
19:10:09,440 --> 19:10:14,479
although it is a relational sql database

27300
19:10:12,160 --> 19:10:16,960
is so different than its cloud sql

27301
19:10:14,479 --> 19:10:18,872
cousin now before ending this lesson i

27302
19:10:16,960 --> 19:10:21,192
wanted to touch on node performance for

27303
19:10:18,872 --> 19:10:24,479
a quick moment and so each cloud spanner

27304
19:10:21,191 --> 19:10:29,759
node can provide up to 10 000 queries

27305
19:10:24,479 --> 19:10:32,959
per second or qps of reads or 2000 qps

27306
19:10:29,759 --> 19:10:35,360
of writes each node provides up to two

27307
19:10:32,960 --> 19:10:37,360
terabytes of storage and so if you need

27308
19:10:35,360 --> 19:10:40,080
to scale up the serving and storage

27309
19:10:37,360 --> 19:10:42,160
resources in your instance you add more

27310
19:10:40,080 --> 19:10:44,400
nodes to that instance

27311
19:10:42,160 --> 19:10:46,400
and remember as noted earlier that

27312
19:10:44,399 --> 19:10:49,119
adding a node does not increase the

27313
19:10:46,399 --> 19:10:52,000
number of replicas but rather increases

27314
19:10:49,119 --> 19:10:55,191
the resources each replica has in the

27315
19:10:52,000 --> 19:10:58,320
instance adding nodes gives each replica

27316
19:10:55,191 --> 19:11:00,399
more cpu and ram which increases the

27317
19:10:58,320 --> 19:11:02,720
replicas throughput and so if you're

27318
19:11:00,399 --> 19:11:05,279
looking to scale up automatically you

27319
19:11:02,720 --> 19:11:07,919
can scale the numbers of nodes in your

27320
19:11:05,279 --> 19:11:11,512
instance based on the cloud monitoring

27321
19:11:07,919 --> 19:11:13,279
metrics on cpu or storage utilization

27322
19:11:11,512 --> 19:11:15,512
in conjunction with using cloud

27323
19:11:13,279 --> 19:11:18,160
functions to trigger and so when you are

27324
19:11:15,512 --> 19:11:20,639
deciding on a relational database that

27325
19:11:18,160 --> 19:11:23,192
provides global distribution and

27326
19:11:20,639 --> 19:11:25,831
horizontally scalable that handles

27327
19:11:23,191 --> 19:11:28,399
transactional workloads in google cloud

27328
19:11:25,831 --> 19:11:31,039
cloud spanner will always be the obvious

27329
19:11:28,399 --> 19:11:33,191
choice over cloud sql and so that's

27330
19:11:31,039 --> 19:11:35,679
pretty much all i have to cover when it

27331
19:11:33,191 --> 19:11:37,191
comes to this overview on cloud spanner

27332
19:11:35,679 --> 19:11:39,359
so you can now mark this lesson as

27333
19:11:37,191 --> 19:11:39,979
complete and let's move on to the next

27334
19:11:39,360 --> 19:11:43,919
one

27335
19:11:39,979 --> 19:11:46,399
[Music]

27336
19:11:43,919 --> 19:11:48,800
welcome back and in this lesson we will

27337
19:11:46,399 --> 19:11:52,159
be going over the available nosql

27338
19:11:48,800 --> 19:11:54,639
databases available in google cloud this

27339
19:11:52,160 --> 19:11:56,872
lesson is meant to be another overview

27340
19:11:54,639 --> 19:11:59,440
just to familiarize you with the nosql

27341
19:11:56,872 --> 19:12:02,240
database options as they show up in the

27342
19:11:59,440 --> 19:12:04,872
exam this lesson is not meant to go in

27343
19:12:02,240 --> 19:12:06,872
depth on databases but an overview and

27344
19:12:04,872 --> 19:12:09,512
will give you a good understanding on

27345
19:12:06,872 --> 19:12:11,760
what features are available for each

27346
19:12:09,512 --> 19:12:15,119
and their use cases so with that being

27347
19:12:11,759 --> 19:12:18,000
said let's dive in now there are four

27348
19:12:15,119 --> 19:12:20,551
managed nosql databases available in

27349
19:12:18,000 --> 19:12:22,800
google cloud and i will be briefly going

27350
19:12:20,551 --> 19:12:24,800
over them and i'll be starting this off

27351
19:12:22,800 --> 19:12:27,680
by discussing bigtable

27352
19:12:24,800 --> 19:12:31,192
now cloud bigtable is a fully managed

27353
19:12:27,679 --> 19:12:34,000
wide column nosql database designed for

27354
19:12:31,191 --> 19:12:36,399
terabyte and petabyte scale workloads

27355
19:12:34,000 --> 19:12:38,960
that offers low latency and high

27356
19:12:36,399 --> 19:12:41,919
throughput bigtable is built for

27357
19:12:38,960 --> 19:12:44,160
real-time application serving workloads

27358
19:12:41,919 --> 19:12:47,119
as well as large-scale analytical

27359
19:12:44,160 --> 19:12:50,400
workloads cloud bigtable is a regional

27360
19:12:47,119 --> 19:12:53,191
service and if using replication a copy

27361
19:12:50,399 --> 19:12:55,759
is stored in a different zone or region

27362
19:12:53,191 --> 19:12:58,551
for durability cloud bigtable is

27363
19:12:55,759 --> 19:13:01,511
designed for storing very large amounts

27364
19:12:58,551 --> 19:13:04,399
of single keyed data while still being

27365
19:13:01,512 --> 19:13:06,960
able to provide very low latency and

27366
19:13:04,399 --> 19:13:09,831
because throughput scales linearly you

27367
19:13:06,960 --> 19:13:12,240
can increase the queries per second by

27368
19:13:09,831 --> 19:13:14,479
adding more bigtable nodes when you need

27369
19:13:12,240 --> 19:13:16,800
them bigtable throughput can be

27370
19:13:14,479 --> 19:13:18,639
dynamically adjusted by adding or

27371
19:13:16,800 --> 19:13:21,360
removing cluster nodes without

27372
19:13:18,639 --> 19:13:24,000
restarting meaning you can increase the

27373
19:13:21,360 --> 19:13:26,479
size of a bigtable cluster for just a

27374
19:13:24,000 --> 19:13:28,960
few hours to handle a large load and

27375
19:13:26,479 --> 19:13:31,440
then reduce the cluster size again and

27376
19:13:28,960 --> 19:13:33,040
do it all without any downtime bigtable

27377
19:13:31,440 --> 19:13:36,240
is an ideal source

27378
19:13:33,039 --> 19:13:38,871
for map reduce operations and integrates

27379
19:13:36,240 --> 19:13:42,000
easily with all the existing big data

27380
19:13:38,872 --> 19:13:45,279
tools such as hadoop dataproc and

27381
19:13:42,000 --> 19:13:47,440
dataflow along with apache hbase and

27382
19:13:45,279 --> 19:13:50,160
when it comes to price bigtable is

27383
19:13:47,440 --> 19:13:53,760
definitely no joke pricing for bigtable

27384
19:13:50,160 --> 19:13:57,192
starts at 65 cents per hour per node

27385
19:13:53,759 --> 19:13:59,679
or over 450 dollars a month for a one

27386
19:13:57,191 --> 19:14:02,639
node configuration with no data now you

27387
19:13:59,679 --> 19:14:04,959
can use bigtable to store and query all

27388
19:14:02,639 --> 19:14:07,360
of the following types of data such as

27389
19:14:04,960 --> 19:14:10,080
cpu and memory usage over time for

27390
19:14:07,360 --> 19:14:11,831
multiple servers marketing data such as

27391
19:14:10,080 --> 19:14:14,551
purchase histories and customer

27392
19:14:11,831 --> 19:14:17,279
preferences financial data such as

27393
19:14:14,551 --> 19:14:20,319
transaction histories stock prices and

27394
19:14:17,279 --> 19:14:23,039
currency exchange rates iot data or

27395
19:14:20,320 --> 19:14:25,760
internet of things such as usage reports

27396
19:14:23,039 --> 19:14:28,079
from energy meters and home appliances

27397
19:14:25,759 --> 19:14:30,159
and lastly graph data such as

27398
19:14:28,080 --> 19:14:32,551
information about how users are

27399
19:14:30,160 --> 19:14:35,360
connected to one another cloud bigtable

27400
19:14:32,551 --> 19:14:37,831
excels as a storage engine as it can

27401
19:14:35,360 --> 19:14:40,551
batch mapreduce operations

27402
19:14:37,831 --> 19:14:42,799
stream processing or analytics as well

27403
19:14:40,551 --> 19:14:45,119
as being used for storage for machine

27404
19:14:42,800 --> 19:14:47,760
learning applications now moving on to

27405
19:14:45,119 --> 19:14:50,080
the next nosql database is cloud

27406
19:14:47,759 --> 19:14:53,919
datastore and cloud datastore is a

27407
19:14:50,080 --> 19:14:56,160
highly scalable nosql document database

27408
19:14:53,919 --> 19:14:58,639
built for automatic scaling high

27409
19:14:56,160 --> 19:15:00,872
performance and ease of application

27410
19:14:58,639 --> 19:15:02,479
development datastore is redundant

27411
19:15:00,872 --> 19:15:04,639
within your location

27412
19:15:02,479 --> 19:15:07,512
to minimize impact from points of

27413
19:15:04,639 --> 19:15:10,319
failures and therefore can offer high

27414
19:15:07,512 --> 19:15:12,639
availability of reads and rights cloud

27415
19:15:10,320 --> 19:15:15,512
datastore can execute atomic

27416
19:15:12,639 --> 19:15:18,319
transactions where a set of operations

27417
19:15:15,512 --> 19:15:20,551
either all succeed or none occur cloud

27418
19:15:18,320 --> 19:15:23,192
datastore uses a distributed

27419
19:15:20,551 --> 19:15:25,512
architecture to automatically manage

27420
19:15:23,191 --> 19:15:28,159
scaling so you never have to worry about

27421
19:15:25,512 --> 19:15:30,720
scaling manually as well what's very

27422
19:15:28,160 --> 19:15:33,440
unique about cloud datastore is that it

27423
19:15:30,720 --> 19:15:37,191
has a sql-like query language that's

27424
19:15:33,440 --> 19:15:41,040
available called gql also known as gql

27425
19:15:37,191 --> 19:15:43,360
gql maps roughly to sql however a sql

27426
19:15:41,039 --> 19:15:46,959
role column lookup is limited to a

27427
19:15:43,360 --> 19:15:49,512
single value whereas in gql a property

27428
19:15:46,960 --> 19:15:52,080
can be a multiple value property this

27429
19:15:49,512 --> 19:15:54,400
consistency model allows an application

27430
19:15:52,080 --> 19:15:57,119
to handle large amounts of data and

27431
19:15:54,399 --> 19:15:59,511
users while still being able to deliver

27432
19:15:57,119 --> 19:16:01,831
a great user experience data is

27433
19:15:59,512 --> 19:16:03,919
automatically encrypted before it is

27434
19:16:01,831 --> 19:16:06,639
written to disk and automatically

27435
19:16:03,919 --> 19:16:08,872
decrypted when read by an authorized

27436
19:16:06,639 --> 19:16:11,512
user now this does not reflect in the

27437
19:16:08,872 --> 19:16:14,479
exam as of yet and i will be updating

27438
19:16:11,512 --> 19:16:16,720
this lesson if and when it happens but

27439
19:16:14,479 --> 19:16:19,191
firestore is the newest version of

27440
19:16:16,720 --> 19:16:21,600
datastore and introduces several

27441
19:16:19,191 --> 19:16:23,831
improvements over datastore existing

27442
19:16:21,600 --> 19:16:26,552
datastore users can access these

27443
19:16:23,831 --> 19:16:29,511
improvements by creating a new firestore

27444
19:16:26,551 --> 19:16:31,599
database instance in datastore mode and

27445
19:16:29,512 --> 19:16:33,680
in the near future all existing

27446
19:16:31,600 --> 19:16:36,400
datastore databases will be

27447
19:16:33,679 --> 19:16:39,039
automatically upgraded to firestore in

27448
19:16:36,399 --> 19:16:41,511
datastore mode now moving right along

27449
19:16:39,039 --> 19:16:44,079
cloud datastore holds a really cool

27450
19:16:41,512 --> 19:16:46,960
feature for developers that's called

27451
19:16:44,080 --> 19:16:49,512
datastore emulator and this provides

27452
19:16:46,960 --> 19:16:51,920
local emulation of the production

27453
19:16:49,512 --> 19:16:54,240
datastore environment so that you can

27454
19:16:51,919 --> 19:16:56,479
use to develop and test your application

27455
19:16:54,240 --> 19:17:00,000
locally this is a component of the

27456
19:16:56,479 --> 19:17:02,639
google cloud sdks gcloud tool and can be

27457
19:17:00,000 --> 19:17:04,720
installed by using the gcloud components

27458
19:17:02,639 --> 19:17:06,960
install command that we discussed

27459
19:17:04,720 --> 19:17:09,680
earlier on in the course and so moving

27460
19:17:06,960 --> 19:17:12,240
on to use cases for datastore

27461
19:17:09,679 --> 19:17:14,799
it is ideal for applications that rely

27462
19:17:12,240 --> 19:17:17,512
on highly available structured data at

27463
19:17:14,800 --> 19:17:19,919
scale you can use datastore for things

27464
19:17:17,512 --> 19:17:22,639
like product catalogs that provide

27465
19:17:19,919 --> 19:17:25,512
real-time inventory and product details

27466
19:17:22,639 --> 19:17:28,399
for a retailer user profiles that

27467
19:17:25,512 --> 19:17:30,240
deliver a customized experience based on

27468
19:17:28,399 --> 19:17:31,511
the user's past activities and

27469
19:17:30,240 --> 19:17:34,160
preferences

27470
19:17:31,512 --> 19:17:36,800
as well as transactions based on asset

27471
19:17:34,160 --> 19:17:39,512
properties for example transferring

27472
19:17:36,800 --> 19:17:43,040
funds from one bank account to another

27473
19:17:39,512 --> 19:17:46,240
next up we have firestore for firebase

27474
19:17:43,039 --> 19:17:49,191
and so this is a flexible scalable nosql

27475
19:17:46,240 --> 19:17:51,760
cloud database to store and sync data

27476
19:17:49,191 --> 19:17:55,831
for client and server side development

27477
19:17:51,759 --> 19:18:00,000
and is available for native c plus unity

27478
19:17:55,831 --> 19:18:03,511
node.js java go and python sdks

27479
19:18:00,000 --> 19:18:05,831
in addition to rest and rpc apis pretty

27480
19:18:03,512 --> 19:18:07,919
much covering the gamut of most major

27481
19:18:05,831 --> 19:18:11,039
programming languages now with cloud

27482
19:18:07,919 --> 19:18:14,000
firestore you store data in documents

27483
19:18:11,039 --> 19:18:15,831
that contain fields mapping to values

27484
19:18:14,000 --> 19:18:18,551
these documents are stored in

27485
19:18:15,831 --> 19:18:20,799
collections which are containers for

27486
19:18:18,551 --> 19:18:23,512
your documents that you can use to

27487
19:18:20,800 --> 19:18:25,512
organize your data and build queries

27488
19:18:23,512 --> 19:18:28,479
documents support many different data

27489
19:18:25,512 --> 19:18:31,119
types as well you can also create sub

27490
19:18:28,479 --> 19:18:33,599
collections within documents and build

27491
19:18:31,119 --> 19:18:36,319
hierarchical data structures cloud

27492
19:18:33,600 --> 19:18:39,760
firestore is serverless with absolutely

27493
19:18:36,320 --> 19:18:41,760
no servers to manage update or maintain

27494
19:18:39,759 --> 19:18:44,639
and with automatic multi-region

27495
19:18:41,759 --> 19:18:46,399
replication and strong consistency

27496
19:18:44,639 --> 19:18:49,679
google is able to hold

27497
19:18:46,399 --> 19:18:51,831
a five nines availability guarantee and

27498
19:18:49,679 --> 19:18:55,039
so when it comes to querying in cloud

27499
19:18:51,831 --> 19:18:57,439
firestore it is expressive efficient and

27500
19:18:55,039 --> 19:19:00,000
flexible you can create shallow queries

27501
19:18:57,440 --> 19:19:02,720
to retrieve data at the document level

27502
19:19:00,000 --> 19:19:05,919
without needing to retrieve the entire

27503
19:19:02,720 --> 19:19:07,680
collection or any nested subcollections

27504
19:19:05,919 --> 19:19:10,800
cloud firestore uses data

27505
19:19:07,679 --> 19:19:14,239
synchronization to update data in real

27506
19:19:10,800 --> 19:19:16,720
time for any connected device as well it

27507
19:19:14,240 --> 19:19:18,720
also caches data that your application

27508
19:19:16,720 --> 19:19:22,320
is actively using so that the

27509
19:19:18,720 --> 19:19:25,512
application can write read listen to and

27510
19:19:22,320 --> 19:19:28,080
query data even if the device is offline

27511
19:19:25,512 --> 19:19:31,119
when the device comes back online cloud

27512
19:19:28,080 --> 19:19:33,440
firestore synchronizes any local changes

27513
19:19:31,119 --> 19:19:36,399
back to cloud firestore you can also

27514
19:19:33,440 --> 19:19:38,800
secure your data in cloud firestore with

27515
19:19:36,399 --> 19:19:42,720
firebase authentication and cloud

27516
19:19:38,800 --> 19:19:45,600
firestore security rules for android ios

27517
19:19:42,720 --> 19:19:47,919
and javascript or you can use iam for

27518
19:19:45,600 --> 19:19:51,120
server side languages and when it comes

27519
19:19:47,919 --> 19:19:54,000
to costs firestore falls into the always

27520
19:19:51,119 --> 19:19:57,119
available free tier where you can use

27521
19:19:54,000 --> 19:19:59,440
one database holding five gigabytes or

27522
19:19:57,119 --> 19:20:02,080
if you need more you can move into their

27523
19:19:59,440 --> 19:20:04,240
paid option now firebase also has

27524
19:20:02,080 --> 19:20:06,479
another database sharing similar

27525
19:20:04,240 --> 19:20:09,760
features like having no servers to

27526
19:20:06,479 --> 19:20:11,440
deploy and maintain real-time updates

27527
19:20:09,759 --> 19:20:14,399
along with the free tier in this

27528
19:20:11,440 --> 19:20:16,872
database is called real time database

27529
19:20:14,399 --> 19:20:19,439
and is used for more basic querying

27530
19:20:16,872 --> 19:20:21,040
simple data structure and keeping things

27531
19:20:19,440 --> 19:20:23,360
to one database

27532
19:20:21,039 --> 19:20:26,079
it's something i like to call firestore

27533
19:20:23,360 --> 19:20:28,240
lite real time database does not show up

27534
19:20:26,080 --> 19:20:30,240
in the exam but i wanted to bring it to

27535
19:20:28,240 --> 19:20:32,320
light as it is part of the firebase

27536
19:20:30,240 --> 19:20:35,040
family just know that you can use both

27537
19:20:32,320 --> 19:20:37,920
databases within the same firebase

27538
19:20:35,039 --> 19:20:40,799
application or project as both can store

27539
19:20:37,919 --> 19:20:43,360
the same types of data client libraries

27540
19:20:40,800 --> 19:20:46,240
work in a similar manner and both hold

27541
19:20:43,360 --> 19:20:48,320
real-time updates now although firebase

27542
19:20:46,240 --> 19:20:50,720
is a development platform and not a

27543
19:20:48,320 --> 19:20:52,640
database service i wanted to give it a

27544
19:20:50,720 --> 19:20:55,600
quick mention for those of you who are

27545
19:20:52,639 --> 19:20:58,000
unfamiliar with the tie-in to firestore

27546
19:20:55,600 --> 19:21:00,480
with firebase firebase is a mobile

27547
19:20:58,000 --> 19:21:03,440
application development platform that

27548
19:21:00,479 --> 19:21:05,512
provides tools and cloud services to

27549
19:21:03,440 --> 19:21:08,240
help enable developers to develop

27550
19:21:05,512 --> 19:21:10,720
applications faster and more easily and

27551
19:21:08,240 --> 19:21:13,360
since it ties in nicely with firestore

27552
19:21:10,720 --> 19:21:16,000
it becomes the perfect platform for

27553
19:21:13,360 --> 19:21:19,119
mobile application development okay so

27554
19:21:16,000 --> 19:21:21,512
moving on to our last nosql database is

27555
19:21:19,119 --> 19:21:23,919
memorystore and memorystore is a fully

27556
19:21:21,512 --> 19:21:27,191
managed service from google cloud for

27557
19:21:23,919 --> 19:21:30,240
either redis or memcached in memory

27558
19:21:27,191 --> 19:21:32,319
datastore to build application caches

27559
19:21:30,240 --> 19:21:34,160
and this is a common service used in

27560
19:21:32,320 --> 19:21:36,240
many production environments

27561
19:21:34,160 --> 19:21:38,872
specifically when the need for caching

27562
19:21:36,240 --> 19:21:41,120
arises memory store automates the

27563
19:21:38,872 --> 19:21:43,192
administration tasks for redis and

27564
19:21:41,119 --> 19:21:46,159
memcached like enabling high

27565
19:21:43,191 --> 19:21:48,479
availability failover patching and

27566
19:21:46,160 --> 19:21:50,240
monitoring so you don't have to and when

27567
19:21:48,479 --> 19:21:52,720
it comes to memory store for redis

27568
19:21:50,240 --> 19:21:55,192
instances in the standard tier these are

27569
19:21:52,720 --> 19:21:57,831
replicated across zones

27570
19:21:55,191 --> 19:22:00,080
monitored for health and have fast

27571
19:21:57,831 --> 19:22:03,831
automatic failover standard tier

27572
19:22:00,080 --> 19:22:06,160
instances also provide an sla of three

27573
19:22:03,831 --> 19:22:09,279
nines availability memory store for

27574
19:22:06,160 --> 19:22:12,000
redis also provides the ability to scale

27575
19:22:09,279 --> 19:22:14,479
instant sizes seamlessly so that you can

27576
19:22:12,000 --> 19:22:16,639
start small and increase the size of the

27577
19:22:14,479 --> 19:22:19,512
instance as needed memory store is

27578
19:22:16,639 --> 19:22:22,399
protected from the internet using vpc

27579
19:22:19,512 --> 19:22:24,720
networks and private ip and also comes

27580
19:22:22,399 --> 19:22:27,191
with iam integration systems are

27581
19:22:24,720 --> 19:22:30,160
monitored around the clock ensuring that

27582
19:22:27,191 --> 19:22:32,799
your data is protected at all times and

27583
19:22:30,160 --> 19:22:34,960
know that the versions are always kept

27584
19:22:32,800 --> 19:22:37,600
up to date with the latest critical

27585
19:22:34,960 --> 19:22:40,480
patches ensuring your instances are

27586
19:22:37,600 --> 19:22:42,480
secure now when it comes to use cases of

27587
19:22:40,479 --> 19:22:44,639
course the first thing you will see is

27588
19:22:42,479 --> 19:22:47,279
caching and this is the main reason to

27589
19:22:44,639 --> 19:22:50,240
use memory store as it provides low

27590
19:22:47,279 --> 19:22:52,399
latency access and high throughput for

27591
19:22:50,240 --> 19:22:54,639
heavily accessed data compared to

27592
19:22:52,399 --> 19:22:56,479
accessing the data from a disk common

27593
19:22:54,639 --> 19:22:58,800
examples of caching is session

27594
19:22:56,479 --> 19:23:01,360
management frequently accessed queries

27595
19:22:58,800 --> 19:23:03,680
scripts or pages so when using memory

27596
19:23:01,360 --> 19:23:05,680
store for leaderboards and gaming this

27597
19:23:03,679 --> 19:23:08,319
is a common use case in the gaming

27598
19:23:05,679 --> 19:23:10,871
industry as well as using it for player

27599
19:23:08,320 --> 19:23:13,760
profiles memory store is also a perfect

27600
19:23:10,872 --> 19:23:16,639
solution for stream processing combined

27601
19:23:13,759 --> 19:23:19,919
with data flow memory store for redis

27602
19:23:16,639 --> 19:23:22,399
provides a scalable fast in memory store

27603
19:23:19,919 --> 19:23:24,479
for storing intermediate data that

27604
19:23:22,399 --> 19:23:26,959
thousands of clients can access with

27605
19:23:24,479 --> 19:23:29,512
very low latency and so when it comes to

27606
19:23:26,960 --> 19:23:32,480
nosql databases these are all the

27607
19:23:29,512 --> 19:23:34,960
available options on google cloud and as

27608
19:23:32,479 --> 19:23:37,599
i said before it will only show up on

27609
19:23:34,960 --> 19:23:39,512
the exam at merely a high level and so

27610
19:23:37,600 --> 19:23:40,400
knowing what each of these databases are

27611
19:23:39,512 --> 19:23:43,279
used for

27612
19:23:40,399 --> 19:23:46,159
will be a huge benefit along with being

27613
19:23:43,279 --> 19:23:48,080
an entry to diving deeper into possibly

27614
19:23:46,160 --> 19:23:50,872
using these services within your

27615
19:23:48,080 --> 19:23:52,400
day-to-day job as a cloud engineer and

27616
19:23:50,872 --> 19:23:55,760
so that's pretty much all i wanted to

27617
19:23:52,399 --> 19:23:58,239
cover when it comes to nosql databases

27618
19:23:55,759 --> 19:24:00,319
available in google cloud so you can now

27619
19:23:58,240 --> 19:24:01,779
mark this lesson as complete and let's

27620
19:24:00,320 --> 19:24:05,760
move on to the next one

27621
19:24:01,779 --> 19:24:08,720
[Music]

27622
19:24:05,759 --> 19:24:11,679
welcome back and in this lesson we'll be

27623
19:24:08,720 --> 19:24:14,080
going over the big data ecosystem in an

27624
19:24:11,679 --> 19:24:16,319
overview just to familiarize you with

27625
19:24:14,080 --> 19:24:18,872
the services that are available in

27626
19:24:16,320 --> 19:24:21,832
google cloud and are the services that

27627
19:24:18,872 --> 19:24:24,080
will show up in the exam this lesson is

27628
19:24:21,831 --> 19:24:26,000
not meant to go in depth but is an

27629
19:24:24,080 --> 19:24:28,400
overview and will give you a good

27630
19:24:26,000 --> 19:24:31,279
understanding on what these services can

27631
19:24:28,399 --> 19:24:33,919
do and how they all work together to

27632
19:24:31,279 --> 19:24:36,080
make sense of big data as a whole

27633
19:24:33,919 --> 19:24:38,872
so getting right into it i wanted to

27634
19:24:36,080 --> 19:24:40,872
first ask the question what is big data

27635
19:24:38,872 --> 19:24:43,680
i mean many people talk about it but

27636
19:24:40,872 --> 19:24:46,000
what is it really well big data refers

27637
19:24:43,679 --> 19:24:48,799
to massive amounts of data that would

27638
19:24:46,000 --> 19:24:51,831
typically be too expensive to store

27639
19:24:48,800 --> 19:24:54,479
manage and analyze using traditional

27640
19:24:51,831 --> 19:24:56,720
database systems either relational or

27641
19:24:54,479 --> 19:24:59,119
monolithic as the amount of data that we

27642
19:24:56,720 --> 19:25:01,831
have been seeing over the past few years

27643
19:24:59,119 --> 19:25:04,479
has started to increase these systems

27644
19:25:01,831 --> 19:25:07,191
have become very inefficient because of

27645
19:25:04,479 --> 19:25:10,551
their lack of flexibility for storing

27646
19:25:07,191 --> 19:25:13,279
unstructured data such as images text or

27647
19:25:10,551 --> 19:25:16,551
video as well as accommodating high

27648
19:25:13,279 --> 19:25:18,479
velocity or real-time data or scaling to

27649
19:25:16,551 --> 19:25:21,191
support very large

27650
19:25:18,479 --> 19:25:23,360
petabyte scale data volumes for this

27651
19:25:21,191 --> 19:25:26,551
reason the past few years has seen the

27652
19:25:23,360 --> 19:25:29,039
mainstream adoption of new approaches to

27653
19:25:26,551 --> 19:25:32,000
managing and processing big data

27654
19:25:29,039 --> 19:25:35,360
including apache hadoop and nosql

27655
19:25:32,000 --> 19:25:38,240
database systems however those options

27656
19:25:35,360 --> 19:25:40,872
often prove to be complex to deploy

27657
19:25:38,240 --> 19:25:42,320
manage and use in an on-premises

27658
19:25:40,872 --> 19:25:44,720
situation

27659
19:25:42,320 --> 19:25:46,552
now the ability to consistently get

27660
19:25:44,720 --> 19:25:49,279
business value from data

27661
19:25:46,551 --> 19:25:52,000
fast and efficiently is now becoming the

27662
19:25:49,279 --> 19:25:54,399
de facto of successful organizations

27663
19:25:52,000 --> 19:25:57,119
across every industry the more data a

27664
19:25:54,399 --> 19:25:59,360
company has access to the more business

27665
19:25:57,119 --> 19:26:00,551
insights and business value they're able

27666
19:25:59,360 --> 19:26:03,279
to achieve

27667
19:26:00,551 --> 19:26:04,319
like gain useful insights increase

27668
19:26:03,279 --> 19:26:07,360
revenue

27669
19:26:04,320 --> 19:26:09,920
get or retain customers and even improve

27670
19:26:07,360 --> 19:26:11,919
operations and because machine learning

27671
19:26:09,919 --> 19:26:14,551
models get more efficient as they are

27672
19:26:11,919 --> 19:26:17,191
trained with more data machine learning

27673
19:26:14,551 --> 19:26:19,831
and big data are highly complementary

27674
19:26:17,191 --> 19:26:22,000
all in all big data brings some really

27675
19:26:19,831 --> 19:26:24,639
great value to the table that is

27676
19:26:22,000 --> 19:26:26,479
impossible for any organization to turn

27677
19:26:24,639 --> 19:26:29,512
down and so now that we've gone through

27678
19:26:26,479 --> 19:26:31,360
that overview of what big data is i

27679
19:26:29,512 --> 19:26:34,639
wanted to dive into some shorter

27680
19:26:31,360 --> 19:26:37,600
overviews of the services available for

27681
19:26:34,639 --> 19:26:39,279
the big data ecosystem on google cloud

27682
19:26:37,600 --> 19:26:42,480
and so the first service that i'd like

27683
19:26:39,279 --> 19:26:44,872
to start with is bigquery now bigquery

27684
19:26:42,479 --> 19:26:48,399
is a fully managed serverless data

27685
19:26:44,872 --> 19:26:51,120
warehouse that enables scalable analysis

27686
19:26:48,399 --> 19:26:54,079
over petabytes of data this service

27687
19:26:51,119 --> 19:26:56,479
supports querying using sql and holds

27688
19:26:54,080 --> 19:26:58,240
built-in machine learning capabilities

27689
19:26:56,479 --> 19:27:00,551
you start by ingesting data into

27690
19:26:58,240 --> 19:27:03,279
bigquery and then you are able to take

27691
19:27:00,551 --> 19:27:05,831
advantage of all the power it provides

27692
19:27:03,279 --> 19:27:08,639
so big data would ingest that data by

27693
19:27:05,831 --> 19:27:11,279
doing a batch upload or by streaming it

27694
19:27:08,639 --> 19:27:13,191
in real time and you can use any of the

27695
19:27:11,279 --> 19:27:16,240
currently available google cloud

27696
19:27:13,191 --> 19:27:18,319
services to load data into bigquery you

27697
19:27:16,240 --> 19:27:19,279
can take a manual batch ingestion

27698
19:27:18,320 --> 19:27:22,400
approach

27699
19:27:19,279 --> 19:27:24,959
or stream using pub sub etl data and

27700
19:27:22,399 --> 19:27:27,360
with bigquery data transfer service you

27701
19:27:24,960 --> 19:27:30,480
can automatically transfer data from

27702
19:27:27,360 --> 19:27:33,440
external google data sources and partner

27703
19:27:30,479 --> 19:27:36,080
sas applications to bigquery on a

27704
19:27:33,440 --> 19:27:38,800
scheduled and fully managed basis and

27705
19:27:36,080 --> 19:27:42,000
the best part is batch and export is

27706
19:27:38,800 --> 19:27:44,639
free bigquery's high-speed streaming api

27707
19:27:42,000 --> 19:27:47,759
provides an incredible foundation for

27708
19:27:44,639 --> 19:27:50,479
real-time analytics making business data

27709
19:27:47,759 --> 19:27:52,959
immediately available for analysis and

27710
19:27:50,479 --> 19:27:56,000
you can also leverage pub sub and data

27711
19:27:52,960 --> 19:27:59,040
flow to stream data into bigquery

27712
19:27:56,000 --> 19:28:01,759
bigquery transparently and automatically

27713
19:27:59,039 --> 19:28:04,831
provides highly durable replicated

27714
19:28:01,759 --> 19:28:07,119
storage in multiple locations for high

27715
19:28:04,831 --> 19:28:10,399
availability as well as being able to

27716
19:28:07,119 --> 19:28:13,512
achieve easy resource bigquery keeps a

27717
19:28:10,399 --> 19:28:15,360
seven day history of changes in case

27718
19:28:13,512 --> 19:28:18,000
something were to go wrong bigquery

27719
19:28:15,360 --> 19:28:20,639
supports standard sql querying which

27720
19:28:18,000 --> 19:28:22,960
reduces the need for code rewrites you

27721
19:28:20,639 --> 19:28:25,279
can simply use it as you would for

27722
19:28:22,960 --> 19:28:28,400
querying any other sql compliant

27723
19:28:25,279 --> 19:28:31,039
database and with dataproc and dataflow

27724
19:28:28,399 --> 19:28:34,079
bigquery provides integration with the

27725
19:28:31,039 --> 19:28:37,679
apache big data ecosystem allowing

27726
19:28:34,080 --> 19:28:40,080
existing hadoop spark and beam workloads

27727
19:28:37,679 --> 19:28:43,679
to read or write data directly from

27728
19:28:40,080 --> 19:28:45,759
bigquery using the storage api bigquery

27729
19:28:43,679 --> 19:28:48,799
also makes it very easy to access this

27730
19:28:45,759 --> 19:28:51,919
data by using the cloud console using

27731
19:28:48,800 --> 19:28:55,279
the bq command line tool or making calls

27732
19:28:51,919 --> 19:28:58,959
to the bigquery rest api using a variety

27733
19:28:55,279 --> 19:29:01,440
of client libraries such as java.net or

27734
19:28:58,960 --> 19:29:03,832
python there are also a variety of

27735
19:29:01,440 --> 19:29:06,400
third-party tools that you can use to

27736
19:29:03,831 --> 19:29:09,191
interact with bigquery when visualizing

27737
19:29:06,399 --> 19:29:11,279
the data or loading the data bigquery

27738
19:29:09,191 --> 19:29:14,080
provides strong security and governance

27739
19:29:11,279 --> 19:29:16,639
controls with fine-grained controls

27740
19:29:14,080 --> 19:29:18,720
through integration with identity and

27741
19:29:16,639 --> 19:29:21,600
access management bigquery gives you the

27742
19:29:18,720 --> 19:29:23,680
option of geographic data control

27743
19:29:21,600 --> 19:29:26,240
without the headaches of setting up and

27744
19:29:23,679 --> 19:29:29,039
managing clusters and other computing

27745
19:29:26,240 --> 19:29:31,192
resources in different zones and regions

27746
19:29:29,039 --> 19:29:33,679
bigquery also provides fine grain

27747
19:29:31,191 --> 19:29:35,831
identity and access management and rest

27748
19:29:33,679 --> 19:29:38,959
assured that your data is always

27749
19:29:35,831 --> 19:29:41,119
encrypted at rest and in transit now the

27750
19:29:38,960 --> 19:29:44,000
way that bigquery calculates billing

27751
19:29:41,119 --> 19:29:46,639
charges is by queries and by storage

27752
19:29:44,000 --> 19:29:48,960
storing data in bigquery is comparable

27753
19:29:46,639 --> 19:29:51,279
in price with storing data in cloud

27754
19:29:48,960 --> 19:29:54,080
storage which makes it an easy decision

27755
19:29:51,279 --> 19:29:55,759
for storing data in bigquery there is no

27756
19:29:54,080 --> 19:29:58,240
upper limit to the amount of data that

27757
19:29:55,759 --> 19:30:01,279
can be stored in bigquery so if tables

27758
19:29:58,240 --> 19:30:04,400
are not edited for 90 days the price of

27759
19:30:01,279 --> 19:30:06,959
storage for that table drops by 50

27760
19:30:04,399 --> 19:30:09,831
percent query costs are also available

27761
19:30:06,960 --> 19:30:12,240
as on-demand and flat rate pricing and

27762
19:30:09,831 --> 19:30:15,191
when it comes to on-demand pricing you

27763
19:30:12,240 --> 19:30:18,160
are only charged for bytes read not

27764
19:30:15,191 --> 19:30:21,279
bytes returned in the end bigquery

27765
19:30:18,160 --> 19:30:24,480
scales seamlessly to store and analyze

27766
19:30:21,279 --> 19:30:26,720
petabytes to exabytes of data with ease

27767
19:30:24,479 --> 19:30:29,279
now there are so many more features to

27768
19:30:26,720 --> 19:30:31,831
list but if you are interested feel free

27769
19:30:29,279 --> 19:30:34,319
to dive into the other features with the

27770
19:30:31,831 --> 19:30:37,439
supplied link in the lesson text now

27771
19:30:34,320 --> 19:30:40,480
moving on to the next service is pub sub

27772
19:30:37,440 --> 19:30:42,872
and pub sub is a fully managed real-time

27773
19:30:40,479 --> 19:30:45,679
messaging service that allows you to

27774
19:30:42,872 --> 19:30:48,551
send and receive messages between

27775
19:30:45,679 --> 19:30:51,759
independent applications it acts as

27776
19:30:48,551 --> 19:30:54,551
messaging oriented middleware or event

27777
19:30:51,759 --> 19:30:57,360
ingestion and delivery for streaming

27778
19:30:54,551 --> 19:31:00,399
analytics pipelines and so a publisher

27779
19:30:57,360 --> 19:31:03,119
application creates and send messages to

27780
19:31:00,399 --> 19:31:05,439
a topic subscriber applications create a

27781
19:31:03,119 --> 19:31:07,512
subscription to a topic and receives

27782
19:31:05,440 --> 19:31:09,440
messages from it and so i wanted to take

27783
19:31:07,512 --> 19:31:10,400
a moment to show you exactly how it

27784
19:31:09,440 --> 19:31:13,360
works

27785
19:31:10,399 --> 19:31:15,511
so first the publisher creates messages

27786
19:31:13,360 --> 19:31:18,639
and sends them to the messaging service

27787
19:31:15,512 --> 19:31:21,119
on a specified topic a topic is a named

27788
19:31:18,639 --> 19:31:24,240
entity that represents a feed of

27789
19:31:21,119 --> 19:31:27,279
messages a publisher application creates

27790
19:31:24,240 --> 19:31:29,760
a topic in the pub sub service and sends

27791
19:31:27,279 --> 19:31:31,919
messages to that topic a message

27792
19:31:29,759 --> 19:31:34,799
contains a payload and optional

27793
19:31:31,919 --> 19:31:36,800
attributes that describe the content the

27794
19:31:34,800 --> 19:31:38,872
service as a whole ensures that

27795
19:31:36,800 --> 19:31:41,360
published messages are retained on

27796
19:31:38,872 --> 19:31:43,832
behalf of subscriptions and so a

27797
19:31:41,360 --> 19:31:46,551
published message is retained for a

27798
19:31:43,831 --> 19:31:49,039
subscription in a message queue shown

27799
19:31:46,551 --> 19:31:51,831
here as message storage until it is

27800
19:31:49,039 --> 19:31:54,639
acknowledged by any subscriber consuming

27801
19:31:51,831 --> 19:31:57,599
messages from that subscription pub sub

27802
19:31:54,639 --> 19:32:00,319
then forwards messages from a topic to

27803
19:31:57,600 --> 19:32:03,040
all of its subscriptions individually a

27804
19:32:00,320 --> 19:32:05,040
subscriber then receives messages either

27805
19:32:03,039 --> 19:32:07,679
by pub sub pushing them to the

27806
19:32:05,039 --> 19:32:10,399
subscriber's chosen endpoint or by the

27807
19:32:07,679 --> 19:32:12,479
subscriber pulling them from the service

27808
19:32:10,399 --> 19:32:15,039
the subscriber then sends an

27809
19:32:12,479 --> 19:32:17,599
acknowledgement to the pub sub service

27810
19:32:15,039 --> 19:32:20,479
for each received message the service

27811
19:32:17,600 --> 19:32:22,800
then removes acknowledged messages from

27812
19:32:20,479 --> 19:32:25,119
the subscriptions message queue and some

27813
19:32:22,800 --> 19:32:28,080
of the use cases for pub sub is

27814
19:32:25,119 --> 19:32:31,119
balancing large task queues distributing

27815
19:32:28,080 --> 19:32:33,440
event notifications and real-time data

27816
19:32:31,119 --> 19:32:35,191
streaming from various sources and so

27817
19:32:33,440 --> 19:32:38,479
the next service that i wanted to get

27818
19:32:35,191 --> 19:32:41,279
into is composer now composer is a

27819
19:32:38,479 --> 19:32:43,919
managed workflow orchestration service

27820
19:32:41,279 --> 19:32:46,080
that is built on apache airflow this is

27821
19:32:43,919 --> 19:32:48,639
a workflow automation tool for

27822
19:32:46,080 --> 19:32:51,831
developers that's based on the open

27823
19:32:48,639 --> 19:32:54,800
source apache airflow project similar to

27824
19:32:51,831 --> 19:32:57,360
an on-premises deployment cloud composer

27825
19:32:54,800 --> 19:32:59,600
deploys multiple components to run

27826
19:32:57,360 --> 19:33:00,479
airflow in the cloud airflow is a

27827
19:32:59,600 --> 19:33:02,320
platform

27828
19:33:00,479 --> 19:33:05,191
created by the community to

27829
19:33:02,320 --> 19:33:07,920
programmatically author schedule and

27830
19:33:05,191 --> 19:33:11,191
monitor workflows the airflow scheduler

27831
19:33:07,919 --> 19:33:13,759
as you see here executes the tasks on an

27832
19:33:11,191 --> 19:33:16,319
array of workers while following the

27833
19:33:13,759 --> 19:33:19,279
specified dependencies and storing the

27834
19:33:16,320 --> 19:33:21,832
data in a database and having a ui

27835
19:33:19,279 --> 19:33:23,919
component for easy management now

27836
19:33:21,831 --> 19:33:27,439
breaking down these workflows for just a

27837
19:33:23,919 --> 19:33:30,000
sec in data analytics a workflow

27838
19:33:27,440 --> 19:33:33,440
represents a series of tasks for

27839
19:33:30,000 --> 19:33:36,551
ingesting transforming analyzing or

27840
19:33:33,440 --> 19:33:39,119
utilizing data in airflow workflows are

27841
19:33:36,551 --> 19:33:41,440
created using dags which are a

27842
19:33:39,119 --> 19:33:43,039
collection of tasks that you want to

27843
19:33:41,440 --> 19:33:46,320
schedule and run

27844
19:33:43,039 --> 19:33:49,679
and organizes these tasks to ensure that

27845
19:33:46,320 --> 19:33:52,240
each task is executed at the right time

27846
19:33:49,679 --> 19:33:54,719
in the right order or with the right

27847
19:33:52,240 --> 19:33:56,400
issue handling now in order to run the

27848
19:33:54,720 --> 19:33:58,960
specialized workflows

27849
19:33:56,399 --> 19:34:01,511
provision environments are needed and so

27850
19:33:58,960 --> 19:34:04,480
composer deploys these self-contained

27851
19:34:01,512 --> 19:34:06,551
environments on google kubernetes engine

27852
19:34:04,479 --> 19:34:09,512
that work with other google cloud

27853
19:34:06,551 --> 19:34:12,000
services using connectors built into

27854
19:34:09,512 --> 19:34:14,240
airflow the beauty of composer is that

27855
19:34:12,000 --> 19:34:16,872
you can create one or more of these

27856
19:34:14,240 --> 19:34:20,000
environments in a single google cloud

27857
19:34:16,872 --> 19:34:22,000
project using any supported region

27858
19:34:20,000 --> 19:34:25,119
without having to do all the heavy

27859
19:34:22,000 --> 19:34:27,679
lifting of creating a full-blown apache

27860
19:34:25,119 --> 19:34:31,191
airflow environment now when it comes to

27861
19:34:27,679 --> 19:34:34,319
data flow dataflow is a serverless fully

27862
19:34:31,191 --> 19:34:37,279
managed processing service for executing

27863
19:34:34,320 --> 19:34:39,760
apache beam pipelines for batch and

27864
19:34:37,279 --> 19:34:43,279
real-time data streaming the apache beam

27865
19:34:39,759 --> 19:34:46,000
sdk is an open source programming model

27866
19:34:43,279 --> 19:34:48,399
that enables you to develop both batch

27867
19:34:46,000 --> 19:34:51,440
and streaming pipelines using one of the

27868
19:34:48,399 --> 19:34:54,079
apache beam sdks you build a program

27869
19:34:51,440 --> 19:34:56,240
that defines the pipeline then one of

27870
19:34:54,080 --> 19:34:59,279
apache beam's supported distributed

27871
19:34:56,240 --> 19:35:01,512
processing back-ends such as data flow

27872
19:34:59,279 --> 19:35:03,759
executes that pipeline the data flow

27873
19:35:01,512 --> 19:35:06,479
service then takes care of all the

27874
19:35:03,759 --> 19:35:09,439
low-level details like coordinating

27875
19:35:06,479 --> 19:35:12,639
individual workers sharding data sets

27876
19:35:09,440 --> 19:35:15,512
auto scaling and exactly once processing

27877
19:35:12,639 --> 19:35:18,639
now in its simplest form google cloud

27878
19:35:15,512 --> 19:35:21,191
data flow reads the data from a source

27879
19:35:18,639 --> 19:35:23,759
transforms it and then writes the data

27880
19:35:21,191 --> 19:35:26,720
back to a sink now getting a bit more

27881
19:35:23,759 --> 19:35:29,360
granular with how this pipeline works

27882
19:35:26,720 --> 19:35:30,720
data flow reads the data presented from

27883
19:35:29,360 --> 19:35:32,960
a data source

27884
19:35:30,720 --> 19:35:35,831
once the data has been read it is put

27885
19:35:32,960 --> 19:35:38,080
together into a collection of data sets

27886
19:35:35,831 --> 19:35:40,639
called a p collection and this allows

27887
19:35:38,080 --> 19:35:43,512
the data to be read distributed and

27888
19:35:40,639 --> 19:35:45,600
processed across multiple machines now

27889
19:35:43,512 --> 19:35:48,160
at each step in which the data is

27890
19:35:45,600 --> 19:35:50,400
transformed a new p collection is

27891
19:35:48,160 --> 19:35:53,192
created and once the final collection

27892
19:35:50,399 --> 19:35:55,511
has been created it is written to async

27893
19:35:53,191 --> 19:35:58,399
and this is the full pipeline of how

27894
19:35:55,512 --> 19:36:01,119
data goes from source to sync this

27895
19:35:58,399 --> 19:36:03,759
pipeline within data flow is called a

27896
19:36:01,119 --> 19:36:06,239
job and finally here is a high-level

27897
19:36:03,759 --> 19:36:08,239
overview of what a data flow job would

27898
19:36:06,240 --> 19:36:10,720
look like when you involve other

27899
19:36:08,240 --> 19:36:13,512
services within google cloud and put

27900
19:36:10,720 --> 19:36:16,000
together in an end-to-end solution from

27901
19:36:13,512 --> 19:36:18,479
retrieving the data to visualizing it

27902
19:36:16,000 --> 19:36:21,279
and finally when it comes to pricing

27903
19:36:18,479 --> 19:36:23,679
data flow jobs are billed in per second

27904
19:36:21,279 --> 19:36:26,000
increments so you're only charged for

27905
19:36:23,679 --> 19:36:28,871
when you are processing your data now

27906
19:36:26,000 --> 19:36:33,279
moving on to data proc this is a fast

27907
19:36:28,872 --> 19:36:36,080
and easy way to run spark hadoop hive or

27908
19:36:33,279 --> 19:36:39,759
pig on google cloud in an on-premises

27909
19:36:36,080 --> 19:36:42,479
environment it takes 5 to 30 minutes to

27910
19:36:39,759 --> 19:36:45,759
create spark and hadoop clusters data

27911
19:36:42,479 --> 19:36:48,399
proc clusters take 90 seconds or less on

27912
19:36:45,759 --> 19:36:51,039
average to be built in google cloud

27913
19:36:48,399 --> 19:36:53,679
dataproc has built-in integration with

27914
19:36:51,039 --> 19:36:56,319
other google cloud platform services and

27915
19:36:53,679 --> 19:36:58,719
use spark and hadoop clusters without

27916
19:36:56,320 --> 19:37:00,960
any admin assistance so when you're done

27917
19:36:58,720 --> 19:37:03,600
with the cluster you can simply turn it

27918
19:37:00,960 --> 19:37:06,160
off so you don't spend money on an idle

27919
19:37:03,600 --> 19:37:08,720
cluster as well there's no need to worry

27920
19:37:06,160 --> 19:37:11,832
about data loss because data proc is

27921
19:37:08,720 --> 19:37:14,080
integrated with cloud storage bigquery

27922
19:37:11,831 --> 19:37:16,399
and cloud bigtable the great thing about

27923
19:37:14,080 --> 19:37:18,800
dataproc is you don't need to learn new

27924
19:37:16,399 --> 19:37:22,239
tools or apis to use it

27925
19:37:18,800 --> 19:37:24,720
spark hadoop pig and hive are all

27926
19:37:22,240 --> 19:37:26,872
supported and frequently updated and

27927
19:37:24,720 --> 19:37:30,800
when it comes to pricing you are billed

27928
19:37:26,872 --> 19:37:33,440
at one cent per vcpu in your cluster per

27929
19:37:30,800 --> 19:37:36,000
hour on top of the other resources you

27930
19:37:33,440 --> 19:37:38,800
use you also have the flexibility of

27931
19:37:36,000 --> 19:37:41,759
using preemptable instances for even

27932
19:37:38,800 --> 19:37:44,400
lower compute cost now although cloud

27933
19:37:41,759 --> 19:37:46,959
data proc and cloud data flow can both

27934
19:37:44,399 --> 19:37:49,511
be used to implement etl data

27935
19:37:46,960 --> 19:37:52,000
warehousing solutions they each have

27936
19:37:49,512 --> 19:37:53,760
their strengths and weaknesses and so i

27937
19:37:52,000 --> 19:37:56,000
wanted to take a quick moment to point

27938
19:37:53,759 --> 19:37:57,759
them out now with dataproc you can

27939
19:37:56,000 --> 19:38:01,759
easily spin up clusters through the

27940
19:37:57,759 --> 19:38:04,551
console the sdk or the api and turn it

27941
19:38:01,759 --> 19:38:07,511
off when you don't need it with dataflow

27942
19:38:04,551 --> 19:38:09,440
it is serverless and fully managed so

27943
19:38:07,512 --> 19:38:11,440
there are never any servers to worry

27944
19:38:09,440 --> 19:38:13,832
about and when it comes to having any

27945
19:38:11,440 --> 19:38:16,639
dependencies to tools in the hadoop or

27946
19:38:13,831 --> 19:38:18,799
spark ecosystem data proc would be the

27947
19:38:16,639 --> 19:38:21,512
way to go but if you're looking to make

27948
19:38:18,800 --> 19:38:24,320
your jobs more portable across different

27949
19:38:21,512 --> 19:38:27,191
execution engines apache beam allows you

27950
19:38:24,320 --> 19:38:29,680
to do this and is only available on data

27951
19:38:27,191 --> 19:38:32,871
flow moving on to the next service is

27952
19:38:29,679 --> 19:38:35,831
cloud data lab now cloud data lab is an

27953
19:38:32,872 --> 19:38:39,680
interactive developer tool created to

27954
19:38:35,831 --> 19:38:42,159
explore analyze transform and visualize

27955
19:38:39,679 --> 19:38:44,551
data and build machine learning models

27956
19:38:42,160 --> 19:38:47,279
from your data data lab uses open

27957
19:38:44,551 --> 19:38:49,919
sourced jupyter notebooks a well-known

27958
19:38:47,279 --> 19:38:52,240
format used in the world of data science

27959
19:38:49,919 --> 19:38:55,440
it runs on compute engine and connects

27960
19:38:52,240 --> 19:38:58,320
to multiple cloud services easily so you

27961
19:38:55,440 --> 19:39:00,639
can focus on your data science tasks it

27962
19:38:58,320 --> 19:39:03,280
also integrates with all of the google

27963
19:39:00,639 --> 19:39:06,080
services that help you simplify data

27964
19:39:03,279 --> 19:39:08,720
processing like bigquery and cloud

27965
19:39:06,080 --> 19:39:11,831
storage cloud data lab is packaged as a

27966
19:39:08,720 --> 19:39:14,800
container and run in a vm instance cloud

27967
19:39:11,831 --> 19:39:17,119
data lab uses notebooks instead of text

27968
19:39:14,800 --> 19:39:19,512
files containing code notebooks bring

27969
19:39:17,119 --> 19:39:21,759
together code documentation written as

27970
19:39:19,512 --> 19:39:25,119
markdown and the results of code

27971
19:39:21,759 --> 19:39:28,551
execution whether it's text image or

27972
19:39:25,119 --> 19:39:32,000
html or javascript like a code editor or

27973
19:39:28,551 --> 19:39:34,319
ide notebooks help you write code and

27974
19:39:32,000 --> 19:39:37,039
they allow you to execute code in an

27975
19:39:34,320 --> 19:39:39,680
interactive and iterative manner

27976
19:39:37,039 --> 19:39:42,000
rendering the results alongside the code

27977
19:39:39,679 --> 19:39:44,551
cloud data lab notebooks can be stored

27978
19:39:42,000 --> 19:39:47,600
in google cloud source repository this

27979
19:39:44,551 --> 19:39:50,551
git repository is cloned onto persistent

27980
19:39:47,600 --> 19:39:52,639
disk when attached to the vm now when it

27981
19:39:50,551 --> 19:39:55,360
comes to prepping your data before

27982
19:39:52,639 --> 19:39:58,720
consumption whether it be data cleansing

27983
19:39:55,360 --> 19:40:01,039
cleaning prepping or alteration this is

27984
19:39:58,720 --> 19:40:03,680
where data prep hits it out of the park

27985
19:40:01,039 --> 19:40:06,799
dataprep is a serverless intelligent

27986
19:40:03,679 --> 19:40:09,279
data service for visually exploring

27987
19:40:06,800 --> 19:40:12,720
cleaning and preparing structured and

27988
19:40:09,279 --> 19:40:14,800
unstructured data for analysis reporting

27989
19:40:12,720 --> 19:40:18,000
and machine learning it automatically

27990
19:40:14,800 --> 19:40:20,551
detects schemas data types possible

27991
19:40:18,000 --> 19:40:23,759
joins and anomalies such as missing

27992
19:40:20,551 --> 19:40:25,831
values outliers and duplicates so you

27993
19:40:23,759 --> 19:40:28,159
don't have to the architecture that i'm

27994
19:40:25,831 --> 19:40:30,639
about to show you is how data prep

27995
19:40:28,160 --> 19:40:32,960
shines the raw data that's available

27996
19:40:30,639 --> 19:40:36,000
from various different sources is

27997
19:40:32,960 --> 19:40:38,160
ingested into cloud data prep to clean

27998
19:40:36,000 --> 19:40:40,720
and prepare the data data prep then

27999
19:40:38,160 --> 19:40:43,192
sends the data off to cloud data flow to

28000
19:40:40,720 --> 19:40:46,240
refine that data and then sent off to

28001
19:40:43,191 --> 19:40:49,039
cloud storage or bigquery for storage

28002
19:40:46,240 --> 19:40:52,000
before being analyzed by one of the many

28003
19:40:49,039 --> 19:40:54,959
available bi tools now these big data

28004
19:40:52,000 --> 19:40:57,360
services are used by many data analysts

28005
19:40:54,960 --> 19:40:59,360
in the field and it's great to know what

28006
19:40:57,360 --> 19:41:01,759
services that can be used to help

28007
19:40:59,360 --> 19:41:04,800
process the data needed for their

28008
19:41:01,759 --> 19:41:06,720
specific job as well for the exam you

28009
19:41:04,800 --> 19:41:09,512
only need to know these services at a

28010
19:41:06,720 --> 19:41:11,831
high level and not to know them in depth

28011
19:41:09,512 --> 19:41:14,240
but if you seem interested in diving

28012
19:41:11,831 --> 19:41:16,720
into any of these services to know more

28013
19:41:14,240 --> 19:41:19,440
about them i highly encourage you to

28014
19:41:16,720 --> 19:41:21,040
dive in after the course and really take

28015
19:41:19,440 --> 19:41:23,119
a look at them and that's pretty much

28016
19:41:21,039 --> 19:41:25,279
all i have to cover in this lesson on

28017
19:41:23,119 --> 19:41:28,319
the services that are available for the

28018
19:41:25,279 --> 19:41:30,319
big data ecosystem in google cloud so

28019
19:41:28,320 --> 19:41:32,200
you can now mark this lesson as complete

28020
19:41:30,320 --> 19:41:36,080
and let's move on to the next one

28021
19:41:32,199 --> 19:41:37,512
[Music]

28022
19:41:36,080 --> 19:41:40,240
welcome back

28023
19:41:37,512 --> 19:41:43,040
this lesson is going to be based on the

28024
19:41:40,240 --> 19:41:45,680
foundation of machine learning i'm going

28025
19:41:43,039 --> 19:41:48,000
to go over what machine learning is what

28026
19:41:45,679 --> 19:41:50,551
it can do for us the machine learning

28027
19:41:48,000 --> 19:41:52,872
ecosystem on google cloud

28028
19:41:50,551 --> 19:41:55,831
and hopefully answer any questions along

28029
19:41:52,872 --> 19:41:58,400
the way this lesson will be a high level

28030
19:41:55,831 --> 19:42:00,871
overview of the services available on

28031
19:41:58,399 --> 19:42:03,599
google cloud yet these services that are

28032
19:42:00,872 --> 19:42:06,320
available are a need to know as they

28033
19:42:03,600 --> 19:42:09,192
come up in the exam and hopefully will

28034
19:42:06,320 --> 19:42:11,760
give you some really cool ideas on the

28035
19:42:09,191 --> 19:42:15,512
possibilities of building something

28036
19:42:11,759 --> 19:42:17,191
truly fantastic on google cloud so what

28037
19:42:15,512 --> 19:42:20,240
is machine learning

28038
19:42:17,191 --> 19:42:23,191
well machine learning is functionality

28039
19:42:20,240 --> 19:42:26,240
that helps enable software to perform

28040
19:42:23,191 --> 19:42:28,720
tasks without any explicit programming

28041
19:42:26,240 --> 19:42:31,919
or rules traditionally considered a

28042
19:42:28,720 --> 19:42:34,080
subcategory of artificial intelligence

28043
19:42:31,919 --> 19:42:36,872
machine learning involves statistical

28044
19:42:34,080 --> 19:42:39,279
techniques such as deep learning also

28045
19:42:36,872 --> 19:42:42,080
known as neural networks that are

28046
19:42:39,279 --> 19:42:44,872
inspired by theories about how the human

28047
19:42:42,080 --> 19:42:47,279
brain processes information it is

28048
19:42:44,872 --> 19:42:50,720
trained to recognize patterns in

28049
19:42:47,279 --> 19:42:53,440
collected data using algorithmic models

28050
19:42:50,720 --> 19:42:56,960
and this collected data includes video

28051
19:42:53,440 --> 19:42:59,119
images speech or text and because

28052
19:42:56,960 --> 19:43:01,440
machine learning is very expensive to

28053
19:42:59,119 --> 19:43:03,279
run on-premises

28054
19:43:01,440 --> 19:43:06,080
is an efficient place

28055
19:43:03,279 --> 19:43:08,800
for machine learning due to the use of

28056
19:43:06,080 --> 19:43:11,680
massive computation at scale

28057
19:43:08,800 --> 19:43:14,400
and as explained before machine learning

28058
19:43:11,679 --> 19:43:16,551
is always better with big data so now i

28059
19:43:14,399 --> 19:43:18,479
wanted to touch on what can machine

28060
19:43:16,551 --> 19:43:21,440
learning do for us

28061
19:43:18,479 --> 19:43:24,639
well it can categorize images such as

28062
19:43:21,440 --> 19:43:26,551
photos faces or satellite imagery

28063
19:43:24,639 --> 19:43:28,800
it can look for keywords in text

28064
19:43:26,551 --> 19:43:31,191
documents or emails

28065
19:43:28,800 --> 19:43:33,192
it can flag potentially fraudulent

28066
19:43:31,191 --> 19:43:35,831
transactions when it comes to credit

28067
19:43:33,191 --> 19:43:38,319
cards or debit cards it can enable

28068
19:43:35,831 --> 19:43:41,191
software to respond accurately to voice

28069
19:43:38,320 --> 19:43:44,160
commands it can also translate languages

28070
19:43:41,191 --> 19:43:46,159
in text or audio and these are just some

28071
19:43:44,160 --> 19:43:48,720
of the common functions that machine

28072
19:43:46,160 --> 19:43:50,720
learning can do for us so getting into

28073
19:43:48,720 --> 19:43:53,040
google's machine learning platform

28074
19:43:50,720 --> 19:43:56,240
itself machine learning has been a

28075
19:43:53,039 --> 19:43:59,439
cornerstone of google's internal systems

28076
19:43:56,240 --> 19:44:02,639
for years primarily because their need

28077
19:43:59,440 --> 19:44:04,240
to automate data-driven systems on a

28078
19:44:02,639 --> 19:44:06,479
massive scale

28079
19:44:04,240 --> 19:44:09,360
and doing this has provided unique

28080
19:44:06,479 --> 19:44:12,159
insight into the right techniques

28081
19:44:09,360 --> 19:44:14,872
infrastructure and frameworks that help

28082
19:44:12,160 --> 19:44:16,639
their customers get optimal value out of

28083
19:44:14,872 --> 19:44:19,192
machine learning the originally

28084
19:44:16,639 --> 19:44:20,720
developed open source framework for use

28085
19:44:19,191 --> 19:44:22,399
inside of google

28086
19:44:20,720 --> 19:44:24,720
called tensorflow

28087
19:44:22,399 --> 19:44:27,279
is now the standard in the data science

28088
19:44:24,720 --> 19:44:30,240
community in addition to heavily

28089
19:44:27,279 --> 19:44:31,759
contributing to the academic and open

28090
19:44:30,240 --> 19:44:34,320
source communities

28091
19:44:31,759 --> 19:44:36,720
google's machine learning researchers

28092
19:44:34,320 --> 19:44:40,640
helped bring that functionality into

28093
19:44:36,720 --> 19:44:43,440
google products such as g suite search

28094
19:44:40,639 --> 19:44:46,000
and photos in addition to google's

28095
19:44:43,440 --> 19:44:48,240
internal operations when it comes to

28096
19:44:46,000 --> 19:44:50,399
data center automation

28097
19:44:48,240 --> 19:44:52,400
now here is an overview of all the

28098
19:44:50,399 --> 19:44:54,551
machine learning services that we will

28099
19:44:52,399 --> 19:44:55,360
be covering and that you will need to

28100
19:44:54,551 --> 19:44:58,239
know

28101
19:44:55,360 --> 19:45:00,960
only at a high level for the exam and

28102
19:44:58,240 --> 19:45:02,080
we'll start off with the site api

28103
19:45:00,960 --> 19:45:04,240
services

28104
19:45:02,080 --> 19:45:06,960
starting with the vision api

28105
19:45:04,240 --> 19:45:09,919
the vision api offers powerful

28106
19:45:06,960 --> 19:45:12,160
pre-trained machine learning models

28107
19:45:09,919 --> 19:45:13,279
that allow you to assign labels to

28108
19:45:12,160 --> 19:45:16,000
images

28109
19:45:13,279 --> 19:45:18,240
and quickly classify them into millions

28110
19:45:16,000 --> 19:45:19,600
of pre-defined categories

28111
19:45:18,240 --> 19:45:23,120
vision api

28112
19:45:19,600 --> 19:45:25,600
can read printed and handwritten text it

28113
19:45:23,119 --> 19:45:28,871
can detect objects and faces

28114
19:45:25,600 --> 19:45:30,800
and build metadata into an image catalog

28115
19:45:28,872 --> 19:45:32,551
of your choice now when it comes to

28116
19:45:30,800 --> 19:45:35,120
video intelligence

28117
19:45:32,551 --> 19:45:38,551
it has pre-trained machine learning

28118
19:45:35,119 --> 19:45:41,599
models that automatically recognizes

28119
19:45:38,551 --> 19:45:45,119
more than 20 000 objects

28120
19:45:41,600 --> 19:45:47,600
places and actions in stored and

28121
19:45:45,119 --> 19:45:50,479
streaming video you can gain insights

28122
19:45:47,600 --> 19:45:54,080
from video in near real time using the

28123
19:45:50,479 --> 19:45:56,159
video intelligence streaming video apis

28124
19:45:54,080 --> 19:45:58,639
and trigger events based on objects

28125
19:45:56,160 --> 19:46:00,872
detected you can easily search a video

28126
19:45:58,639 --> 19:46:04,240
catalog the same way you search text

28127
19:46:00,872 --> 19:46:07,360
documents and extract metadata that can

28128
19:46:04,240 --> 19:46:09,120
be used to index organize and search

28129
19:46:07,360 --> 19:46:12,240
video content

28130
19:46:09,119 --> 19:46:14,639
now moving on to the language apis

28131
19:46:12,240 --> 19:46:17,440
we start off with the natural language

28132
19:46:14,639 --> 19:46:20,399
api and this uses machine learning to

28133
19:46:17,440 --> 19:46:23,191
reveal the structure and meaning of text

28134
19:46:20,399 --> 19:46:25,191
you can extract information about people

28135
19:46:23,191 --> 19:46:27,679
places and events

28136
19:46:25,191 --> 19:46:30,639
and better understand social media

28137
19:46:27,679 --> 19:46:33,599
sentiment and customer conversations

28138
19:46:30,639 --> 19:46:36,639
natural language enables you to analyze

28139
19:46:33,600 --> 19:46:39,279
text and also integrate it with your

28140
19:46:36,639 --> 19:46:42,319
document storage on cloud storage now

28141
19:46:39,279 --> 19:46:44,800
with the translation api it enables you

28142
19:46:42,320 --> 19:46:48,480
to dynamically translate between

28143
19:46:44,800 --> 19:46:50,479
languages using google's pre-trained or

28144
19:46:48,479 --> 19:46:52,159
custom machine learning models

28145
19:46:50,479 --> 19:46:55,440
translation api

28146
19:46:52,160 --> 19:46:59,680
instantly translates text into more than

28147
19:46:55,440 --> 19:47:03,040
100 languages for your website and apps

28148
19:46:59,679 --> 19:47:04,871
with optional customization features

28149
19:47:03,039 --> 19:47:08,479
following another grouping of machine

28150
19:47:04,872 --> 19:47:11,832
learning is the conversation apis first

28151
19:47:08,479 --> 19:47:14,872
up we have dialog flow dialog flow is a

28152
19:47:11,831 --> 19:47:17,119
natural language understanding platform

28153
19:47:14,872 --> 19:47:19,360
that makes it easy to design and

28154
19:47:17,119 --> 19:47:21,919
integrate a conversational user

28155
19:47:19,360 --> 19:47:24,639
interface into your application or

28156
19:47:21,919 --> 19:47:27,599
device it could be a mobile app a web

28157
19:47:24,639 --> 19:47:30,800
application a bot or an interactive

28158
19:47:27,600 --> 19:47:33,760
voice response system using dialogflow

28159
19:47:30,800 --> 19:47:36,160
you can provide new and engaging ways

28160
19:47:33,759 --> 19:47:38,720
for users to interact with your product

28161
19:47:36,160 --> 19:47:40,639
dialogflow can analyze multiple types of

28162
19:47:38,720 --> 19:47:43,440
input from your customers

28163
19:47:40,639 --> 19:47:45,831
including text or audio inputs

28164
19:47:43,440 --> 19:47:48,479
like from a phone or voice recording and

28165
19:47:45,831 --> 19:47:51,511
it can also respond to your customers in

28166
19:47:48,479 --> 19:47:53,831
a couple of ways either through text or

28167
19:47:51,512 --> 19:47:57,680
with synthetic speech now with the

28168
19:47:53,831 --> 19:48:00,399
speech-to-text api this api accurately

28169
19:47:57,679 --> 19:48:02,871
converts speech into text it can

28170
19:48:00,399 --> 19:48:05,439
transcribe content with accurate

28171
19:48:02,872 --> 19:48:08,000
captions and deliver better user

28172
19:48:05,440 --> 19:48:10,479
experience in products through voice

28173
19:48:08,000 --> 19:48:14,399
commands going the other way from text

28174
19:48:10,479 --> 19:48:17,512
to speech this api enables developers to

28175
19:48:14,399 --> 19:48:19,831
synthesize natural sounding speech with

28176
19:48:17,512 --> 19:48:22,240
over a hundred different voices

28177
19:48:19,831 --> 19:48:24,720
available in multiple languages and

28178
19:48:22,240 --> 19:48:26,639
variants text to speech

28179
19:48:24,720 --> 19:48:29,512
allows you to create lifelike

28180
19:48:26,639 --> 19:48:32,800
interactions with their users across

28181
19:48:29,512 --> 19:48:35,279
many applications and devices and to

28182
19:48:32,800 --> 19:48:39,120
finish off our machine learning segment

28183
19:48:35,279 --> 19:48:41,600
i wanted to touch on auto ml automl is a

28184
19:48:39,119 --> 19:48:44,551
suite of machine learning products that

28185
19:48:41,600 --> 19:48:46,639
enables developers with very limited

28186
19:48:44,551 --> 19:48:50,000
machine learning expertise

28187
19:48:46,639 --> 19:48:52,479
to train high quality models specific to

28188
19:48:50,000 --> 19:48:55,279
their business needs in other words

28189
19:48:52,479 --> 19:48:58,000
using automl allows making deep learning

28190
19:48:55,279 --> 19:49:00,160
easier to use and relies on google's

28191
19:48:58,000 --> 19:49:03,039
state-of-the-art transfer learning and

28192
19:49:00,160 --> 19:49:04,960
neural architecture search technology so

28193
19:49:03,039 --> 19:49:07,759
you can now generate high quality

28194
19:49:04,960 --> 19:49:10,720
training data and be able to deploy new

28195
19:49:07,759 --> 19:49:14,080
models based on your data in minutes

28196
19:49:10,720 --> 19:49:16,960
automl is available for vision

28197
19:49:14,080 --> 19:49:19,600
video intelligence translation

28198
19:49:16,960 --> 19:49:23,600
natural language tables

28199
19:49:19,600 --> 19:49:26,240
inference and recommendation apis

28200
19:49:23,600 --> 19:49:28,552
now i know this has been a lot to cover

28201
19:49:26,240 --> 19:49:31,760
for this machine learning lesson and the

28202
19:49:28,551 --> 19:49:34,639
ecosystem around it but is a necessity

28203
19:49:31,759 --> 19:49:37,679
for the exam and will also help you

28204
19:49:34,639 --> 19:49:40,479
build really cool products when it comes

28205
19:49:37,679 --> 19:49:42,719
to your role as an engineer again all

28206
19:49:40,479 --> 19:49:45,440
the services that i have discussed in

28207
19:49:42,720 --> 19:49:48,551
this lesson should be known at a high

28208
19:49:45,440 --> 19:49:50,800
level only although my recommendation

28209
19:49:48,551 --> 19:49:53,279
would be to dive deeper into these

28210
19:49:50,800 --> 19:49:55,832
services by checking out the links in

28211
19:49:53,279 --> 19:49:58,000
the lesson text below and having some

28212
19:49:55,831 --> 19:50:01,039
fun with these products getting to know

28213
19:49:58,000 --> 19:50:03,360
these services will really help up your

28214
19:50:01,039 --> 19:50:05,599
game when it comes to getting to know

28215
19:50:03,360 --> 19:50:08,320
these services a little bit more in

28216
19:50:05,600 --> 19:50:10,800
depth and will really help you gain more

28217
19:50:08,320 --> 19:50:13,920
momentum when it comes to building any

28218
19:50:10,800 --> 19:50:16,160
applications or applying them to any

28219
19:50:13,919 --> 19:50:18,800
currently running applications i

28220
19:50:16,160 --> 19:50:21,279
personally found it extremely valuable

28221
19:50:18,800 --> 19:50:23,832
and really cemented my knowledge when it

28222
19:50:21,279 --> 19:50:26,240
came to machine learning i also had a

28223
19:50:23,831 --> 19:50:28,871
ton of fun doing it and so that's all i

28224
19:50:26,240 --> 19:50:30,639
have for this lesson on machine learning

28225
19:50:28,872 --> 19:50:32,960
so you can now mark this lesson as

28226
19:50:30,639 --> 19:50:33,830
complete and let's move on to the next

28227
19:50:32,960 --> 19:50:37,760
one

28228
19:50:33,830 --> 19:50:40,479
[Music]

28229
19:50:37,759 --> 19:50:43,119
welcome back and in this lesson we'll be

28230
19:50:40,479 --> 19:50:45,831
diving into a suite of tools used on the

28231
19:50:43,119 --> 19:50:48,399
google cloud platform that allow you to

28232
19:50:45,831 --> 19:50:51,119
operate monitor and troubleshoot your

28233
19:50:48,399 --> 19:50:53,599
environment known as operation suite and

28234
19:50:51,119 --> 19:50:55,919
previously known as stackdriver this

28235
19:50:53,600 --> 19:50:58,160
lesson will be mostly conceptual and

28236
19:50:55,919 --> 19:51:01,360
gear more towards what the suite of

28237
19:50:58,160 --> 19:51:04,000
tools do as it plays a big part not only

28238
19:51:01,360 --> 19:51:06,320
in the exam but for the needs of gaining

28239
19:51:04,000 --> 19:51:08,479
insight from all the resources that

28240
19:51:06,320 --> 19:51:11,040
exist in your environment now there are

28241
19:51:08,479 --> 19:51:13,512
a few tools to cover here so with that

28242
19:51:11,039 --> 19:51:15,831
being said let's dive in

28243
19:51:13,512 --> 19:51:18,800
now the operation suite is a suite of

28244
19:51:15,831 --> 19:51:20,959
tools for logging monitoring and

28245
19:51:18,800 --> 19:51:23,760
application diagnostics

28246
19:51:20,960 --> 19:51:26,960
operation suite ingests this data and

28247
19:51:23,759 --> 19:51:30,479
generates insights using dashboards

28248
19:51:26,960 --> 19:51:34,480
charts and alerts this suite of tools

28249
19:51:30,479 --> 19:51:38,639
are available for both gcp and aws you

28250
19:51:34,479 --> 19:51:41,039
can connect to aws using an aws role and

28251
19:51:38,639 --> 19:51:44,319
a gcp service account you can also

28252
19:51:41,039 --> 19:51:48,159
monitor vms with specific agents that

28253
19:51:44,320 --> 19:51:52,320
again both run on gcp for compute engine

28254
19:51:48,160 --> 19:51:54,872
and aws ec2 operation suite also allows

28255
19:51:52,320 --> 19:51:57,192
the added functionality of monitoring

28256
19:51:54,872 --> 19:52:00,720
any applications that's running on those

28257
19:51:57,191 --> 19:52:03,831
vms operation suite is also available

28258
19:52:00,720 --> 19:52:06,399
for any on-premises infrastructure or

28259
19:52:03,831 --> 19:52:09,119
hybrid cloud environments operation

28260
19:52:06,399 --> 19:52:12,239
suite has a native integration within

28261
19:52:09,119 --> 19:52:14,639
gcp out of the box so there's no real

28262
19:52:12,240 --> 19:52:17,512
configurations that you need to do and

28263
19:52:14,639 --> 19:52:20,319
integrates with almost all the resources

28264
19:52:17,512 --> 19:52:24,240
on google cloud such as the previously

28265
19:52:20,320 --> 19:52:26,800
mentioned compute engine gke app engine

28266
19:52:24,240 --> 19:52:29,440
and bigquery and you can find and fix

28267
19:52:26,800 --> 19:52:32,400
issues faster due to the many different

28268
19:52:29,440 --> 19:52:35,360
tools an operation suite can reduce

28269
19:52:32,399 --> 19:52:38,159
downtime with real-time alerting you can

28270
19:52:35,360 --> 19:52:40,872
also find support from a growing partner

28271
19:52:38,160 --> 19:52:44,720
ecosystem of technology integration

28272
19:52:40,872 --> 19:52:47,440
tools to expand your operations security

28273
19:52:44,720 --> 19:52:50,080
and compliance capabilities now the

28274
19:52:47,440 --> 19:52:53,040
operation suite comprises of six

28275
19:52:50,080 --> 19:52:55,680
available products that covers the gamut

28276
19:52:53,039 --> 19:52:58,239
of all the available tools you will need

28277
19:52:55,679 --> 19:53:00,871
that allows you to monitor troubleshoot

28278
19:52:58,240 --> 19:53:03,120
and improve application performance on

28279
19:53:00,872 --> 19:53:05,360
your google cloud environment and i will

28280
19:53:03,119 --> 19:53:08,239
be going over these products in a bit of

28281
19:53:05,360 --> 19:53:10,720
detail starting with monitoring now

28282
19:53:08,240 --> 19:53:13,832
cloud monitoring collects measurements

28283
19:53:10,720 --> 19:53:16,551
or metrics to help you understand how

28284
19:53:13,831 --> 19:53:18,479
your applications and system services

28285
19:53:16,551 --> 19:53:20,872
are performing giving you the

28286
19:53:18,479 --> 19:53:23,759
information about the source of the

28287
19:53:20,872 --> 19:53:26,160
measurements time stamped values and

28288
19:53:23,759 --> 19:53:28,959
information of those values that can be

28289
19:53:26,160 --> 19:53:31,512
broken down through time series data

28290
19:53:28,960 --> 19:53:35,040
cloud monitoring can then take the data

28291
19:53:31,512 --> 19:53:38,080
provided and use pre-defined dashboards

28292
19:53:35,039 --> 19:53:40,479
that require no setup or configuration

28293
19:53:38,080 --> 19:53:43,040
effort cloud monitoring also gives you

28294
19:53:40,479 --> 19:53:45,831
the flexibility to create custom

28295
19:53:43,039 --> 19:53:48,399
dashboards that display the content you

28296
19:53:45,831 --> 19:53:50,159
select you can use the widgets available

28297
19:53:48,399 --> 19:53:52,551
or you can install a dashboard

28298
19:53:50,160 --> 19:53:54,720
configuration that is stored in github

28299
19:53:52,551 --> 19:53:57,279
now in order for you to start using

28300
19:53:54,720 --> 19:53:58,479
cloud monitoring you need to configure a

28301
19:53:57,279 --> 19:54:01,039
workspace

28302
19:53:58,479 --> 19:54:03,759
now workspaces organize monitoring

28303
19:54:01,039 --> 19:54:06,159
information in cloud monitoring this is

28304
19:54:03,759 --> 19:54:08,159
a single pane of glass where you can

28305
19:54:06,160 --> 19:54:10,320
view everything that you're monitoring

28306
19:54:08,160 --> 19:54:12,872
in your environment it is also best

28307
19:54:10,320 --> 19:54:15,600
practice to use a multi-project

28308
19:54:12,872 --> 19:54:18,479
workspace so you can monitor multiple

28309
19:54:15,600 --> 19:54:21,040
projects from a single pane of glass now

28310
19:54:18,479 --> 19:54:23,679
as i mentioned earlier cloud monitoring

28311
19:54:21,039 --> 19:54:26,639
has an agent and this gathers system and

28312
19:54:23,679 --> 19:54:28,719
application metrics from your vm and

28313
19:54:26,639 --> 19:54:31,119
sends them to cloud monitoring you can

28314
19:54:28,720 --> 19:54:33,680
monitor your vms without the agent but

28315
19:54:31,119 --> 19:54:34,959
you will only get specific metrics such

28316
19:54:33,679 --> 19:54:38,000
as cpu

28317
19:54:34,960 --> 19:54:40,552
disk traffic network traffic and uptime

28318
19:54:38,000 --> 19:54:43,360
using the agent is optional but is

28319
19:54:40,551 --> 19:54:45,279
recommended by google and with the agent

28320
19:54:43,360 --> 19:54:47,759
it allows you to monitor many

28321
19:54:45,279 --> 19:54:51,039
third-party applications and just as a

28322
19:54:47,759 --> 19:54:53,511
note cloud logging has an agent as well

28323
19:54:51,039 --> 19:54:57,279
and works well together with cloud

28324
19:54:53,512 --> 19:55:00,320
monitoring to create visualize and alert

28325
19:54:57,279 --> 19:55:02,639
on metrics based on log data but more on

28326
19:55:00,320 --> 19:55:05,440
that a little bit later cloud monitoring

28327
19:55:02,639 --> 19:55:08,479
is also available for gke and this will

28328
19:55:05,440 --> 19:55:10,551
allow you to monitor your clusters as it

28329
19:55:08,479 --> 19:55:12,959
manages the monitoring and logging

28330
19:55:10,551 --> 19:55:15,831
together and this will monitor clusters

28331
19:55:12,960 --> 19:55:18,872
infrastructure its workloads and

28332
19:55:15,831 --> 19:55:21,759
services as well as your nodes pods and

28333
19:55:18,872 --> 19:55:24,080
containers so when it comes to alerting

28334
19:55:21,759 --> 19:55:26,551
this is defined by policies and

28335
19:55:24,080 --> 19:55:29,119
conditions so an a learning policy

28336
19:55:26,551 --> 19:55:31,360
defines the conditions under which a

28337
19:55:29,119 --> 19:55:33,831
service is considered unhealthy when

28338
19:55:31,360 --> 19:55:36,399
these conditions are met the policy is

28339
19:55:33,831 --> 19:55:38,871
triggered and it opens a new incident

28340
19:55:36,399 --> 19:55:41,360
and sends off a notification a policy

28341
19:55:38,872 --> 19:55:43,832
belongs to an individual workspace and

28342
19:55:41,360 --> 19:55:46,639
each workspace can contain up to 500

28343
19:55:43,831 --> 19:55:49,279
policies now conditions determine when

28344
19:55:46,639 --> 19:55:51,119
an alerting policy is triggered so all

28345
19:55:49,279 --> 19:55:53,440
conditions watch for three separate

28346
19:55:51,119 --> 19:55:55,831
things the first one is a metric the

28347
19:55:53,440 --> 19:55:58,551
second one is a behavior in some way and

28348
19:55:55,831 --> 19:56:01,119
the third one is for a period of time

28349
19:55:58,551 --> 19:56:03,191
describing a condition includes a metric

28350
19:56:01,119 --> 19:56:05,279
to be measured and a test for

28351
19:56:03,191 --> 19:56:07,440
determining when the metric reaches a

28352
19:56:05,279 --> 19:56:09,512
state that you want to know about so

28353
19:56:07,440 --> 19:56:12,240
when an alert is triggered you could be

28354
19:56:09,512 --> 19:56:13,760
notified using notification channels

28355
19:56:12,240 --> 19:56:14,872
such as email

28356
19:56:13,759 --> 19:56:17,039
sms

28357
19:56:14,872 --> 19:56:19,680
as well as third party tools such as

28358
19:56:17,039 --> 19:56:22,799
pagerduty and slack now moving on to

28359
19:56:19,679 --> 19:56:25,759
cloud logging cloud logging is a central

28360
19:56:22,800 --> 19:56:29,192
repository for log data from multiple

28361
19:56:25,759 --> 19:56:32,080
sources and as described earlier logging

28362
19:56:29,191 --> 19:56:35,679
can come not just from google but with

28363
19:56:32,080 --> 19:56:37,919
aws as well as on-premises environments

28364
19:56:35,679 --> 19:56:41,119
cloud logging handles real-time log

28365
19:56:37,919 --> 19:56:43,599
management and analysis and has tight

28366
19:56:41,119 --> 19:56:47,119
integration with cloud monitoring it

28367
19:56:43,600 --> 19:56:49,600
collects platform system and application

28368
19:56:47,119 --> 19:56:52,720
logs and you also have the option of

28369
19:56:49,600 --> 19:56:55,832
exporting logs to other sources such as

28370
19:56:52,720 --> 19:56:58,639
long-term storage like cloud storage or

28371
19:56:55,831 --> 19:57:01,679
for analysis like bigquery you can also

28372
19:56:58,639 --> 19:57:03,600
export to third-party tools as well now

28373
19:57:01,679 --> 19:57:06,399
diving into the concepts of cloud

28374
19:57:03,600 --> 19:57:10,240
logging these are associated primarily

28375
19:57:06,399 --> 19:57:13,039
with gcp projects so logs viewer only

28376
19:57:10,240 --> 19:57:15,440
shows logs from one specific project now

28377
19:57:13,039 --> 19:57:18,079
when it comes to log entries log entry

28378
19:57:15,440 --> 19:57:20,800
records a status or an event a project

28379
19:57:18,080 --> 19:57:23,600
receives log entries when services being

28380
19:57:20,800 --> 19:57:25,040
used produce log entries and to get down

28381
19:57:23,600 --> 19:57:27,600
to the basics

28382
19:57:25,039 --> 19:57:30,551
logs are a named collection of log

28383
19:57:27,600 --> 19:57:33,120
entries within a google cloud resource

28384
19:57:30,551 --> 19:57:35,831
and just as a note each log entry

28385
19:57:33,119 --> 19:57:38,871
includes the name of its log logs only

28386
19:57:35,831 --> 19:57:41,599
exist if they have log entries and the

28387
19:57:38,872 --> 19:57:44,080
retention period is the length of time

28388
19:57:41,600 --> 19:57:46,080
for which your logs are kept so digging

28389
19:57:44,080 --> 19:57:48,320
into the types of logs that cloud

28390
19:57:46,080 --> 19:57:50,479
logging handles there are three

28391
19:57:48,320 --> 19:57:54,080
different types of logs there are audit

28392
19:57:50,479 --> 19:57:56,639
logs transparency logs and agent logs

28393
19:57:54,080 --> 19:58:00,240
now with audit logs these are logs that

28394
19:57:56,639 --> 19:58:03,600
define who did what where and when they

28395
19:58:00,240 --> 19:58:06,240
also show admin activity and data access

28396
19:58:03,600 --> 19:58:08,800
as well as system events continuing on

28397
19:58:06,240 --> 19:58:11,512
to access transparency logs these are

28398
19:58:08,800 --> 19:58:14,320
logs for actions taken by google so when

28399
19:58:11,512 --> 19:58:16,639
google staff is accessing your data due

28400
19:58:14,320 --> 19:58:19,192
to a support ticket the actions that are

28401
19:58:16,639 --> 19:58:21,600
taken by the google staff are logged

28402
19:58:19,191 --> 19:58:24,159
within cloud logging now when it comes

28403
19:58:21,600 --> 19:58:26,720
to agent logs these are the logs that

28404
19:58:24,160 --> 19:58:27,832
come from agents that are installed on

28405
19:58:26,720 --> 19:58:30,000
vms

28406
19:58:27,831 --> 19:58:32,799
the logging agent sends system and

28407
19:58:30,000 --> 19:58:34,800
third-party logs on the vm instance to

28408
19:58:32,800 --> 19:58:37,440
cloud logging moving on to error

28409
19:58:34,800 --> 19:58:39,919
reporting this looks at real-time error

28410
19:58:37,440 --> 19:58:42,639
monitoring and alerting it counts

28411
19:58:39,919 --> 19:58:45,191
analyzes and aggregates the errors that

28412
19:58:42,639 --> 19:58:47,831
happen in your gcp environment and then

28413
19:58:45,191 --> 19:58:50,551
alerts you when a new application error

28414
19:58:47,831 --> 19:58:53,360
occurs details of the error can be sent

28415
19:58:50,551 --> 19:58:56,000
through the api and notifications are

28416
19:58:53,360 --> 19:58:58,479
still in beta error reporting is

28417
19:58:56,000 --> 19:59:01,039
integrated into cloud functions and

28418
19:58:58,479 --> 19:59:03,919
google app engine standard which is

28419
19:59:01,039 --> 19:59:06,639
enabled automatically error reporting is

28420
19:59:03,919 --> 19:59:09,679
in beta for compute engine kubernetes

28421
19:59:06,639 --> 19:59:13,191
engine and app engine flexible as well

28422
19:59:09,679 --> 19:59:16,239
as aws ec2 air reporting can be

28423
19:59:13,191 --> 19:59:19,119
installed in a variety of languages such

28424
19:59:16,240 --> 19:59:23,760
as go java.net

28425
19:59:19,119 --> 19:59:26,871
node.js python php and ruby now moving

28426
19:59:23,759 --> 19:59:29,759
into debugger this tool debugs a running

28427
19:59:26,872 --> 19:59:33,360
application without slowing it down it

28428
19:59:29,759 --> 19:59:36,319
captures and inspects the call stack and

28429
19:59:33,360 --> 19:59:38,551
local variables in your application this

28430
19:59:36,320 --> 19:59:41,120
tool debugs a running application

28431
19:59:38,551 --> 19:59:43,360
without slowing it down it captures and

28432
19:59:41,119 --> 19:59:45,831
inspects the call stack and local

28433
19:59:43,360 --> 19:59:48,872
variables in your application this is

28434
19:59:45,831 --> 19:59:50,551
also known as taking a snapshot once the

28435
19:59:48,872 --> 19:59:53,680
snapshot has been taken

28436
19:59:50,551 --> 19:59:56,872
a log point can be injected to allow you

28437
19:59:53,679 --> 19:59:58,959
to start debugging debugger can be used

28438
19:59:56,872 --> 20:00:01,832
with or without access to your

28439
19:59:58,960 --> 20:00:04,400
application source code and if your repo

28440
20:00:01,831 --> 20:00:07,919
is not local it can be hooked into a

28441
20:00:04,399 --> 20:00:10,639
remote git repo such as github git lab

28442
20:00:07,919 --> 20:00:13,191
or bitbucket debugger is integrated with

28443
20:00:10,639 --> 20:00:16,160
google app engine automatically and can

28444
20:00:13,191 --> 20:00:17,440
be installed on google compute engine

28445
20:00:16,160 --> 20:00:19,512
gke

28446
20:00:17,440 --> 20:00:21,279
and google app engine debugger is

28447
20:00:19,512 --> 20:00:23,919
integrated with google app engine

28448
20:00:21,279 --> 20:00:26,639
automatically and can be installed on

28449
20:00:23,919 --> 20:00:28,800
gke debugger is integrated with google

28450
20:00:26,639 --> 20:00:31,039
app engine automatically and can be

28451
20:00:28,800 --> 20:00:33,360
installed on google compute engine

28452
20:00:31,039 --> 20:00:36,479
google kubernetes engine google app

28453
20:00:33,360 --> 20:00:38,551
engine and cloud run and just as a note

28454
20:00:36,479 --> 20:00:41,039
installation on these products is all

28455
20:00:38,551 --> 20:00:44,159
dependent on the library and again

28456
20:00:41,039 --> 20:00:47,511
debugger can be installed like trace on

28457
20:00:44,160 --> 20:00:49,760
non-gcp environments and is available to

28458
20:00:47,512 --> 20:00:53,119
be installed using a variety of

28459
20:00:49,759 --> 20:00:55,511
different languages next up is trace and

28460
20:00:53,119 --> 20:00:57,759
trace helps you understand how long it

28461
20:00:55,512 --> 20:01:00,080
takes your application to handle

28462
20:00:57,759 --> 20:01:02,799
incoming requests from users and

28463
20:01:00,080 --> 20:01:06,551
applications trace collects latency data

28464
20:01:02,800 --> 20:01:09,512
from app engine https load balancers and

28465
20:01:06,551 --> 20:01:12,000
applications using the trace api this is

28466
20:01:09,512 --> 20:01:14,872
also integrated with google app engine

28467
20:01:12,000 --> 20:01:16,872
standard and is applied automatically so

28468
20:01:14,872 --> 20:01:19,512
you would use trace for something like a

28469
20:01:16,872 --> 20:01:21,832
website that is taking forever to load

28470
20:01:19,512 --> 20:01:24,160
to troubleshoot that specific issue

28471
20:01:21,831 --> 20:01:26,639
trace can be installed on google compute

28472
20:01:24,160 --> 20:01:29,512
engine google kubernetes engine and

28473
20:01:26,639 --> 20:01:32,551
google app engine as well it can also be

28474
20:01:29,512 --> 20:01:34,872
installed on non-gcp environments and it

28475
20:01:32,551 --> 20:01:37,360
can be installed using a variety of

28476
20:01:34,872 --> 20:01:39,512
different languages as shown here and

28477
20:01:37,360 --> 20:01:42,720
coming up on the last tool of the bunch

28478
20:01:39,512 --> 20:01:45,832
is profiler now profiler gathers cpu

28479
20:01:42,720 --> 20:01:48,800
usage and memory allocation information

28480
20:01:45,831 --> 20:01:50,639
from your applications continuously and

28481
20:01:48,800 --> 20:01:53,192
this helps you discover patterns of

28482
20:01:50,639 --> 20:01:56,319
resource consumption to help you better

28483
20:01:53,191 --> 20:01:58,639
troubleshoot profiler is low profile and

28484
20:01:56,320 --> 20:02:02,000
therefore won't take up a lot of memory

28485
20:01:58,639 --> 20:02:04,639
or cpu on your system as well in order

28486
20:02:02,000 --> 20:02:07,279
to use profiler an agent needs to be

28487
20:02:04,639 --> 20:02:10,551
installed profiler can be installed on

28488
20:02:07,279 --> 20:02:13,191
compute engine kubernetes engine and app

28489
20:02:10,551 --> 20:02:16,399
engine as well and of course it can be

28490
20:02:13,191 --> 20:02:18,871
installed on non-gcp environments and

28491
20:02:16,399 --> 20:02:21,360
profiler can be installed using the

28492
20:02:18,872 --> 20:02:25,120
following languages just go

28493
20:02:21,360 --> 20:02:27,759
java node.js and python and so just as a

28494
20:02:25,119 --> 20:02:29,831
note for the exam only a high level

28495
20:02:27,759 --> 20:02:32,479
overview of these tools are needed and

28496
20:02:29,831 --> 20:02:35,679
so this concludes this lesson on a high

28497
20:02:32,479 --> 20:02:38,239
level overview of operation suite so you

28498
20:02:35,679 --> 20:02:41,599
can now mark this lesson as complete and

28499
20:02:38,240 --> 20:02:41,600
let's move on to the next one

